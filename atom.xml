<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuKairui&#39;s Blog</title>
  
  <subtitle>整点薯条</subtitle>
  <link href="https://blog.liukairui.me/atom.xml" rel="self"/>
  
  <link href="https://blog.liukairui.me/"/>
  <updated>2023-05-22T16:00:03.000Z</updated>
  <id>https://blog.liukairui.me/</id>
  
  <author>
    <name>Liu Kairui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些前端认证技术</title>
    <link href="https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9B%E5%89%8D%E7%AB%AF%E8%AE%A4%E8%AF%81%E6%8A%80%E6%9C%AF/"/>
    <id>https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9B%E5%89%8D%E7%AB%AF%E8%AE%A4%E8%AF%81%E6%8A%80%E6%9C%AF/</id>
    <published>2023-05-22T16:00:03.000Z</published>
    <updated>2023-05-22T16:00:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web-authentication">Web Authentication</h2><blockquote><p>Web Authentication 仅在安全上下文 (HTTPS) 中可用</p><hr /><p>Web Authentication 一般用于辅助验证 (两步验证)单独使用的话用户数据会直接和认证设备绑定...设备丢了数据就寄了</p></blockquote><p>Web Authentication API 是一种新的验证模式, 其允许网站调用计算机的PIN, 生物特征 (如指纹或面部识别) 识别器或硬件令牌 (如USB密钥)来验证用户身份，而无需依赖传统的用户名和密码组合. 例如在用户可以通过Windows Hello 扫脸直接登陆网站</p><p>Web Authentication API 的主要目标是替代传统的用户名和密码登录方式,以解决密码泄露, 弱密码和重复密码使用等安全隐患.通过采用公钥加密和生物特征识别技术,Web身份验证API提供了更高的安全性和用户友好性. 可以在<span class="exturl" data-url="aHR0cHM6Ly90cnktd2ViYXV0aG4uYXBwc3BvdC5jb20v">这个网站<i class="fa fa-external-link-alt"></i></span>尝试使用 WebAuthentication API</p><p>基本流程</p><ul><li><p>注册</p><p><img src="./一些前端认证技术/WebAuthen.png" /></p><ol start="0" type="1"><li><p>客户端请求服务器用户希望注册凭据, 一般包括用户名 (非 WebAuthentication 标准)</p></li><li><p>服务器返回构建密钥所需信息, 包含</p><ol type="1"><li>一个 "挑战" (Challenge): 一般是一个大随机数</li><li>一个 <code>pubKeyCredParams</code>: 包含服务端希望的加密算法优先级(例如: <code>[EdDSA, SHA-256]</code> 就是希望使用 <code>EdDSA</code>如果不行就用 <code>SHA-256</code>)</li><li><code>authenticatorSelection</code>: 允许使用的认证器类型</li><li><code>attestation</code>: 是否需要来自认证器的证明</li></ol><p>这步仍然不是 Web Authentication 标准规定的</p></li><li><p>客户端基于传回的 <code>authenticatorSelection</code> 选择认证器.向认证器调用 <code>authenticatorMakeCredential</code>并传入服务器回传的信息</p></li><li><p>认证器先要求用户完成一次某种形式的认证 (PIN, 指纹, 面容)以确认用户正在操作并同意注册</p></li><li><p>认证器向浏览器推送一个公钥凭据对象,该公钥对象上包含了用于证明公钥与认证器私钥匹配的签名</p></li><li><p>客户端获取数据并构造 <code>PublicKeyCredential</code>, 其包含</p><ol type="1"><li><code>identifier</code>: 标识符</li><li><code>response</code>: 认证器客户端请求的回应<ul><li><code>clientData</code>: 凭据上下文, 包括挑战与发起请求的来源</li><li><code>attestationObject</code>: 证明信息(如果第一步服务端有要求)</li></ul></li></ol></li><li><p>Web 服务器做验证</p><ol type="1"><li>检查返回的 challange 与发出的 challange 是否匹配</li><li>检查发回数据与最初请求 challange 的源地址是否相同</li><li>检查服务器发回的证明是否足够</li></ol><p>并关联凭据到用户</p></li></ol></li><li><p>登录验证</p><p><img src="./一些前端认证技术/WebAuthen-log.png" /></p><ol start="0" type="1"><li>客户端发起登录请求, 并携带一些可能的识别字段(用户名啥的)</li><li>服务端确定公钥, 生成一个挑战并构造可选的<code>PublicKeyCredentialRequestOptions</code>, 其包括<ul><li><code>allowCredentials</code>: 若客户端传入了用户名,该字段返回该用户的凭据</li><li><code>userVerification</code>是否应该执行用户验证</li></ul></li><li>浏览器调用 <code>navigator.credentials.get()</code> 方法,将服务器挑战和其他数据 (如允许的凭据列表) 转换为一个<code>PublicKeyCredential</code> 请求参数对象</li><li>用户在其身份验证设备上验证自己的身份</li><li>设备响应, 浏览器接收到一个公钥凭据对象. 此对象包含一个签名,证明设备具有与凭据公钥配对的私钥, 并且用户已经验证了自己的身份</li><li>客户端获取认证器创建的数据并构造 <code>PublicKeyCredential</code>,包括:<ul><li><code>identifier</code>: 标识符</li><li><code>response</code>: 认证器客户端请求的回应<ul><li><code>clientData</code>: 凭据上下文, 包括挑战与发起请求的来源</li><li><code>authenticatorData</code>: 凭证, 签名, 签名计数器</li><li><code>signature</code>: 包含 <code>clientDataJSON</code> 与<code>authenticatorData</code> 对象</li></ul></li></ul></li><li>服务器验证该凭据对象</li></ol></li></ul><p>代码实现:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> rawId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// store cert id (get it from server actually)</span><span class="token comment">// registor</span><span class="token keyword">let</span> challenge <span class="token operator">=</span> window<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span><span class="token function">getRandomValues</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> Uint8Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">"UZSL85T9AFC"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token parameter">c</span><span class="token operator">=></span>c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// sample user id in Base64</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"kairuiliu@msn.com"</span><span class="token punctuation">,</span>    <span class="token literal-property property">displayName</span><span class="token operator">:</span> <span class="token string">"Kairui Liu"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> relyingParty <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Example Domain"</span><span class="token punctuation">,</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">"example.com"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> credentialCreationOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">challenge</span><span class="token operator">:</span> challenge<span class="token punctuation">,</span>    <span class="token literal-property property">rp</span><span class="token operator">:</span> relyingParty<span class="token punctuation">,</span>    <span class="token literal-property property">user</span><span class="token operator">:</span> user<span class="token punctuation">,</span>    <span class="token comment">// most device support -7 (ES256), but windows hello can only worked on -257 (RS256), you can aslo add -8 (EdDSA), but in most of cases -7 (and -257, if you want to use windows hello) is enough (https://github.com/w3c/webauthn/issues/1757)</span>    <span class="token literal-property property">pubKeyCredParams</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">alg</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"public-key"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">alg</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">257</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"public-key"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">,</span>    <span class="token literal-property property">attestation</span><span class="token operator">:</span> <span class="token string">"direct"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>navigator<span class="token punctuation">.</span>credentials<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">publicKey</span><span class="token operator">:</span> credentialCreationOptions<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">newCredentialInfo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>newCredentialInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    rawId <span class="token operator">=</span> newCredentialInfo<span class="token punctuation">.</span>rawId<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// verify</span><span class="token keyword">let</span> challenge <span class="token operator">=</span> window<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span><span class="token function">getRandomValues</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> allowCredentials <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"public-key"</span><span class="token punctuation">,</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> rawId<span class="token punctuation">,</span>    <span class="token comment">// transports: ["usb", "nfc", "ble"] // do not write this config if you want to use build-in verifier. actually, it should be provided by server</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> credentialRequestOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">challenge</span><span class="token operator">:</span> challenge<span class="token punctuation">,</span>    <span class="token literal-property property">allowCredentials</span><span class="token operator">:</span> allowCredentials<span class="token punctuation">,</span>    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>navigator<span class="token punctuation">.</span>credentials<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">publicKey</span><span class="token operator">:</span> credentialRequestOptions<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">assertion</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>assertion<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以参考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS93ZWJhdXRobmRlbW8=">google/webauthndemo<i class="fa fa-external-link-alt"></i></span></p><h2 id="oauth">OAuth</h2><p>WIP</p><h2 id="oauth2-pkce-proof-key-for-code-exchange">OAuth2 PKCE (Proof Keyfor Code Exchange)</h2><p>WIP</p><h2 id="jwt">JWT</h2><p>WIP</p><h2 id="openid-connect">OpenID Connect</h2><p>WIP</p><h2 id="saml-security-assertion-markup-language">SAML (SecurityAssertion Markup Language)</h2><p>WIP</p><h2 id="session-based-authentication">Session-based Authentication</h2><p>WIP</p><h2 id="http基本认证">HTTP基本认证</h2><p>WIP</p><h2 id="http摘要认证-digest-authentication">HTTP摘要认证 (DigestAuthentication)</h2><p>WIP</p><h2 id="bearer-token">Bearer Token</h2><p>WIP</p><h2 id="hmac-tokens-hash-based-message-authentication-code">HMAC Tokens(Hash-based Message Authentication Code)</h2><p>WIP</p><h2 id="multi-factor-authentication-mfa">Multi-Factor Authentication(MFA)</h2><p>WIP</p><h2 id="总结">总结</h2><table style="width:100%;"><colgroup><col style="width: 32%" /><col style="width: 8%" /><col style="width: 8%" /><col style="width: 8%" /><col style="width: 11%" /><col style="width: 11%" /><col style="width: 8%" /><col style="width: 11%" /></colgroup><thead><tr class="header"><th>技术</th><th>安全性</th><th>易用性</th><th>跨平台</th><th>用户体验</th><th>实现难度</th><th>扩展性</th><th>数据隐私</th></tr></thead><tbody><tr class="odd"><td>WebAuthn</td><td>高</td><td>一般</td><td>一般</td><td>良好</td><td>高</td><td>良好</td><td>高</td></tr><tr class="even"><td>OAuth</td><td>一般</td><td>良好</td><td>良好</td><td>良好</td><td>一般</td><td>良好</td><td>一般</td></tr><tr class="odd"><td>JWT</td><td>一般</td><td>良好</td><td>良好</td><td>良好</td><td>一般</td><td>良好</td><td>低</td></tr><tr class="even"><td>OpenID Connect</td><td>高</td><td>一般</td><td>良好</td><td>良好</td><td>高</td><td>良好</td><td>高</td></tr><tr class="odd"><td>SAML</td><td>高</td><td>一般</td><td>良好</td><td>一般</td><td>高</td><td>良好</td><td>高</td></tr><tr class="even"><td>Session-based Auth</td><td>一般</td><td>良好</td><td>良好</td><td>良好</td><td>低</td><td>一般</td><td>一般</td></tr><tr class="odd"><td>HTTP Basic Auth</td><td>低</td><td>良好</td><td>良好</td><td>一般</td><td>低</td><td>一般</td><td>低</td></tr><tr class="even"><td>Digest Authentication</td><td>一般</td><td>一般</td><td>良好</td><td>一般</td><td>高</td><td>一般</td><td>一般</td></tr><tr class="odd"><td>Bearer Tokens</td><td>一般</td><td>良好</td><td>良好</td><td>良好</td><td>一般</td><td>良好</td><td>一般</td></tr><tr class="even"><td>HMAC Tokens</td><td>高</td><td>一般</td><td>良好</td><td>一般</td><td>高</td><td>良好</td><td>高</td></tr><tr class="odd"><td>Multi-Factor Auth (MFA)</td><td>高</td><td>一般</td><td>良好</td><td>一般</td><td>一般</td><td>良好</td><td>高</td></tr><tr class="even"><td>OAuth2 PKCE</td><td>高</td><td>一般</td><td>良好</td><td>良好</td><td>高</td><td>良好</td><td>高</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">最近被网站唤醒 Windows Hello 震惊到了, 简单了解一下这块的技术</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="安全" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="安全" scheme="https://blog.liukairui.me/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Blob与File</title>
    <link href="https://blog.liukairui.me/article/Blob%E4%B8%8EFile/"/>
    <id>https://blog.liukairui.me/article/Blob%E4%B8%8EFile/</id>
    <published>2023-04-05T16:00:04.000Z</published>
    <updated>2023-04-05T16:00:04.000Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <summary type="html">经常用 Blob 但是对这块 API 完全不了解, 就看一下</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Blob" scheme="https://blog.liukairui.me/tags/Blob/"/>
    
  </entry>
  
  <entry>
    <title>前端安全策略及其解决方案</title>
    <link href="https://blog.liukairui.me/article/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://blog.liukairui.me/article/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2023-04-05T16:00:03.000Z</published>
    <updated>2023-04-05T16:00:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c77527f16d0cef26b975021417675d416e5f41d6154514e40275542a3b79f058"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">文章被加密了, 请输入密码查看.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">🔒浏览器的安全限制越来越复杂且零散, 各大浏览器厂商的安全限制还不兼容, 确实需要详细了解一下这些鬼安全限制了</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="安全" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="加密文章" scheme="https://blog.liukairui.me/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    
    <category term="安全" scheme="https://blog.liukairui.me/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>ShadowDOM的坑</title>
    <link href="https://blog.liukairui.me/article/ShadowDOM%E7%9A%84%E5%9D%91/"/>
    <id>https://blog.liukairui.me/article/ShadowDOM%E7%9A%84%E5%9D%91/</id>
    <published>2023-04-05T16:00:02.000Z</published>
    <updated>2023-04-05T16:00:02.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>CSS 隔离问题</p><ul><li>可继承 ShadowDOM提供了样式隔离, 但是 ShadowDOM 还是会继承外部Document Body 定义的可继承 <code>style</code>, 可以使用<code>all: initial</code> 隔离</li><li>组件库 组件库的样式可能由于 CSS 隔离无法被应用</li><li>Tailwind 等基于 <code>rem</code> 的 CSS 解决方案 由于<code>rem</code> 是可继承的, 因此, Tailwind 中的相对值都会应用最外部的<code>rem</code></li></ul></li><li><p>open &amp; close</p><ul><li>如果将模式设置为 <code>open</code>, 那么主文档可以通过访问组件的<code>.shadowRoot</code> 属性来访问组件内部的 ShadowDOM,这意味着开发者可以在主文档中修改组件内部的代码.</li><li>如果将模式设置为 <code>close</code>, 那么主文档将无法通过<code>.shadowRoot</code> 属性访问组件内部的 ShadowDOM.</li></ul><p>因此, 当我们在 <code>closed</code> 模式的 ShadowDOM中使用了某些组件库, 这些组件库如果没有在 ShadowDOM 内部的监听,那么这些监听大概率会失效</p></li><li><p>事件冒泡被重定向</p><p>为了保护内部 Element 不被外部获取, 当事件触发冒泡时, 外部EventHandler 无法获取到内部 target, 例如下面例子中两个按钮分别在 closed与 open ShadowDOM, 但是外部的 onClick 获取到的 target 都是被重定向后的Container</p><iframe src="https://codesandbox.io/embed/stoic-swartz-hw8u8f?expanddevtools=1&amp;fontsize=14&amp;hidenavigation=1&amp;theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="stoic-swartz-hw8u8f" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe></li><li><p>CSP 问题</p><p>ShadowDOM 内部的元素依然遵守外部 document 定义的 CSP 规则, 无法通过meta 修改 CSP</p></li></ul>]]></content>
    
    
    <summary type="html">ShadowDOM 虽然可以将内外部 CSS 与 JS 隔离开, 但是也存在一些由此产生的小坑</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ShadowDOM" scheme="https://blog.liukairui.me/tags/ShadowDOM/"/>
    
    <category term="插件开发" scheme="https://blog.liukairui.me/tags/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>CSS样式隔离方案</title>
    <link href="https://blog.liukairui.me/article/CSS%E6%A0%B7%E5%BC%8F%E9%9A%94%E7%A6%BB%E6%96%B9%E6%A1%88/"/>
    <id>https://blog.liukairui.me/article/CSS%E6%A0%B7%E5%BC%8F%E9%9A%94%E7%A6%BB%E6%96%B9%E6%A1%88/</id>
    <published>2023-04-05T16:00:01.000Z</published>
    <updated>2023-04-05T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们想让保护一个元素不被外部 CSS 所污染时, 有如下方案</p><ol type="1"><li><p>让元素不被选中</p><ol type="1"><li>覆写所有可继承样式</li><li>使用 custom elements 自定义标签名防止被选中</li></ol></li></ol><p>可用是可用, 但是 css 会写起来很乱</p><ol start="2" type="1"><li>采用 ShadowDOM</li></ol><p>ShadowDOM 看起可以在 HTML 中产生一个隔离环境,但是可继承的样式并不会被隔离. 例如,</p><ul><li><p>在外部 css 中定义</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html</span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 100px<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在 ShadowDOM 中写入 css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:root, :host</span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 50px<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在 ShadowDOM 中使用</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">span</span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span> <span class="token comment">/* 最后得到的是 100px */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>最后我们 ShadowDOM 中的 <code>font-size</code> 为 <code>100px</code>,在 Element Panel 中可以看到, ShadowDOM 继承了 Body 的样式... 并且<code>:root</code> 选择器失效了...</p><ol start="3" type="1"><li>iframe</li></ol><p>最彻底的解决方案, 但是 iframe 并不好用</p><ol start="4" type="1"><li><code>all: initial</code></li></ol><p>这个 css 可以重置来自上级页面可继承的 CSS,但是当内部元素恰好命中了外部 CSS 选择器时仍然会被修改样式</p><p>综上, 最佳方案似乎是 <code>all: initial</code> + ShadowDOM:<code>all: initial</code> 阻止了宿主网页的样式侵入到 ShadowDOM 内部, 而ShadowDOM 则阻止了宿主网页里相同类名的样式应用到内部,它们俩正好形成了一个互补.</p>]]></content>
    
    
    <summary type="html">原以为 ShadowDOM 可以直接解决掉样式隔离问题, 但是实际上 ShadowDOM 并不可靠</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://blog.liukairui.me/tags/CSS/"/>
    
    <category term="ShadowDOM" scheme="https://blog.liukairui.me/tags/ShadowDOM/"/>
    
    <category term="插件开发" scheme="https://blog.liukairui.me/tags/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>媒体元数据相关方法</title>
    <link href="https://blog.liukairui.me/article/%E5%AA%92%E4%BD%93%E5%85%83%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://blog.liukairui.me/article/%E5%AA%92%E4%BD%93%E5%85%83%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</id>
    <published>2023-03-02T16:00:01.000Z</published>
    <updated>2023-03-02T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直好奇 chrome /操作系统是如何获取到用户网站正在播放的媒体信息(标题, 作者, 播放进度,专辑封面)并提供类似上一首下一首 API 的</p><p><img src="./媒体元数据相关方法/chrome_player.png" style="zoom:50%;" /></p><p><img src="./媒体元数据相关方法/macos.jpg" style="zoom: 25%;" /></p><p>曾经有了解过 Linux 上基于 D-Bus 的 <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvTVBSSVM=">mpris<i class="fa fa-external-link-alt"></i></span>协议大概可以猜到系统可以通过类似的协议获取到浏览器上报的媒体信息,但是一直不明白浏览器是怎么获取到网站播放的媒体信息的.</p><h2 id="video-标签上的元数据"><code>&lt;video&gt;</code>标签上的元数据</h2><p>考虑到 <code>&lt;video&gt;</code> 有一个<code>onloadedmetadata</code> 回调, 感觉 <code>&lt;video&gt;</code>上肯呢个存着视频的元数据, 于是读取 <code>&lt;video&gt;</code> 的属性,发现上面<strong>只有播放进度, 总时长, 视频长宽</strong>这几个信息.视频的标题, 作者, 专辑名并没有</p><h2 id="从无障碍角度入手">从无障碍角度入手</h2><p>对于视觉障碍用户,网站在播放视频的时候一定做了特殊照顾(例如只展示封面, 自动朗读字幕) 在MDN 上找到了 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYlZUVF9BUEk=">WebVTT<i class="fa fa-external-link-alt"></i></span>该文件<strong>标识了媒体标题,</strong> 但是这似乎并不是一套强制标准,很多网站都没有使用</p><h2 id="从-api-角度入手">从 API 角度入手</h2><p>我们只是想知道 JS 上报媒体信息的协议名字是什么,于是我尝试爬取包含视频元信息的请求报文, 如果一个包里面只有媒体元数据,而这个 API 又是有语义的(例如<code>example.com/api/video/xxx-api/</code>) 那么大概能猜到存在一个<code>xxx</code> 协议用于描述元数据. 但是没有收获</p><h2 id="从-chromium-设计文档入手">从 Chromium 设计文档入手</h2><p>既然是 Chromium 的功能, Chromium 一定会有关于这方面的介绍. 在 <ahref="chromium.org/developers/design-documents/">Chromium项目的开发者设计文档索引</a> 搜索 <code>media</code>(因为视频音频都可以被检测, 所以不能搜索 <code>video</code> /<code>audio</code>) 找到 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hyb21pdW0ub3JnL2RldmVsb3BlcnMvZGVzaWduLWRvY3VtZW50cy9leHRlbnNpb25zL3Byb3Bvc2VkLWNoYW5nZXMvYXBpcy11bmRlci1kZXZlbG9wbWVudC9tZWRpYS1nYWxsZXJ5Lw==">MediaGallery<i class="fa fa-external-link-alt"></i></span>这个 feature, 在介绍中可以看到</p><blockquote><p>Overview Media and metadata access API. ...</p></blockquote><p>在 MDN 上以 <code>Media and metadata access API</code>为关键字就可以找到 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01lZGlhTWV0YWRhdGE=">MediaMetadata<i class="fa fa-external-link-alt"></i></span>这个 API.</p><p>这就是我们想要的东西, 他包含了: 标题, 艺术家, 组, 创建者, 专辑名,媒体相关的图片(一般是专辑封面)数组</p><p>一下是一个 metadate 样例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">navigator<span class="token punctuation">.</span>mediaSession<span class="token punctuation">.</span>metadata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediaMetadata</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Unforgettable"</span><span class="token punctuation">,</span>  <span class="token literal-property property">artist</span><span class="token operator">:</span> <span class="token string">"Nat King Cole"</span><span class="token punctuation">,</span>  <span class="token literal-property property">album</span><span class="token operator">:</span> <span class="token string">"The Ultimate Collection (Remastered)"</span><span class="token punctuation">,</span>  <span class="token literal-property property">artwork</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/96x96"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"96x96"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/128x128"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"128x128"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/192x192"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"192x192"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/256x256"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"256x256"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/384x384"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"384x384"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/512x512"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"512x512"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更多功能">更多功能</h2><p>mediaSession 还可以控制播放位置, 切换音轨, 挂断电话, 切换麦克风,开启摄像头</p><p>参考: https://web.dev/media-session/</p>]]></content>
    
    
    <summary type="html">一些与媒体元信息相关的 BOM API</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化总结</title>
    <link href="https://blog.liukairui.me/article/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.liukairui.me/article/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</id>
    <published>2023-02-22T16:00:01.000Z</published>
    <updated>2023-02-22T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="b1d75aa3cf2822df181c1268fbaf3f481f84ca69dfa3e519714fa48e23aee874"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">文章被加密了, 请输入密码查看.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">🔒各种各样性能优化的奇淫异巧</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="性能优化" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="加密文章" scheme="https://blog.liukairui.me/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    
    <category term="性能优化" scheme="https://blog.liukairui.me/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>一些 React 的 Tips</title>
    <link href="https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BReact%E7%9A%84Tips/"/>
    <id>https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BReact%E7%9A%84Tips/</id>
    <published>2023-02-12T16:00:01.000Z</published>
    <updated>2023-02-12T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础">基础</h2><ul><li><p><strong>修改数组类型的 state</strong></p><ul><li><p>💩拷贝-修改-回填</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// push 会修改原数组所以必须复制</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> items <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>👍️合并-回填</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// concat 并不会修改原数组</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong><code>state</code> &amp; <code>props</code>异步的</strong></p><ul><li><p>💩直接使用 <code>state</code> &amp; <code>props</code> 做更新</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>increment<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>👍️使用函数更新</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">counter</span><span class="token operator">:</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> props<span class="token punctuation">.</span>increment<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong><code>useState</code>初始值何时采用函数作为入参</strong></p><ul><li><p>当初始值需要被计算时</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 💩 在每次渲染组件时, reduce 都会被计算一遍结果然后被丢弃</span><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  props<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍️ 在每次渲染组件时, 都会声明一个匿名函数, 但是函数不会执行, 不会计算 reduce</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始值是很复杂对象时</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">,</span> k3<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> k1000<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 💩 在每次渲染组件时, 都要花大力气一个很大的对象, 然后丢弃</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">,</span> k3<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> k1000<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍️ 函数的声明耗时与函数内部的代码量不相关</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong><code>useState</code> &amp;<code>useRef</code></strong></p><ul><li><p>区别: <code>useState</code> 的值在每个 <code>render</code>中都是独立存在的, 而 <code>useRef.current</code>则更像是相对于render函数的一个全局变量, 每次他会保持 <code>render</code>的最新状态. (<code>useRef</code> 相当于创建了类组件的成员变量)</p></li><li><p>场景</p><ul><li>变量维护 UI 状态, 更新时需要刷新 UI: <code>useState</code></li><li>变量不维护 UI 状态, 更新时不需要刷新 UI: <code>useRef</code></li><li>变量不更新: <code>const [foo] = useState(initValue)</code></li></ul></li><li><p>陷阱: 不要使用 <code>ref</code> 非幂等(增量)的更新<code>ref</code>. 在 StrictMode 的 Dev 环境下, 组件会被渲染两次,以检查组件的幂等性, 并且不提供 Warning...</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ref1<span class="token punctuation">.</span>current <span class="token operator">=</span> ref1<span class="token punctuation">.</span>current <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 💩 会执行两次相当于 + 2</span>ref1<span class="token punctuation">.</span>current <span class="token operator">=</span> someState <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 👍️ state 连续渲染两次值并不会变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>不要吝啬 <code>setState</code></p><p>与 Vue 不同, React 并不会在数据被 Set 后同步刷新数据, 而是会合并更新,所以同步的多个 <code>setState</code> 不会造成性能问题</p></li><li><p>不要在组件中过度使用 <code>useEffect</code></p><p>将这层逻辑抽离成自己的 <code>Hook</code>, 方便复用, 方便阅读.否则光读 <code>useEffect</code> 都读不完, <code>useEffect</code>也可以让代码更加工整, 可读性也更高</p></li><li><p>强调数据流向, 单一事实来源</p><ul><li>尽量让响应式数据的数据来源变简单</li><li>没有了自动依赖手机, 要理清楚状态发生变化的原因,数据变化会引发哪些状态变化</li><li>强调数据的提供与消费, 我向外暴露什么样的数据,什么组件会消费我的数据</li></ul></li><li><p>在 <code>setState</code> 的时候注意有没有 Effect 依赖于这个<code>State</code>, 是否会造成循环更新(还是数据流问题)</p></li><li><p><code>useEffect</code> 的 <code>shadow</code> 比较</p><p>在写 <code>useEffect(()=&gt;&#123;&#125;, [])</code> 时第二个参数是一个数组,当数组内元素变化时会触发重新执行,但是这里检测变化的方法是对数组中元素<strong>进行 shadow 比较</strong>,并不是像 Vue 一样进行依赖追踪, 例如 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token parameter">vals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>vals<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre> 每次渲染时传入的<code>vals</code> 都是新 <code>vals</code>, react 在对比时就会发现<code>vals</code> 不同, 触发 <code>rerender</code></p><p>可以通过如下方法修复这个问题 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> vals<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每次对比的都是 vals 数组内部的值</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>vals<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p><strong>千万注意 react 只是对数组进行 shadow 比较,不是对我们传入的变量做依赖追踪</strong></p></li><li><p>Hook 的闭包陷阱</p><p>只要是要在 Hook 中使用外部的东西就要注意陷阱, 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">consoleStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">consoleStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跑起来没毛病, 但是如果后期将代码改成</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>store<span class="token punctuation">,</span> setStore<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">consoleStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">consoleStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就完蛋了, 因为 useEffect 拿到的永远是最开始定义的<code>consoleStore</code>, 其中的 <code>store</code>也永远是第一次渲染的 <code>store</code>. 为了防止出这种问题,一定要装这个包 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXNsaW50LXBsdWdpbi1yZWFjdC1ob29rcw==">eslint-plugin-react-hooks<i class="fa fa-external-link-alt"></i></span></p></li><li><p>减小 <code>useEffect</code> 的体积</p><p>俺理解 React 所谓的函数式并不是严格的函数式, 而是形式上的函数式.如果我写一个组件, 里面没有 <code>useEffect</code>, 只要事实来源不变,整个 View 就不变, 事实来源变了, View 可以符合预期的变化. 当然,不可能所有的组件都是纯函数的, 我们可以用一些 Hooks 在 Hooks 内部加入<code>Effect</code> 代码, 但是向外部表现为一个自动化的事实来源,当状态发生变化时对 View 做一定程度的精修. 在外层组件看来,代码并没有副作用, 外层组件也可以忘记 Hooks 内部存在副作用,像着纯函数一样使用. 例如这样的函数式组件就看起来很舒服</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>display<span class="token punctuation">,</span> disabled<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 事实来源是 props</span>  <span class="token comment">// working 是一个额外的属性, 但是他不是事实来源, 只是算出来的数据</span>  <span class="token keyword">const</span> working <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>display <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>disabled<span class="token punctuation">,</span> <span class="token punctuation">[</span>display<span class="token punctuation">,</span> disabled<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// useLocalStorge 是一个 Hook, 内部通过 useEffect 获取数据, 同步修改</span> <span class="token comment">// 但是作为视图层, 我完全可以忽略这个问题, 从我的角度看这就是一个 Storgae 的事实来源, 从外部看这就是一个 state, 就是一个数据来源. 函数副作用这些脏活, 已经被 Hook 实现时候帮忙处理掉了</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>storage<span class="token punctuation">,</span> setStorage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cookie'</span><span class="token punctuation">,</span> <span class="token string">'tocken'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以, 俺觉得, 好的代码的事实来源一定是 <code>props</code>,<code>useXXHook</code> 而 <code>useMemo</code> 只是做状态桥接的,<code>useState</code> 只是帮忙存储数据的,并不是发生变化的事实来源</p></li><li><p>增加一个 <code>useEffect</code> 依赖的时候要想:这个依赖会不会在每次 render 的时候变化造成循环依赖,这个依赖变化的时候函数内部产生的内容应不应该变化</p></li><li><p><code>useState</code> 可以传引用类型</p><p>如果 <code>useState</code> 传入一个引用类型, 在 <code>rerender</code>时候引用值<strong>并不会变</strong>, 例如下面的代码会一直输出<code>false</code></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">let</span> demos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存储每次 rerender 时候的函数</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>demo<span class="token punctuation">,</span> setDemo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入一个函数</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> setFoo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入一个常量用于触发更新</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// 每秒钟 rerender 一下</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setFoo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>foo<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  demos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将每次 rerender 的函数放在 demos 中</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demos<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d <span class="token operator">!==</span> demos<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查函数引用是否发生变化</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>foo<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>useMemo</code> 的使用场景</p><p>当成 Vue 的 <code>computed</code> 用, 能用 <code>useMemo</code>就不要用 <code>useState</code>, <strong>减少可变数据, 减少数据源,尽可能减少事实来源</strong></p></li><li><p><code>useCallback</code> 的使用场景</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>deps<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于 <code>foo</code>, 每次 rerender 时候 <code>foo</code>的引用值都会发生变化.</p><p>对于 <code>bar</code>, 每次 rerender 事后, 只要 <code>deps</code>不发生变化, <code>bar</code> 的引用值不变.</p><p>那么 <code>useCallback</code> 有什么用呢? 可以节约函数定义? 因为只要<code>deps</code> 不变, 返回的函数不变. 看起来我们没有定义新的函数,但是</p><p><strong><code>useCallback</code> 并不会节约函数定义的开销, 因为在调用<code>useCallback</code> 之前, 我们已经声明了这个函数</strong></p><p>为什么用 <code>useCallback</code> 而不是直接定义, 或者使用<code>useState</code></p><p><code>useState</code> + <code>useEffect(()=&gt;&#123;&#125;, [deps])</code>当然可以, 但是 <code>useCallback</code> 显然简洁</p><p>直接定义并不会影响当前组件的调用, 但是如果该函数作为<code>props</code> 传给了其他组件, 其他组件使用了 <code>memo()</code>,只要 <code>props</code> 不变组件就不 rerender, 但是你传给组件一个函数,这父组件每次 rerender 就会导致函数引用变化, 就会导致子组件一直<code>rerender</code>, 这时 <code>useCallback</code> 就变得很有用,所以</p><p><strong>给向外提供函数的时候尽量 <code>useCallback</code>一下</strong></p></li><li><p><code>StrickMode</code> 严格模式</p><p><span class="exturl" data-url="aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3Mvc3RyaWN0LW1vZGUuaHRtbCNpZGVudGlmeWluZy11bnNhZmUtbGlmZWN5Y2xlcw==">奇奇怪怪<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">菜菜子</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://blog.liukairui.me/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>WebAnimation 与 FLIP 技术</title>
    <link href="https://blog.liukairui.me/article/WebAnimation%E4%B8%8EFLIP%E6%8A%80%E6%9C%AF/"/>
    <id>https://blog.liukairui.me/article/WebAnimation%E4%B8%8EFLIP%E6%8A%80%E6%9C%AF/</id>
    <published>2023-02-08T16:00:01.000Z</published>
    <updated>2023-02-08T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web-animations-api">Web Animations API</h2><p>类似于 CSS in JS 的 animation 实现.</p><ul><li><p>基本使用</p><ul><li><p>定义关键帧</p><p>使用对象数组的模式定义关键帧</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> aliceTumbling <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">'rotate(0) translate3D(-50%, -50%, 0)'</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#000'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#431236'</span><span class="token punctuation">,</span> <span class="token literal-property property">offset</span><span class="token operator">:</span> <span class="token number">0.3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">'rotate(360deg) translate3D(-50%, -50%, 0)'</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#000'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>offset</code> 指定关键帧出现在动画位置的百分比,首尾对象默认 <code>offset = 0/1</code></p><p>若不指定 <code>offset</code> 则直接选取中点作为 <code>offset</code>,例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 第一个元素, offset = 0</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">offset</span><span class="token operator">:</span> <span class="token number">0.4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 手动指定, offset = 0.4</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 未指定, 均分为 0.4 + (1-0.4)/3*1 = 0.6</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 未指定, 均分为 0.4 + (1-0.4)/3*2 = 0.8</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span> <span class="token comment">// &lt;- 最后一个元素, offset = 1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义动画执行模式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> aliceTiming <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>  <span class="token literal-property property">iterations</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行动画</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> anim <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>aliceTumbling<span class="token punctuation">,</span> aliceTiming<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>Hooks</p><ul><li>下面的 <code>anim</code> 就是 <code>elem.animate()</code>的返回值</li><li><code>anim.play() / anim.pause()</code>: 执行 / 暂停动画. 注意,动画在 <code>animate()</code> 的时候回自动执行, 如需手动控制需要立刻<code>pause</code> 一下</li><li><code>anim.playbackRate</code>: 动画执行速率(可以为负数),可写属性</li><li><code>anim.currentTime</code>: 动画执行时间, 可写属性</li><li><code>anim.effect.timing.duration</code>: 动画持续时间, 类似属性见<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYl9BbmltYXRpb25zX0FQSS9Vc2luZ190aGVfV2ViX0FuaW1hdGlvbnNfQVBJ">MDN<i class="fa fa-external-link-alt"></i></span></li><li><code>anim.finish()</code>: 动画结束</li><li><code>anim.cancel()</code>: 终止动画</li><li><code>Animation.reverse()</code>: 反向播放动画</li><li><code>document.getAnimations()</code>: 获取全部 Web Animation注册动画</li><li><code>anim.onfinish(callback)</code>: 动画结束回调</li><li><code>anim.oncancel(callback)</code>: 动画取消回调</li></ul></li></ul><h2 id="flip-技术">FLIP 技术</h2><p>当我们需要对 DOM 的位置做调整但是又不知道目标位置的具体时可以用 FLIP实现带有过渡动画的位置调整.</p><p>例如, 有 <code>a b c d</code> 元素, 我们希望将元素变为<code>d c b a</code>. 可以直接通过 DOM API 调整位置, 但是无法实现动画.FLIP 的做法是先将元素的起始位置记下来, 再调整到目标位置, 再通过 CSS将元素调到原为止, 最后通过动画完成过渡</p><ul><li><strong>First</strong>：在任何事情发生之前，记录将要转换的元素的当前（即第一）位置和尺寸。您可以使用<code>element.getBoundingClientRect()</code>它，如下所示。</li><li><strong>Last</strong>：执行使过渡瞬间发生的代码，并记录元素的最终（即last）位置和尺寸。</li><li><strong>Invert</strong>：由于元素位于最后一个位置，我们想通过<code>transform</code>修改其位置和尺寸来创建它位于第一个位置的错觉。这需要一点数学运算，但并不难。</li><li><strong>Play</strong>：元素反转（并假装在第一个位置），我们可以通过将其设置为<code>transform</code>来将其移回到最后一个位置<code>none</code>。</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly92Mi52dWVqcy5vcmcvdjIvZ3VpZGUvdHJhbnNpdGlvbnMuaHRtbCNMaXN0LU1vdmUtVHJhbnNpdGlvbnM=">vue2 文档<i class="fa fa-external-link-alt"></i></span>中提到的效果</p><iframe src="https://codesandbox.io/embed/github/vuejs/v2.vuejs.org/tree/master/src/v2/examples/vue-20-list-move-transitions?fontsize=14&amp;hidenavigation=1" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="vue-20-list-move-transitions" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h2 id="动画实现的比较">动画实现的比较</h2><p>动画的实现方法:</p><ul><li>纯 CSS (animation / transition) with GPU</li><li>纯 JS (requestAnimationFrame &amp; style)</li><li>WebAnimation API</li></ul><p>其中</p><ul><li><p>JS 实现的动画会被同步代码阻塞. 但是更加灵活</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;- request 卡死</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>不使用 GPU 渲染的 CSS 动画会被同步代码阻塞, 采用 GPU 的不阻塞.只要动画涉及的属性不引起 reflow 动画的采样就会交给 GPU 处理.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#alice_css</span> <span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> cssRound infinite 3s linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> cssRound</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token comment">/* &lt;- left 会引发重绘, 此时动画的渲染是由 CPU 完成的, 如果执行 while(true); 动画就会卡死*/</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#alice_css</span> <span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> cssRound infinite 3s linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> cssRound</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* &lt;- rotateZ 不会引发重绘, 此时动画的渲染是由 GPU 完成的, 如果执行 while(true); 动画不会卡死*/</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此, 能使用 CSS 动画的就不要用 JS 动画</p></li><li><p>WebAnimation API: 通过 JS 的方式定义动画, 最终会将动画效果通过CSS 动画完成, 其对同步 JS 代码阻塞的表现与 CSS 动画一致</p><p>这个 API 既保留了 JS 的灵活性(控制动画执行, 动画执行观测, 与JS交互),同时使用类似 CSS 的方式执行动画, 减少了同步代码对动画的影响</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> aliceJs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'alice_js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> aliceRoundJs <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">'rotateZ(0deg)'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 同步代码阻塞也卡死</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">'rotateZ(360deg)'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> aliceTimeJs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    <span class="token literal-property property">iterations</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  aliceJs<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>aliceRoundJs<span class="token punctuation">,</span> aliceTimeJs<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> aliceJs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'alice_js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> aliceRoundJs <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'0'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 同步代码阻塞也不卡死</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'300px'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> aliceTimeJs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>  <span class="token literal-property property">iterations</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>aliceJs<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>aliceRoundJs<span class="token punctuation">,</span> aliceTimeJs<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">一些动画相关的魔法</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="动画" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%8A%A8%E7%94%BB/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="性能" scheme="https://blog.liukairui.me/tags/%E6%80%A7%E8%83%BD/"/>
    
    <category term="动画" scheme="https://blog.liukairui.me/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Chrome DevTool Console APIs</title>
    <link href="https://blog.liukairui.me/article/ChromeDevToolConsoleAPIs/"/>
    <id>https://blog.liukairui.me/article/ChromeDevToolConsoleAPIs/</id>
    <published>2023-02-02T16:00:01.000Z</published>
    <updated>2023-02-02T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="console-apis">Console APIs</h2><blockquote><p>来自: https://developer.chrome.com/docs/devtools/console/api</p><p>以下插件可在 JavaScript 代码中使用, 非 DevTools 专有 API</p></blockquote><ul><li><p><code>console.assert(assertion, obj1[, obj2...])</code>: 传入一个boolean 若为假则抛出异常</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">number</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> errorMsg<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>console.count([label])</code>: 输出 label 被放入 count执行的次数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// default: 1 (不写 label 就是 default)</span>console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">'coffee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// coffee: 1</span>console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">'coffee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// coffee: 2</span>console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// default: 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>console.countReset([label])</code>: 重置一个 count</p></li><li><p><code>console.debug / info / error / warn</code>: 与<code>console.log</code> 用法相同, 但等级不同</p></li><li><p><code>console.dir()</code>: 打印对象</p></li><li><p><code>console.dirxml(xml)</code>: 打印 XML 对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">dirxml</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>console.table</code>: 打印表格</p></li><li><p><code>console.group*</code>: 一系列打印可折叠日志的方法</p></li><li><p><code>console.time([label]) / console.timeEnd([label])</code>:计时</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> square <span class="token operator">=</span> i <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>console.trace()</code>: 打印当前调用栈</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">first</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">second</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">third</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">third</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">fourth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">fourth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="console-实用-apis">Console 实用 APIs</h2><blockquote><p>内容来自:https://developer.chrome.com/docs/devtools/console/utilities</p><p>以下 API 在 JS 中不可用, 仅限 DevTool 下使用</p></blockquote><ul><li><p><code>$_</code>: 返回最近计算的表达式值</p></li><li><p><code>$0-$4</code>: 返回最近 1 - 5 个 Element面板选中的元素</p></li><li><p><code>$(selector, startNode)</code>: 选中一个元素, 相当于<code>document.querySelector(selector)</code>, 其中<code>startNode</code> 为检索的根节点. 注意<strong>这不是jQuery</strong></p></li><li><p><code>$$(selector, startNode)</code>: 选中元素, 相当于<code>document.querySelectorAll(selector)</code>, 其中<code>startNode</code> 为检索的根节点. 注意<strong>这不是jQuery</strong></p></li><li><p><code>$x(selector)</code>: 通过 <code>xpath</code> 选中元素, 例如<code>$x("//p")</code></p></li><li><p><code>copy(object)</code>将指定对象的字符串表示形式复制到剪贴板</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">copy</span><span class="token punctuation">(</span>$0<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>debug(fn) / undebug(fn)</code>: 调试函数,当函数被调用时中断执行并跳转源代码面板</p></li><li><p><code>dir / dirxml / key / value</code>: 和<code>console.*</code> 一样, 只不过是做了 preclude</p></li><li><p><code>inspect(object / function)</code>: 若为 Element 则在Element 面板选中元素. 若为 function 则在源代码中显示函数</p></li><li><p><code>getEventListeners(element)</code>: 获取 Element的所有事件监听.</p></li><li><p><code>keys(object) / values(object)</code>: 获取对象的 key /value</p></li><li><p><code>monitor(fn) / unmonitor(fn)</code>:当函数被调用时输出函数名与调用参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">monitor</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// function sum called with arguments: 1, 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>monitorEvents(element, stirng[] | string) / unmonitorEvents(object[, events])</code>:监听对象的事件被触发, 触发后输出事件与 <code>event</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">monitorEvents</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token string">"scroll"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// resize Event &#123;isTrusted: true, type: 'resize', target: Window, currentTarget: Window, eventPhase: 2, …&#125;</span><span class="token function">monitorEvents</span><span class="token punctuation">(</span>$0<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>profile([label]) / profileEnd([label])</code>: 开启 /关闭一个 JavaScript 性能分析. 关闭后可在 DevTool 的 JavaScript性能剖析器查看分析内容. <strong>支持同时开多个分析器</strong></p></li><li><p><code>queryObjects(Constructor)</code>:返回一个构造函数的所有实例的<strong>类数组</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">queryObjects</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token comment">//Array(20)</span><span class="token comment">//0: Promise &#123;&lt;pending>&#125;</span><span class="token comment">//1: Promise &#123;&lt;pending>&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">一些 Concole API 以及一些只有在 Chrome DevTool Console 下可用的魔法</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="DevTool" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/DevTool/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="DevTool" scheme="https://blog.liukairui.me/tags/DevTool/"/>
    
    <category term="调试" scheme="https://blog.liukairui.me/tags/%E8%B0%83%E8%AF%95/"/>
    
    <category term="chrome" scheme="https://blog.liukairui.me/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>奇怪的 DOM API</title>
    <link href="https://blog.liukairui.me/article/%E5%A5%87%E6%80%AA%E7%9A%84DOMAPI/"/>
    <id>https://blog.liukairui.me/article/%E5%A5%87%E6%80%AA%E7%9A%84DOMAPI/</id>
    <published>2023-01-18T16:00:01.000Z</published>
    <updated>2023-01-18T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="node-element">Node &amp; Element</h2><ul><li><p><strong>两者关系</strong>: Element 是 Node 的子类</p></li><li><p><strong>区分方法</strong>: 一个简易的区分 Node 和 Element的方法是: <strong>所有按照标签语法书写的元素都是 Element</strong>.依照这个规则,</p><ul><li><p>以下节点都是不是 Element 而是 Node</p><ul><li><p>Text Node: <code>"I am a text node"</code></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0NEQVRBU2VjdGlvbg==">CDataSection Node<i class="fa fa-external-link-alt"></i></span>:<code>&lt;![CDATA[  &lt; &gt; &amp; ]]&gt;</code></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Byb2Nlc3NpbmdJbnN0cnVjdGlvbg==">ProcessingInstruction Node<i class="fa fa-external-link-alt"></i></span>:<code>&lt;?xml-stylesheet type="text/css" href="rule.css"?&gt;</code></p></li><li><p>Comment Node: <code>&lt;!-- I am comment--&gt;</code></p></li><li><p>Document Type Node: <code>&lt;!doctype html&gt;</code></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0RvY3VtZW50RnJhZ21lbnQ=">DocumentFragment Node<i class="fa fa-external-link-alt"></i></span>: <code>#document</code></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0F0dHI=">AttributeNode<i class="fa fa-external-link-alt"></i></span>: <code>class="dmeo"</code></p></li></ul></li><li><p>以下节点是 Element</p><ul><li>Element Node</li><li>Document Node</li></ul></li></ul><p>可以采用 <code>node instanceof Node</code>,<code>node instanceof Element</code> 判断节点类型</p><p>也可以采用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL05vZGUvbm9kZVR5cGU=">nodeType<i class="fa fa-external-link-alt"></i></span>判断</p></li><li><p><strong>property 区别</strong></p><ul><li><p><strong><code>childNodes</code> &amp;<code>children</code></strong></p><p>后者只能获取子 <code>Element</code> 不能获取非 Element 的 Node.前者返回的是 <code>NodeList</code> 后者返回的是<code>HTMLCollection</code>. <code>HTMLCollection</code>没有任何数组方法, 例如 <code>map()</code>, <code>find()</code>,<code>forEach()</code> 等等. 但是NodeList确实有 <code>forEach()</code>方法. 这是它唯一拥有的数组方法. <code>HTMLCollection</code>总是实时更新.</p></li><li><p><strong><code>firstChild</code> &amp;<code>lastChild</code></strong> 返回的 <code>NodeList</code></p></li><li><p><strong><code>getElement*</code></strong> 返回的是<code>HTMLCollection</code></p><p><strong><code>query*</code></strong> 返回的是<code>NodeList</code></p></li><li><p><strong><code>tagName</code> &amp;<code>nodeName</code></strong></p><p><code>nodeName</code> 为 <code>Node</code> 的方法,<code>tagName</code> 为 <code>Element</code> 的方法</p><p><code>nodeName</code> 结果全大写, <code>tagName</code>全小写</p></li><li><p><strong><code>innerText</code> &amp;<code>textContent</code>:</strong> <code>innerText</code> 是<code>Element</code> 的方法, <code>textContent</code> 是<code>Node</code> 的方法</p></li><li><p><strong><code>setAttribute</code></strong> 是一个<code>Element</code> 方法</p></li><li><p>CSS 选择器只能选中 Element./img</p></li></ul></li></ul><h2 id="innertext-textcontent"><code>innerText</code> &amp;<code>textContent</code></h2><ul><li><code>innerText</code> 是 <code>Element</code> 的方法,<code>textContent</code> 是 <code>Node</code> 的方法</li><li><code>textContent</code> 会把所有子元素的文本连接起来并返回, 但是<code>innerText</code> 会返回一个"人类可见&amp;可读"的文本,它不会返回不可见元素的文本(例如<code>&lt;style&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;span style="display:none"&gt;</code>).就好像你用鼠标选中这段文本后再 Ctrl+C 得到的文本.</li><li>也正因为上面这一点, 所以在读取(或修改)一个元素的<code>innerText</code> 属性时会为了计算 CSS 而造成一次重绘(reflow),所以它的性能比 <code>textContent</code> 低.</li></ul><h2 id="样式与属性">样式与属性</h2><ul><li><p>增加样式:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>增加 class</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">'aaa'</span>  <span class="token comment">// 设置元素的class为aaa ，如果元素上原本有class则会覆盖</span>Ele<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span> <span class="token comment">// 给Ele新增aaa</span>Ele<span class="token punctuation">.</span>className <span class="token operator">+=</span> <span class="token string">" aaa"</span>  <span class="token comment">// 给Ele新增aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>包含 class</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>增加属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"data-id"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"data-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取属性值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p>以下内容来自: https://juejin.cn/post/6966062224892756005</p></blockquote><h2 id="尺寸相关">尺寸相关</h2><ul><li><p>尺寸示意图</p><figure><img src="./img08.jpg" alt="img01" /><figcaption aria-hidden="true">img01</figcaption></figure></li><li><p>获取实际屏幕宽高</p><figure><img src="./img01.png" alt="img01" /><figcaption aria-hidden="true">img01</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">W</span>  <span class="token operator">=</span>  window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width<span class="token keyword">const</span> <span class="token constant">H</span>  <span class="token operator">=</span>  window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取浏览器宽高</p><figure><img src="./img02.png" alt="img02" /><figcaption aria-hidden="true">img02</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>outerWidth<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>outerHeight<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取当前窗口宽高（浏览器视口宽高）</p><figure><img src="./img03.png" alt="img03" /><figcaption aria-hidden="true">img03</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取元素布局宽高</p><figure><img src="./img04.png" alt="img04" /><figcaption aria-hidden="true">img04</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取元素内容宽高</p><figure><img src="./img05.png" alt="img05" /><figcaption aria-hidden="true">img05</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取滚动后被隐藏页面的宽高</p><figure><img src="./img06.png" alt="img06" /><figcaption aria-hidden="true">img06</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取元素距离顶部和左边距离</p><figure><img src="./img07.png" alt="img07" /><figcaption aria-hidden="true">img07</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> top <span class="token operator">=</span> Ele<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span><span class="token keyword">const</span> left <span class="token operator">=</span> Ele<span class="token punctuation">.</span>offsetLeft<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="事件相关">事件相关</h2><h3 id="鼠标事件">鼠标事件</h3><ul><li><p>单击事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>双击事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">ondblclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ondblclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>右击事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"oncontextmenu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标按下事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmousedown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标移动事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmousemove"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标抬起事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmouseup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标进来事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 鼠标移动到自身时候会触发事件，同时移动到其子元素身上也会触发事件</span>Ele<span class="token punctuation">.</span><span class="token function-variable function">onmouseover</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmouseover"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 鼠标移动到自身是会触发事件，但是移动到其子元素身上不会触发事件</span>Ele<span class="token punctuation">.</span><span class="token function-variable function">onmouseenter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmouseenter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标离开事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 鼠标移动到自身时候会触发事件，同时移动到其子元素身上也会触发事件</span>Ele<span class="token punctuation">.</span><span class="token function-variable function">onmouseout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmouseout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 鼠标移动到自身是会触发事件，但是移动到其子元素身上不会触发事件</span>Ele<span class="token punctuation">.</span><span class="token function-variable function">onmouseleave</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmouseleave"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="键盘事件">键盘事件</h3><ul><li><code>keydown</code>：当用户按下键盘上的任意键时触发，而且如果按住按住不放的话，会重复触发此事件。</li><li><code>keypress</code>：当用户按下键盘上的字符键时触发（就是说用户按了一个能在屏幕上输出字符的按键keypress事件才会触发），而且如果按住不放的，会重复触发此事件（按下Esc键也会触发这个事件）。</li><li><code>keyup</code>：当用户释放键盘上的键时触发。</li></ul><h3 id="表单事件">表单事件</h3><ul><li><code>submit</code>：表单提交</li><li><code>reset</code>：表单重置</li><li><code>change</code>：值发生改变</li><li><code>blur</code>：离焦（不会冒泡）</li><li><code>focus</code>：聚焦（不会冒泡）</li></ul><h3 id="window">window</h3><p><code>window</code>事件指的是浏览器窗口本身而不是窗口内的文档对象。</p><ul><li><code>onload</code>：当文档和资源加载完成后调用</li><li><code>unload</code>：当用户离开当前文档转而其他文档时调用</li><li><code>resize</code>：浏览器窗口改变</li></ul><h3 id="其他事件">其他事件</h3><ul><li><p><code>beforeunload</code>：关闭浏览器窗口之前触发的事件</p></li><li><p><code>DOMContentLoaded</code>：文档对象加载完成之后就触发的事件，无需等待样式、图片等资源</p></li><li><p><code>readystatechange</code>：document有 readyState 属性来描述document 的 loading状态，readyState 的改变会触发 readystatechange事件</p><ul><li><p><code>document.readyState === 'complete'</code>页面已加载完毕</p></li><li><p><code>document.readyState === 'loading'</code>页面正在加载</p></li></ul></li><li><p><code>pageShow</code> 和<code>pagehide</code>：每次用户浏览关闭页面时触发</p></li></ul>]]></content>
    
    
    <summary type="html">易混 &amp; 易忘的 API 们</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>一些@&lt;svg width=&quot;32&quot; height=&quot;32&quot; viewBox=&quot;0 0 24 29&quot; style=&quot;vertical-align:bottom&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M19.877 1.468L24 2.534v18.942l-4.123 1.056V1.468zM6.53 10.898l4.115 1.064v8.978L6.53 22.003V10.896zM0 2.572l4.115 1.064v16.736L0 21.428V2.572zm17.455 5.62V19.3l-4.122-1.064V9.257l4.122-1.064z&quot;/&gt;&lt;/svg&gt;的东西</title>
    <link href="https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BByteD%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    <id>https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BByteD%E7%9A%84%E4%B8%9C%E8%A5%BF/</id>
    <published>2023-01-17T16:00:01.000Z</published>
    <updated>2023-01-17T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="11f8d5f51b1f47ca30d91e4dbfd7df90f2a35ae2a730d05d3ff53dff65265051"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">文章被加密了, 请输入密码查看.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">🔒这可是好东西啊~</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="加密文章" scheme="https://blog.liukairui.me/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>VueConf 2022 - Vue 的进化历程</title>
    <link href="https://blog.liukairui.me/article/VueConf2022-Vue%E7%9A%84%E8%BF%9B%E5%8C%96%E5%8E%86%E7%A8%8B/"/>
    <id>https://blog.liukairui.me/article/VueConf2022-Vue%E7%9A%84%E8%BF%9B%E5%8C%96%E5%8E%86%E7%A8%8B/</id>
    <published>2022-12-12T16:00:01.000Z</published>
    <updated>2022-12-12T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="库阶段library-2013-2015">库阶段(Library) 2013-2015</h2><p><strong>库与框架</strong>: 库更像是一个小模块嵌入于在大项目中,而框架则定义了一套自己的工程实践与配套工具</p><p>库阶段实现了基于 ES5 getter/setter 的响应式系统, MVVM, 模板数据绑定.并没有对构建工具等做出限制</p><p>此时 Vue 的组件与响应式系统强耦合, 没有编译过程, 直接将模板实例为 DOM并遍历实现数据绑定</p><h2 id="框架阶段framework-phase-2015-2016">框架阶段(Framework Phase)2015-2016</h2><p>实现 Vue 1.0</p><ul><li>引入了 Vue Router(SPA), vue-cli, Vuex(状态管理) 此时 Vue更像是一个框架了</li><li>引入了 <code>v-bind</code>, <code>v-on</code>, <code>v-for</code>及其缩写</li><li>实现了热更新与 Scoped CSS</li></ul><h2id="通用框架阶段universal-framework-phase-2016-2019">通用框架阶段(UniversalFramework Phase) 2016-2019</h2><p>完全重写, 实现 Vue 2.0.</p><ul><li>引入了模板编译 Virtual DOM</li><li>引入了基于 Virtual DOM 的服务端渲染</li><li>引入了基于 Virtual DOM 的跨端渲染</li><li>手动实现了 TS 定义</li><li>扩展了 vue-cli, 完成了工具链与 vue 的解绑</li><li>2.1 引入了作用域插槽</li><li>2.2 引入了基于路由的代码分割(SSR)</li><li>2.3 引入了基于路由的资源预加载(SSR, 基于 webpack 生成的 manifest文件分析资源引用关系)</li><li>2.4 引入了异步组件支持与编译输出(SSR)</li></ul><h2id="编译运行时混合阶compilerruntime-hybrid-phase-2019-now">编译/运行时混合阶(Compiler/RuntimeHybrid Phase) 2019-now</h2><p>Vue 2 的编译与运行模块是完全解耦的, 两者互不通信息,这导致编译器与运行时无法协作优化.</p><p>Vue 3</p><ul><li>实现了基于编译优化的 Virtual DOM 性能策略(Block Tree,PatchFlags)</li><li>提出了 Composition API(当时也提出了基于 class 的 API, 但是因为 class的装饰器语法不稳定, 最后选择了 Composition API). 切换 Composition API 后<ul><li>可扩展性得到了显著提升, 逻辑易于重组, 抽取, 复用</li><li>TS 更加友好</li></ul></li><li>实现了完全优化的 SSR 编译输出</li><li>开发了 Vite, 将 vue-cli 功能部分剥离到 Vite.</li><li>实现了同一份模版,不同的编译输出<ul><li>浏览器: 高度优化的 Virtual DOM 渲染函数</li><li>SSR: buffer + 字符串拼接</li><li>将来: Vapor mode (无 Virtual DOM 的渲染代码)</li></ul></li><li>单文件组件语法糖<ul><li><code>&lt;script setup&gt;</code></li><li>CSS v-bind()</li><li>Reactivity Transform</li></ul></li><li>3.1 引入了 Migration Build</li><li>3.2 引入了 <code>&lt;script setup&gt;</code></li></ul><p>现在的 Vue3</p><ul><li>core: 运行时, 编译器</li><li>文档</li><li>工具链 (create-vue)</li><li>SPA 路由 (Vue Router)</li><li>状态管理 (Pinia)</li><li>浏览器开发工具 (vue-devtools)</li><li>IDE 支持 (Volar)</li><li>TypeScript 支持 (将 tsc 扩展为 vue-tsc 以支持 sfc 检查)</li><li>静态分析 (eslint-plugin-vue)</li><li>单元测试 (<span class="citation"data-cites="vue/test-utils">@vue/test-utils</span>)</li></ul><h2 id="未来">未来</h2><ul><li>短期<ul><li>Reactivity Transform / Suspense 稳定化</li><li>SSR 水合改进 (lazy / on-demand / server-only)</li></ul></li><li>中到长期<ul><li>Vapor mode (受 Solid 启发的模版编译策略)</li></ul></li></ul>]]></content>
    
    
    <summary type="html">尤雨溪</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Vue" scheme="https://blog.liukairui.me/tags/Vue/"/>
    
    <category term="VueConf" scheme="https://blog.liukairui.me/tags/VueConf/"/>
    
  </entry>
  
  <entry>
    <title>一些字符编码规则</title>
    <link href="https://blog.liukairui.me/article/Unicode%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://blog.liukairui.me/article/Unicode%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</id>
    <published>2022-12-11T16:00:01.000Z</published>
    <updated>2022-12-11T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="unicode-编码规则">Unicode 编码规则</h1><blockquote><p>以下部分转自: <span class="exturl" data-url="aHR0cHM6Ly93YW5nd2wubmV0L3N0YXRpYy9wYWdlcy91bmljb2RlLmh0bWw=">一文彻底搞懂Unicode编码问题<i class="fa fa-external-link-alt"></i></span></p></blockquote><h2 id="ascii">ASCII</h2><p>最基础的编码格式，打字机时代的产物，共128个字符，其包含键盘上每一个可显字符，可应对只有英文字母场景下的编码需求。</p><p>ASCII编码，共128个字符，编码范围为0~127，每个字符占用一个字节(8位)，但ASCII实际7位就够用了，所以第8位可用于保存额外的信息，早期多用来做奇偶校验，目前都是填充0。</p><p>其中第32到126的字符( - 7E)，共95个，为可显字符(printablecharacter)，为空格、数字、字母、标点符号、和几个特殊符号(例如脱字符^)。其中：</p><ul><li>32()，为空格</li><li>48-57(-)，数字0-9</li><li>65-90(-5A)，字母A-Z</li><li>97-122(-7A)，字母a-z</li></ul><p>前32个字符和最后1个字符(0到32和127)，共33个字符，称之为控制字符(Controlcharacter)。</p><p>每个控制字符除了通过ASCII编码表示，还有另外的「脱字符表示法」(Caretnotation)，第0个为<code>^0</code>，后续26个为<code>^A</code>~<code>^Z</code>，剩余的为<code>^[</code>，<code>^\</code>，<code>^]</code>，<code>^^</code>，<code>^_</code>，最后一个为<code>^?</code>。在JS中的正则表达式中，用<code>\c</code>来替代脱字符匹配控制字符，例如<code>\cJ</code>代表<code>^J</code>。另外，有几个特殊的在现在编码中仍然有用的控制字符，还有「转义符表示法」(escapesequence)。如下表所示：</p><table><colgroup><col style="width: 10%" /><col style="width: 17%" /><col style="width: 17%" /><col style="width: 26%" /><col style="width: 14%" /><col style="width: 14%" /></colgroup><thead><tr class="header"><th style="text-align: center;">十进制</th><th style="text-align: center;">脱字符表示</th><th style="text-align: center;">转义符表示</th><th style="text-align: center;">名称</th><th style="text-align: center;">名称简写</th><th style="text-align: center;">作用</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">^@</td><td style="text-align: center;">\0</td><td style="text-align: center;">Null</td><td style="text-align: center;">NUL</td><td style="text-align: center;">空</td></tr><tr class="even"><td style="text-align: center;">7</td><td style="text-align: center;">^G</td><td style="text-align: center;"></td><td style="text-align: center;">Bell</td><td style="text-align: center;">Bel</td><td style="text-align: center;">振铃</td></tr><tr class="odd"><td style="text-align: center;">8</td><td style="text-align: center;">^H</td><td style="text-align: center;"> Backspace</td><td style="text-align: center;">BS</td><td style="text-align: center;">退格</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">9</td><td style="text-align: center;">^I</td><td style="text-align: center;"> Horizontal Tab</td><td style="text-align: center;">HT</td><td style="text-align: center;">水平制表</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">10</td><td style="text-align: center;">^J</td><td style="text-align: center;"></td><td style="text-align: center;">Line Feed</td><td style="text-align: center;">LF</td><td style="text-align: center;">换行</td></tr><tr class="even"><td style="text-align: center;">11</td><td style="text-align: center;">^K</td><td style="text-align: center;"> Vertical Tab</td><td style="text-align: center;">VT</td><td style="text-align: center;">垂直制表</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">12</td><td style="text-align: center;">^L</td><td style="text-align: center;"> Form feed</td><td style="text-align: center;">FF</td><td style="text-align: center;">换页</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">13</td><td style="text-align: center;">^M</td><td style="text-align: center;"> Carriage Return</td><td style="text-align: center;">CR</td><td style="text-align: center;">回车</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">27</td><td style="text-align: center;">^[</td><td style="text-align: center;"></td><td style="text-align: center;">Escape</td><td style="text-align: center;">ESC</td><td style="text-align: center;">换码</td></tr></tbody></table><p>显然128个字符对于英文表达足够了，但是明显不适用中文，以及其他非英文表达的语言，所以中国后来有了GBK编码。ASCII编码在早期遇到编码不够用的时候，也有一些扩展和变体，例如「扩展ASCII」可表示256个字符。不过由于后来有了Unicode编码格式，这些都没用了，所以就没必要去了解了。</p><h2 id="unicode">Unicode</h2><p>Unicode编码标准，可表示目前全世界所有语言的所有字符。同时兼容ASCII编码。</p><p>Unicode的前128个字符编码和ASCII是一致的，即向后兼容ASCII，对于使用ASCII编码的程序可以直接使用Unicode规范。在Unicode中，对于每一个字符编码的值，叫做<code>code point</code>。例如小写字母a的<code>code point</code>为97，对应十六进制为<code>\x61</code>。下文为了方便对<code>code point</code>称作「码位」。</p><p>在Unicode中，码位的总范围为<code>\x0</code>到<code>\x10FFFF</code>，共1,114,112个码位。2048个用于编码代理(UTF-16)，66个非字符码位(例如BOM)，137,468个预留给私人使用，最终剩余974,530用于普通字符分配。</p><p>码位的最大值为<code>\x10FFFF</code>，对应二进制有21位，我们将2<sup>16个值分为一组，则Unicode总共可以分为17份，每一份称之为平面(Plane)，每一个平面有65,536(2</sup>16)个码位。</p><p>为什么Unicode的最大值为<code>\x10FFFF</code>？因为对于<code>UTF16</code>编码，双字节最多可编码2<sup>20个字符，单字节可编码2</sup>16个字符，加起来共17个平面的字符数。</p><p>下表为每个平面详情：</p><table><colgroup><col style="width: 12%" /><col style="width: 18%" /><col style="width: 10%" /><col style="width: 58%" /></colgroup><thead><tr class="header"><th style="text-align: center;">平面编号</th><th style="text-align: center;">码位范围(十六进制)</th><th style="text-align: center;">名称简写</th><th style="text-align: center;">名称</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Plane 0</td><td style="text-align: center;">0000–FFFF</td><td style="text-align: center;">BMP</td><td style="text-align: center;">基础多语言平面(Basic MultilingualPlane)</td></tr><tr class="even"><td style="text-align: center;">Plane 1</td><td style="text-align: center;">10000–1FFFF</td><td style="text-align: center;">SMP</td><td style="text-align: center;">补充多语言平面(SupplementaryMultilingual Plane)</td></tr><tr class="odd"><td style="text-align: center;">Plane 2</td><td style="text-align: center;">20000–2FFFF</td><td style="text-align: center;">SIP</td><td style="text-align: center;">补充表意语言平面(SupplementaryIdeographic Plane)</td></tr><tr class="even"><td style="text-align: center;">Plane 3</td><td style="text-align: center;">30000–3FFFF</td><td style="text-align: center;">TIP</td><td style="text-align: center;">第三表意语言平面(Tertiary IdeographicPlane)</td></tr><tr class="odd"><td style="text-align: center;">Planes 4–13</td><td style="text-align: center;">40000–DFFFF</td><td style="text-align: center;">- (未分配)</td><td style="text-align: center;">- (未分配)</td></tr><tr class="even"><td style="text-align: center;">Plane 14</td><td style="text-align: center;">E0000–EFFFF</td><td style="text-align: center;">SSP</td><td style="text-align: center;">补充特殊用途平面(SupplementarySpecial-purpose Plane)</td></tr><tr class="odd"><td style="text-align: center;">Planes 15–16</td><td style="text-align: center;">F0000–10FFFF</td><td style="text-align: center;">SPUA-A/B</td><td style="text-align: center;">补充私有使用区平面(Supplementary PrivateUse Area planes)</td></tr></tbody></table><p>BMP为基础平面，目前收录了全球范围内大部分的字符。剩余的16个平面均为补充平面，用于进行新的字符的补充。其中私有平面，用于给个人做编码扩展，Unicode不指定字符编码。比如我编写了一个英雄联盟相关的程序，然后定义某一个字符代表一种游戏里的操作，就可以使用私有平面。</p><p>Unicode中还有一个概念：对于逻辑上属于一类的字符，称之为块(block)。例如:</p><ul><li><code>C0 Controls and Basic Latin</code>块，<code>\x0000</code>-<code>\x007F</code>，就是从ASCII继承来的前128个字符。</li><li><code>CJK Unified Ideographs</code>块，<code>\x4E00</code>-<code>\x9FFC</code>，包含大部分的中日韩文字，</li><li><code>Halfwidth and Fullwidth Forms</code>，<code>\xFF00</code>-<code>\xFFEF</code>，用于英文字母/数字/日文/个别符号等一些字符的全角-半角相互转换。</li><li><code>Miscellaneous Symbols and Pictographs</code>，<code>\x1F300</code>-<code>\x1F5FF</code>，<code>Supplemental Symbols and Pictographs</code>，<code>\1F900</code>-<code>\1F9FF</code>，包含大部分emoji表情</li></ul><p>另外还有一个比较重要的块<code>General Punctuation</code>，码位在<code>[2000,206F]</code>，包含一些符号以及一些特殊的分隔符、连接符、空格符等，这些符号不一定是可显字符，而是告诉解释器该如何操作当前字符。对于所有块，<span class="exturl" data-url="aHR0cHM6Ly91bmljb2RlLm9yZy9jaGFydHMvbmFtZXNsaXN0Lw==">可通过该链接查阅<i class="fa fa-external-link-alt"></i></span>。</p><h2 id="半角全角">半角/全角</h2><p>对于全角字符，在展示上占用的宽度是半角字符的两倍。每个字符都在Unicode标准里定义了是全角还是半角，对于不需要精确计算的简单业务场景，也可以简单的认为码位大于128的都是全角字符。</p><p>半角和全角，对应英文为halfwidth，fullwidth。半角全角对应的是UI显示的概念，对于定宽的字体，全角字符占用的宽度是半角字符的两倍。Unicode中每个字符都有一个<code>East_Asian_Width</code>属性，用于指示当前是全角字符还是半角字符，<span class="exturl" data-url="aHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjQ0L3RyNDQtMjYuaHRtbCNWYWxpZGF0aW9uX29mX0VudW1lcmF0ZWQ=">具有以下值<i class="fa fa-external-link-alt"></i></span>：</p><ul><li>A， Ambiguous，根据上下文决定</li><li>F， Fullwidth，全角</li><li>H， Halfwidth，半角</li><li>N， Neutral，中立，作为半角</li><li>Na， Narrow，半角</li><li>W， Wide，全角</li></ul><p>在<span class="exturl" data-url="aHR0cHM6Ly93d3cudW5pY29kZS5vcmcvUHVibGljL1VDRC9sYXRlc3QvdWNkL0Vhc3RBc2lhbldpZHRoLnR4dA==">EastAsianWidth.txt文件<i class="fa fa-external-link-alt"></i></span>中列举了已显示声明<code>East_Asian_Width</code>属性的字符。对于不在该文件内的字符，符合下列规则的为<code>W</code>(全角)：</p><ul><li>the CJK Unified Ideographs Extension A block， 对应区间：<code>\x3400</code>..<code>\x4DBF</code></li><li>the CJK Unified Ideographs block， 对应区间：<code>\x4E00</code>..<code>\x9FFF</code></li><li>the CJK Compatibility Ideographs block， 对应区间：<code>\xF900</code>..<code>\xFAFF</code></li><li>the Supplementary Ideographic Plane， 对应区间：<code>\x20000</code>..<code>\x2FFFF</code></li><li>the Tertiary Ideographic Plane， 对应区间：<code>\x30000</code>..<code>\x3FFFF</code></li></ul><p>其余未列出的，默认为<code>N</code>(半角)。</p><p>在一些编码集中，有的字符既有全角形式也有半角形式，Unicode为了实现与这些编码集之间的无损转换，在第一平面的最后，<code>\xFF00</code>到<code>\xFFEF</code>区段，定义了用于半角全角转换的字符，如下所示：</p><ul><li><code>\xFF01</code>–<code>\xFF5E</code>为ASCII的<code>\x21</code>到<code>\x7E</code>的全角形式。其中空格没有纳入进来，因为全角空格已通过<code>\x3000</code>定义。</li><li><code>\xFF65</code>–<code>\xFF9F</code> 为半角的日语字符。</li><li><code>\xFFA0</code>–<code>\xFFDC</code> 为半角的汉语字符。</li><li><code>\xFFE0</code>–<code>\xFFEE</code>包含了一些符号，有半角有全角。</li></ul><p>对于在JS中判断字符是全角还是半角，目前下载量比较多的一个npm包：<code>is-fullwidth-code-point</code>。<code>string-width</code>依赖<code>is-fullwidth-code-point</code>计算字符长度。不过实际测试，<code>is-fullwidth-code-point</code>没有完全覆盖所有全角字符(<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9pcy1mdWxsd2lkdGgtY29kZS1wb2ludC9pc3N1ZXMvMTI=">issue<i class="fa fa-external-link-alt"></i></span>)，不过对于日常中文场景的开发够用了。</p><p>在日常开发中，对于UI展示的场景中，会比较关心字符宽度的问题。但是在涉及存储的时候，更关心的其实是存储该字符占用了几个字节。所以在涉及存储的场景下，关注点就不应该是全角/半角的概念，而是字符编码所占用的字节数。对于<code>UTF8</code>编码，码位小于等于128的使用1字节存储，大于128的会根据需要，使用双字节，三字节或四字节存储。所以多数场景下，为了简便，前后端都可以通过码位是否大于128来判断全角/半角。</p><h2 id="htmlxml实体转义">HTML/XML实体转义</h2><p>我们常说的HTML转义，实际正式应该称之为HTML实体引用。对应有两种引用方式：数字字符引用(numericcharacter reference) 和 字符实体引用(character entity reference)。</p><p>先说常见的字符实体引用，语法为：<code>&amp;name;</code>，name必须小写。例如：<code>&lt;</code>表示小于号<code>&lt;</code>。</p><p>可以进行引用的实体，称之为命名实体。命名实体有两种，一种是语法中内置的，另一种是在DTD中显示声明的：<code>&lt;!ENTITY name "value"&gt;</code>。</p><p>数字字符引用方式：</p><ul><li>十进制：<code>&amp;#nnnn;</code></li><li>十六进制：<code>&amp;#xhhhh;</code>，x必须小写。hhhh大小写可以混用。</li></ul><p>还是同样的例子，小于号<code>&lt;</code>如果使用数字字符引用的方式，为：<code>&lt;</code>。</p><h3 id="html">HTML</h3><p><span class="exturl" data-url="aHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvbmFtZWQtY2hhcmFjdGVycy5odG1sI25hbWVkLWNoYXJhY3Rlci1yZWZlcmVuY2Vz">通过该链接查看目前HTML5中支持的命名实体<i class="fa fa-external-link-alt"></i></span>。</p><h3 id="xml">XML</h3><p>XML规范中，有5个预定义的实体，如下所示，如果需要使用更多的实体转义，需要在DTD中声明。</p><table><colgroup><col style="width: 5%" /><col style="width: 5%" /><col style="width: 16%" /><col style="width: 14%" /><col style="width: 9%" /><col style="width: 47%" /></colgroup><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">字符</th><th style="text-align: center;">码位十六进制</th><th style="text-align: center;">码位十进制</th><th style="text-align: center;">标准</th><th style="text-align: center;">名称全称</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">quot</td><td style="text-align: center;">"</td><td style="text-align: center;"></td><td style="text-align: center;">34</td><td style="text-align: center;">XML 1.0</td><td style="text-align: center;">quotation mark</td></tr><tr class="even"><td style="text-align: center;">amp</td><td style="text-align: center;">&amp;</td><td style="text-align: center;"></td><td style="text-align: center;">38</td><td style="text-align: center;">XML 1.0</td><td style="text-align: center;">ampersand</td></tr><tr class="odd"><td style="text-align: center;">apos</td><td style="text-align: center;">'</td><td style="text-align: center;"></td><td style="text-align: center;">39</td><td style="text-align: center;">XML 1.0</td><td style="text-align: center;">apostrophe (1.0: apostrophe-quote)</td></tr><tr class="even"><td style="text-align: center;">lt</td><td style="text-align: center;">&lt;</td><td style="text-align: center;">003C</td><td style="text-align: center;">60</td><td style="text-align: center;">XML 1.0</td><td style="text-align: center;">less-than sign</td></tr><tr class="odd"><td style="text-align: center;">gt</td><td style="text-align: center;">&gt;</td><td style="text-align: center;">003E</td><td style="text-align: center;">62</td><td style="text-align: center;">XML 1.0</td><td style="text-align: center;">greater-than sign</td></tr></tbody></table><h2 id="unicode-encoding-forms">Unicode Encoding Forms</h2><p>Unicode字符编码格式(Unicode EncodingForms)，简写为:UTF，即：将一个Unicode字符保存为字节序列的格式规范，用于文件存储、数据传输等。Unicode标准支持3种编码格式，如下：</p><ul><li>UTF-32: 使用4字节表示一个Unicode字符。</li><li>UTF-16:变长的编码格式，码位大于<code>\xFFFF</code>的字符，使用4字节存储，小于等于<code>\xFFFF</code>的字符，使用2字节存储。</li><li>UTF-8:变长的编码格式，码位大于<code>\xFFFF</code>的字符，使用4字节存储，小于等于<code>\xFFFF</code>大于<code>\x07FF</code>的使用3字节，小于等于<code>\x07FF</code>大于<code>\x007F</code>的使用2字节，小于等于<code>\x007F</code>使用1字节。</li></ul><p>Unicode标准支持3种编码格式，<code>UTF32</code>/<code>UTF16</code>/<code>UTF8</code>，用于映射码位为<code>\x0000</code>到<code>\xD7FF</code> 和<code>\xE000</code>到<code>\x10FFFF</code>的字符，即除去高位代理和低位代理的所有字符。至于什么是高位代理和低位代理后面会讲到。</p><h3 id="utf32">UTF32</h3><p>是一种定长编码格式，使用32位(4字节)表示Unicode中的一个码位。由于Unicode的码位实际只用了21位，所以多余部分前导0。例如字符小写字母a，对应码位为<code>\x61</code>，存储的字节序列为：<code>\x00000061</code>。</p><h3 id="utf16">UTF16</h3><p>变长编码格式，按平面区分，位于第一平面中的字符(<code>\x0000..\xD7FF</code>和<code>\xE000..\xFFFF</code>)，使用16位(2字节)存储，使用和码位相同的值。位于其他平面的字符(<code>\x10000..\x10FFFF</code>)，通过高位和低位代理使用32位(4字节)表示。</p><p>对于位于第一平面的值，即小于等于<code>\xFFFF</code>的值，使用2个字节就足够表示，所以直接使用两个字节表示其码位的值，如下所示：</p><table><thead><tr class="header"><th style="text-align: center;">code point</th><th style="text-align: center;">UTF16编码后实际存储的值</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">xxxx xxxx xxxx xxxx</td><td style="text-align: center;">xxxx xxxx xxxx xxxx</td></tr></tbody></table><p>位于其他平面平面的值，即大于<code>\xFFFF</code>的值，使用4个字节表示，如下所示：</p><table><colgroup><col style="width: 41%" /><col style="width: 58%" /></colgroup><thead><tr class="header"><th style="text-align: center;">code point</th><th style="text-align: center;">UTF16编码后实际存储的值(wwww = uuuuu -1)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">000u uuuu hhhh hhxx xxxx xxxx</td><td style="text-align: center;">1101 10ww wwhh hhhh 1101 11xx xxxxxxxx</td></tr></tbody></table><p>位于其他平面的值，即<code>\x10000</code>到<code>\x10FFFF</code>的值，二进制最高使用21位。将其拆分为两部分，即前11位和后10位，前11为用<code>hhhhhh hhhh</code>表示，后10位用<code>xxxxx xxxxx</code>表示。其中，前11位中，前5位是用来表示位于第几个平面，所以这里也特殊标注出来，用u表示，即前11位为：<code>uuuuuh hhhhh</code>。</p><p>由于这里前五位的有效值为<code>\x1</code>到<code>\x10</code>，所以可以减1，让有效值从0开始，则有效值变成了<code>\x00</code>到<code>\x0F</code>，即4位，减1后的值用w表示，从而前11位可以表示为：wwwwh hhhhh。</p><p>将前10位前导<code>110110</code>，后10位前导<code>110111</code>，即<code>UTF16</code>对于大于<code>\xFFFF</code>字符的表示如上述表格所示。</p><p>这里,二进制<code>1101 1000 0000 0000</code>为<code>\xD800</code>，二进制<code>1101 1100 0000 0000</code>为<code>\xDC00</code>，从而，该规则简单描述如下：</p><ul><li>假设某个字符x位于<code>\x10000</code>到<code>\x10FFFF</code>之间，将其减去<code>\x10000</code>，得到x'，x'的范围为：<code>\x00000</code>–<code>\xFFFFF</code>。</li><li>将x'分成两部分，前10位和后10位，用w1和w2表示，其范围为<code>\x0000</code>–<code>\x03FF</code>。</li><li>将w1加上<code>\xD800</code>，得到w1'，范围为：<code>\xD800</code>–<code>\xDBFF</code>.</li><li>将w2加上<code>\xDC00</code>，得到w2'，范围为：<code>\xDC00</code>–<code>\xDFFF</code>.</li></ul><p>将w1'和w'2转换为二进制，即<code>UTF16</code>下x存储的字节序列。</p><pre class="line-numbers language-none"><code class="language-none">x&#39; &#x3D; yyyyyyyyyyxxxxxxxxxx   &#x2F;&#x2F; x - 0x10000x1&#39; &#x3D; 110110yyyyyyyyyy      &#x2F;&#x2F; 0xD800 + yyyyyyyyyyx2&#39; &#x3D; 110111xxxxxxxxxx      &#x2F;&#x2F; 0xDC00 + xxxxxxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="utf8">UTF8</h3><p>变长编码格式，是直接兼容ASCII的编码格式，对于能在1字节内保存的，直接保存为1字节。否则进行类似<code>UTF16</code>高低位代理的方式，最高位使用4字节。</p><p><code>UTF8</code>中没有减1的逻辑，只是简单的增加前缀，具体规则如下:</p><table style="width:100%;"><colgroup><col style="width: 26%" /><col style="width: 30%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /></colgroup><thead><tr class="header"><th style="text-align: center;">范围</th><th style="text-align: center;">码位(二进制)</th><th style="text-align: center;">第1个字节</th><th style="text-align: center;">第2个字节</th><th style="text-align: center;">第3个字节</th><th style="text-align: center;">第4个字节</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"> .. 007F(7位)</td><td style="text-align: center;">00000000 0xxxxxxx</td><td style="text-align: center;">0xxxxxxx</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td></tr><tr class="even"><td style="text-align: center;"> .. 07FF(11位)</td><td style="text-align: center;">00000yyy yyxxxxxx</td><td style="text-align: center;">110yyyyy</td><td style="text-align: center;">10xxxxxx</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td></tr><tr class="odd"><td style="text-align: center;"> .. </td><td style="text-align: center;">zzzzyyyy yyxxxxxx</td><td style="text-align: center;">1110zzzz</td><td style="text-align: center;">10yyyyyy</td><td style="text-align: center;">10xxxxxx</td><td style="text-align: center;">-</td></tr><tr class="even"><td style="text-align: center;"> .. 10FFFF</td><td style="text-align: center;">000uuuuu zzzzyyyy yyxxxxxx</td><td style="text-align: center;">11110uuu</td><td style="text-align: center;">10uuzzzz</td><td style="text-align: center;">10yyyyyy</td><td style="text-align: center;">10xxxxxx</td></tr></tbody></table><p>在<code>UTF8</code>中，</p><ul><li>如果字节序列以<code>0</code>开头，代表当前字节本身表示了一个字符。</li><li>如果为<code>10</code>开头，则代表当前字节为多字节字符中的一个字节。</li><li>如果当前字符以<code>11</code>开头，则前面<code>1</code>的个数，代表当前字符所使用的字节数，2个<code>1</code>代表使用两个字节表示一个字符，3个<code>1</code>代表使用3个字节表示一个字符。</li></ul><h2 id="byte-order-mark">Byte order mark</h2><p>字节顺序标记(Byte ordermark)，指预定义的，放置在文本流开头的，一段特殊的字节序列，用于标记当前文本使用的哪种编码格式(<code>UTF32</code>/<code>UTF16</code>/<code>UTF8</code>)。具体规则如下：</p><table><thead><tr class="header"><th style="text-align: center;">编码格式</th><th style="text-align: center;">文本流开头的字节序列</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">UTF-8</td><td style="text-align: center;">EF BB BF</td></tr><tr class="even"><td style="text-align: center;">UTF-16 (BE)</td><td style="text-align: center;">FE FF</td></tr><tr class="odd"><td style="text-align: center;">UTF-16 (LE)</td><td style="text-align: center;">FF FE</td></tr><tr class="even"><td style="text-align: center;">UTF-32 (BE)</td><td style="text-align: center;">00 00 FE FF</td></tr><tr class="odd"><td style="text-align: center;">UTF-32 (LE)</td><td style="text-align: center;">FF FE 00 00</td></tr></tbody></table><p>例如Windows的记事本应用，将文本保存为<code>UTF8</code>格式时，会在文本内容的开头添加<code>\xEF</code>,<code>\xBB</code>,<code>\BF</code>3个字节。记事本应用在读取一个文本文件的时候，发现前三个字节为<code>\xEF</code>,<code>\xBB</code>,<code>\BF</code>，则认为接下来的字节流通过<code>UTF8</code>形式解析。</p><h3 id="endianness">endianness</h3><p>字节顺序(endianness)，这里特指当保存一个数字类型数据时，存储的字节序列的顺序。分为大端序(big-endian，简写BE)和小端序(little-endian，简写LE)。</p><p>假设当前要将一个16位的整型数字<code>\x0A0B</code>指向内存地址。</p><p>对于大端序的CPU，随着内存地址的增加，认为其存储的值的重要性是递减的，所以大端序的CPU会在100的位置上存储<code>\x0A</code>，在101的位置上存储<code>\x0B</code>。</p><p>对于小端序的CPU，随着内存地址的增加，认为其存储的值的重要性是递增的，所以小端序的CPU会在100的位置上存储<code>\x0B</code>，在101的位置上存储<code>\x0A</code>。</p><p>所以反过来，假设现在在内存中，地址100的地方存储了<code>\xAA</code>，在101的地方存储了<code>\xBB</code>，假设有一个<code>int16</code>变量指向，对于大端序CPU会认为该变量的值为<code>\xAABB</code>，对于小端序CPU会认为该变量的值为<code>\xBBAA</code>。</p><h3 id="byte-order-mark-1">Byte order mark</h3><p>因为各个系统之间的字节顺序不同，所以在传输和交换Unicode文本时，要告诉对方当前是以什么顺序保存的，从而接收方才能有效的进行解析。</p><p>字节序列标记(Byte ordermark，简写BOM)，特指<code>\xFEFF</code>字符。在文本的开头，添加<code>\xFEFF</code>字符，用于标识当前文本的字节顺序。</p><ul><li>对于<code>UTF8</code>编码格式，该字符会被保存为<code>\xEFBBBF</code></li><li>对于<code>UTF16 BE</code>编码格式，该字符会被保存为<code>\xFEFF</code></li><li>对于<code>UTF16 LE</code>编码格式，该字符会被保存为<code>\xFFFE</code></li><li>对于<code>UTF32 BE</code>编码格式，该字符会被保存为<code>\x0000FEFF</code></li><li>对于<code>UTF32 LE</code>编码格式，该字符会被保存为<code>\xFFFE0000</code></li></ul><p>所以，解析程序通过判断BOM即可确定接下来的文本所使用的编码格式以及字节顺序。在Unicode中，<code>\xFEFF</code>是专门用作BOM的，如果该字符出现在文本中间，会被当做「零宽非换行空格」(zero-widthnon-breakingspace)，其实就是跳过的意思。同样的，对于它的一个镜像字符<code>\xFFFE</code>，如果出现也会被跳过。</p><p>BOM可以省略，不是必须的，因为：</p><ol type="1"><li>在某些场景下已经预设了编码格式或字节顺序，例如W3C的HTML5规范中，如果指定charset为utf-8，则会默认按照utf-8解析，而如果文件流指定了BOM，则会优先使用BOM指定的编码格式和字节顺序。</li><li>当BOM被省略时，大部分解析器都会对文本流进行推算，推算出编码格式和字节顺序，但是这个推算并不是绝对可靠的。</li></ol><p>当使用<code>UTF8</code>格式保存文本时，Unicode标准建议，如果原文本没有BOM，则不要添加BOM。因为：</p><ol type="1"><li><code>UTF8</code>是单字节存储的，不存在字节顺序问题。</li><li>解析器会默认使用<code>UTF8</code>解析文本。</li><li>因为ASCII和<code>UTF8</code>是一一对应的，如果不添加BOM，则ASCII和Unicode可以相互兼容，如果加上了BOM，就打破了相互兼容。</li></ol><p>不过当前很多系统或平台并没有按照规范来，在解析文本的时候会要求<code>UTF8</code>要有BOM，以及在保存文本的时候会加上BOM，例如windows系统的记事本。</p><p>而对于<code>UTF16</code>和<code>UTF32</code>，要添加BOM，不然在解析的出的文本可能就是乱码，因为解析器在对字节顺序的推算上，并不能保证完全可靠。</p><h1 id="组合字符">组合字符</h1><p>Unicode有一类字符称为组合字符，它可以附加在前一个非组合字符上，从而使整体看起来像是一个字符。Unicode组合字符设计上，并没有加组合数量限制，这样使我们可以无限加这类组合字符,例如汉语拼音字母「ü」上面的两个小点，或「á」、「à」字母上面的音标。</p><p><strong>组合字符有两种</strong></p><ul><li>组合字符:将组合字符置于需要修饰的目标字符后边，使目标字符被渲染（或打印）成相应结果。</li><li>预组合字符:事先将字符组好并赋予码位。字符串中有可能同时使用组合字符和预组字符。这导致了若要比较两个unicode字符串时，需要先运行unicode字符的等价性。</li></ul><p><strong>组合字符在 Unicode统一码中存在多个区块，编码范围主要有：</strong></p><ul><li><p>组合用附加符号（<span class="exturl" data-url="aHR0cHM6Ly91bmljb2RlLm9yZy9jaGFydHMvUERGL1UwMzAwLnBkZg==">Combining DiacriticalMarks<i class="fa fa-external-link-alt"></i></span>）：区间从 <code>U+0300</code> 到 <code>U+036F</code> 共 80字。</p><p>它常与字母组合，修饰字母的读音。但其实它的定义比较宽泛，不但包括了拉丁、希腊及西里尔系文字中的变音记号，也包括那些不是变音但不占据宽度的附加标记。例如<code>&amp;#x61;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3662;&amp;#3662;&amp;#3662;&amp;#3662;&amp;#3657;&amp;#3657;&amp;#3657;&amp;#3657;</code>为 a็็็็๎๎๎๎้้้้</p></li><li><p>组合用附加符号补集（<span class="exturl" data-url="aHR0cHM6Ly91bmljb2RlLm9yZy9jaGFydHMvUERGL1UxREMwLnBkZg==">Combining DiacriticalMarks Supplement<i class="fa fa-external-link-alt"></i></span>）：区间从 <code>U+1DC0</code> 到<code>U+1DFF</code> 共 64 字。</p><p>它常与一些符号组合，用于渲染和修饰符号. 例如:<code>&amp;#x1DD0;&amp;#x1DD0;&amp;#x61;&amp;#x1DC4;&amp;#x1DC4;</code>为 ᷐᷐a᷄᷄</p></li><li><p>组合用记号（<span class="exturl" data-url="aHR0cHM6Ly91bmljb2RlLm9yZy9jaGFydHMvUERGL1UyMEQwLnBkZg==">Combining DiacriticalMarks for Symbols<i class="fa fa-external-link-alt"></i></span>）：区间从 <code>U+20D0</code> 到<code>U+20FF</code> 共 48 字。例如:<code>&amp;#x6587;&amp;#x20dd;</code> 为 文⃝</p></li><li><p>组合用半形符号（<span class="exturl" data-url="aHR0cHM6Ly91bmljb2RlLm9yZy9jaGFydHMvUERGL1VGRTIwLnBkZg==">Combining HalfMarks<i class="fa fa-external-link-alt"></i></span>）：区间从 <code>U+FE20</code> 到 <code>U+FE2F</code> 共 16字。</p><p>多个附加字符可以叠加到一个基础字符上. 例如<code>&amp;#xFE20;&amp;#xFE2D;&amp;#x61;</code> 为 ︭︠a</p></li></ul><p>组合字符也可以用于 Emoji, 例如 <code>&amp;#x270B;</code> 为✋, <code>&amp;#x270B;&amp;#x1F3FB;</code> 为 ✋🏻</p><h1 id="零宽字符">零宽字符</h1><p>零宽字符不可见，不可打印，主要作用于调整字符的显示格式.</p><p><strong>零宽字符主要有以下几类：</strong></p><ul><li>零宽度空格符 (zero-width space) U+200B : 用于较长单词的换行分隔</li><li>零宽度非断空格符 (zero width no-break space) U+FEFF :用于阻止特定位置的换行分隔</li><li>零宽度连字符 (zero-width joiner) U+200D :用于阿拉伯文与印度语系等文字中，使不会发生连字的字符间产生连字效果</li><li>零宽度断字符 (zero-width non-joiner) U+200C :用于阿拉伯文，德文，印度语系等文字中，阻止会发生连字的字符间的连字效果</li><li>左至右符 (left-to-right mark) U+200E :用于在混合文字方向的多种语言文本中（例：混合左至右书写的英语与右至左书写的希伯来语），规定排版文字书写方向为左至右</li><li>右至左符 (right-to-left mark) U+200F :用于在混合文字方向的多种语言文本中，规定排版文字书写方向为右至左</li></ul><p><strong>零宽字符可以用于:</strong></p><ul><li>数据防爬:将零宽度字符插入文本中，干扰关键字匹配。爬虫得到的带有零宽度字符的数据会影响他们的分析，但不会影响用户的阅读数据。</li><li>信息传递:将自定义组合的零宽度字符插入文本中，用户复制后会携带不可见信息，达到传递作用。</li><li>传递隐密信息:利用零宽度字符不可见的特性，我们可以用零宽度字符在任何未对零宽度字符做过滤的网页内插入不可见的隐形文本。下面是一个简单的利用零宽度字符对文本进行加密/解密的</li><li>隐形水印:通过零宽度字符我们可以对内部文件添加隐形水印。在浏览者登录页面对内部文件进行浏览时，我们可以在文件的各处插入使用零宽度字符加密的浏览者信息，如果浏览者又恰好使用复制粘贴的方式在公共媒体上匿名分享了这个文件，我们就能通过嵌入在文件中的隐形水印轻松找到分享者了。</li><li>加密信息分享:通过零宽度字符我们可以在任何网站上分享任何信息。敏感信息的审核与过滤在当今的互联网社区中扮演着至关重要的角色，但是零宽度字符却能如入无人之境一般轻松地穿透这两层信息分享的屏障。对比明文哈希表加密信息的方式，零宽度字符加密在网上的隐蔽性可以说是达到了一个新的高度。仅仅需要一个简单的识别/解密零宽度字符的浏览器插件，任何网站都可以成为信息分享的游乐场。</li><li>逃脱敏感词过滤:通过零宽度字符我们可以轻松逃脱敏感词过滤。敏感词自动过滤是维持互联网社区秩序的一项重要工具，只需倒入敏感词库和匹配相应敏感词，即可将大量的非法词汇拒之门外。使用谐音与拼音来逃脱敏感词过滤会让语言传递信息的效率降低，而使用零宽度字符可以在逃脱敏感词过滤的同时将词义原封不动地传达给接受者，大大提高信息传播者与接受者之间交流的效率。<strong>开发时只过滤<code>\u200b</code></strong> 就够了</li></ul><h2 id="emoji-中的零宽字符">Emoji 中的零宽字符</h2><p>零宽字符可以用于 Emoji 的组合, 例如</p><ul><li><p>在构建 👨🏻‍🦳 时</p><ul><li>👨🏻‍🦳 为<code>&amp;#x1F468;&amp;#x1F3FB;&amp;#x200D;&amp;#x1F9B3;</code></li><li>👨🏻‍ 为 <code>&amp;#x1F468;&amp;#x1F3FB;&amp;#x200D;</code></li><li>👨🏻 为 <code>&amp;#x1F468;&amp;#x1F3FB;</code></li><li>👨 为 <code>&amp;#x1F468;</code></li></ul><p>其中</p><ul><li>👨 - U+1F468 - 基础字符</li><li>🏻 - U+1F3FB - 组合字符，表示肤色</li><li><ul><li>U+200D - <strong>零宽度连字符</strong>，表示上下相连</li></ul></li><li>🦳 - U+1F9B3 - 基础字符，表示发型</li></ul><p>零字宽字符连接了发型与颜色</p></li><li><p>👩‍❤‍👨 为<code>&amp;#x1F469;&amp;#x200D;&amp;#x2764;&amp;#x200D;&amp;#x1F468;</code>,其中</p><ul><li>👩 - U+1F469 - 基础字符</li><li><ul><li>U+200D - 零宽度连字符，表示上下相连</li></ul></li><li>❤ - U+2764 - 基础字符</li><li><ul><li>U+200D - 零宽度连字符，表示上下相连</li></ul></li><li>👨 - U+1F468 - 基础字符</li></ul></li><li><p>👩‍👩‍👦‍👦 为<code>&amp;#x1F469;&amp;#x200D;&amp;#x1F469;&amp;#x200D;&amp;#x1F466;&amp;#x200D;&amp;#x1F466;</code>,其中</p><ul><li>👩 - U+1F469 - 基础字符</li><li><ul><li>U+200D - 零宽度连字符，表示上下相连</li></ul></li><li>👩 - U+1F469 - 基础字符</li><li><ul><li>U+200D - 零宽度连字符，表示上下相连</li></ul></li><li>👦 - U+1F466 - 基础字符</li><li><ul><li>U+200D - 零宽度连字符，表示上下相连</li></ul></li><li>👦 - U+1F466 - 基础字符</li></ul></li></ul>]]></content>
    
    
    <summary type="html">闲来无事仔细了解一下 Unicode 编码规则, 并尝试实现一些 &amp;#x6709;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3662;&amp;#3662;&amp;#3662;&amp;#3662;&amp;#3657;&amp;#3657;&amp;#3657;&amp;#3657;&amp;#x8da3;&amp;#3657;&amp;#3657;&amp;#3657;&amp;#3657;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3662;&amp;#3662;&amp;#3662;&amp;#3662;的&amp;#x7279;&amp;#x20dd; &amp;#x0333;&amp;#x0333;&amp;#x308;&amp;#x303;&amp;#x6548;&amp;#x200b;&amp;#x0333;&amp;#x0333;&amp;#x308;&amp;#x303;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.liukairui.me/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    <category term="编码规范" scheme="https://blog.liukairui.me/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    
    <category term="编码规范" scheme="https://blog.liukairui.me/tags/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    <category term="Unicode" scheme="https://blog.liukairui.me/tags/Unicode/"/>
    
  </entry>
  
  <entry>
    <title>WebRTC基础</title>
    <link href="https://blog.liukairui.me/article/WebRTC%E5%9F%BA%E7%A1%80/"/>
    <id>https://blog.liukairui.me/article/WebRTC%E5%9F%BA%E7%A1%80/</id>
    <published>2022-12-03T16:00:01.000Z</published>
    <updated>2022-12-03T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webrtc-是什么">WebRTC 是什么</h2><p><strong>WebRTC 是什么</strong></p><ul><li>WebRTC(Web Real-Time Communication)是一套旨在实现互联网浏览器之间实时通讯的免费开放API.</li><li>WebRTC 主要包含了两种不同的技术: 媒体捕获设备和点对点连接</li></ul><p><strong>WebRTC 不是什么</strong></p><ul><li><p>WebRTC 用于实现实时数据双向通讯,但不适用于直播等大规模单向数据分发.</p><p>由于需要做到双向数据传播, 所有用户需要连接到同一个服务器,即使像声网这样的企业级 SDK 也只能做到 32 人实时连麦,百万同时在线(单向数据分发).</p><p>直播(RTMP, Real Time Messaging Protocol)只需要做到单向数据传输,我们可以部署大量服务器与 CDN 实现大规模数据分发.</p></li><li><p>WebRTC 不是 Web 应用专有的, 其可以运行在浏览器, 桌面应用,移动设备与 IoT 设备上</p></li></ul><p><strong>WebRTC 组成</strong></p><figure><img src="./img/1-1.png" alt="WebRTC Architecture" /><figcaption aria-hidden="true">WebRTC Architecture</figcaption></figure><p>WebRTC 是一套 API, 可以根据 API 的使用对象分为</p><ul><li>Web 开发者需要使用的: W3C 定义的 WebAPI</li><li>浏览器厂商需要实现的: WebRTC 的 C++ 层, 实现了 W3C 定义的WebAPI</li><li>浏览器厂商可以自定义重写的: 音视频捕获播放与网络IO</li><li>WebRTC 实现核心模块<ul><li>会话管理: 用来管理音视频, 非音视频数据传输, 处理相关逻辑.</li><li>音频引擎: 编解码功能, 音频缓冲 buffer, 回音消除.</li><li>视频引擎: 视频编解码器, 视频缓冲 buffer, 图像增强.</li><li>数据传输: SRTP传输协议, 多流复用, P2P.</li></ul></li></ul><p>## WebRTC 通话原理</p><ul><li><p>媒体协商: 在通信前需要先使用会话描述协议(SDP, session descriptionprotocol)通报通信终端支持的编解码格式,并确定出一个共有的编解码格式用于通信.</p></li><li><p>网络协商: 在通信前要找到一条可以相互通讯的链路.将网络协商所需的信息称为 candidate</p><ul><li><p>在没有 NAT 时, 可以直接通过公网 IP 实现 P2P 连接</p></li><li><p>在存在 NAT 时, 可以通过端口映射连接则使用端口映射实现 P2P.</p><p>由于通信终端不知道自己在 NAT 转换后映射的端口, 通信终端将请求 STUN服务器, STUN 返回该终端的外网 IP 与端口.</p></li><li><p>若端口映射(打洞)失败, 中断将连接到 TURN 服务器, TURN服务器作为中继服务器负责之后通信</p></li></ul><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvdHVybi9jb3R1cm4=">coturn<i class="fa fa-external-link-alt"></i></span> 是一个开源的STUN 与 TURN 服务器实现</p></li><li><p>信令服务器: 一套包含媒体协商与网络协商的服务器实现,在实现两种协商的基础上还应该实现其他管理功能(如: 房间管理, 用户管理,用户校验...). <strong>信令服务器并非需要实现一套固定的标准 /API</strong>, 只需要按需开发即可. 以一对一通信为例</p><p><img src="./img/1-2.png" /></p><p><strong>连接</strong></p><ul><li>连接双方与信令服务器建立连接(不指定连接协议),先连接设备作为房主</li><li>双方获取自己的媒体流</li><li>双方加入房间, 先加入者为房主, 后进入者加入后信令服务器通知房主,同时将房主信息返回给加入者</li></ul><p><strong>媒体协商</strong></p><ul><li>房主创建 RTCPeerConnection, 绑定 onXX 回调</li><li>房主创建 Track (相当于本地媒体流的句柄以供对方将来使用)</li><li>房主创建 offer, 生成浏览器的 SDP</li><li>房主发送 SDP(offer) 到信令服务器, 信令服务器将 offer 转发给对方</li><li>对方创建 RTCPeerConnection, 绑定 onXX 回调</li><li>对方创建 Track, 通过对方 track 获取房主码流句柄</li><li>对方记录房主的 SDP, 生成自己的 answer, 生成自己的 SDP</li><li>对方发送 answer 到信令服务器, 信令服务器将 answer 转发给房主</li><li>房主记录对方的 SDP</li></ul><p><strong>网络协商</strong></p><ul><li>房主与对方同时发起网络协商, 发起 ICE 请求到 coturn 服务器, coturn服务器返回 Candidate.</li><li>双方将 Candidate 通过信令服务器发送给另一方</li><li>另一方记录 Candidate 并尝试发起连接</li><li>由于打洞地址可能变化, 所以某一方可能会收到多个 Candidate,其应该逐个尝试直到成功连接</li></ul><p><strong>离开房间</strong></p><ul><li>离开者发起离开房间命令, 信令服务器删除用户并通知对方</li></ul><p>从这个过程中我们也可以看到, WebRTC 只是提供了一套 API并没有提供实时通信的详细实现,详细通信逻辑还需要信令服务器设计者实现</p></li></ul><h2 id="webrtc-相关协议">WebRTC 相关协议</h2><h3 id="rtp-协议">RTP 协议</h3><p>我们一般不直接将音视频数据流通过 UDP 传输,这是因为音视频数据中一帧数据量远大于 UDP 的MTU, 在发送时需要拆成多个包.若直接通过 UDP 传输, 我们需要手动维护 UDP 包的顺序并重建帧. RTP协议实现了音视频传输对帧的维护.</p><p>RTP(Real-time <strong>Transport</strong> Protocol)实时<strong>传输</strong>协议为端到端的实时传输提供时间信息和流同步,RTP并不保证服务质量, 服务质量由RTCP来提供.</p><p>RTP协议格式:</p><pre class="line-numbers language-none"><code class="language-none"> 0                   1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|V&#x3D;2|P|X|  CC   |M|     PT      |       sequence number         |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                           timestamp                           |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|           synchronization source (SSRC) identifier            |+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+|            contributing source (CSRC) identifiers             ||                             ....                              |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol type="1"><li><p>V: RTP协议的版本号, 占2位, 当前协议版本号为2.</p></li><li><p>P: 填充标志, 占1位, 如果P=1,则在该报文的尾部填充一个或多个额外的八位组,它们不是有效载荷的一部分.</p></li><li><p>X: 扩展标志, 占1位, 如果X=1,则在RTP报头后跟有一个扩展报头.</p></li><li><p>CC: CSRC 计数器, 占4位, 指示 CSRC 标识符的个数.</p></li><li><p>M: 标记, 占1位, 不同的有效载荷有不同的含义, 对于视频,标记一帧的结束；对于音频, 标记会话的开始.</p></li><li><p>PT: 有效载荷类型, 占7位, 用于说明RTP报文中有效载荷的类型,如GSM音频、JPEM图像等,在流媒体中大部分是用来区分音频流和视频流的,这样便于客户端进行解析. 可以通过payload值知道音频的类型, 视频的类型,有些公司可能会使用PT值扩展自己的类型；譬如附加类型(字幕, 贴的小图片,画的框框)</p></li><li><p>序列号: 占16位, 用于标识发送者所发送的RTP报文的序列号,每发送一个报文, 序列号增1. 这个字段当下层的承载协议用UDP的时候,网络状况不好的时候可以用来检查丢包.同时出现网络抖动的情况可以用来对数据进行重新排序,在helix服务器中这个字段是从0开始的,同时音频包和视频包的sequence是分别记数的.</p></li><li><p>时戳(Timestamp): 占32位,时戳反映了该RTP报文的第一个八位组的采样时刻.接收者使用时戳来计算延迟和延迟抖动, 并进行同步控制.</p></li><li><p>同步信源(SSRC)标识符: 占32位, 用于标识同步信源.该标识符是随机选择的,参加同一视频会议的两个同步信源不能有相同的SSRC.</p></li><li><p>特约信源(CSRC)标识符: 每个CSRC标识符占32位, 可以有0～15个.每个CSRC标识了包含在该RTP报文有效载荷中的所有特约信源.</p><p>如果扩展标志被置位则说明紧跟在报头后面是一个头扩展, 其格式如下:</p><pre class="line-numbers language-none"><code class="language-none">0                   1                   2                   30 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|      defined by profile       |           length              |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                        header extension                       ||                             ....                              |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="rtcp-协议">RTCP 协议</h3><p>RTCP(RTP <strong>Control</strong>Protocol)实时传输<strong>控制</strong>协议, 同RTP一起用于数据传输的监视,控制功能.</p><p>当应用程序启动一个 RTP 会话时将同时占用两个端口, 分别供 RTP 和 RTCP使用. RTP 本身并不能为按序传输数据包提供可靠的保证,也不提供流量控制和拥塞控制, 这些都由 RTCP 来负责完成. 通常 RTCP 会采用与RTP 相同的分发机制, 向会话中的所有成员周期性地发送控制信息,应用程序通过接收这些数据, 从中获取会话参与者的相关资料,以及网络状况、分组丢失概率等反馈信息,从而能够对服务质量进行控制或者对网络状况进行诊断.</p><p>RTCP协议的功能是通过不同的RTCP数据报来实现的, 主要有如下几种类型:</p><ol type="1"><li><strong>SR</strong>: 发送端报告,所谓发送端是指发出RTP数据报的应用程序或者终端, 发送端同时也可以是接收端.(SERVER定时间发送给CLIENT).</li><li><strong>RR</strong>: 接收端报告,所谓接收端是指仅接收但不发送RTP数据报的应用程序.</li><li>SDES: 源描述, 主要功能是作为会话成员有关标识信息的载体,如用户名、邮件地址、电话号码等,此外还具有向会话成员传达会话控制信息的功能.</li><li>BYE: 通知离开, 主要功能是指示某一个或者几个源不再有效,即通知会话中的其他成员自己将退出会话.</li><li>APP: 由应用程序自己定义, 解决了RTCP的扩展性问题,并且为协议的实现者提供了很大的灵活性.</li></ol><p>RTCP 协议通过 RR 和 SR 报文交换来获取自己的网络质量, 结构为</p><pre class="line-numbers language-none"><code class="language-none">        0                   1                   2                   3        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+header |V&#x3D;2|P|    RC   |   PT&#x3D;SR&#x3D;200   |             length            |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |                         SSRC of sender                        |       +&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+sender |              NTP timestamp, most significant word             |info   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |             NTP timestamp, least significant word             |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |                         RTP timestamp                         |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |                     sender&#39;s packet count                     |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |                      sender&#39;s octet count                     |       +&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+report |                 SSRC_1 (SSRC of first source)                 |block  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  1    | fraction lost |       cumulative number of packets lost       |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |           extended highest sequence number received           |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |                      interarrival jitter                      |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |                         last SR (LSR)                         |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |                   delay since last SR (DLSR)                  |       +&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+report |                 SSRC_2 (SSRC of second source)                |block  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  2    :                               ...                             :       +&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+       |                  profile-specific extensions                  |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SR 包使用了</p><ul><li>版本(V): 同RTP包头域.</li><li>填充(P): 同RTP包头域.</li><li>接收报告计数器(RC): 5比特, 该SR包中的接收报告块的数目,可以为零.</li><li>包类型(PT): 8比特, SR包是200.</li><li>长度域(Length): 16比特,其中存放的是该SR包以32比特为单位的总长度减一.</li><li>同步源(SSRC of sender): SR包发送者的同步源标识符.与对应RTP包中的SSRC一样.</li><li>NTP Timestamp(Network time protocol) SR包发送时的绝对时间值.NTP的作用是同步不同的RTP媒体流.</li><li>RTP Timestamp: 与NTP时间戳对应,与RTP数据包中的RTP时间戳具有相同的单位和随机初始值.</li><li>Sender’s packet count: 从开始发送包到产生这个SR包这段时间里,发送者发送的RTP数据包的总数. SSRC改变时, 这个域清零.</li><li>Sender`s octet count: 从开始发送包到产生这个SR包这段时间里,发送者发送的净荷数据的总字节数(不包括头部和填充) . 发送者改变其SSRC时,这个域要清零.</li><li>同步源n的SSRC标识符:该报告块中包含的是从该源接收到的包的统计信息.</li><li>丢失率(Fraction Lost):表明从上一个SR或RR包发出以来从同步源n(SSRC_n)来的RTP数据包的丢失率.</li><li>累计的包丢失数目:从开始接收到SSRC_n的包到发送SR,从SSRC_n传过来的RTP数据包的丢失总数.</li><li>收到的扩展最大序列号: 从SSRC_n收到的RTP数据包中最大的序列号,</li><li>接收抖动(Interarrival jitter): RTP数据包接受时间的统计方差估计</li><li>上次SR时间戳(Last SR,LSR):取最近从SSRC_n收到的SR包中的NTP时间戳的中间32比特. 如果目前还没收到SR包,则该域清零.</li><li>上次SR以来的延时(Delay since last SR,DLSR):上次从SSRC_n收到SR包到发送本报告的延时.</li></ul><h3 id="标准-sdp-协议">标准 SDP 协议</h3><p>SDP 描述了</p><ol type="1"><li>音频编解码器是什么,这些编解码器设定的参数是什么</li><li>使用的传输协议是什么</li><li>以及包括的音视频媒体是什么</li></ol><p>标准 SDP 规范主要包括 <strong>SDP 描述格式和 SDP 结构</strong>, 而SDP 结构由<strong>会话描述和媒体信息描述</strong>两个部分组成.其中,媒体信息描述包括了:</p><ul><li>媒体类型</li><li>媒体格式</li><li>传输协议</li><li>传输的 IP 和端口</li></ul><p><strong>SDP 由一个会话级描述(session leveldescription)和多个媒体级描述(media level description)组成</strong></p><ul><li>会话级(session level)的作用域是整个会话,其位置是从 v=行开始到第一个媒体描述为止。<ul><li><code>v=</code> (protocol version): SDP 的版本号</li><li><code>o=&lt;username&gt; &lt;session id&gt; &lt;version&gt; &lt;network type&gt; &lt;address type&gt; &lt;address&gt;</code>表示的是对会话发起者的描述, 格式为<ul><li><code>&lt;username&gt;</code>:用户名,当不关心用户名时,可以用 “-”代替</li><li><code>&lt;session id&gt;</code>:数字串,在整个会话中,必须是唯一的,建议使用NTP 时间戳</li><li><code>&lt;version&gt;</code>:版本号,每次会话数据修改后,该版本值会递增</li><li><code>&lt;network type&gt;</code>:网络类型,一般为“IN”,表示“internet”</li><li><code>&lt;address type&gt;</code>: 地址类型,一般为 IP4</li><li><code>&lt;address&gt;</code>:IP 地址</li></ul></li><li><code>s=&lt;session name&gt;</code>, 表示一个会话, 在整个 SDP中有且只有一个会话</li><li><code>t=&lt;start time&gt; &lt;stop time&gt;</code> (time thesession is active)。描述了会话的开始时间和结束时间。其中,<code>&lt;start time&gt;</code> 和 <code>&lt;stop time&gt;</code> 为 NTP时间,单位是秒;当 <code>&lt;start time&gt;</code> 和<code>&lt;stop time&gt;</code> 均为零时,表示持久会话。</li></ul></li><li>媒体级(media level)是对单个的媒体流进行描述,其位置是从 m=行开始到下一个媒体描述(即下一个 m=)为止。<ul><li><code>m=&lt;media&gt; &lt;port&gt; &lt;transport&gt; &lt;fmt list&gt;</code>(media name and transport address): 表示一个会话<ul><li><code>&lt;media&gt;</code>: 媒体类型,比如 audio/video 等;</li><li><code>&lt;port&gt;</code>: 端口;</li><li><code>&lt;transport&gt;</code>: 传输协议,有两种——RTP/AVP 和UDP;</li><li><code>&lt;fmt list&gt;</code>: 媒体格式,即数据负载类型 (PayloadType) 列表。</li></ul></li><li><code>a=&lt;TYPE&gt;[:&lt;VALUES&gt;]</code>(zero or more mediaattribute lines): 用于进一步描述媒体信息, 常见的有 <code>rtpmap</code>与 <code>fmtp</code><ul><li><code>a=rtpmap:&lt;payload type&gt; &lt;encoding name&gt;/&lt;clock rate&gt; [/&lt;encodingparameters&gt;]</code>:RTP 参数映射表<ul><li><code>&lt;payload type&gt;</code> : 负载类型,对应 RTP包中的音视频数据负载类型。</li><li><code>&lt;encoding name&gt;</code>: 编码器名称,如 VP8、VP9、OPUS等。</li><li><code>&lt;sample rate&gt;</code>: 采样率,如音频的采样率频率32000、48000 等。</li><li><code>&lt;encodingparameters&gt;</code>:编码参数,如音频是否是双声道,默认为单声道。</li></ul></li><li><code>a=fmtp:&lt;payload type&gt; &lt;format specific parameters&gt;</code>:表示格式参数<ul><li><code>&lt;payload type&gt;</code>: 负载类型,同样对应 RTP包中的音视频数据负载类型</li><li><code>&lt;format specific parameters&gt;</code>: 指具体参数。</li></ul></li></ul></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 会话级v&#x3D;0o&#x3D;‐ 7017624586836067756 2 IN IP4 127.0.0.1s&#x3D;‐t&#x3D;0 0&#x2F;&#x2F; 媒体级: 一个音频,一个视频。m&#x3D;audio 9 UDP&#x2F;TLS&#x2F;RTP&#x2F;SAVPF 111 103 104 9 0 8 106 105 13 126...m&#x3D;video 9 UDP&#x2F;TLS&#x2F;RTP&#x2F;SAVPF 96 97 98 99 100 101 102 122 127 121 125 107 108 109 124 120 123119 114 115 116...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="webrtc-的-sdp">WebRTC 的 SDP</h3><p>WebRTC 对 SDP 标准做了调整, 可以将 SDP 按功能分成几大块:</p><ul><li>Session Metadata,会话元数据</li><li>Network Description,网络描述</li><li>Stream Description,流描述</li><li>Security Descriptions,安全描述</li><li>Qos Grouping Descriptions, 服务质量描述</li></ul><pre class="line-numbers language-none"><code class="language-none">                                                +---------------------+                                                |        v&#x3D;           |                                                +---------------------+                +---------------------+         +---------------------+        &#x3D;&#x3D;&#x3D;&#x3D;    |   Session Metadata  |  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  |        o&#x3D;           |        |       +---------------------+         +----------------------        |                                       +---------------------+        |                                       |        t&#x3D;           |        |                                       +---------------------+        |        |        |                                       +---------------------+        |                                       |        c&#x3D;           |        |                                       +---------------------+        |       +---------------------+        &#x3D;&#x3D;&#x3D;&#x3D;    | Network Description |   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;        |       +---------------------+        |                                       +---------------------+        |                                       |    a&#x3D;candidate      |        |                                       +---------------------+        |        |        |                                       +---------------------+        |                                       |        m&#x3D;           |        |                                       +---------------------+        |        +---------------------+        +---------------------+        &#x3D;&#x3D;&#x3D;&#x3D;     | Stream Description  |  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; |      a&#x3D;rtpmap       |        |        +---------------------+        +----------------------        |                                       +---------------------+        |                                       |      a&#x3D;fmtp         |        |                                       +---------------------+        |                                       +---------------------+        |                                       |      a&#x3D;sendrecv..   |        |                                       +---------------------++---------------+|    SEMANTIC   || COMPONENTS OF ||     SDP       |+---------------+        |                                       +---------------------+        |                                       |      a&#x3D;crypto       |        |                                       +---------------------+        |         +---------------------+       +---------------------+        &#x3D;&#x3D;&#x3D;&#x3D;      |Security Descriptions|  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|      a&#x3D;ice-frag     |        |         +---------------------+       +----------------------        |                                       +---------------------+        |                                       |      a&#x3D;ice-pwd      |        |                                       +---------------------+        |                                       +---------------------+        |                                       |     a&#x3D;fingerprint   |        |                                       +---------------------+        |        |        |        |                                       +---------------------+        |                                       |      a&#x3D;rtcp-fb      |        |                                       +---------------------+        |         +---------------------+       +---------------------+        &#x3D;&#x3D;&#x3D;&#x3D;      |   Qos,Grouping      |       |                     |                  |   Descriptions      |  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|       a&#x3D;group       |                  +---------------------+       +----------------------                                                +---------------------+                                                |       a&#x3D;rtcpmux     |                                                +---------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安全描述与服务质量描述是新增的属性描述, 例如</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 安全描述 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F; 进入连通性检测的用户名a&#x3D;ice‐ufrag:1uEe &#x2F;&#x2F; 密码,这两个是用于连通性检测的凭证a&#x3D;ice‐pwd:RQe+y7SOLQJET+duNJ+Qbk7z&#x2F;&#x2F;DTLS 指纹认证,以识别是否是合法用户a&#x3D;fingerprint:sha‐256 35:6F:40:3D:F6:9B:BA:5B:F6:2A:7F:65:59:60:6D:6B:F9:C7:AE:46:44:B4:E4:73:F8:60:67:4D:58:E2:EB:9C ...&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 服务质量描述 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;a&#x3D;rtcp‐muxa&#x3D;rtcp‐rsizea&#x3D;rtpmap:96 VP8&#x2F;90000a&#x3D;rtcp‐fb:96 goog‐remb &#x2F;&#x2F; 使用 google 的带宽评估算法a&#x3D;rtcp‐fb:96 transport‐cc &#x2F;&#x2F; 启动防拥塞a&#x3D;rtcp‐fb:96 ccm fir &#x2F;&#x2F; 解码出错,请求关键帧a&#x3D;rtcp‐fb:96 nack&#x2F;&#x2F; 启用丢包重传功能a&#x3D;rtcp‐fb:96 nack pli &#x2F;&#x2F; 与 fir 类似<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="candidate">Candidate</h3><p>在网络协商中 Candidate(候选人) 用于传递网络信息, Candidate 并不唯一(例如: 一个 peer 可能因为有多张网卡对外提供多个 Candidate). 面对多个Candidate 其他 peer 会优先尝试本地地址(内网地址), 再尝试映射地址,最后尝试使用中继服务连接.</p><p>在进行 P2P 连接时, WebRTC 将尝试 <strong>NAT打洞(P2P穿越)</strong>在打洞前, WebRTC 会先判断 NAT 类型, 然后再打洞. NAT 类型有</p><ul><li><p>Full Cone NAT（完全锥型NAT）</p><p>所有从同一个私网IP地址和端口（IP1:Port1）发送过来的请求都会被映射成同一个公网IP地址和端口（IP:Port）.并且, 任何外部主机通过向映射的公网IP地址和端口发送报文,都可以实现和内部主机进行通信.</p><p>这是一种比较宽松的策略,只要建立了私网IP地址和端口与公网IP地址和端口的映射关系,所有的Internet上的主机都可以访问该NAT之后的主机.</p></li><li><p>Restricted Cone NAT（限制锥型NAT）</p><p>所有从同一个私网IP地址和端口（IP1:Port1）发送过来的请求都会被映射成同一个公网IP和端口号（IP:Port）.与完全锥型NAT不同的是, 当且仅当内部主机之前已经向公网主机发送过报文,此时公网主机才能向私网主机发送报文.</p></li><li><p>Port Restricted Cone NAT（端口限制锥型NAT）</p><p>与限制锥型NAT很相似, 只不过它包括端口号. 也就是说,一台公网主机（IP2:Port2）想给私网主机发送报文,必须是这台私网主机先前已经给这个IP地址和端口发送过报文.</p></li><li><p>Symmetric NAT（对称NAT）</p><p>所有从同一个私网IP地址和端口发送到一个特定的目的IP地址和端口的请求,都会被映射到同一个IP地址和端口.如果同一台主机使用相同的源地址和端口号发送报文, 但是发往不同的目的地,NAT将会使用不同的映射. 此外,只有收到数据的公网主机才可以反过来向私网主机发送报文.</p><p>这和端口限制锥型NAT不同,端口限制锥型NAT是所有请求映射到相同的公网IP地址和端口,而对称NAT是不同的请求有不同的映射.</p></li></ul><h2 id="调用本地媒体设备">调用本地媒体设备</h2><p>可以通过<code>navigator.mediaDevices.getUserMedia(constraints)</code>获取本地媒体信息 (<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL01lZGlhRGV2aWNlcy9nZXRVc2VyTWVkaWE=">MDN<i class="fa fa-external-link-alt"></i></span>),其中</p><ul><li><p><code>constraints = &#123; audio: true, video: true &#125;</code>,分别控制是否获取视频与音频.</p></li><li><p>更多用法</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">constraints <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">video</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">1280</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">720</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>constraints <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">video</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token literal-property property">ideal</span><span class="token operator">:</span> <span class="token number">1280</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">1920</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">776</span><span class="token punctuation">,</span> <span class="token literal-property property">ideal</span><span class="token operator">:</span> <span class="token number">720</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">1080</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>constraints <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">video</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">ideal</span><span class="token operator">:</span> <span class="token number">1280</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 理想值</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">ideal</span><span class="token operator">:</span> <span class="token number">720</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>可以指定视频大小, 但是对浏览器版本要求高</p></li><li><p>该方法的返回值是 promise, 成功后传入媒体流, 失败传入错误信息,常见的失败有 <code>NotReadableError</code> 该错误会发生在 video源被占用时</p></li></ul><p><strong>在浏览器显示本地声音与视频</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">autoplay</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>开始捕获<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">getLocalVideo</span><span class="token punctuation">(</span><span class="token parameter">videoElem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      navigator<span class="token punctuation">.</span>mediaDevices        <span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token comment">// 开启音视频</span>          <span class="token literal-property property">video</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>videoElem<span class="token punctuation">.</span>srcObject <span class="token operator">=</span> stream<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 成功后将返回流写入 video</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 失败输出原因</span>    <span class="token punctuation">&#125;</span>    document      <span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>        <span class="token string">'click'</span><span class="token punctuation">,</span>        <span class="token function">getLocalVideo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'video'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">因为疑似要被转岗到 WebRTC 相关岗位, 简单学一下相关知识(面向 JD 的编程了属于是)</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="WebRTC" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/WebRTC/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="WebRTC" scheme="https://blog.liukairui.me/tags/WebRTC/"/>
    
    <category term="WebSocket" scheme="https://blog.liukairui.me/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>一点设计原则</title>
    <link href="https://blog.liukairui.me/article/%E4%B8%80%E7%82%B9%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://blog.liukairui.me/article/%E4%B8%80%E7%82%B9%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</id>
    <published>2022-11-06T16:00:00.000Z</published>
    <updated>2022-11-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单一职责原则">单一职责原则</h2><blockquote><p>一个对象 / 方法只做一件事(只有一个引起他变化的原因)</p></blockquote><p>一件事是逻辑上的一件事, 不是一个函数(比如创建 xhr 与发送 xhr完全可以放一起)</p><p><strong>应用</strong></p><ul><li><p>代理模式的单一功能</p></li><li><p>迭代器模式迭代与执行分离</p></li><li><p>单例模式中工厂方法与传入方法分离</p></li><li><p>装饰者模式动态添加单一职责</p></li><li><p>优点: 降低对象粒度, 降低单个类 / 对象复杂度,提升对象可复用性</p></li><li><p>缺点: 增加代码复杂度</p></li></ul><h2 id="最少知识原则狄米特法则">最少知识原则(狄米特法则)</h2><blockquote><p>尽量提供简单的接口, 减少对象之间的交互, 从而减小类之间的耦合</p></blockquote><p><strong>应用</strong></p><ul><li>中介者模式</li><li>封装</li></ul><h2 id="开放-封闭原则">开放-封闭原则</h2><blockquote><p>软件实体(类, 模块, 函数)应该是可扩展的,但<strong>不可修改</strong></p></blockquote><p><strong>应用</strong></p><ul><li>发布订阅模式</li><li>模板方法模式</li><li>策略模式</li><li>代理模式</li><li>职责链模式</li></ul><p><strong>如何开放</strong></p><ul><li>通过回调</li><li>通过钩子控制宏观流程</li><li>找到容易变化的地方, 通过多态将变化的部分封装入多态</li></ul><h2 id="里氏替换原则">里氏替换原则</h2><blockquote><p>如果对每一个类型为 S 的对象 o1, 都有类型为 T 的对象 o2, 使得以 T定义的所有程序 P 在所有的对象 o1 都代替 o2 时, 程序 P的行为没有发生变化, 那么类型 S 是类型 T 的子类型.</p></blockquote><blockquote><p>通俗点讲, 就是只要父类能出现的地方, 子类就可以出现,而且替换为子类也不会产生任何错误或异常.</p></blockquote><ul><li>子类必须完全实现父类的方法</li><li>子类可以有自己的个性</li><li>覆盖或实现父类的方法时, 输入参数可以被放大</li><li>覆盖或实现父类的方法时, 输出结果可以被缩小</li></ul><h2 id="依赖倒置原则面向接口编程">依赖倒置原则(面向接口编程)</h2><blockquote><p>高层模块不应该依赖于低层模块, 而应该依赖于抽象. 抽象不应依赖于细节,细节应依赖于抽象</p></blockquote><ol type="1"><li>模块间的依赖通过抽象发生, 实现类之间不直接发生依赖关系,其依赖关系是通过接口或抽象类产生的</li><li>接口或抽象类不依赖于实现类</li><li>实现类依赖接口或抽象类</li></ol><p>即</p><ul><li>每个类尽量都有接口或抽象类，或者接口和抽象类两者都具备。</li><li>变量的表面类型尽量是接口或抽象类。</li><li>任何类都不应该从具体类派生。</li><li>尽量不要重写基类的方法。如果基类是一个抽象类，而且这个方法已经实现了，子类尽量不要重写。</li></ul><h2 id="接口隔离原则">接口隔离原则</h2><blockquote><p>不要对外暴露没有实际意义的接口</p></blockquote><h2 id="重构原则">重构原则</h2><ul><li><strong>抽离函数原则</strong><ul><li>当函数过于臃肿时</li><li>独立部分可以被复用</li><li>独立出的函数拥有更好的命名(语义)</li><li>独立出的函数可以被重载(重写)</li></ul></li><li>对于条件分支<ul><li>尝试将条件抽离为函数以提高语义</li><li>提取重复部分而不是在每个分支都执行</li></ul></li><li>对于较长的硬编码<ul><li>使用循环完成硬编码</li></ul></li><li>对于函数参数<ul><li>尽量减少参数数目</li><li>参数数目过多可以采用对象传入而不是传入参数列表</li></ul></li><li>链式调用不利于调试, 应该将其应用于逻辑稳定的场景</li><li>使用函数代替冗长的 <code>if-else</code></li></ul>]]></content>
    
    
    <summary type="html">随手记一些设计原则吧~</summary>
    
    
    
    <category term="计算机理论" scheme="https://blog.liukairui.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/"/>
    
    <category term="设计模式" scheme="https://blog.liukairui.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="计算机理论" scheme="https://blog.liukairui.me/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/"/>
    
    <category term="设计模式" scheme="https://blog.liukairui.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="设计原则" scheme="https://blog.liukairui.me/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>一些JavaScript高阶函数</title>
    <link href="https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BJavaScript%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BJavaScript%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</id>
    <published>2022-11-04T16:00:00.000Z</published>
    <updated>2022-11-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>函数柯里化</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">currying</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 收集传入的参数</span>  <span class="token keyword">const</span> <span class="token function-variable function">curred</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有参数再指向</span>    <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> curred<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> curred<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">plus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> plusCurred <span class="token operator">=</span> <span class="token function">currying</span><span class="token punctuation">(</span>plus<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plusCurred</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plusCurred</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">plusCurred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将函数附加在 Function 上, 实现一步转为柯里化(骚操作)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">currying</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 收集传入的参数</span>  <span class="token keyword">const</span> <span class="token function-variable function">curred</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有参数再指向</span>    <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> curred<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> curred<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">plus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> plusCurred <span class="token operator">=</span> plus<span class="token punctuation">.</span><span class="token function">currying</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plusCurred</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plusCurred</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">plusCurred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>反柯里化 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">unCurrying</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> push <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">unCurrying</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> t1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">push</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3, 4 ]</span><span class="token comment">// 定义 length 的对象都可以用 Array.prototype.push</span><span class="token keyword">const</span> t2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; '2': 4, length: 3 &#125;</span><span class="token comment">// unCurrying 简化了调用</span><span class="token keyword">const</span> t3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">push</span><span class="token punctuation">(</span>t3<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>节流</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> interval <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    first <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 首次不卡</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 在 interval 内还有其他函数在执行</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>防抖 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>      args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">var</span> debounceRun <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> debounceRun<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>注意防抖不要被饿死(抖死), 尤其要防止与时间相关的元素打交道,比如我设置了 500ms 的防抖, 结果有一个视频播放模块要调防抖,这个视频播放模块每 24ms 就要执行一次, 直接抖死</p></li><li><p>装饰器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">before</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">after</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">f1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">f2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> f <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">柯里化, 反柯里化 ... 再和原型链结合起来~</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://blog.liukairui.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>一些JavaScript设计模式</title>
    <link href="https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BJavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BJavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-10-25T16:00:00.000Z</published>
    <updated>2022-10-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式: 对特定问题简单且优雅的解决方案.</p><p>设计模式的应用场景并不是相互对立的,同一个问题运用不同的设计模式解决时代码上可能有较大的重复,我们应该关注的是某个模式可以应用于什么场景, 解决什么问题.</p><p>设计模式并不一定需要手动实现, 很多语言自带了一些设计模式实现的特性.可以说学习设计模式实际上体现了编程语言在某些方向的设计缺陷与不足</p><h2 id="设计模式之于-javascript">设计模式之于 JavaScript</h2><ul><li>JavaScript 是动态类型语言,我们可以直接调用某个对象上的方法与属性而不需要提前检测对象的类型.</li><li>JavaScript 的类型是鸭子类型,即不关注对象是不是某个类型的(IS-A)而关注对象有没有某些特征(HAS-A)</li></ul><h3 id="多态">多态</h3><p>JavaScript 鸭子类型意味着无需向上转型即可直接实现多态,我们可以在函数实现上实现多态, 也可以在传入对象上实现多态</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在函数实现上实现多态</span><span class="token keyword">function</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token parameter">bar</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'duck'</span><span class="token punctuation">)</span><span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'GaGaGa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'chicken'</span><span class="token punctuation">)</span><span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'GuGuGu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// GaGaGa</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// GuGuGu</span><span class="token comment">// 在传入对象上实现多态</span><span class="token keyword">function</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token parameter">bar</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> bar<span class="token punctuation">.</span>sound <span class="token operator">&amp;&amp;</span> bar<span class="token punctuation">.</span><span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// GaGaGa</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// GuGuGu</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多态背后的思想是将 "做什么" 与 "谁去做, 如何做"分开</strong>, 显然第二份代码更优雅, 更有弹性.</p><p>在实现多态时我们也要注意如何将 <strong>"做什么"(不变的,<code>makeSound</code>)</strong> 与 <strong>"谁去做, 如何做"(变化的,动物发出什么)</strong> 两者分开</p><h3 id="封装">封装</h3><p>可以借助作用域隐藏私有变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> language <span class="token operator">=</span> <span class="token string">'GuGuGu'</span><span class="token punctuation">;</span> <span class="token comment">// 私有</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sound</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 公有</span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> duck <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> language <span class="token operator">=</span> <span class="token string">'GaGaGa'</span><span class="token punctuation">;</span> <span class="token comment">// 私有</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">sound</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>duck<span class="token punctuation">.</span><span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原型模式">原型模式</h2><p>JavaScript 选择了基于原型的面向对象系统, JavaScript 并没有类的概念.在创建对象时, JavaScript 不会找对象属于什么类, 而是会寻找对象对应的原型,然后克隆这个原型对象得到目标对象.</p><p>可以这样对比, 假设我们需要制造一支红色的笔</p><ul><li>基于类的面向对象系统: 找到 <code>Pen</code> 类型, 为构造函数传入<code>color = 'red'</code>, <strong>构造</strong>对象.(类更像是一个模子, 对象就是这个模子浇铸出来的铸件)</li><li>基于原型的面向对象系统: 找到 <code>Pen</code> 对应的原型对象,<strong>克隆</strong>这个对象, 得到一根笔, 将颜色改为红色.(原型对象就像一个没有分化的细胞 (基础的, 默认的对象),创建对象就是让细胞分裂一次, 分裂出的细胞可能不符合要求,我们可以让新细胞继续分化, 使得其符合要求)</li></ul><p>JavaScript 利用原型链实现了方法的继承与委托</p><h3 id="javascript-创建对象的原理">JavaScript 创建对象的原理</h3><p>JavaScript 中的函数既可以当作函数也可以当作构造器使用, 通过<code>new</code> 创建对象时, 函数会作为构造器参与构造.如果构造器返回的对象, 那么该对象会作为 <code>new</code>的结果取代克隆的对象</p><p>JavaScript 会先克隆构造器对应的原型对象(绑定 <code>__proto__</code>),然后对对象执行构造器函数,最后检查构造器函数的返回值决定返回哪个对象作为构造结果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">newOperator</span><span class="token punctuation">(</span><span class="token parameter">ctor<span class="token punctuation">,</span> <span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 校验构造函数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ctor <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> ctor <span class="token operator">+</span> <span class="token string">'is not a constructor'</span><span class="token punctuation">;</span>  <span class="token comment">// 设置 new.target</span>  newOperator<span class="token punctuation">.</span>target <span class="token operator">=</span> ctor<span class="token punctuation">;</span>  <span class="token comment">// 克隆原型</span>  <span class="token keyword">var</span> rtn_obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ctor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 传入参数、绑定this、获取构造函数返回的结果</span>  <span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token function">ctor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>rtn_obj<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断构造函数返回的类型</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token keyword">typeof</span> instance <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> instance <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span>    <span class="token keyword">typeof</span> instance <span class="token operator">===</span> <span class="token string">'function'</span>  <span class="token punctuation">)</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token keyword">return</span> rtn_obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单例模式">单例模式</h2><blockquote><p>保证类只有一个实例, 这个实例全局可见</p></blockquote><p>在 JavaScript 中实现单例的简单方法就是将对象附着在<code>global</code>, 但是这会污染全局作用域.虽然可以采用诸如命名空间的方法规避污染问题, 但是这种单例模式过于简易</p><h3 id="javascript-的通用惰性单例">JavaScript 的通用惰性单例</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getSingleFn</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> instance<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> instance <span class="token operator">||</span> <span class="token punctuation">(</span>instance <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只有调用时才执行函数</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">getData <span class="token operator">=</span> <span class="token function">getSingleFn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="其他应用">其他应用</h3><p>惰性单例不仅保证了全局唯一, 还保证了传入函数只运行一次, 可以实现类似<code>once</code> 功能</p><h2 id="策略模式">策略模式</h2><blockquote><p>当待解决的问题需要通过大量 "可替代" 的 "算法"实现时可以考虑策略模式</p></blockquote><h3 id="应用场景">应用场景</h3><p>假设某个插值函数 <code>lerp(time, st, ed, during, method)</code>提供了很多插值选项 (line / ease-in / ease-out...)如果要在一个函数中实现所有功能, 那函数就变为了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">lerp</span><span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during<span class="token punctuation">,</span> method</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'line'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">/* ... */</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'ease-in'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">/* ... */</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'ease-out'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">/* ... */</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的函数缺乏弹性且违反了开闭原则: 当我们需要新增一个插值模式时,我们需要再增加一个 <code>if-else</code></p><p>可以发现, 这个函数的代码中涉及了<strong>很多平行的<code>if-else</code>,每个分支内部的算法很类似且目标相同(可替代)</strong> 可以考虑策略模式</p><h3 id="静态类型的策略模式">静态类型的策略模式</h3><p>定义一个策略类与环境类 (Context), 将每个算法封装为一个策略类,将数据配置到环境类, 在需要计算时调用环境类请求配置时指定的策略类</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 策略类</span><span class="token keyword">class</span> <span class="token class-name">LineLerp</span> <span class="token punctuation">&#123;</span>  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">EaseinLerp</span> <span class="token punctuation">&#123;</span>  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">EaseoutLerp</span> <span class="token punctuation">&#123;</span>  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 环境类</span><span class="token keyword">class</span> <span class="token class-name">Lerp</span> <span class="token punctuation">&#123;</span>  <span class="token function">setEnvs</span><span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during<span class="token punctuation">,</span> method</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>st <span class="token operator">=</span> st<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ed <span class="token operator">=</span> ed<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>during <span class="token operator">=</span> during<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span> <span class="token comment">// 策略类, 这里需要向上转型一下</span>  <span class="token punctuation">&#125;</span>  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>time<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>st<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ed<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>during<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 环境类调用策略类</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试</span><span class="token keyword">const</span> lerp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lerp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建环境类</span>lerp1<span class="token punctuation">.</span><span class="token function">setEnvs</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LineLerp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 配置环境类</span>lerp1<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="javascript-的策略模式">JavaScript 的策略模式</h3><p>可以定义一个对象存储所有策略</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 策略类</span><span class="token keyword">const</span> lerps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">line</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">easein</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">easeout</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 环境类</span><span class="token keyword">class</span> <span class="token class-name">Lerp</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during<span class="token punctuation">,</span> method</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>st <span class="token operator">=</span> st<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ed <span class="token operator">=</span> ed<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>during <span class="token operator">=</span> during<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span> <span class="token comment">// 策略</span>  <span class="token punctuation">&#125;</span>  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> lerps<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>time<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>st<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ed<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>during<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 环境类调用策略类</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试</span><span class="token keyword">const</span> lerp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lerp</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'line'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建环境类</span>lerp1<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他应用场景">其他应用场景</h3><p>实际上只要我们的<strong>算法业务目标一致,具有可替代性</strong>就可以利用策略模式</p><p>例如: 表单验证</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义策略</span><span class="token keyword">const</span> strategies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">isNotEmpty</span><span class="token operator">:</span> <span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token operator">=></span> value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">,</span>  <span class="token literal-property property">minLength</span><span class="token operator">:</span> <span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> minLen<span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token operator">=></span> value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> minLen <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">,</span>  <span class="token literal-property property">isMobile</span><span class="token operator">:</span> <span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1\d&#123;10&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义环境类</span><span class="token keyword">class</span> <span class="token class-name">Validator</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> rules</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 添加策略, rule = 策略:参数...</span>    rules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> strategy<span class="token punctuation">,</span> errorMsg <span class="token punctuation">&#125;</span> <span class="token operator">=</span> d<span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token punctuation">[</span>rule<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">]</span> <span class="token operator">=</span> strategy<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>strategies<span class="token punctuation">[</span>rule<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">,</span> errorMsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">'hihi'</span><span class="token punctuation">,</span>  <span class="token literal-property property">passWord</span><span class="token operator">:</span> <span class="token string">'hi'</span><span class="token punctuation">,</span>  <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">' '</span><span class="token punctuation">,</span>  <span class="token literal-property property">tel</span><span class="token operator">:</span> <span class="token string">'222'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>userName<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'minLength:2'</span><span class="token punctuation">,</span> <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'Username >2!'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>passWord<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'minLength:4'</span><span class="token punctuation">,</span> <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'pwd >4!'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>address<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'isNotEmpty'</span><span class="token punctuation">,</span> <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'add nn!'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>tel<span class="token punctuation">,</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'isNotEmpty'</span><span class="token punctuation">,</span> <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'tel nn!'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'isMobile'</span><span class="token punctuation">,</span> <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'NOT A TEL!'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>validator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代理模式">代理模式</h2><blockquote><p>提供一个代用品以控制外部的访问</p></blockquote><p>实现代理的原则</p><ul><li>透明代理: 代理 API 设计的与原 API 一样,当我们不需要代理的时候可以直接移除代理代码而不需要大改 API</li></ul><h3 id="保护代理">保护代理</h3><p>相当于一个防火墙, 每次触发时有选择的执行或阻止触发事件</p><h3 id="虚拟代理">虚拟代理</h3><p>将性能开销大的事务延迟到可用时执行</p><ul><li><p>图片预加载 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyImage</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>imageNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>imageNode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setSrc</span><span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>imageNode<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">setImageProxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> src<span class="token punctuation">,</span> srcLoad <span class="token operator">=</span> <span class="token string">'http://预加载图片地址'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 临时图像对象</span>  img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> target<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当临时图像加载完成后为目标赋值</span>  img<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span> <span class="token comment">// 要求临时图像加载</span>  target<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span>srcLoad<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 目标图像先放 loading 图</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> imgNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setImageProxy</span><span class="token punctuation">(</span>imgNode<span class="token punctuation">,</span> <span class="token string">'http://大图地址'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>合并请求</p><p>对于少量多次的请求可以做请求合并</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getFetchProxy</span><span class="token punctuation">(</span><span class="token parameter">interval</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> timer<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://example.com/'</span> <span class="token operator">+</span> cache<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cache<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> urlProxy <span class="token operator">=</span> <span class="token function">getFetchProxy</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">urlProxy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">urlProxy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>惰性加载</p><p>类似单例模式的惰性加载</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getFetchProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://example.com/'</span> <span class="token operator">+</span> cache<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cache<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> urlProxy <span class="token operator">=</span> <span class="token function">getFetchProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">urlProxy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">urlProxy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">urlProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="缓存代理">缓存代理</h3><p>缓存请求参数即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getMultiProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 计算乘法的代理</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> k <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>      cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>        k<span class="token punctuation">,</span>        args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">*</span> cur<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他代理">其他代理</h3><ul><li>防火墙代理</li><li>远程代理: 代理其他内存区域中的数据</li><li>保护代理: 实现权限控制</li><li>智能引用代理: 在指针基础上提供了一些回调方法</li><li>写时复制代理: 惰性复制, 只有要修改原对象时才赋值</li></ul><h2 id="迭代器模式">迭代器模式</h2><ul><li>内部迭代器: 迭代器位于函数内部, 只需要传入对每个对象的调用方法</li><li>外部迭代器: 需要显式操作迭代器(<code>next</code>,<code>isDone</code>)</li></ul><h2 id="发布订阅模式">发布订阅模式</h2><blockquote><p>又称观察者模式, 用于维护对象之间的<strong>一对多</strong>关系,一旦对象状态发生改变, 所有依赖(订阅)于这个对象的对象都会得到消息</p></blockquote><p>当某个对象需要在其他对象发生变化后变化, 最简单的实现方式是 RR,但这势必会造成硬编码与强耦合. 我们希望采用类似 DOM 中<code>addEventListener</code> 的方法实现事件注册并在触发后自动执行.模仿这个过程就可以得到发布订阅模式与观察者模式.</p><h3 id="javascript-的观察者模式">JavaScript 的观察者模式</h3><p>观察者模式中存在观察者与被观察者, 观察者发生变化后通知被观察者</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//观察者类</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">//观测到变化后的处理</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">ob</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Observed</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//添加观察者</span>  <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//删除观察者</span>  <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> o <span class="token operator">!=</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//通知所有的观察者</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">st</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">提交了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">作业</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Observed</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">submitHomeWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>teacher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>students<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2提交了t作业</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="javascript-发布订阅模式">JavaScript 发布订阅模式</h3><p>在订阅者模式中, 当被观察者发生变化时被观察者会直接通知所有观察者.在消息订阅模式中, 消息发布者(被观察者)可以自定义发布消息类型,只有订阅了此类消息的人才会收到消息.</p><h4 id="非全局消息中心">非全局消息中心</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">installEvent</span><span class="token punctuation">(</span><span class="token parameter">sender</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  sender<span class="token punctuation">.</span>eventType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sender<span class="token punctuation">.</span><span class="token function-variable function">listen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sender<span class="token punctuation">.</span>eventType<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> sender<span class="token punctuation">.</span>eventType<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不能用 set 万一有重复就寄了</span>    <span class="token keyword">const</span> fns <span class="token operator">=</span> sender<span class="token punctuation">.</span>eventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    fns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  sender<span class="token punctuation">.</span><span class="token function-variable function">trigger</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sender<span class="token punctuation">.</span>eventType<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> fns <span class="token operator">=</span> sender<span class="token punctuation">.</span>eventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    fns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  sender<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sender<span class="token punctuation">.</span>eventType<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> fns <span class="token operator">=</span> sender<span class="token punctuation">.</span>eventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> idx <span class="token operator">=</span> fns<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d <span class="token operator">===</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span>idx <span class="token operator">&amp;&amp;</span> fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sender <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">installEvent</span><span class="token punctuation">(</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ev1 #1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sender<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>sender<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ev1 #2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sender<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'ev2'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ev2 #1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sender<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ev1 #1 ev1 #2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sender<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'ev2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ev2 #1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sender<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>sender<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ev1 #2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="有消息缓存的全局消息中心">有消息缓存的全局消息中心</h4><p>我们发现订阅者者要在注册事件时需要显式的指定发布者,这也造成了一定程度的耦合, 我们可以定义一个全局消息中心,订阅者向消息中心请求订阅消息, 消息发布者发布消息到消息中心,由消息中心通知订阅者.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Event <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> eventType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>eventType<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> eventType<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不能用 set 万一有重复就寄了</span>    <span class="token keyword">const</span> fns <span class="token operator">=</span> eventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    fns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">retrieveCache</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>eventType<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">addCache</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> fns <span class="token operator">=</span> eventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fns<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">addCache</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    fns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>eventType<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> fns <span class="token operator">=</span> eventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> idx <span class="token operator">=</span> fns<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d <span class="token operator">===</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span>idx <span class="token operator">&amp;&amp;</span> fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">addCache</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cachedArgs <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    cachedArgs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">retrieveCache</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    cachedArgs <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    cachedArgs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">trigger</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token operator">...</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> listen<span class="token punctuation">,</span> trigger<span class="token punctuation">,</span> cancel <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sender <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ev1 #1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ev1 #2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'ev2'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ev2 #1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ev1 #1 ev1 #2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'ev2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ev2 #1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ev1 #2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'ev3'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'ev3'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ev3 #1, ans = '</span> <span class="token operator">+</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ev3 #1, ans = 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应用场景-1">应用场景</h3><p>某个对象改变, 使依赖于它的多个对象得到通知, 且希望解耦两者.发布-订阅模式适合更复杂的场景(发布者的某次更新只想通知它的部分订阅者)</p><h2 id="命令模式">命令模式</h2><blockquote><p>当我们不清楚请求的接受者是谁也不知道请求的具体操作是什么.我们可以将命令封装为对象, 让命令对象在程序中被四处传递</p></blockquote><p>命令模式的三个组成部分: 发起者(不知道自己触发的命令有啥用,也不知道谁最终接收命令) 命令(一个被拿来拿去的对象)传递/接收者(只管传递/接收命令)</p><p>可以类比餐厅点餐:</p><ul><li>命令: 一个包含了如何做菜的指令对象</li><li>发起者: 客户, 客户发起做饭的命令,但是客户也不知道做饭的命令最终接受者是谁, 他只是发出了一个做菜命令</li><li>传递者: 服务员, 服务员将客户发出的做菜指令传递给大厨</li><li>执行者: 大厨, 大厨只管执行命令, 他也不知道是谁点的餐,他只负责执行</li></ul><p>可以看到, 在这里我们完全做到了发起者, 命令, 接受者的解耦</p><h3 id="静态类型语言的命令模式">静态类型语言的命令模式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 为发起者绑定命令的方法</span><span class="token keyword">function</span> <span class="token function">setCommandDOM</span><span class="token punctuation">(</span><span class="token parameter">dom<span class="token punctuation">,</span> command</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实际功能的实现</span><span class="token keyword">const</span> showTimes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">showYear</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">showMonth</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token function-variable function">showDay</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 命令类</span><span class="token keyword">function</span> <span class="token function">ShowCurrentYearCommand</span><span class="token punctuation">(</span><span class="token parameter">receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">ShowCurrentYearCommand</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">execute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span>innerText <span class="token operator">=</span> showTimes<span class="token punctuation">.</span><span class="token function">showYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ShowCurrentAllCommand</span><span class="token punctuation">(</span><span class="token parameter">receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">ShowCurrentAllCommand</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">execute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span>innerText <span class="token operator">=</span>    <span class="token string">''</span> <span class="token operator">+</span> showTimes<span class="token punctuation">.</span><span class="token function">showYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> showTimes<span class="token punctuation">.</span><span class="token function">showMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> showTimes<span class="token punctuation">.</span><span class="token function">showDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ClearAllCommand</span><span class="token punctuation">(</span><span class="token parameter">receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">ClearAllCommand</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">execute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 构造命令(命令 -> 接收者, 接收者不知道是谁发起的)</span><span class="token keyword">const</span> showCurrentYearCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShowCurrentYearCommand</span><span class="token punctuation">(</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> showCurrentAllCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShowCurrentAllCommand</span><span class="token punctuation">(</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> clearAllCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClearAllCommand</span><span class="token punctuation">(</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 发起者发起命令(发起者 -> 命令, 发起者也不知道这命令是干啥的)</span><span class="token function">setCommandDOM</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> showCurrentYearCommand<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setCommandDOM</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> showCurrentAllCommand<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setCommandDOM</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clearAllCommand<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现命令功能</li><li>实现命令类保存 context 实现 execute</li><li>构造实例对象, 完成 命令 -&gt; 执行者的绑定</li><li>将命令绑定给发起者</li></ul><p>撤销执行: 将指令调用保存到栈, 需要撤销时候弹指令即可.同时在指令上定义 undo 方法实现单条指令的撤销(因为每条指令只需要实现execute 的逆, 不用考虑全局变化, 所以不算麻烦), 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ClearAllCommand</span><span class="token punctuation">(</span><span class="token parameter">receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ClearAllCommand</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">execute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">ClearAllCommand</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">undo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="宏命令">宏命令</h3><p>可以将多个命令组合起来形成一个宏命令,执行宏命令等于执行宏命令下的每个命令</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">buildMacroCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> commandList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">command</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      commandList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      commandList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">[</span><span class="token operator">...</span>commandList<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>undo <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们尽量让宏命令和普通命令 API 保持一致,这样可以保证宏命令对发起者透明</p><h3 id="智能命令与傻瓜命令">智能命令与傻瓜命令</h3><p>命令执行与执行者无关的称为智能命令(例如 <code>alert()</code>),和执行者有关的(例如 <code>receiver.innerText</code>)</p><h3 id="应用场景-2">应用场景</h3><ul><li>不清楚请求的接受者</li><li>不知道请求的具体操作是什么</li><li>命令要被四处传递四处传递</li></ul><p>命令模式与策略模式在形式上有点类似, 但是命令模式的命令传递更加灵活,且实现了命令发起者与命令的解耦. 在 JavaScript 中, 命令可以是一个函数,但是函数在 JavaScript 中是可以随意传递的, 所以 JavaScript天生就直接支持命令模式</p><h2 id="组合模式">组合模式</h2><p>采用尽可能相同的接口定义对象, 并使对象具有嵌套能力.这样我们就可以通过对象的嵌套实现功能的组合.</p><p>应用: 宏命令就采用组合模式的思想, 宏命令与普通命令的 API相同(<strong>形式一致</strong>), 宏命令可以嵌套宏命令与普通命令,也可以通过 <code>execute</code>执行自己包含的子命令(<strong>功能一致</strong>).命令调用者无需区分宏命令和普通命令, 只需要无脑调用 <code>execute</code>即可.</p><p>应用场景:组合模式将对象以<strong>部分-整体的模式组成树形结构</strong>,并要求部分与整体具有<strong>功能与形式的一致性</strong></p><p>特性:称这种模式为组合模式是因为<strong>不同对象之间可以方便组合拆分对象</strong>,快速形成一个树形结构, 而调用者只需要关注树根即可调用整个对象,且不需要关系调用的对象是嵌套对象还是基本对象</p><p>注意: - 嵌套对象与基本对象接口设计不可能完全一致,如果用户对基本对象调用嵌套对象会造成引用错误,可以尝试在基本对象上定义相同 API 并抛出错误 -组合模式的对象应该是严格的树形结构, 如果出现环,就意味着我们可能无法控制环中对象调用次数, 如果产生了环可以考虑采用策略 /责任链模式解决问题</p><h2 id="模板方法模式">模板方法模式</h2><p>在抽象类中定义算法的宏观运行模式与可复用的子算法,由子类实现具体每一步的算法</p><h3 id="静态类型的模板方法模式">静态类型的模板方法模式</h3><p>实现制作饮料算法, 其中</p><ul><li>制作咖啡: 开水 -&gt; 泡咖啡粉 -&gt; 倒入杯子 -&gt; 加糖</li><li>制作奶茶: 开水 -&gt; 泡茶 -&gt; 倒入杯子 -&gt; 加牛奶</li></ul><p>可以抽象制作饮料的算法: 开水 -&gt; 泡水 -&gt; 倒入杯子 -&gt; 加料</p><p>实现制作奶茶 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MakeDrink</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">temp</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">consist</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 公共算法提前实现</span>  <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>temp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 私有算法不实现</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'需要实现算法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">pourCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cup <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'需要实现算法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pourCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cup<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MakeMilkTea</span> <span class="token keyword">extends</span> <span class="token class-name">MakeDrink</span> <span class="token punctuation">&#123;</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'tea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'milk'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> makeMilkTea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeMilkTea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>makeMilkTea<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; temp: 100, consist: [ 'tea', 'milk' ] &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>我们还可以在实现抽象类的时候加入钩子函数, 实现流程控制, 例如:默认加配料, 但是支持使用钩子函数传入是否加料</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MakeDrink</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token function">needCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 默认加料</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pourCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">needCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cup<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MakeCoffee</span> <span class="token keyword">extends</span> <span class="token class-name">MakeDrink</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">need</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>need <span class="token operator">=</span> need<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'coffee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'sugar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">needCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>need<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> makeCoffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeCoffee</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>makeCoffee<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; temp: 100, consist: [ 'coffee' ] &#125;</span><span class="token keyword">const</span> makeCoffeeWithSugar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeCoffee</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>makeCoffeeWithSugar<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; temp: 100, consist: [ 'coffee', 'sugar' ] &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="javascript-的模板方法模式">JavaScript 的模板方法模式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MakeDrink</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">temp</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">consist</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 先尽力去取</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods <span class="token operator">=</span> params<span class="token punctuation">;</span>    <span class="token comment">// 公共算法内部实现, 如果以及提供就不实现</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span>boilWater <span class="token operator">??=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>temp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 私有算法不实现</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span>brew <span class="token operator">??=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'需要实现算法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span>pourCup <span class="token operator">??=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>cup <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span>addCondiments <span class="token operator">??=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'需要实现算法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span>needCondiments <span class="token operator">??=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">pourCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">needCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cup<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> makeMilkTea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'tea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'milk'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>makeMilkTea<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; temp: 100, consist: [ 'tea', 'milk' ] &#125;</span><span class="token keyword">const</span> makeCoffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'coffee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'sugar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">needCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>makeCoffee<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; temp: 100, consist: [ 'coffee', 'sugar' ] &#125;</span><span class="token keyword">const</span> makeCoffeeWithSugar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'coffee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'sugar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>makeCoffeeWithSugar<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; temp: 100, consist: [ 'coffee', 'sugar' ] &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="享元模式">享元模式</h2><blockquote><p>运用共享技术尽可能的复用对象</p></blockquote><p>将对象上的属性分为内部属性与外部属性</p><ul><li>内部属性属于对象内部, 可以被外部共享</li><li>内部属性独立于场景, 不会随场景变化变化(在共享过程中保持不变)</li><li>外部属性取决于应用场景, 不会随场景变化而变化</li></ul><p>对象剥离外部对象成为共享对象, 在使用时传入外部状态组成对象</p><h3 id="应用场景-3">应用场景</h3><ul><li>相似元素多次调用</li><li>元素体积较大, 多次创建会造成较大开销</li><li>多数状态为外部状态</li><li>同时使用对象量小, 可以用少量对象完成大多数场景</li></ul><h3 id="使用-javascript-实现对象池">使用 JavaScript 实现对象池</h3><p>享元模式只是一种思想, 没有具体的实现, 对象池是享元模式的一种应用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">objPoolFactory</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createObjFn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> objPool <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>objPool<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> objPool<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token function">createObjFn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">recover</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      objPool<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="职责链模式">职责链模式</h2><p>请求者发起请求, 将请求传递给中间人,中间人一直传递直到遇到一个可处理者</p><p>很类似于拦截器</p><h3 id="javascript-的职责链模式">JavaScript 的职责链模式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">processState400</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">>=</span> <span class="token number">400</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error 400'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processState500</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">>=</span> <span class="token number">500</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">&lt;</span> <span class="token number">600</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server 500'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processState200</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ok 200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processStateUnknown</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'unknown code'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Chain</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setNextSuccessor</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> processCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span>processState200<span class="token punctuation">)</span><span class="token punctuation">;</span>processCode  <span class="token punctuation">.</span><span class="token function">setNextSuccessor</span><span class="token punctuation">(</span>processState400<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">setNextSuccessor</span><span class="token punctuation">(</span>processState500<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">setNextSuccessor</span><span class="token punctuation">(</span>processStateUnknown<span class="token punctuation">)</span><span class="token punctuation">;</span>processCode<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">)</span><span class="token punctuation">;</span>processCode<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token number">310</span><span class="token punctuation">)</span><span class="token punctuation">;</span>processCode<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token number">410</span><span class="token punctuation">)</span><span class="token punctuation">;</span>processCode<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token number">510</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用-aop-实现职责链">利用 AOP 实现职责链</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">after</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token string">'nextSuccessor'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">processState400</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">>=</span> <span class="token number">400</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error 400'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token string">'nextSuccessor'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processState500</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">>=</span> <span class="token number">500</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">&lt;</span> <span class="token number">600</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server 500'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token string">'nextSuccessor'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processState200</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ok 200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token string">'nextSuccessor'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processStateUnknown</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'unknown code'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> processCode <span class="token operator">=</span> processState200  <span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>processState400<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>processState500<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>processStateUnknown<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">processCode</span><span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">processCode</span><span class="token punctuation">(</span><span class="token number">310</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">processCode</span><span class="token punctuation">(</span><span class="token number">410</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">processCode</span><span class="token punctuation">(</span><span class="token number">510</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与组合模式相比, 职责链模式可以手动指定执行的起点, 职责修改更灵活</p><h2 id="中介者模式">中介者模式</h2><p>中介者模式与发布订阅模式类似,都是实现解决内部状态改变引发外部行为改变.</p><ul><li>发布订阅模式只支持发布消息, 消息中心触发订阅者对应事件.消息是单向传递的</li><li>中介者模式的中介者功能更加强大,中介者拥有<strong>智能</strong>处理事件的能力(不仅可以传递消息,还可以在收到消息后做一系列动作). 同时, 中介者模式不区分发布者与订阅者,所有对象都是中介服务的对象, 对象之间平等.</li></ul><p>在中介者模式中, 中心的工作能力大大增强,所以中介者模式也被称为调停者模式</p><h3 id="javascript-的中介者模式">JavaScript 的中介者模式</h3><p>命令定义类似策略模式, 接口定义类似发布订阅模式. 实现一个玩家中介,玩家可以换队伍, 同色队伍全死后对方队伍成员收消息.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 中介者模式</span><span class="token keyword">function</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> teamColor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'live'</span><span class="token punctuation">;</span> <span class="token comment">// 玩家状态</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>teamColor <span class="token operator">=</span> teamColor<span class="token punctuation">;</span> <span class="token comment">//队伍颜色</span><span class="token punctuation">&#125;</span><span class="token class-name">Player</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">win</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">': won'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Player</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">lose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">': lost'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 玩家死亡</span><span class="token class-name">Player</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">die</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'dead'</span><span class="token punctuation">;</span>  <span class="token comment">//给中介者发消息，玩家死亡</span>  playerDirector<span class="token punctuation">.</span><span class="token function">reciveMessage</span><span class="token punctuation">(</span><span class="token string">'playerDead'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 移除玩家</span><span class="token class-name">Player</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  playerDirector<span class="token punctuation">.</span><span class="token function">reciveMessage</span><span class="token punctuation">(</span><span class="token string">'removePlayer'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 玩家换队</span><span class="token class-name">Player</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">changeTeam</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  playerDirector<span class="token punctuation">.</span><span class="token function">reciveMessage</span><span class="token punctuation">(</span><span class="token string">'changeTeam'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">playerFactory</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> teamColor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> newPlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> teamColor<span class="token punctuation">)</span><span class="token punctuation">;</span>  playerDirector<span class="token punctuation">.</span><span class="token function">reciveMessage</span><span class="token punctuation">(</span><span class="token string">'addPlayer'</span><span class="token punctuation">,</span> newPlayer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> newPlayer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> playerDirector <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> players <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 保存所有玩家</span>    operations <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 中介者可以执行的操作</span>  operations<span class="token punctuation">.</span><span class="token function-variable function">addPlayer</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">player</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> teamColor <span class="token operator">=</span> player<span class="token punctuation">.</span>teamColor<span class="token punctuation">;</span>    players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span> <span class="token operator">=</span> players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 如果还没成立队伍，就新成立一个队伍</span>    players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加入一个玩家</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  operations<span class="token punctuation">.</span><span class="token function-variable function">removePlayer</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">player</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> teamColor <span class="token operator">=</span> player<span class="token punctuation">.</span>teamColor<span class="token punctuation">;</span>    teamPlayers <span class="token operator">=</span> players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//该队伍所有玩家</span>    players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span> <span class="token operator">=</span> teamPlayers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">!==</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//移除玩家</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  operations<span class="token punctuation">.</span><span class="token function-variable function">changeTeam</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">player<span class="token punctuation">,</span> newTeamColor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    operations<span class="token punctuation">.</span><span class="token function">removePlayer</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从原来队伍移除</span>    player<span class="token punctuation">.</span>teamColor <span class="token operator">=</span> newTeamColor<span class="token punctuation">;</span> <span class="token comment">// 改变自身的队伍颜色</span>    operations<span class="token punctuation">.</span><span class="token function">addPlayer</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加到新队伍</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  operations<span class="token punctuation">.</span><span class="token function-variable function">playerDead</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">player</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> teamColor <span class="token operator">=</span> player<span class="token punctuation">.</span>teamColor<span class="token punctuation">,</span>      teamPlayers <span class="token operator">=</span> players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//玩家所在队伍</span>    <span class="token keyword">let</span> all_dead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> player<span class="token punctuation">;</span> <span class="token punctuation">(</span>player <span class="token operator">=</span> teamPlayers<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>player<span class="token punctuation">.</span>state <span class="token operator">!==</span> <span class="token string">'dead'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        all_dead <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>all_dead <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 全部死亡</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> player<span class="token punctuation">;</span> <span class="token punctuation">(</span>player <span class="token operator">=</span> teamPlayers<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        player<span class="token punctuation">.</span><span class="token function">lose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 所有玩家失败</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> color <span class="token keyword">in</span> players<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">!==</span> teamColor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> teamPlayers <span class="token operator">=</span> players<span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment">// 找出其他队伍玩家</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> player<span class="token punctuation">;</span> <span class="token punctuation">(</span>player <span class="token operator">=</span> teamPlayers<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            player<span class="token punctuation">.</span><span class="token function">win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 其他队伍胜利</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> <span class="token function-variable function">reciveMessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    operations<span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    reciveMessage<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> player1 <span class="token operator">=</span> <span class="token function">playerFactory</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  player2 <span class="token operator">=</span> <span class="token function">playerFactory</span><span class="token punctuation">(</span><span class="token string">'小乖'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  player3 <span class="token operator">=</span> <span class="token function">playerFactory</span><span class="token punctuation">(</span><span class="token string">'小宏'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> player4 <span class="token operator">=</span> <span class="token function">playerFactory</span><span class="token punctuation">(</span><span class="token string">'小白'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  player5 <span class="token operator">=</span> <span class="token function">playerFactory</span><span class="token punctuation">(</span><span class="token string">'小黑'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  player6 <span class="token operator">=</span> <span class="token function">playerFactory</span><span class="token punctuation">(</span><span class="token string">'小牛'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// player1.die();</span><span class="token comment">// player3.die();</span><span class="token comment">// player2.die();</span><span class="token comment">// 小明: lost</span><span class="token comment">// 小乖: lost</span><span class="token comment">// 小宏: lost</span><span class="token comment">// 小白: won</span><span class="token comment">// 小黑: won</span><span class="token comment">// 小牛: won</span><span class="token comment">// player1.remove();</span><span class="token comment">// player3.die();</span><span class="token comment">// player2.die();</span><span class="token comment">// 小乖: lost</span><span class="token comment">// 小宏: lost</span><span class="token comment">// 小白: won</span><span class="token comment">// 小黑: won</span><span class="token comment">// 小牛: won</span>player1<span class="token punctuation">.</span><span class="token function">changeTeam</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>player2<span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>player3<span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 小乖: lost</span><span class="token comment">// 小宏: lost</span><span class="token comment">// 小白: won</span><span class="token comment">// 小黑: won</span><span class="token comment">// 小牛: won</span><span class="token comment">// 小明: won</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缺陷">缺陷</h3><p>我们引入消息订阅中心是为了方便实现信息交流,避免硬编码与因实现通信导致的对象臃肿. 但是随着消息中心功能变强,逐渐演化为中介者, 中介者对象也会变得越来越臃肿</p><h2 id="装饰者模式">装饰者模式</h2><p>装饰者模式又称包装器模式, 就是将一个函数包装在另一个函数里面.</p><h3 id="javascript-的装饰者模式">JavaScript 的装饰者模式</h3><p>JavaScript 支持高阶函数, 所以天生支持装饰者模式. 例如, 我们想为<code>window.onload</code> 绑定内容但不知道 <code>window.onload</code>是否以及绑定了函数, 我们可以写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> _load <span class="token operator">=</span> window<span class="token punctuation">.</span>onload<span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  _load <span class="token operator">&amp;&amp;</span> <span class="token function">_load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 我们自己想绑定的</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-aop-实现装饰器模式">使用 AOP 实现装饰器模式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">before</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">after</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">f1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">f2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> f <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应用场景-4">应用场景</h3><p>装饰器模式可以为函数<strong>动态的</strong>加入新的职责与行为,当一个函数的具体<strong>功能无法在运行前确定</strong>时或需要<strong>为函数加入非主线任务的工作(AOP)</strong>时可以考虑装饰者模式.同时, 考虑到其可以客观将代码分开,当我们想要将不同层级代码从同一个函数中分离时也可以考虑这一模式(例如在表单提交中将合法性检查与提交请求与DOM 刷新分开, 者也可以看作是一种 AOP)</p><h2 id="状态模式">状态模式</h2><blockquote><p>将事务的<strong>每种状态</strong>都封装为类,与当前状态相关的行为被直接封装到状态类中, 而在调用者看来,对象似乎可以根据状态的不同调整行为</p></blockquote><p>假设我们要实现一个支持三档切换的电灯(关-弱光-强光)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义状态类</span><span class="token keyword">class</span> <span class="token class-name">OffLight</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">light</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 不同状态在按开关时行为不同</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">.</span>weakLight<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'变为弱光'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">WeakLight</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">light</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">.</span>strongLight<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'变为强光'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">StrongLight</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">light</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">.</span>offLight<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'熄灯了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义上下文类</span><span class="token keyword">class</span> <span class="token class-name">Light</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 手写每一种状态</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>offLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OffLight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new 语句中 this 指向构造对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>weakLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakLight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new 语句中 this 指向构造对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>strongLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrongLight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new 语句中 this 指向构造对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>button <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>curState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offLight<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setButton</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>button <span class="token operator">=</span> dom<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>curState <span class="token operator">=</span> state<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>curState<span class="token punctuation">.</span><span class="token function">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setButton</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'switch'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到上下文中包含了所有状态, 关联行为统一定义在状态中,上下文类只负责调用</p><h3 id="使用有限状态机实现状态模式">使用有限状态机实现状态模式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">delegate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">client<span class="token punctuation">,</span> delegation</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">buttonWasPressed</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将客户的操作委托给delegation 对象</span>      <span class="token keyword">return</span> delegation<span class="token punctuation">.</span><span class="token function">buttonWasPressed</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token constant">FSM</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">off</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">buttonWasPressed</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'关灯'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'下一次按我是开灯'</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>currState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onState<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">buttonWasPressed</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开灯'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'下一次按我是关灯'</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>currState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offState<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">Light</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>offState <span class="token operator">=</span> <span class="token function">delegate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">FSM</span><span class="token punctuation">.</span>off<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>onState <span class="token operator">=</span> <span class="token function">delegate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">FSM</span><span class="token punctuation">.</span>on<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offState<span class="token punctuation">;</span> <span class="token comment">// 设置初始状态为关闭状态</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>button <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Light</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  button<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'已关灯'</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>button <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    self<span class="token punctuation">.</span>currState<span class="token punctuation">.</span><span class="token function">buttonWasPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>light<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优缺点">优缺点</h3><ul><li>状态及其对应的行为被封装在状态里,非常方便后期新增状态与状态转换</li><li>通过独立状态类避免了 context 类变臃肿</li><li>使用对象表示状态比用字符串更一目了然</li><li>不同状态之间的行为独立</li></ul><h3 id="优化点">优化点</h3><ul><li>动态创造 / 销毁状态而不是全部定义在上下文类中</li><li>共享状态</li></ul><h2 id="适配器模式">适配器模式</h2><p>当两个部分代码由于接口不同不兼容时可以采用适配器模式将不兼容的接口转为兼容接口</p>]]></content>
    
    
    <summary type="html">随手记一些设计模式吧~</summary>
    
    
    
    <category term="计算机理论" scheme="https://blog.liukairui.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/"/>
    
    <category term="设计模式" scheme="https://blog.liukairui.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://blog.liukairui.me/tags/JavaScript/"/>
    
    <category term="设计模式" scheme="https://blog.liukairui.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>理解Vue</title>
    <link href="https://blog.liukairui.me/article/%E7%90%86%E8%A7%A3Vue/"/>
    <id>https://blog.liukairui.me/article/%E7%90%86%E8%A7%A3Vue/</id>
    <published>2022-08-15T16:00:00.000Z</published>
    <updated>2022-11-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总览">总览</h2><h3 id="vue3-的基本结构">Vue3 的基本结构</h3><p>采用 Monorepo 模式(多组件放在一个 Repo 中), 在<code>/packages/</code> 中存储所有的模块.</p><p><strong>模块分为几类:</strong></p><ul><li>编译时(<code>/package/compiler-*</code>)<ul><li><code>compiler-core</code>: 与平台无关的编译器核心</li><li><code>compiler-dom</code>: 基于 <code>compiler-core</code> 解析<code>&lt;template&gt;</code> 标签并编译为 render 函数</li><li><code>compiler-sfc</code>: 基于 <code>compiler-dom</code> 与<code>compiler-core</code> 解析 SFC (单文件组件, 通俗理解就是<code>.vue</code> 文件) 编译为浏览器可执行的 JavaScript</li><li><code>compiler-ssr</code>: 服务端渲染的编译模块</li></ul></li><li>运行时(<code>/package/runtime-*</code>)<ul><li><code>reactivity</code>: 实现响应式</li><li><code>runtime-core</code>: 基于 <code>reactivity</code>实现运行时核心</li><li><code>runtime-dom</code>: 基于 <code>runtime-core</code>实现针对浏览器的运行时. 包括DOM API, 属性, 事件处理等</li></ul></li><li>其他<ul><li><code>template-explorer</code>: 用于调试编译器输出的开发工具</li><li><code>shared</code>: 多个包之间共享的内容</li><li><code>vue</code>: 完整版本,包括运行时和编译器</li></ul></li></ul><p><strong>依赖关系</strong></p><pre class="line-numbers language-none"><code class="language-none">                                 +---------------------+                                 |                     |                                 |  @vue&#x2F;compiler-sfc  |                                 |                     |                                 +-----+--------+------+                                       |        |                                       v        v                   +---------------------+    +----------------------+                   |                     |    |                      |     +------------&gt;|  @vue&#x2F;compiler-dom  +---&gt;|  @vue&#x2F;compiler-core  |     |             |                     |    |                      |+----+----+        +---------------------+    +----------------------+|         ||   vue   ||         |+----+----+        +---------------------+    +----------------------+    +-------------------+     |             |                     |    |                      |    |                   |     +------------&gt;|  @vue&#x2F;runtime-dom   +---&gt;|  @vue&#x2F;runtime-core   +---&gt;|  @vue&#x2F;reactivity  |                   |                     |    |                      |    |                   |                   +---------------------+    +----------------------+    +-------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>学习路线</strong></p><p>根据模块依赖关系, 路线为: <code>reactivity</code> -&gt;<code>runtime-core</code> -&gt; <code>runtime-dom</code> -&gt;<code>compiler</code>. 重点是 <code>runtime-*</code></p><p><strong>代码分析步骤</strong>:</p><ol type="1"><li>查看单元测试(位于<code>packages/**/__tests__/</code>)</li><li>根据单元测试了解模块实现的功能</li><li>跟着单元测试的了解模块功能, 了解模块功能时: 先看导出(模块是什么),再看模块被谁导入(为什么被需要),最后看导出部分对应的实现(怎么样实现)</li></ol><p><strong>参考 repo</strong></p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2N1aXhpYW9ydWkvbWluaS12dWU=">cuixiaorui/mini-vue<i class="fa fa-external-link-alt"></i></span>:用来学习</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL2NvcmU=">vuejs/core<i class="fa fa-external-link-alt"></i></span>:用来验证</li></ul><h3 id="reactivity-的基本流程">Reactivity 的基本流程</h3><p><code>Reactivity</code> 模块是运行时的最底层, 负责实现响应式, 位于:<code>mini-vue/packages/reactivity</code></p><p><strong><code>reactive</code> 的基本流程</strong></p><p><code>reactive</code> 是 <code>Reactivity</code> 的基础.负责实现对象的响应式, 并向上提供调用时方法. 基本思想就是借助 ES6 的<code>Proxy</code> 自定义 <code>get &amp; set</code></p><ol type="1"><li><p>转到 <code>mini-vue/../__tests__/reactive.spec.ts</code>,发现测试的主要目的是看 <code>reactive</code> 构造方法.</p></li><li><p>转到 <code>mini-vue/../src/reactive.ts</code>, 发现定义了<code>reactive</code>, <code>readonly</code> 等方法, 这些方法都交由<code>createReactiveObject</code> 处理.</p><p>观察 <code>createReactiveObject</code>, 可以得到三个调用参数意义:</p><ul><li><p><code>target</code>: 要被代理的值</p></li><li><p><code>proxyMap</code>: 不同类型的工厂函数有不同的全局<code>proxyMap</code>, 这意味着该变量可能会存储所有代理的某类型变量.根据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> existingProxy <span class="token operator">=</span> proxyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>existingProxy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> existingProxy<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以验证想法, 其在 <code>createReactiveObject</code> 的目的就是持久化<code>Proxy</code> 防止重复创建代理</p></li><li><p><code>baseHandlers</code>: 根据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> baseHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得出该方法就是 Proxy(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHk=">MDN<i class="fa fa-external-link-alt"></i></span>)的 <code>get &amp; set</code> 对象. 不同类型的 Proxy 有不同的<code>baseHandlers</code></p></li></ul></li><li><p>转到 <code>mini-vue/../src/baseHandlers.ts</code>发现模块主要是提供不同的 <code>get &amp; set</code> 而这些都是由两个<code>create</code> 函数实现的, 尝试理解</p><ul><li><p><code>createGetter</code> 应该返回一个<code>handler.get</code>(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHkvUHJveHkvZ2V0">MDN<i class="fa fa-external-link-alt"></i></span>)实现. 可以看到这个函数上有一堆类型判断的方法, 然后做了两步</p><ul><li>通过 <code>Reflect.get</code>(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUmVmbGVjdC9nZXQ=">MDN<i class="fa fa-external-link-alt"></i></span>)获取属性</li><li>通过 <code>track</code> 进行<strong>依赖收集</strong>,这部分后面再看</li></ul><p>最后返回获取结果. 整个 <code>get</code>感觉和原生方法相比就是多了个类型判断和 <code>track</code>,大部分的响应式都是依赖这个 <code>track</code> 实现的</p></li><li><p><code>createSetter</code> 更加简单, 看起来就是在实现<code>handler.set</code>(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHkvUHJveHkvc2V0">MDN<i class="fa fa-external-link-alt"></i></span>)的基础上多了个 <code>trigger</code></p></li></ul><p>到目前位置这个只有 <code>track</code> 和 <code>trigger</code>是不清楚的, 这两个函数在 <code>effect</code> 等部分做依赖收集的,可以先不管. 其他部分就是原生功能调用与权限管理</p></li></ol><p><strong><code>effect</code> 的基本流程</strong></p><p>如果让我实现 <code>effect</code> 我会怎么实现呢?我先想到的是利用编译原理等魔法对代码做静态分析, 找到所用响应式对象,在响应式对象的 <code>set</code> 上挂上函数. 但是, JavaScript是个动态语言, 这完全没法挂啊! 只能在运行时动态解析.</p><p>Vue 的实现就比较流畅. 既然我 <code>effect</code> 要立即执行一遍函数,那为啥不在执行前后做下 Flag, 一旦 Proxy 的 <code>get</code> 被调用, 让<code>get</code> 检查一下是不是在 <code>effect</code> 执行阶段,若是就把函数注册到这个响应式对象上😎</p><ol type="1"><li><p>转到 <code>mini-vue/../__tests__/reactive.spec.ts</code> 看到<code>effect</code> 的主要功能是立即执行函数并在响应式数据发生改变时,去执行 <code>effect</code> 注册的函数</p></li><li><p>转到 <code>mini-vue/../src/effect.ts</code> 看<code>effect</code> 函数的实现. 看到这里有熟悉的 <code>effect</code>,<code>track</code>, <code>trigger</code></p><ol type="1"><li><p><code>effect</code> 函数将传入函数包装为<code>ReactiveEffect</code> 对象, 合并配置, 执行 <code>run</code> 函数,构造 <code>runner</code> 并返回(用于后期调用)</p></li><li><p><code>ReactiveEffect</code> 类</p><ul><li><code>active</code>: 根据 <code>run</code>, <code>stop</code>函数和测试文件中的 <code>it("stop")</code> 断言可以推出其是用来开关<code>effect</code> 功能的</li><li><code>deps</code>: 根据 <code>track</code> 与 <code>trigger</code>对其调用可以判断其是用来记录函数对应依赖的</li><li><code>run</code>: 对 <code>effect</code> 注册函数的包装,在执行函数前后打入 <code>shouldTrack</code> 标记, 并将<code>activeEffect</code> 标记为要执行的 <code>ReactiveEffect</code>好让 <code>get</code> 知道哪个 <code>effect</code> 在跑</li></ul></li><li><p><code>track</code> 函数: 在 <code>reactive</code> 的<code>get</code> 中调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">"get"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>track</code> 发现自己处于 <code>effect</code>阶段时会先检查自己所在对象有没有创建 <code>attribute</code> -<code>effect</code> 函数heap 的 <code>map</code>, 如果每就创建, 然后看<code>map</code> 上有没有记录当前属性, 如果没有, 就建立依赖的<code>set</code> 并交由 <code>trackEffects</code> 加入并在<code>ReactiveEffect</code> 上也做记录.</p></li><li><p><code>trigger</code> 函数: 在 <code>reactive</code> 的<code>set</code> 中调用</p><p>先找到对应 <code>attribute</code> 的 <code>effect</code> 依赖, 去重,根据配置延迟或立即支持 <code>effect</code></p></li></ol></li></ol><p><strong>总结</strong></p><ul><li><code>reactive</code> 的流程: 传入对象, 持久化, 绑定<code>baseHandlers</code> 做权限管理与依赖收集</li><li><code>effect</code> 的流程: 将传入函数包装为对象,立即执行函数并做好标记, 在执行时收集依赖. 每当 <code>reactive</code>被调用时就 <code>tigger</code> 收集的 <code>effect</code>,并二次收集依赖</li></ul><p><strong>问题</strong></p><ul><li><p>所有的依赖收集都是基于 <code>get</code>, 这样的<code>effect</code> 存在问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should observe basic properties'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> dummy<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      dummy <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      dummy <span class="token operator">=</span> counter<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  counter<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Except 2, Received -1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不只是 <code>mini-vue</code>, <code>vue/core</code>的单元测试也存在这个问题. 但是在 <code>Vue</code>代码中并不会出现无法追踪依赖的问题,看来还有一些隐藏的优化没有找到</p></li></ul><h3 id="runtime-core-的基本流程">Runtime-core 的基本流程</h3><p><code>runtime-core</code> 依赖 <code>Reactivity</code> 为 runtime提供服务. 可以通过观察 Vue 文件的运行观察 <code>runtime-core</code>的基本流程</p><p><strong>文件基本结构</strong></p><ol type="1"><li><p>转到 <code>mini-vue/packages/vue/example/helloWorld/</code>的文件夹了解 vue 的基本工作流程</p></li><li><p>转到 <code>mini-vue/../helloWorld/index.html</code>, 只有个<code>div#root</code> 和 <code>script</code></p></li><li><p>转到 <code>mini-vue/.../helloWorld/main.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../dist/mini-vue.esm-bundler.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.js'</span><span class="token punctuation">;</span><span class="token keyword">const</span> rootContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>rootContainer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入了创建根组件的 <code>createApp</code> 与根组件 <code>App</code>,查找了 html 文件中声明的挂载点, 然后通过 <code>createApp(App)</code>打包根组件再将打包后结果挂载</p></li><li><p>转到 <code>mini-vue/../helloWorld/App.js</code> 发现定义了两个vue2 风格的组件对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span> <span class="token comment">// 组件名</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// setup 方法</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 渲染方法</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">tId</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'主页'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>前面有提到: <code>compiler-dom</code> 将<code>&lt;template&gt;</code> 标签解析并编译为 render 函数.在这里为了不追踪 <code>compiler-dom</code> 的行为, 我们直接将<code>render</code> 给出</p></li><li><p><code>h</code> 为渲染函数, 参数分别是: 组件的<code>ElementType</code>, 配置, 子组件数组, 可以看到,这里第一个子组件是一个 <code>&lt;p&gt;</code> 第二个是一个组件</p></li><li><p>可以在对象中使用 <code>render</code>, 也可以让 <code>setup</code>返回 <code>render</code> 方法, 即</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">tId</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'主页'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>createApp</code> 调用关系比较复杂, 直接使用 dev-tools观察执行过程. 打开一个 http 服务器并转到 dev-tools下, 找到<code>createApp.js</code> 并打下断点</p></li><li><p><code>createApp</code> 方法接受根组件配置对象 <code>App</code>直接包了个对象, 有</p><ul><li><code>_componment = App</code></li><li><code>mount</code> 方法, 看语义, 这个方法接收挂载点, 将根组件创建为<code>VNode</code> 并挂载到挂载点(<code>main.js</code> 中的<code>rootContainer</code>), 执行完后 <code>main.js</code> 就结束了</li></ul><p>我们需要继续分析的就是 <code>VNode</code> 的创建过程与<code>render</code> 的挂载过程</p></li></ol><p><strong>组件初始化过程</strong></p><ol type="1"><li><p>单步进入 <code>createVNode</code> 发现其声明了个<code>vnode</code>.</p><p>将传入对象(<code>rootComponent / App</code>) 作为<code>vnode.type</code></p><p>在 <code>vnode</code> 上合并对象并配置 <code>shapeFlag</code>用于标记类型</p><p>之后调用 <code>normalizeChildren</code> 并返回对象</p><ul><li>进入 <code>normalizeChildren</code> 看起来是作了 <code>slot</code>特判</li></ul></li><li><p>单步进入 <code>render</code>, 其接收了处理后的 <code>vnode</code>与挂载点 <code>rootContainer</code> 然后将参数直接交给<code>patch</code>, 可以猜到 <code>patch</code> 会是一个很通用的函数</p><ul><li><p>单步进入 <code>patch</code>, 其接收 <code>n1 = null</code>,<code>n2 = vnode</code>, <code>container</code>.</p><p>解构出了<code>n2</code> 的 <code>type = App</code> 与<code>shapeFlag</code>,</p><p>通过预定义的 <code>Symbol</code> 判断对象类型, 进入<code>default</code>,</p><p>通过位运算判断 <code>shapeFlag</code> 类型, 被识别为组件 (而不是像<code>h('p', &#123;&#125;, '主页')</code> 一样的 Element) 执行<code>processComponent</code></p><ul><li><p>单步进入 <code>processComponent</code>,</p><p>函数做了一个判断: 如果没有 <code>n1</code> 就认为 <code>n2</code>还没有被挂载就挂载 <code>n2</code> 否则更新 <code>n2</code></p><ul><li><p>单步进入 <code>mountComponent</code>, 其接收了 <code>vnode</code>与挂载点</p><p>将 <code>vnode</code> 转换为实例 <code>instance</code>, 执行<code>setupComponent</code> 处理 <code>instance</code></p><ul><li><p>单步进入 <code>setupComponent</code> 发现其只是处理了<code>prop</code> 与 <code>slot</code> 然后交给<code>setupStatefulComponent</code> 继续配置</p><ul><li><p>单步进入 <code>setupStatefulComponent</code>, 其接收<code>instance</code></p><p>将 <code>instance.ctx</code> 配置了<code>PublicInstanceProxyHandlers</code> 代理(后面分析)</p><p>提取 <code>Component = APP</code>, <code>setup = APP.setup</code></p><p>如果 <code>setup</code> 不存在就直接<code>finishComponentSetup</code></p><p>否则用 <code>setCurrentInstance</code> 打标记, 为 <code>setup</code>传入参数并获取执行结果, 执行 <code>handleSetupResult</code> 处理结果</p><ul><li><p>单步进入 <code>handleSetupResult</code> 该函数对<code>setup</code> 结果执行判断</p><p>如果是 <code>function</code> 说明是导出了 <code>render</code> 函数,将 <code>render</code> 赋值到 <code>instance.render</code> 上</p><p>否则导出的对象存入 <code>isntance.setupState</code></p><p>最后执行 <code>finishComponentSetup</code> 与无 <code>setup</code>的情况汇合</p></li><li><p>单步进入 <code>finishComponentSetup</code> 其接收<code>instance</code></p><p>若 <code>instance</code> 上没有 <code>render</code> 就尝试从<code>template</code> 编译结果上获取并存入<code>instrance.render</code></p></li></ul></li></ul></li><li><p>单步进入 <code>setupRenderEffect</code> 发现其定义绑定了一个<code>componentUpdateFn</code> 函数</p><ul><li><p>打断点并进入 <code>componentUpdateFn</code> 函数</p><p>如果组件没有被挂载, 获取子节点, 获取 <code>instance</code> 的 Proxy,构建子节点 <code>subTree</code> 并递归 <code>patch</code>, 当<code>patch</code> 到 Element 时调用 <code>processElement</code>挂载节点</p><p>否则更新节点(后面分析)</p></li></ul></li></ul></li></ul></li></ul></li></ul></li></ol><p><strong>组件更新过程</strong></p><p>为组件创建响应式并将 <code>reavtive</code> 导出到全局</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">tId</span><span class="token operator">:</span> <span class="token string">'helloWorld'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello world: count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 dev-tools 中修改 <code>count.value</code> 根据输出来自<code>effect.ts</code> 进入文件并为 <code>run</code> 函数打上断点,再次修改值, 发现 <code>run</code> 函数实际上就是执行了当时的<code>componentUpdateFn</code>, 为 <code>componentUpdateFn</code>中已挂载的判断部分打上断点</p><ol type="1"><li><p>在断点处查看调用栈, 确定函数就是因为 <code>ref</code>修改而引发的</p></li><li><p>在执行修改前先判断有没有 <code>nextTrick</code> 需要执行</p></li><li><p>获取新节点的 <code>vnode</code></p></li><li><p>将老节点子树复制到新节点</p></li><li><p>触发生命周期函数</p></li><li><p><code>patch</code> 新节点</p><p>单步进入 <code>patch</code>, 接受老节点 <code>n1</code> 新节点<code>n2</code> 这次更新的是一个 Element 于是进入<code>ShapeFlags.ELEMENT</code>, 进入 <code>processElement</code></p><ul><li>单步进入 <code>processElement</code>, 这次老节点已经挂载,直接走更新程序<ul><li>单步进入 <code>updateElement</code> 该函数分别对比了<code>props</code> 与 子节点并更新</li></ul></li></ul></li><li><p>触发生命周期函数</p></li></ol><p><strong>总结</strong></p><pre class="mermaid">graph TBinit((初始化组件)) --> createAPp[将App交给createApp, 将App包装为vnode] --- norm1[将vnode应用normalizeChildren配置, 交给render渲染]  --> renderdispatch[render直接交给patch] --> check[patch检查类型] --为组件--> processComponent[交给processComponent判断状态] --为新节点--> mountComponent[执行mountComponent挂载vnode: 构造instance, 运行 setup, 获取 render] --> effect[注册render的effect] --> run[执行effect, 检测是否挂载]  --没有--> patch2(递归patch子节点)update((reactive更新)) -.-> run[执行effect, 检测是否挂载] -.-挂载了-.-> newvnode[构造新vnode, diff检查, 复制属性] -.-> patch2 ==> checkcheck ==为Element==> mountDir(直接修改DOM)</pre><h2 id="实现-reactivity">实现 Reactivity</h2><h3 id="环境搭建">环境搭建</h3><ul><li><p>目录结构</p><p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span>├── jest.config.js├── package.json├── packages│   └── reactivity│       ├── index.ts <span class="token comment"># 入口文件</span>│       └── __tests__ <span class="token comment"># 测试文件</span>│           └── index.spec.ts├── README-EN.md├── README.md└── tsconfig.json <span class="token comment"># tsc --init</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>依赖: <code>typescript</code> / <code>@types/node</code> /<code>jest</code> / <code>ts-jest</code> /<code>@types/jest</code></p></li></ul><h3 id="实现基本-effect-与-reactive">实现基本 <code>effect</code> 与<code>reactive</code></h3><p><strong>TDD</strong></p><p>TDD(Test-Driven Development), 是敏捷开发中的一项核心实践和技术,也是一种设计方法论. TDD的原理是在开发功能代码之前,先编写单元测试用例代码, 测试代码确定需要编写什么产品代码.TDD虽是敏捷方法的核心实践.</p><p><strong>实现基本的 <code>reactive</code></strong></p><p><strong>需求</strong>: 最简单的 <code>reactive</code>,输入对象并输出对象的代理. 代理对象修改时原对象同步修改</p><ol type="1"><li>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Should different'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输入对象并返回代理对象</span>  <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// observed 和原来的不是一个对象</span>  observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 两者同步修改</span>  <span class="token function">expect</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 只需要为对象配置一个普通代理 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 就是给一个对象, 返回一个 new Proxy</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 语法见 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 语法见 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 唯一的难点就是<code>Proxy</code> 语法</li><li>重构: 无</li></ol><p><strong>实现基本的 <code>effect</code></strong></p><p><strong>需求</strong>: 1. 输入函数, 执行函数, 当函数中被<code>[GET]</code> 的响应式对象发生变化时重新执行函数 2. 返回一个函数<code>runner</code>, 当执行 <code>runner</code> 时执行<code>effect</code> 传入的函数</p><p><strong>需求分析</strong>: 1. 为什么是函数中被 <code>[GET]</code>的响应式对象变化时重新执行函数, <code>[SET]</code> 不行吗? 不行,响应式对象被 <code>[SET]</code> 后如果执行了函数, 响应式对象会被重新<code>[SET]</code>, 那么上一次 <code>[SET]</code> 就没用了.同时如果函数中其他变量不变只有响应式对象被 <code>[SET]</code>此时执行函数并不会使得函数中变量值发生变化(毕竟变化的响应式变量没有被<code>[GET]</code>), 不会产生 sideEffect. 2. 执行流程: 开始执行函数-&gt; <code>[GET]</code> 响应式对象 -&gt; 结束执行函数 -&gt;当响应式对象被 <code>[SET]</code> -&gt; 执行函数可以发现只需要让响应式对象知道当自己变化时哪些 <code>effect</code>需要执行就可以了, 至于 <code>effect</code>知不知道响应式对象是谁那无所谓. 可以在函数执行期间执行依赖收集, 为<code>[GET]</code> 的响应式对象注册 Effect Function,在响应式对象修改时执行其注册的 Effect Function.</p><p> </p><ol type="1"><li>测试: <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Effect test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Should sync'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> bar<span class="token punctuation">;</span>    <span class="token keyword">const</span> runner <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      bar <span class="token operator">=</span> observed<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// origin -> observed</span>    <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 立即执行 fn</span>    observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 修改有 [GET] 的响应式对象</span>    <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 响应式对象变化</span>    <span class="token function">expect</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 原对象变化</span>    <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行函数</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Should return runner'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span>info <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 劫持 console.info</span>    <span class="token keyword">let</span> bar<span class="token punctuation">;</span>    <span class="token keyword">const</span> runner <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'I RUN'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bar <span class="token operator">=</span> observed<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 立即执行 fn, console.info 被调用 1 次</span>    observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 响应式对象发生变化执行 fn, console.info 被调用 2 次</span>    <span class="token function">runner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 手动调用 runner, console.info 被调用 3 次</span>    <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 利用 <code>targetMap</code> 实现响应式对象 -&gt; Key -&gt;Effective Function 的映射. 导出 <code>track</code> 与<code>trigger</code> 用于收集与触发依赖 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// target: Object => keyMap:(string=>Set)</span><span class="token comment">// keyMap: string => Set</span><span class="token keyword">const</span> <span class="token literal-property property">targetMap</span><span class="token operator">:</span> Map<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>EffectReactive<span class="token operator">>>></span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token literal-property property">activeEffectFn</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EffectReactive</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">runner</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>runner <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    activeEffectFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// 全局注册当前正在收集依赖的 Effect</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行函数</span>    activeEffectFn <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 取消注册</span>  <span class="token punctuation">&#125;</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 考虑到 effect 上动作很多, 我们将其抽离为 EffectFunction 函数</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EffectReactive</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span>runner<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 依赖收集函数, 由 `[GET]` 触发, 该函数检查是否有 active 的 Effect, 有就收集依赖</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>targetMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> keyMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> keyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> dependenceEffect <span class="token operator">=</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>  dependenceEffect<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 触发函数, 当响应式对象被 `[SET]` 时尝试触发其收集的所有 Effect</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> keyMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyMap<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> depSet <span class="token operator">=</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depSet<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span><span class="token operator">...</span>depSet<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 在<code>Proxy</code> 上同步修改 <pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">export function reactive(origin) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return new Proxy(origin, &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   get(target, key, receiver) &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     track(target, key);</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     return Reflect.get(target, key, receiver);</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;,</span><span class="token prefix unchanged"> </span><span class="token line">   set(target, key, value, receiver) &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     // 这两行顺序反了就寄了</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     const res = Reflect.set(target, key, value, receiver);</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     trigger(target, key);</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     return res;</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;,</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;);</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>重构: 上面这个代码有点问题, 我们只在构造 EffectFunction时收集了依赖, 但是并不能收集全 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'dym track'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observe1 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> origin2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observe2 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    ob <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ob <span class="token operator">=</span> observe1<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      ob <span class="token operator">=</span> observe2<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cnt<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observe1<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observe2<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 这个测试就无法通过, 因为<code>observe2</code> 理论上应该在 <code>observe1.set</code> 调用<code>run</code> 的时候收集依赖, 所以应该修改构造函数和 <code>run</code>为 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> fn<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  activeEffect <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  activeEffect <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 我们知道, 所有的依赖收集都是通过 fn 中对 reactive 的<code>[GET]</code> 实现的, 我可以保证只要执行 <code>fn</code>在其前后都加入了依赖收集的 flag 就可以. 调用 <code>fn</code>只可能发生在</li><li>构造函数</li><li>手动执行 <code>runner</code></li><li>reactive 执行 <code>[SET]</code> 触发 trigger</li></ol><p>这三部分要执行的都是 <code>run</code> 我们可以保证只要执行<code>run</code> 就触发依赖收集</p><h3 id="实现-effect-的-scheduler-选项-watch">实现 <code>effect</code> 的<code>scheduler</code> 选项 (<code>watch</code>)</h3><p><strong>需求</strong>: 为 <code>effect</code> 传入第二个参数,参数是一个对象, 其中包含 <code>scheduler</code> 函数, 当构造 Effect时执行传入的第一个函数参数, 当响应式函数变化时执行<code>scheduler</code> 函数. 这与 Vue 3 的 <code>watch</code> 类似</p><p><strong>需求分析</strong>: 在构造 Effect的时候传入配置并在触发的时候判断是否有 <code>scheduler</code> 函数</p><ol type="1"><li>测试</li></ol><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Shound run scheduler'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> bar<span class="token punctuation">;</span>  <span class="token function">effect</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      bar <span class="token operator">=</span> observed<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token comment">// 传入配置</span>      <span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        bar <span class="token operator">=</span> <span class="token operator">-</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次运行 fn 函数</span>  observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第二次运行 scheduler 函数</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><ol start="2" type="1"><li>实现</li></ol><ul><li>修改 effect 函数, 加入配置项 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EffectReactive</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">.</span>runner<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>修改 EffectReactive 的构造函数加载配置项 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">EffectReactive</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">runner</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any<span class="token punctuation">;</span>  <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> fn<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>scheduler <span class="token operator">=</span> options<span class="token punctuation">.</span>scheduler<span class="token punctuation">;</span>    <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>修改触发函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token punctuation">[</span><span class="token operator">...</span>depSet<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>scheduler <span class="token operator">?</span> d<span class="token punctuation">.</span><span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> d<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>重构: 无</li></ul><p><strong>什么时候尝试抽离函数 / 对象</strong></p><ol type="1"><li>函数上有很多动作</li><li>函数作用范围广, 语义差</li></ol><h3 id="实现-effect-的-stop-与-onstop-选项">实现 <code>effect</code> 的<code>stop</code> 与 <code>onStop</code> 选项</h3><p><strong>需求</strong>: 1. 定义一个外部函数 <code>stop</code>. 传入<code>runner</code> 让 <code>runner</code> 不再被响应式对象 trigger 2.<code>effect</code> 中加入 <code>onStop</code> 配置, 在<code>stop</code> 时调用</p><p><strong>需求分析</strong>: 只需要将 EffectFunction从响应式对象的依赖表中删除即可. 但是我们之前就没记录有哪些响应式对象将EffectFunction 作为依赖..., 所以需要开一个 Set 记录这些响应式对象. 同时,我们不需要记录依赖的对象是什么, 只需要记录 KeyMap 对应的 Set.</p><ol type="1"><li>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Should stop trigger'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> bar<span class="token punctuation">;</span>  <span class="token keyword">const</span> runner <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      bar <span class="token operator">=</span> observed<span class="token punctuation">.</span>foo<span class="token punctuation">;</span> <span class="token comment">// 立即执行</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bar <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> bar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 如果首次调用置 0</span>        bar<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 立即执行</span>  <span class="token function">stop</span><span class="token punctuation">(</span>runner<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 停止后第一次执行为 -1</span>  observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// reactive 变化也不调用 fn</span>  <span class="token function">stop</span><span class="token punctuation">(</span>runner<span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 反复 stop 不反复执行 onStop</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 修正 EffectReactive <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">EffectReactive</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">runner</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// effect 只返回 runner, stop 函数需要根据 runner 找到 EffectReactive, 所以要在函数上加一个属性记录一下</span>    <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> any<span class="token punctuation">;</span>    effect<span class="token operator">?</span><span class="token operator">:</span> EffectReactive<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function-variable function">onStop</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// stop 回调</span>  <span class="token literal-property property">deps</span><span class="token operator">:</span> Set<span class="token operator">&lt;</span>Set<span class="token operator">&lt;</span>EffectReactive<span class="token operator">>></span><span class="token punctuation">;</span> <span class="token comment">// 收集了这个函数依赖的变量的依赖表集合</span>  <span class="token literal-property property">active</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span> <span class="token comment">// EffectReactive 是否运行 (stop 时置 0)</span>  <span class="token comment">// ...</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> fn<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>runner <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>runner<span class="token punctuation">.</span>effect <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onStop <span class="token operator">=</span> options<span class="token punctuation">.</span>onStop<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果用户手动执行 runner 那么只执行 fn, 不追踪依赖, 放置依赖追踪给已经解除依赖的元素再绑定上依赖</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    activeEffect <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    activeEffect <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 修正依赖收集函数<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//</span>  dependenceEffect<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 为当前正在依赖收集的 effect 的依赖上加入这个 key 的依赖表</span>  activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dependenceEffect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 实现 <code>stop</code> 函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token parameter">runner</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 不反复执行</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>runner<span class="token punctuation">.</span>effect<span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  runner<span class="token punctuation">.</span>effect<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 找到所有收集过 effect 的变量, 将 effect 从依赖表中删除</span>  <span class="token punctuation">[</span><span class="token operator">...</span>runner<span class="token punctuation">.</span>effect<span class="token punctuation">.</span>deps<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>runner<span class="token punctuation">.</span>effect<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 执行 onStop</span>  runner<span class="token punctuation">.</span>effect<span class="token punctuation">.</span>onStop <span class="token operator">&amp;&amp;</span> runner<span class="token punctuation">.</span>effect<span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>重构: 无</li></ol><h3 id="实现-proxy-的-readonly">实现 <code>Proxy</code> 的<code>Readonly</code></h3><p><strong>需求</strong>: <code>readonly</code> 与 <code>reactive</code>类似, 不过不支持 <code>set</code></p><p><strong>需求分析</strong>: 一个元素不支持 <code>set</code>也就不可能触发依赖, 所以也没有必要做依赖收集. 所以只需要精简一下<code>reactive</code>. 可以发现,不同权限的变量只是在构造的时候采用不同的 <code>[GET]</code> 与<code>[SET]</code> 策略. 可以将 <code>[GET]</code> 与 <code>[SET]</code>抽离出来</p><ol type="1"><li>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Happy path'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span>warn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将原始对象包装为只读对象</span>  <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最开始不报错</span>  observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 修改, 静默失效, 报 warning</span>  <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// warning 被调用一次</span>  <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// readOnly 静默失效</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 抽离 <code>[GET]</code> 与 <code>[SET]</code> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// reactive 的 [GET]</span><span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// reactive 的 [SET]</span><span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getReadonly</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">setReadonly</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Can not set readonly'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 要返回一下设置结果, 如果返回 false 会抛出异常, 而我们只希望静默失效</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> proxyConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  get<span class="token punctuation">,</span>  set<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> proxyReadonlyConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">get</span><span class="token operator">:</span> getReadonly<span class="token punctuation">,</span>  <span class="token literal-property property">set</span><span class="token operator">:</span> setReadonly<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>抽离对象创建函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span><span class="token parameter">origin<span class="token punctuation">,</span> readonly <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>readonly<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> proxyReadonlyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> proxyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre> 重写 <code>reactive</code> 实现<code>readonly</code> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">readonly</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>重构: 上面的就是重构后的代码</li></ol><h3 id="实现工具函数-isreadonly-isreactive-isproxy">实现工具函数<code>isReadonly</code>, <code>isReactive</code>,<code>isProxy</code></h3><p><strong>需求</strong>: 实现工具函数, <code>isReadonly</code>,<code>isReactive</code>, <code>isProxy</code>(前两个函数二选一).</p><p><strong>需求分析</strong>: 只需要在 <code>[GET]</code> 上特判即可</p><ol type="1"><li>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'isReadonly test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReadonly</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'isReactive test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReadonly</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'isProxy test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isProxy</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 构造个枚举 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> ReactiveFlag <span class="token punctuation">&#123;</span>  <span class="token constant">IS_REACTIVE</span> <span class="token operator">=</span> <span class="token string">'__v_isReactive'</span><span class="token punctuation">,</span>  <span class="token constant">IS_READONLY</span> <span class="token operator">=</span> <span class="token string">'__v_isReadonly'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre> 实现函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isReactive</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 要转一下 Boolean 因为非 reactive 对象会返回 undefined</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>value<span class="token punctuation">[</span>ReactiveFlag<span class="token punctuation">.</span><span class="token constant">IS_REACTIVE</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isReadonly</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>value<span class="token punctuation">[</span>ReactiveFlag<span class="token punctuation">.</span><span class="token constant">IS_READONLY</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isProxy</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">isReactive</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isReadonly</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 修改<code>[GET]</code> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reactiveFlags <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>ReactiveFlag<span class="token punctuation">.</span><span class="token constant">IS_REACTIVE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>ReactiveFlag<span class="token punctuation">.</span><span class="token constant">IS_READONLY</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> readonlyFlags <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>ReactiveFlag<span class="token punctuation">.</span><span class="token constant">IS_REACTIVE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>ReactiveFlag<span class="token punctuation">.</span><span class="token constant">IS_READONLY</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>reactiveFlags<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token operator">=></span>d<span class="token operator">===</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> reactiveFlags<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getReadonly</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>readonlyFlags<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token operator">=></span>d<span class="token operator">===</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> readonlyFlags<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>重构: 无</li></ol><h3 id="实现-reactive-readonly-嵌套">实现 <code>reactive</code> /<code>readonly</code> 嵌套</h3><p><strong>需求:</strong> 若 <code>reactive</code> /<code>readonly</code> 内部 value 为对象, 那么该对象也应该是<code>reactive</code> / <code>readonly</code></p><p><strong>需求分析:</strong> 我最开始的想法是在构造<code>reactive</code> 的时候遍历所有属性, 然后为这些属性配置<code>reactive</code>. 然而, 这无法将动态添加的对象转为<code>reactive</code>. 考虑需求, 我们希望让内层对象支持 reactive,实际上是希望让内层对象也支持依赖收集等 <code>reactive</code> 功能,而这些功能都是在对象被 <code>[GET]</code> 的时候被激活的.也就是说我们最晚可以在首次访问属性的将内层对象转换为<code>reactive</code>.</p><ol type="1"><li>测试(只写了 <code>reactive</code> 的) <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Should nested track'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observe <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>observe<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>observe<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>observe<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>observe<span class="token punctuation">.</span>bar<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 只需要在 <code>[GET]</code> 的时候判断属性是否是对象,如果是对象那么返回包装后的 <code>reactive</code></li></ol><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>reactiveFlags<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d <span class="token operator">===</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> reactiveFlags<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取结果</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">reactive</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果结果是对象, 将其包装为 reactive</span>  <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getReadonly</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>readonlyFlags<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d <span class="token operator">===</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> readonlyFlags<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取结果</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">readonly</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果结果是对象, 将其包装为 readonly</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 在 <code>packages/share/index.ts</code>中构造工具函数判断输入是否是对象 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> v <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> v <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre> 3. 改进:我们并没有实现内层 reactive 的持久化, 也就是说每次 reactive的结果是不同的... 实现内层对象持久化 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reactiveMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> readonlyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reactiveMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span>    reactiveMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> reactiveMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">readonly</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>readonlyMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span>    readonlyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> readonlyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p><strong>注意</strong></p><ol type="1"><li><strong>JS是动态语言, 不要尝试做静态代码分析</strong>:我们在实现功能的时候应该考虑什么时候完成工作不晚,不遗漏而不是相静态语言一样想什么时候可以操作数据</li><li><strong>实现功能时想想这个功能希望我们对外表现为什么样子</strong>:思考是什么而不是怎么做, 比如内层 reactive的第一版代码并没有实现将对象转为 reactive 并附着在对象上,而是考虑如果一个内层对象是 reactive, 那么我们应该在 <code>[GET]</code>的时候表现的与原始对象不同. 这就启发我们只需要在 <code>[GET]</code>的时候处理数据就可以而不需要在构造对象的时候实现这一功能.</li></ol><h3 id="实现-shadowreadonly">实现 <code>shadowReadonly</code></h3><p><strong>需求:</strong> <code>shadowReadonly</code>就是只对对象外层实现 readonly, 内部对象不管, 不 Proxy</p><p><strong>需求分析:</strong> 实际上就是不支持嵌套的 readonly</p><ol type="1"><li>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Happy path'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">shadowReadonly</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span>warn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 外层禁止修改</span>  <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observed<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 内部不管</span>  <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isProxy</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getShadowReadonly</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>readonlyFlags<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d <span class="token operator">===</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> readonlyFlags<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 其实就是不支持嵌套追踪的 readonly. shadowReadonly 的元素一定是非 reactive 对象, 所以直接返回</span>  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> proxyShadowReadonlyConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">get</span><span class="token operator">:</span> getShadowReadonly<span class="token punctuation">,</span>  <span class="token literal-property property">set</span><span class="token operator">:</span> setReadonly<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 实现 shadowReadonly <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> shadowReadonlyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span><span class="token parameter">origin<span class="token punctuation">,</span> readonly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> shadow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>shadow <span class="token operator">&amp;&amp;</span> readonly<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> proxyShadowReadonlyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>readonly<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> proxyReadonlyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> proxyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">shadowReadonly</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shadowReadonlyMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span>    shadowReadonlyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> shadowReadonlyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>重构</li></ol><h3 id="实现-ref">实现 <code>ref</code></h3><p><strong>需求</strong>: 实现 <code>ref</code> - 如果<code>ref(value)</code> 输入的是不是对象, 那么可以 - 通过<code>.value</code> 访问值 - 通过 <code>.value</code> 更新值,如果赋值时新值与旧值一样则什么都不做 - 支持类似 <code>reactive</code>的依赖收集与触发 - 如果 <code>ref(value)</code> 输入的是对象, 那么可以 -在上面的基础上对要求对象支持 <code>reactive</code></p><p><strong>需求分析</strong>:</p><ul><li>我最开始想到的是 <code>ref = (value) =&gt; reactive(&#123;value&#125;)</code>但是如果只是这么简单实现, 那么 <code>ref</code> 的非 <code>value</code>属性也将变为 <code>reactive</code>. 同时可以预见这样实现的<code>ref</code> 性能不及标准 <code>ref</code>.</li><li><code>ref</code> 的特点是<strong>外层有且只有</strong><code>value</code> 一个 <code>key</code>, 这意味我们在实现时<ul><li>不用使用全局 <code>targetMap</code> (只有一个depSet)</li><li>不用像 <code>reactive</code> 一样实现一个 Proxy, 可以只实现一个<code>[GET]</code> &amp; <code>[SET]</code>.</li></ul></li><li>考虑到 <code>ref</code> 的<strong>输入可能是对象或非对象</strong><ul><li>我们能不使用全局的 <code>targetMap</code>, 否则两个值相同的<code>ref</code> 会被判定为同一个 <code>keyMap</code></li><li>若输入为对象, 在对比赋值时新值与旧值一样不能简单的比较<code>_value === newValue</code>. 若输入为对象, 那么<code>reactive(obj) !== obj</code>. 我们还需要保存输入的原始值</li></ul></li></ul><ol type="1"><li><p>测试 <code>ref</code> 非对象时 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should be reactive'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> dummy<span class="token punctuation">;</span>  <span class="token keyword">let</span> calls <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    calls<span class="token operator">++</span><span class="token punctuation">;</span>    dummy <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造 EffectFunction 执行一次</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// ref 也支持依赖收集与触发</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 同值不触发</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <code>ref</code>对象时要把内层对象变为 <code>reactive</code>, 对象也可以变为非对象<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should convert to reactive'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> dummy<span class="token punctuation">;</span>  <span class="token keyword">let</span> calls <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    calls<span class="token operator">++</span><span class="token punctuation">;</span>    dummy <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">.</span>foo <span class="token operator">?</span> a<span class="token punctuation">.</span>value<span class="token punctuation">.</span>foo <span class="token operator">:</span> a<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造 EffectFunction 执行一次</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span>value<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// ref 也支持依赖收集与触发</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> origin<span class="token punctuation">;</span> <span class="token comment">// 同值不触发</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 同值不触发</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 变为非对象</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>实现</p></li></ol><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 与 reactive 直接返回一个 Proxy 不同, 我们只有 value 一个属性, 所以要手动实现一个对象</span><span class="token keyword">class</span> <span class="token class-name">RefImpl</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这里我们不使用全局的 targetMap 原因是</span>  <span class="token comment">//   - 我们这里的 Key 可以不是对象, 两个值相同的 ref 会被判定为同一个 key</span>  <span class="token comment">//   - 只存在一个 Key: value, 所以没有必要使用两个 Map, 只需要一个 Set 就可以存储所有的 EffectReactive</span>  <span class="token keyword">private</span> <span class="token literal-property property">deps</span><span class="token operator">:</span> Set<span class="token operator">&lt;</span>EffectReactive<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token keyword">private</span> _value<span class="token punctuation">;</span>  <span class="token keyword">private</span> rawValue<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">reactive</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rawValue <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 只需要 value 的 [SET] [GET] 就可以实现</span>  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">trackEffect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 依赖追踪</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 重复赋值不触发, 考虑两种情况</span>    <span class="token comment">//   - this._value 不是 Object, 直接比较</span>    <span class="token comment">//   - this._value 是 Object, 此时 this._value 是一个 reactive, reactive(obj) !== obj, 必须使用原始值比较</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rawValue <span class="token operator">===</span> newValue<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rawValue <span class="token operator">=</span> newValue<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token function">isObject</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">reactive</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">:</span> newValue<span class="token punctuation">;</span>    <span class="token function">triggerEffect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发依赖</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RefImpl</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 在这里, <code>trackEffect</code> 与<code>triggerEffect</code> 相当于不需要查 <code>Set</code> 的<code>track</code> 与 <code>trigger</code>(因为只有一个<code>Set</code>). 我们可以将原来的 <code>track</code> 与<code>trigger</code> 拆开</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>targetMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> keyMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> keyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 抽成一个函数</span>  <span class="token function">trackEffect</span><span class="token punctuation">(</span>keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trackEffect</span><span class="token punctuation">(</span><span class="token parameter">dependenceEffect</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 本来只需要在 track 上判断 activeEffect 但是这个函数可能被 track 或者 RefImpl 调用, 所以还需要在判断一次</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  dependenceEffect<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>  activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dependenceEffect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> keyMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyMap<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> depSet <span class="token operator">=</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depSet<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 抽成一个函数</span>  <span class="token function">triggerEffect</span><span class="token punctuation">(</span>depSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">triggerEffect</span><span class="token punctuation">(</span><span class="token parameter">depSet</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token operator">...</span>depSet<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>scheduler <span class="token operator">?</span> d<span class="token punctuation">.</span><span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> d<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="实现工具函数-isref-unref-proxyrefs">实现工具函数<code>isRef</code> &amp; <code>unRef</code> &amp;<code>proxyRefs</code></h3><p><strong>需求</strong>: - <code>isRef</code>: 判断输入是不是<code>ref</code> - <code>unRef</code>: 返回 <code>ref</code> 的<code>value</code> - <code>proxyRefs</code>: 模拟 Vue3 的 setup 函数,通过该函数返回的对象中的 <code>ref</code> 在模板字符串中无需<code>.value</code> 即可访问与赋值. 简单来说就是输入对象,在访问对象中浅层 <code>ref</code> 的 <code>Key</code> 时无需<code>.value</code> 即可访问</p><p><strong>需求分析</strong>: - <code>isRef</code>: 加一个 flag 即可 -<code>unRef</code>: 判断是不是 <code>ref</code>, 是就返回<code>ref.value</code> - <code>proxyRefs</code>: 构造一个代理,在读写是判断读写目标是不是 <code>ref</code> 如果是就返回<code>ref.value</code>. 同时, 在 <code>[SET]</code> 时, 如果新旧值都是<code>ref</code> 那么直接替换掉旧 <code>ref</code></p><ol type="1"><li><p>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'isRef'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> origin2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>origin1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed2 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>origin2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>origin1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>origin2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>observed1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>observed2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'unRef'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> origin2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>origin1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed2 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>origin2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">unRef</span><span class="token punctuation">(</span>observed1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>origin1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">unRef</span><span class="token punctuation">(</span>observed2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>origin2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">unRef</span><span class="token punctuation">(</span>observed2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toStrictEqual</span><span class="token punctuation">(</span>origin2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">unRef</span><span class="token punctuation">(</span>observed2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token function">reactive</span><span class="token punctuation">(</span>origin2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'proxyRefs'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">sampleRef</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">sampleStr</span><span class="token operator">:</span> <span class="token string">'demo'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> proxyUser <span class="token operator">=</span> <span class="token function">proxyRefs</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>sampleRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>proxyUser<span class="token punctuation">.</span>sampleRef<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>proxyUser<span class="token punctuation">.</span>sampleStr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span>proxyUser <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>sampleRef <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>proxyUser<span class="token punctuation">.</span>sampleRef<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>sampleRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  proxyUser<span class="token punctuation">.</span>sampleRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>proxyUser<span class="token punctuation">.</span>sampleRef<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>sampleRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>实现</p></li></ol><p>打flag <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">RefImpl</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> __v_isRef <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre> 实现 <code>isRef</code> 与 <code>unRef</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">unRef</span><span class="token punctuation">(</span><span class="token parameter">ref</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">isRef</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token operator">?</span> ref<span class="token punctuation">.</span>value <span class="token operator">:</span> ref<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isRef</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>value<span class="token operator">?.</span>__v_isRef<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 实现 <code>proxyRef</code> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">proxyRefs</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> proxyProxyRefConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getProxyRef</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 不用这么麻烦</span>  <span class="token comment">// if (isRef(target[key])) return target[key].value;</span>  <span class="token comment">// return target[key];</span>  <span class="token keyword">return</span> <span class="token function">unRef</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">setProxyRef</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 只特判 ref &lt;- 普通值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> proxyProxyRefConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">get</span><span class="token operator">:</span> getProxyRef<span class="token punctuation">,</span>  <span class="token literal-property property">set</span><span class="token operator">:</span> setProxyRef<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 3. 重构: 无</p><h3 id="实现-computed">实现 <code>computed</code></h3><p><strong>需求:</strong> 1. 输入一个函数, 返回一个对象, 可以通过<code>.value</code> 获取函数返回值, 当函数内部 <code>reactive</code>变化时, 返回值也要变化. 2. 支持 Lazy, 即: 1. 在 <code>computed</code>内部 <code>reactive</code> 变化时不触发 <code>computed</code> 传入函数2. 在 <code>[GET]</code> 时才触发 <code>computed</code> 传入函数 3.若内部 <code>reactive</code> 不变, 重复触发 <code>[GET]</code>不重复触发传入函数 3. 返回值也是一个 <code>reactive</code> 对象, 即<code>.value</code> 变化时要触发依赖</p><p><strong>需求分析:</strong></p><ol type="1"><li>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should reactive'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> observed<span class="token punctuation">.</span>foo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Lazy</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Lazy</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Lazy</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回值也可以收集依赖</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should trigger effect'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> cValue <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> value<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> dummy<span class="token punctuation">;</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    dummy <span class="token operator">=</span> cValue<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  value<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现</li></ol><ul><li>构造一个 <code>old</code>, 当内部 reactive 变化时修改,如果内部不变就直接使用原 <code>_value</code></li><li>类似构造 <code>ref</code> 的 <code>dep</code> 收集<code>.value</code> 的依赖</li><li>我们希望在第一次 <code>[GET]</code> 的时候收集依赖, 这可以使用<code>EffectReactive</code> 实现, 但是为了实现 Lazy 我们又不希望每次内部<code>reactive</code> 变化都触发依赖. 我们可以采用<code>scheduler</code> 解决, 每次内部 <code>reactive</code>变化时候打下标记(<code>old</code>), 并通知 <code>computed</code>要触发依赖了. 如果 <code>computed</code> 没有依赖那这次就 Lazy 过去了,如果有那在触发依赖时其他函数会调用计算属性的 <code>[GET]</code>此时完成刷新</li></ul><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>  effect<span class="token punctuation">,</span>  EffectReactive<span class="token punctuation">,</span>  trackEffect<span class="token punctuation">,</span>  triggerEffect<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./effect'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ComputedImpl</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">old</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>  <span class="token literal-property property">fst</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>  <span class="token literal-property property">_value</span><span class="token operator">:</span> any<span class="token punctuation">;</span>  <span class="token literal-property property">dep</span><span class="token operator">:</span> Set<span class="token operator">&lt;</span>EffectReactive<span class="token operator">></span><span class="token punctuation">;</span>  effect<span class="token operator">!</span><span class="token operator">:</span> EffectReactive<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>old <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fst <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">trackEffect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 为啥人家的代码没 fst 呢? 因为人家的 EffectReactive 每在构造函数的时候 run. 人家可以在构造函数里面注册这个 effect</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fst<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>fst <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EffectReactive</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>old <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token function">triggerEffect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>old<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>old <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>effect<span class="token punctuation">.</span><span class="token function">runner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">triggerEffect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">_</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Can not set computed value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ComputedImpl</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> - 重构: 考虑修改 <code>EffectReactive</code>构造函数</p><h3 id="小结">小结</h3><ul><li>实现 <code>Reactivity</code> 的核心就是一个 <code>Proxy</code>.通过修改 <code>[GET]</code> &amp; <code>[SET]</code> 实现不同权限</li><li>时刻谨记 JavaScript 是动态语言, 对象上的属性随时在变化,不要想在某一个对对象上的属性做特殊处理, 很容易遗漏,我们可以想想什么时候外部需要我们特殊处理的特性, 在出口处"围追堵截"</li><li>注意我们应该在什么时候抽象函数<ul><li>语义上可以抽象时候</li><li>功能重复时</li></ul></li><li>当函数功能部分重叠时要敢于拆分函数</li><li><code>ref</code> 相当于是一个整体功能弱化的 <code>reactive</code>,所以我们没有使用全局 <code>targetMap</code></li><li><code>computed</code> 的实现比较巧妙, 运用了一个 effect 的配置项,我们在实现工具函数的时候也可以想想是否可以通过配置项将两个功能类似的类合并成一个类.</li></ul><h2 id="实现-runtime-core-的-mount-部分">实现 runtime-core 的 mount部分</h2><h3 id="搭建环境">搭建环境</h3><p>runtime-core 直接参与页面实现, 我们需要利用打包工具打包代码.在打包网页时一般使用 webpack, 而在打包模块时一般使用 rollup.js. 安装rollup 及其 TypeScript 依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> i <span class="token parameter variable">-D</span> rollup @rollup/plugin-typescript tslib rollup-plugin-sourcemaps<span class="token comment">#         ^ 本体  ^ typescript 支持          ^ TS 支持依赖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置 rollup</p><ul><li>创建 <code>/package/index.ts</code> 作为整个项目的出口</li><li>创建 rollup 配置文件 <code>/package/rollup.config.js</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> typescript <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-typescript'</span><span class="token punctuation">;</span><span class="token keyword">import</span> sourceMaps <span class="token keyword">from</span> <span class="token string">'rollup-plugin-sourcemaps'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">'./packages/index.ts'</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 2种输出格式</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">'cjs'</span><span class="token punctuation">,</span> <span class="token comment">// 输出格式</span>      <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">'./lib/micro-vue.cjs.js'</span><span class="token punctuation">,</span> <span class="token comment">// 输出路径</span>      <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span>      <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">'./lib/micro-vue.esm.js'</span><span class="token punctuation">,</span>      <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">typescript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sourceMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>执行 <code>rollup -c ./rollup.config.js</code> 打包</li><li>根据提示将 <code>tsconfig.json</code> 中<code>"module": "commonjs"</code> 改为<code>"module": "ESNext"</code></li><li>在 <code>package.json</code> 中注册包的入口文件, <code>main</code>对应 commonjs 包, <code>module</code> 对应 ESM 包 <pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"lib/micro-vue.cjs.js"</span><span class="token punctuation">,</span><span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"lib/micro-vue.esm.js"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="构造测试用例">构造测试用例</h3><p>我们构造一个简单的 Vue demo 并尝试实现 vue-runtime主流程使其可以将我们的 demo 渲染出来, Vue 项目一般包含如下文件</p><ul><li><code>index.html</code>: 至少包含一个挂载点</li><li><code>index.js</code>: 引入根组件, 将根组件挂载到挂载点</li><li><code>App.vue</code>: 定义根组件</li></ul><p>SFC 需要 vue-loader 编译才能实现. 而 vue-loader 的作用是将 SFC 处理为<code>render</code> 函数, 在此我们只能先将 <code>App.vue</code> 处理为vue-loader 编译后函数. 定义</p><ul><li><code>index.html</code>: 只构造一个挂载点并引入 JS<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>micro-vue runtime-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>index.js</code>: 先不管有没有这些函数, 平时咋写就咋写<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../lib/micro-vue.esm'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>App.js</code>: <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> h <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../lib/micro-vue.esm.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><code>App.js</code> 默认导出了一个配置对象, 该对象应该包含 SFC中导出的 <code>setup</code> 与 vue-loader 编译得到的 <code>render</code>函数. 其中</p><ul><li><code>setup</code> 函数的返回值可以是对象, 也可以是渲染函数</li><li>在解析 SFC 文件时, 如果用户手动通过 <code>setup</code>返回了渲染函数那么 vue-loader 就不编译模板,如果没有返回则编译模板并构造渲染函数 <code>render</code>.<code>render</code>函数描述了<strong>这个组件里面</strong>应该如何渲染</li><li><code>render</code> 中的 <code>h</code> 用于表述一个组件/元素,语法为: <code>h(type, attr, children)</code>.<ul><li><code>type</code>: 描述元素或组件类型, 如果希望将目标渲染为 Element那么 <code>type</code> 为标签名, 如果希望渲染为组件那么<code>type</code> 为 组件配置对象</li><li><code>attr</code>: 描述元素或组件上的属性(例如:<code>class</code>)</li><li><code>children</code>:<ul><li>如果待渲染的是一个元素, 如果这个元素下面没有子元素或者子组件, 那么<code>children</code> 为元素的 <code>innerText</code>,如果下面还有子组件或子元素, 那么 <code>children</code> 应该是一个<code>h</code> 函数返回值数组</li><li><strong>如果待渲染的是一个组件, <code>children</code>属性将传入插槽而不是子元素, 这一点与模板设计是类似的</strong><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 的 <code>h</code> 函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'222'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 对于组件<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Comp</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 的 <code>h</code> 函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">h</span><span class="token punctuation">(</span>Comp<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'222'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>设计上是统一的.</li></ul></li></ul></li></ul><p>上面这个例子描述了这样一个组件:</p><ul><li><p>首先默认导出的是一个组件配置对象</p></li><li><p>这个组件被编译为了 <code>render</code> 函数, <code>render</code>函数返回了一个 <code>h</code>.</p><ul><li><p><strong>诶, 我要渲染一个组件, 为啥 <code>h</code> 的<code>type</code> 是 <code>div</code> 而不是配置对象呢?</strong>一定注意, <code>render</code>描述的是组件<strong>里面</strong>应该如何渲染, 这里的 <code>h</code>是说, App 组件里面有一个 <code>div</code>, 如果我们这里写的是<code>h(demoObj, &#123;&#125;, '111')</code> 这个意思是 App 组件里面有一个 demo组件, 这个 demo 组件里面啥也没有, 他的 innerText 是 '111'</p></li><li><p><strong>诶, 那我们在哪里定义了 App 的 h 函数呢?</strong>我们没有用 <code>h</code> 函数定义 App (是利用 createApp 定义的)至于这俩函数有什么联系后面再说</p></li><li><p><strong>诶, 那难道组件内部只能有一个一级子元素?</strong> 是的, 在Vue2 中我们就规定 <code>template</code> 下最多只能有一个一级子元素, 在Vue3 中我们用语法糖解除了这个限制. 你可能会想到对于 App 下的某个组件(如demo), 我们通过这样的方式让这个组件有多个子元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// App.js 的 render</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>demoConfig<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是错的, 数组将作为插槽传入 demo 组件, 组件的子元素是在组件自己的<code>render</code> 中定义的.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">demoConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// App.js 的 render</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>demoConfig<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实我们的疑问就是到底是他妈的谁构造了根组件 <code>App</code> 的<code>h</code> 函数</p></li></ul></li><li><p>App 是一个组件, 这个组件内部有一个 <code>div</code> 这个<code>div</code> 又有两个子<code>span</code>, 内容分别是<code>111</code> 和 <code>222</code></p></li></ul><h3 id="构造主流程">构造主流程</h3><ul><li><p><code>vue-runtime</code> 的主流程</p><pre class="mermaid">  graph TB根组件配置对象 --createApp--> 一种特殊的vNode --挂载根组件--> 根组件特殊使命结束,成为普通的组件 --渲染--> 进入patch函数 --目标是Element--> Element处理函数 --新Element--> 挂载Element --没有子Element --> 写入innerText挂载Element --有子Element--> 每个子Element --渲染--> 进入patch函数Element处理函数 --老Element--> 更新Element进入patch函数 --目标是组件--> 组件处理函数 --新组件--> 新建组件 --> 应用配置 --> 运行render --> 每个子组件 --渲染--> 进入patch函数组件处理函数 --老组件--> 更新组件</pre></li><li><p>可以看到 <code>createApp</code> 输入配置对象, <code>h</code>函数输入 <code>type</code>(可以是string可以是配置对象),<code>props</code>, <code>children</code>. 虽然两者输入不同,但是他们都返回了 vNode. <code>createApp</code> 的输入可以看作是没有<code>props</code>, <code>children</code> 的 <code>h</code>函数的组件输入, 而 <code>createApp</code> 的输出可以看作是具有特殊功能的<code>h</code> 输出. 实际上 <code>createApp</code> 与 <code>h</code>在底层都依赖了 <code>createVNode</code> 函数.</p></li><li><p>vue 渲染中对象发生了如下变化:</p><pre class="mermaid">  graph LR组件/元素配置对象 --> 虚拟节点vNode --> 实例对象 --> DOM</pre><ul><li>组件配置对象包含了 <code>render</code>, <code>setup</code></li><li><code>vNode</code> 在配置对象的基础上加入了部分属性</li><li>实例对象又在 <code>vNode</code> 的基础上加入了属性</li><li>最后挂载为 DOM</li></ul></li></ul><p><code>vue-runtime</code> 对外暴露函数只有 <code>createApp</code>我们从这个函数入手</p><ul><li><p><code>createApp</code> 创建了 app 组件 <code>vNode</code>,同时这个的 <code>vNode</code> 还应该有 <code>mount</code>函数(唯一特殊的地方)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/createApp.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createVNode <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./vnode'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> render <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./render'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token parameter">rootComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">_component</span><span class="token operator">:</span> rootComponent<span class="token punctuation">,</span>    <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> vNode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>rootComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">render</span><span class="token punctuation">(</span>vNode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>createVnode</code>: 收到配置对象, <code>props</code>,<code>children</code> 将他们作为一个对象存起来(API 与 <code>h</code>函数一样)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/vnode.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> props <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> component<span class="token punctuation">,</span>    props<span class="token punctuation">,</span>    children<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>render</code> 负责渲染 <code>vNode</code>, 但是<code>render</code> 什么都没做, 只是调用了 <code>patch</code>.这里多此一举是为了方便之后部署子元素时递归方便</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> vNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次创建没有老元素</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>patch</code>函数收入更新前后节点与挂载点(新节点的挂载前节点为 <code>null</code>),针对不同节点类型调用不同处理函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">processComponent</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token function">processElement</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>processComponent</code> 处理组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">function</span> <span class="token function">processComponent</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">updateComponent</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 老元素就 update</span>  <span class="token keyword">return</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span>vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  新元素就挂载</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>updateComponent</code> 暂时没有必要实现</p></li><li><p><code>mountComponent</code> 挂载组件. 首先明确组件自己是没有 HTML标签的, 挂载组件实际上是挂载组件中的子元素. 而组件存在的必要是其导出的setup 函数中存在子元素需要的变量与函数.</p><p>我们实现组件实例在上面记录组件需要的上下文</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">createComponent</span><span class="token punctuation">(</span>vNode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建实例</span>  <span class="token function">setupComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 配置实例</span>  <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>render<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 部署实例</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>createComponent</code> 用于创建组件实例,为了方便我们将组件的 type 提到实例上</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componment.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token parameter">vNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    vNode<span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> vNode<span class="token punctuation">.</span>type<span class="token punctuation">,</span> <span class="token comment">// 图方便</span>    <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>setupComponent</code> 用于创建实例, 配置实例, 包括初始化props, slots, 处理 setup 导出的变量等. 这里我们先不处理 props, slot,忽略 setup 导出的变量后的归属问题, 只解决</p><ul><li>如果有 <code>setup</code> 就执行 <code>setup</code>,如果执行结果是对象就将导出对象绑定到 instance 上, 如果是函数就把他当成<code>render</code> 函数</li><li>如果没 <code>render</code> 就从 <code>vNode</code> 的<code>type</code> 上读取 <code>render</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componment.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupComponent</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// initProp</span>  <span class="token comment">// initSlot</span>  <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果有 setup 就处理 setup 函数运行结果</span><span class="token keyword">function</span> <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span>setup<span class="token punctuation">)</span>    <span class="token function">handleSetupResult</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  finishComponentSetup<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 处理 setup 函数运行结果</span><span class="token keyword">function</span> <span class="token function">handleSetupResult</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> instance<span class="token punctuation">.</span>render <span class="token operator">=</span> res<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    instance<span class="token punctuation">.</span>setupResult <span class="token operator">=</span> res<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 最后兜底获取 render</span><span class="token keyword">function</span> <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  instance<span class="token punctuation">.</span>render <span class="token operator">=</span> instance<span class="token punctuation">.</span>render <span class="token operator">||</span> instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span>render<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现 <code>instance</code> 之后需要将中的子元素挂载出去, 递归<code>patch</code> 即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componment.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span><span class="token parameter">render<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// render 只能返回 h 函数的结果, 所以一定是一个 vNode, 直接 patch 就行</span>  <span class="token comment">// !</span>  <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类似的实现 Element 处理功能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">function</span> <span class="token function">processElement</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">updateElement</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">mountElement</span><span class="token punctuation">(</span>vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现挂载 Element</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">function</span> <span class="token function">mountElement</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span> <span class="token comment">// 构造 DOM 元素</span>  <span class="token comment">// 添加属性</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> vNode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 有子元素</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归挂载</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">;</span> <span class="token comment">// 没子元素</span>  container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最后写下 <code>h</code> 函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/h.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createVNode <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./vnode"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> h <span class="token operator">=</span> createVNode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现组件实例-proxy">实现组件实例 <code>Proxy</code></h3><p>我们想要让组件可以引用自己导出的变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'micro-vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'hi '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是因为我们直接调用了 <code>render</code> 函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/component.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span><span class="token parameter">render<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以 <code>render</code> 的 <code>this</code> 是 <code>global</code>,我们希望 <code>render</code> 的 <code>this</code> 包括<code>setup</code> 导出的对象与 Vue 3 文档中的<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvYXBpL2NvbXBvbmVudC1pbnN0YW5jZS5odG1s">组件实例<i class="fa fa-external-link-alt"></i></span>,所以我们需要构造一个 Proxy 同时实现访问 setup 结果与组件对象</p><ol type="1"><li>处理 setup 导出</li></ol><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/component.ts</span><span class="token keyword">function</span> <span class="token function">handleSetupResult</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  instance<span class="token punctuation">.</span>setupResult <span class="token operator">=</span> <span class="token function">proxyRefs</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><ol start="2" type="1"><li>在结束组件初始化时构造代理对象, 将代理对象作为一个属性插入实例<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/component.ts</span><span class="token keyword">function</span> <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 声明代理对象</span>  instance<span class="token punctuation">.</span>proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> instance <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> publicInstanceProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>  instance<span class="token punctuation">.</span>render <span class="token operator">=</span> instance<span class="token punctuation">.</span>render <span class="token operator">||</span> instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span>render<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 将 <code>target</code> 定义为 <code>&#123; instance &#125;</code>看起来很怪, 为啥不直接用 <code>instance</code> 呢? 因为在 DEV模式下这个对象内部应该还有很多属性, 只不过我们没有考虑</li><li>定义代理 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/publicInstanceProxy.ts</span><span class="token keyword">const</span> specialInstanceKeyMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">$el</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> publicInstanceProxy <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果 setup 导出的对象上有就返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>setupResult<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>setupResult<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 从组件属性上导出属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> specialInstanceKeyMap<span class="token punctuation">)</span>      <span class="token keyword">return</span> specialInstanceKeyMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> target<span class="token punctuation">.</span>instance<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 <code>$el</code></li></ol><p>有很多组件实例, 我们暂时只实现 <code>$el</code>. 挂载点应该是<code>vNode</code> 的属性, 所以我们将挂载点记录在 <code>vNode</code>上</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/vnode.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> props <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <code>el</code> 作为组件实例在组件挂载后在 vNode上更新即可</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/publicInstanceProxy.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>el <span class="token operator">=</span> container<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="实现-shapeflags">实现 <code>shapeFlags</code></h3><p>可以将组件类型判断抽出为一个变量, 通过位运算判断组件类型.我们目前需要判断的有:</p><ul><li>是否是 <code>Element</code></li><li>是否是有 <code>setup</code> 的组件(也叫 stateful component)</li><li>子节点是 string 还是数组</li></ul><p>实现</p><ul><li>修改 <code>vNode</code> 定义 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> props <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">shapeFlags</span><span class="token operator">:</span> <span class="token function">getShapeFlags</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>判断函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isObject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../share/index'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> ShapeFlags <span class="token punctuation">&#123;</span>  <span class="token constant">ELEMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token constant">STATEFUL_COMPONENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token constant">TEXT_CHILDREN</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token constant">ARRAY_CHILDREN</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getShapeFlags</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 注意, 这俩不是互斥的...</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">|=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span>setup<span class="token punctuation">)</span> res <span class="token operator">|=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">|=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> res <span class="token operator">|=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>同步判断 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span><span class="token punctuation">)</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mountElement</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> vNode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span>    <span class="token function">processElement</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现事件注册">实现事件注册</h3><p>我们可以为 Element 传入 attribute, 但是无法传入绑定事件, 例如传入<code>&#123; onClick: ()=&gt;&#123;&#125; &#125;</code> 在渲染到 DOM时可以发现渲染结果为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div onclick<span class="token operator">=</span><span class="token string">"()=>&#123;&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>onClick</code> 的小驼峰命名没了</li><li>value 应该是一个函数调用, 而这里只写了一个函数,这样点击时候并不会执行函数只会右查询一下这个函数</li></ul><p>所以我们要手动实现这样的功能: 在挂载 Element 时, 若传入的是事件,手动绑定这个事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mountElement</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 通过正则判断是否为事件绑定</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>      el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>        k<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on([A-Z].*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        vNode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>k<span class="token punctuation">]</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> vNode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现-props">实现 <code>props</code></h3><p><strong>需求:</strong></p><ol type="1"><li>将 props 输入 <code>setup</code>, 使得可以在 <code>setup</code>中通过 <code>props.属性名</code> 调用, 同时 <code>props</code> 为shadowReadonly</li><li>在 <code>render</code> 可以通过 <code>this.属性名</code> 调用</li></ol><p><strong>实现:</strong></p><ul><li><p>在 setup 时构造</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupComponent</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token function">initProps</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过第二点我们就知道我们需要将 props 加入componentPublicProxy</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> publicInstanceProxy <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> target<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>参考 Vue 的API, 对于第一点需求我们只需要修改<code>handleSetupResult</code> 的调用, 传入时加入 shadowReadonly</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">handleSetupResult</span><span class="token punctuation">(</span> instance<span class="token punctuation">,</span>      instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token function">shadowReadonly</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为 setup 传入参数即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> emit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    props<span class="token punctuation">.</span>foo<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// warn: readonly value</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>我们为啥不把 shadowReadonly 写入 componentPublicProxy 呢?这样岂不是可以保护 <code>render</code> 中调用不会修改原值? 没有必要,我们只需要保证浅层 readOnly, 而 render 是直接拿属性名的, 不会修改 props上的属性定义.</p></li></ul><h3 id="实现-emits">实现 <code>emits</code></h3><p><strong>需求:</strong></p><p>通过 props 传入一堆 <code>onXxxXxx</code> 函数在 <code>setup</code>中可以通过 <code>emit(xxxXxx)</code> 调用函数. 其中<code>emit</code>通过 <code>setup(props, &#123;emit&#125;)</code> 的方式传入.</p><p><strong>注意, 这里就是差一个 <code>on</code></strong>.你说为啥他妈的你要差个 <code>on</code> 啊, 我写 Vue 的时候也没有差异啊,这个应该是 vue-loader 为传入的 <code>emit</code> 名加上的 (如:<code>&lt;comp v-on:doSth='xxx'&gt;</code>, 可能会被 vue-loader 转为<code>&#123; onDoSth: xxx &#125;</code>)</p><p><strong>那么, 难道 <code>props</code> 上的 <code>onDoSth</code>不会被注册成事件监听吗?</strong> 怎么会, 我们的事件监听是为 Element绑定的!</p><p><strong>实现:</strong></p><ul><li><p>实现 emit 函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> event<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> eventName <span class="token operator">=</span> event<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-([a-z])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 如果是 xxx-xxx 命名法, 将其转换为小驼峰</span>    eventName <span class="token operator">=</span> eventName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-([a-z])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> lc</span><span class="token punctuation">)</span> <span class="token operator">=></span> lc<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z].*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 如果是小驼峰命名法, 将其转换为大驼峰</span>    eventName <span class="token operator">=</span> eventName<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> eventName<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  eventName <span class="token operator">=</span> <span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">;</span> <span class="token comment">// 加入 on</span>  instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将函数加入实例对象 <code>$emit</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> specialInstanceKeyMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">$el</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span>  <span class="token function-variable function">$emit</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">emit</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> publicInstanceProxy <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有个比较绕的点, Vue 要求 <code>emit</code> 调用方法为<code>emit(名字, 函数调用参数)</code>, 我们这边多了一个<code>instance</code>, 所以我们在定义 <code>$emit</code> 时为函数 bind第一个参数</p></li><li><p>传入 <code>setup</code> 的调用参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">handleSetupResult</span><span class="token punctuation">(</span>    instance<span class="token punctuation">,</span>    instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token function">shadowReadonly</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">emit</span><span class="token operator">:</span> instance<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>$emit<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现-slot">实现 <code>slot</code></h3><p>之前已经梳理过组件的 children 存储的是 slot. Vue 有三种 slot</p><ul><li>默认 slot: 直接作为子元素写入, 在子组件中会按顺序写入</li><li>具名 slot: 指定元素插入什么地方</li><li>作用域 slot: 为具名 slot 传入参数</li></ul><p>先考虑组件的 children 应该传入什么样的数据类型(<code>h(comp, &#123;&#125;, children)</code>)</p><ul><li><p>如果只支持默认 slot, 我们大可将数组传入 children 并将 render函数写成下面这样</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> HelloWorld <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 假设 $slot 表示父组件传入的插槽数组, 让子组件在渲染时直接解构上去</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>$slot<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'APP'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">'hi'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM LEFT'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM RIGHT'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>如果需要支持具名插槽, 我们可以传入数组, 并在每个元素上打上<code>name</code>. 但是这样每次放入元素都需要 <spanclass="math inline">\(O(n)\)</span> 查找. 可以考虑将传入的<code>children</code> 做成对象, Key 为具名插槽名字, Value 可以是 vNode数组也可以是 vNode.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> h<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> renderSlots <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../lib/micro-vue.esm.js'</span><span class="token punctuation">;</span><span class="token keyword">const</span> HelloWorld <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token comment">// 由于 this.$slots[key] 不知道是数组还是对象, 我们用一个函数辅助处理</span>      <span class="token function">renderSlots</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">,</span> <span class="token string">'left'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">renderSlots</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">renderSlots</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 调用默认插槽</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'APP'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">'hi'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM LEFT'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// left 插槽</span>        <span class="token literal-property property">right</span><span class="token operator">:</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM RIGHT'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// right 插槽</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM D1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM D2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">// 默认插槽</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里 Vue 引入了 <code>renderSlots</code> 函数,我以为其作用就是找到插槽并转换为数组, 就像下面这样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">renderSlots</span><span class="token punctuation">(</span>slots<span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> rSlots <span class="token operator">=</span> slots<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">?</span> slots<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">isObject</span><span class="token punctuation">(</span>slots<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span>rSlots<span class="token punctuation">]</span> <span class="token operator">:</span> rSlots<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是实际上这个函数的返回值是一个 vNode, Vue 会直接将一个或多个 vNode打包成一个 vNode 返回从而规避数组解构</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componentSlots.ts</span><span class="token keyword">function</span> <span class="token function">renderSlots</span><span class="token punctuation">(</span>slots<span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> rSlots <span class="token operator">=</span> name <span class="token keyword">in</span> slots <span class="token operator">?</span> slots<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    rSlots <span class="token operator">=</span> <span class="token function">testAndTransArray</span><span class="token punctuation">(</span>rSlots<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> rSlots<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不知道为什么要这么做😟</p></li><li><p>继续考虑作用域插槽, 为了实现作用域变量传递,我们需要将插槽定义为函数, 并在调用 <code>renderSolts</code>时传入参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> HelloWorld <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token function">renderSlots</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">,</span> <span class="token string">'left'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">renderSlots</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">,</span> <span class="token string">'wuhu'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 作用域 slot 传入参数</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">renderSlots</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">,</span> <span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token string">'wula'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'APP'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span>        HelloWorld<span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">'hi'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token function-variable function">left</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM LEFT'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function-variable function">right</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM '</span> <span class="token operator">+</span> foo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM D2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需要在 <code>renderSlots</code> 中判断 value是对象还是函数并分类讨论即可.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componentSlots.ts</span><span class="token keyword">function</span> <span class="token function">renderSlots</span><span class="token punctuation">(</span>slots<span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> rSlots <span class="token operator">=</span> name <span class="token keyword">in</span> slots <span class="token operator">?</span> slots<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 防止给无效 Key</span>    <span class="token comment">// 如果是对象 / 数组就不管, 函数就调用</span>    rSlots <span class="token operator">=</span> <span class="token function">isObject</span><span class="token punctuation">(</span>rSlots<span class="token punctuation">)</span> <span class="token operator">?</span> rSlots <span class="token operator">:</span> <span class="token function">rSlots</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 尝试转为数组</span>    rSlots <span class="token operator">=</span> <span class="token function">testAndTransArray</span><span class="token punctuation">(</span>rSlots<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>typeSymbol<span class="token punctuation">.</span>FragmentNode<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> rSlots<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// @packages/share/index.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">testAndTransArray</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token operator">:</span> <span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>至此, 我们实现了插槽的渲染, 再实现一些外围方法</p><ul><li><p>实现 <code>initSlot</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componentSlots.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initSlot</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  instance<span class="token punctuation">.</span>slots <span class="token operator">=</span> instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加 <code>$slot</code> 定义</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componentPublicInstance.ts</span><span class="token keyword">const</span> specialInstanceKeyMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">$el</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span>  <span class="token function-variable function">$emit</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">emit</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">$slots</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> instance<span class="token punctuation">.</span>slots<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现-fragmentnode">实现 <code>FragmentNode</code></h3><p>在实现 <code>renderSolts</code> 时我们为将多个 vNode 打包成一个 vNode采用 <code>h('div', &#123;&#125;, rSlots)</code> 将多个插槽放入了一个<code>div</code> 下. 然而我们希望在 HTML 中不现实这个多余的<code>div</code>, 此时就需要 <code>Fragment</code> 标签, 它相当于 Vue插槽中的 <code>&lt;template&gt;&lt;/template&gt;</code> 标签,永不会被渲染. 其实现的原理就是在 mount 时不挂载父节点,直接将子节点挂载到 container 上</p><ul><li><p>先用 Symbol 定义标签名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/vnode.ts</span><span class="token keyword">export</span> <span class="token keyword">const</span> typeSymbol <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">FragmentNode</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'FragmentNode'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>patch</code> 时特判 <code>Fragment</code> (因为<code>Fragment</code> 与 component, Element 判断条件不同,我们没法把他们放入用三个 <code>case</code> 中)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> typeSymbol<span class="token punctuation">.</span>FragmentNode<span class="token operator">:</span>      <span class="token function">processFragmentNode</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 特判 Fragment</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span>        <span class="token function">processElement</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token function">processComponent</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processFragmentNode</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">mountFragmentNode</span><span class="token punctuation">(</span>vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mountFragmentNode</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 不挂载父节点直接将子节点挂载到 container 上</span>  vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改 <code>renderSlots</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componentSlots.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">renderSlots</span><span class="token punctuation">(</span>slots<span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> rSlots <span class="token operator">=</span> name <span class="token keyword">in</span> slots <span class="token operator">?</span> slots<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  rSlots <span class="token operator">=</span> <span class="token function">testAndTransArray</span><span class="token punctuation">(</span>rSlots<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>typeSymbol<span class="token punctuation">.</span>FragmentNode<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> rSlots<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//       ^ 小改一下</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现-textnode">实现 <code>TextNode</code></h3><p>我们还希望在 HTML 中不使用 <code>span</code> 就写入文字, 就像</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我想写 span 就写 span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  想直接写就直接写<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>除非使用 <code>FragmentNode</code> 我们无法不渲染一段内容的标签, 但是<code>FragmentNode</code> 标签的 <code>children</code> 也必须是 vNode,所以我们还需要定义一个特殊标签, 它本身会渲染为 TextNode</p><ul><li><p>定义类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/vnode.ts</span><span class="token keyword">export</span> <span class="token keyword">const</span> typeSymbol <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">FragmentNode</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'FragmentNode'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">TextNode</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'TextNode'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>特判类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> typeSymbol<span class="token punctuation">.</span>FragmentNode<span class="token operator">:</span>      <span class="token function">processFragmentNode</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> typeSymbol<span class="token punctuation">.</span>TextNode<span class="token operator">:</span> <span class="token comment">// 特判 TextNode</span>      <span class="token function">processTextNode</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span>        <span class="token function">processElement</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token function">processComponent</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processTextNode</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">mountTextNode</span><span class="token punctuation">(</span>vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mountTextNode</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过 createTextNode 创建</span>  container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>向外部暴露接口</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/vnode.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createTextVNode</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>typeSymbol<span class="token punctuation">.</span>TextNode<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token function">createTextVNode</span><span class="token punctuation">(</span><span class="token string">'im text'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现工具函数-getcurrentinstance">实现工具函数<code>getCurrentInstance</code></h3><p>该函数用于在 setup 中获取当前 setup 所在的 instance.只须在全局变量上打个标记就可以实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/component.ts</span><span class="token keyword">let</span> currentInstance <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    currentInstance <span class="token operator">=</span> instance<span class="token punctuation">;</span> <span class="token comment">// 打个标记再执行</span>    <span class="token function">handleSetupResult</span><span class="token punctuation">(</span>      instance<span class="token punctuation">,</span>      instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token function">shadowReadonly</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">emit</span><span class="token operator">:</span> instance<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>$emit<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    currentInstance <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 删除标记</span>  <span class="token punctuation">&#125;</span>  <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> currentInstance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现-provide-inject">实现 <code>provide-inject</code></h3><p><code>provide-inject</code> 机制允许组件在 <code>setup</code>函数中调用 <code>provide(key, value)</code> 设置一个变量.在若干级儿组件中通过 <code>inject(key)</code> 获取值的信息传递机制.同时该机制遵守类似内外层作用域同名时的内层变量保护机制, 例如有如下provide 关系</p><pre class="mermaid">graph TBA:provide-a=1  -->  B:provide-a=2  --> C:inject-a=2A:provide-a=1  -->  D:provide-b=1A:provide-a=1  -->  E:inject-a=1 -->  F:inject-b=undefined</pre><p>也就是说当组件在父组件上无法 inject 属性时会向更上层 inject 属性.</p><p>我们可以在组件实例上定义组件的 provide与该组件的父组件然后实现递归查找的 inject 函数. 但是 JavaScript的原型链本身就支持递归查找, 我们可以指定通过指定某个组件 provide 的<code>__proto__</code> 为父组件的 provide 实现.</p><ul><li><p>在 instance 上加入 provide 属性记录该组件所 provide的所有键值对并设置 <code>provide.__proto__ = parent.provide</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    parent<span class="token punctuation">,</span> <span class="token comment">// 父组件</span>    <span class="token literal-property property">provides</span><span class="token operator">:</span> parent <span class="token operator">?</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>provides<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 组件的 provide</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们要求在 <code>createComponent</code> 的时候提供<code>parent</code> 属性, 那么我们也要在调用该函数时加入该参数,该函数依赖关系如下</p><pre class="mermaid">  graph TBrender -.-> patch --> processComponent --> mountComponent --> createComponent((createComponent)) -.-> renderEffect -.-> patchpatch --> processElement --> mountElement --> patch</pre><p>为了让 <code>createComponent</code> 有参数我们需要让其前置函数都带parent 参数, 所有可能调用其前置函数的函数也要带参数.其中存在两个特殊函数.</p><ul><li><code>render</code>: 该函数用来渲染根节点, 根节点的父节点是<code>null</code></li><li><code>renderEffect</code>: 该函数是用来渲染组件<code>instance</code> 的子组件 <code>subTree</code> 所以 parent 参数就是<code>instance</code></li></ul></li><li><p>实现 API</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/apiInject.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getCurrentInstance <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./component'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">provide</span><span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> currentInstance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> any<span class="token punctuation">;</span>  currentInstance<span class="token punctuation">.</span>provides<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> defaultValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> currentInstance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> any<span class="token punctuation">;</span>  <span class="token keyword">return</span> currentInstance <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> currentInstance<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>provides    <span class="token operator">?</span> currentInstance<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>provides<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token operator">:</span> defaultValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>测试外层屏蔽与跨组件传递</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @App.js</span><span class="token keyword">const</span> ProviderOne <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'F1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'B1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>ProviderTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> ProviderTwo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'F2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'Z2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> i_foo <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> i_bar <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'@ provide 2:'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'foo: '</span> <span class="token operator">+</span> i_foo<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'bar: '</span> <span class="token operator">+</span> i_bar<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span>Consumer<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> Consumer <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> i_foo <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> i_bar <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> i_baz <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'baz'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'@ consumer:'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'foo: '</span> <span class="token operator">+</span> i_foo<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'bar: '</span> <span class="token operator">+</span> i_bar<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'baz: '</span> <span class="token operator">+</span> i_baz<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'apiInject'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span>ProviderOne<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-none"><code class="language-none">apiInject@ provide 2:foo: F1bar: B1@ consumer:foo: F2bar: B1baz: Z2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结-1">小结</h3><p>到目前为止我们完成了组件挂载部分. 那我们折腾了点什么呢?我们就是实现了 <code>h</code> 函数的不同功能. 在实现 API的时候我们也要牢记 API 是为谁实现的.</p><table><thead><tr class="header"><th>参数</th><th>对于组件</th><th>对于Element</th></tr></thead><tbody><tr class="odd"><td><code>type</code></td><td>包含 <code>render</code> 与 <code>setup</code> 的对象</td><td>标签名</td></tr><tr class="even"><td><code>props</code></td><td>组件实例的 <code>props</code></td><td>包含属性与事件的对象</td></tr><tr class="odd"><td><code>children</code></td><td>slots</td><td>子元素 / 子组件</td></tr></tbody></table><p>可以发现, 这个 API 设计的非常对仗工整.</p><ul><li><p>对于 <code>type</code>: 分别传入对象与标签名, 无话可说</p></li><li><p>对于 <code>props</code>:</p><ul><li>对于 Element: 传入一堆 attribute. Element 是会被直接渲染的,我们直接将 Key-Value 写入标签即可. 在实践中我们发现做事件绑定时, 由于value 是函数名, 我们无法直接将 <code>onXxx</code> 写入标签.所以需要手动处理事件调用</li><li>对于组件: 传入一堆 props 与 emits. <strong>难道就没有类似<code>onClick</code> 的事件监听或者类似 <code>style</code> 的属性吗?没有! 组件本身是不会被渲染的! 不可能向组件标签上绑定什么东西.组件能传入的只有用于 setup / render 的属性与 emits 事件</strong></li></ul></li><li><p>对于 <code>children</code>:</p><ul><li><p>对于 Element: 传入一堆子元素 / 子组件, 挨个 patch 就行</p></li><li><p>对于组件: 传入 slots, 将 slots 在添加到元素上</p></li><li><p><strong>为啥不让组件的子元素也写入 children 呢?这样看的多工整!</strong></p><p>组件的子元素在组件的 render 里面, 不在 <code>children</code></p></li><li><p><strong>为啥不让Element的子元素也写入 render 呢? </strong></p><p>人家 Element 压根就没对象存子元素的</p></li><li><p><strong>这尤雨溪懂个锤子 Vue, 设计的 API咋还要分类讨论啊!</strong></p><p>实际上这个 API 设计的很有趣, 看看我们在 template中是怎么书写的(从前面再抄一遍)</p><p>对于 Element</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>h</code> 函数写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'222'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于组件 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Comp</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <code>h</code> 函数写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">h</span><span class="token punctuation">(</span>Comp<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'222'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在结构上是对仗的. 这 API 设计的太伟大了</p></li></ul></li></ul><p>此外我们还实现了特殊的 <code>Fragment</code> 与 <code>TextNode</code>这俩都是魔改 patch 实现的. 我们还实现了 <code>provide-inject</code> API,这里借助原型链实现功能也很有趣</p><h2 id="实现-runtime-core-的-update-部分">实现 runtime-core 的 update部分</h2><p>在实现更新逻辑时我们也要对组件与 Element分类讨论并谨记当前实现的是组件还是 Element</p><h3 id="基本思想">基本思想</h3><ul><li><p>update 事件的触发者是<strong>组件</strong>.响应式对象修改后会触发函数, 这个函数一定是组件上的函数, Element上存不了函数</p></li><li><p>响应式对象变化后最后应该触发的是依赖组件的 <code>render</code>函数, <code>render</code> 函数重新执行并生成新的 subTree.</p></li><li><p>我们不能直接将老的 subTree 删除掉替换为新的 subTree,这样性能损耗太大, <strong>我们希望尽可能对比新老 subTree, 根据两个subTree 之间的变化刷新 DOM</strong></p></li><li><p>我们对比的是 vNode, 存在 Element 与组件两种 vNode,我们要分别对不同类型 vNode 讨论更新方法</p></li><li><p><strong>如何判断两个 vNode 是 "同类型" 的</strong></p><p>这里的 "同类型" 是指两个 vNode 可以通过修改对应 DOM 的子元素, 修改props 实现更新, 而不需要卸载DOM.</p><ul><li><p><code>type</code> 不同的 vNode 一定不是同类型的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">oldVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'呀哈哈'</span><span class="token punctuation">)</span>newVnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'克洛洛'</span><span class="token punctuation">)</span>newVnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>三个 vNode 的 <code>type</code> 不同这导致 DOM 标签名不同,铁定无法不卸载元素更新</p></li><li><p><code>props.key</code> 不同一定不是同类型的</p><p>在 Vue 中我们可以指定元素的 key 作为元素的 id, 不同 id的元素一定是不同型的</p></li></ul><p>综上我们可以通过<code>vNode1.type === vNode2.type &amp;&amp; vNode1.props.key === vNode2.props.key</code>判断两个 vNode 是不是同类型的</p></li><li><p><strong>如果两个 vNode 是 "同类型" 的如何更新</strong></p><ul><li><p><strong>vNode 是 Element 型的</strong></p><p>Element 型 vNode 被实实在在的渲染到了 DOM 树上,我们希望尽量不卸载挂载 DOM 元素, 而希望在原 Element 上做更新.我们需要更新 DOM 的属性与 children</p><ul><li><p>更新 props</p></li><li><p>更新 children</p><p>children 可以是字符串也可以是 vNode 数组, 我们需要分类讨论</p><ul><li><p>Text 型到 Text 型:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">oldVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'呀哈哈'</span><span class="token punctuation">)</span>newVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'克洛洛'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>直接更新 textCont</p></li><li><p>Text 型到 Array 型:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">oldVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'呀哈哈'</span><span class="token punctuation">)</span>newVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'克洛洛'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'卓'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删掉 DOM 的 textCont, patch 新 vNode 进去</p></li><li><p>Array 型到 Text 型:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">oldVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'克洛洛'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'卓'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>newVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'呀哈哈'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删掉 DOM 的所有 children, 写入 textContent</p></li><li><p>Array 型到 Array 型: 最麻烦的, 采用双端对比法,找到节点发生变化的区间, 删除新 vNode 中不存在的节点, 加入新 vNode中独有节点, 调整节点顺序</p></li></ul></li></ul></li><li><p><strong>新 vNode 是组件型的</strong></p><p>??</p></li></ul></li><li><p><strong>如果两个 vNode 不是 "同类型" 的如何更新</strong></p><p>如果是这种情况我们就束手无策了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">oldVnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'呀哈哈'</span><span class="token punctuation">)</span>newVnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'克洛洛'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是这种情况是不存在的. 若两个不同类型 vNode 要求更新,那么前面一定调用过 <code>patch(vNode1, vNode2, ...)</code>,在更新时哪些情况会调用 <code>vNode1 !== null</code> 的 patch 呢?组件更新, 同类型 Element 的 Array to Array.不同类型的节点会被双端对比算法视为不同节点而被删除 / 增加掉.所以不可能让不同类型节点 <code>patch</code> 在一起.</p></li></ul><h3 id="更新-pipeline">更新 pipeline</h3><p>让响应式对象支持依赖收集与触发依赖. 将整个 renderEffect 装入 effect,这意味着每次响应式对象发生变化都会重复调用 renderEffect.同时我们要区分是 mount 还是 update, 我们可以让 instance 记录更新前的subTree 并默认为 null 实现这一功能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/component.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> subTree <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">patch</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree<span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//    ^ 第一次是 null</span>    instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>el <span class="token operator">=</span> container<span class="token punctuation">;</span>    instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> subTree<span class="token punctuation">;</span> <span class="token comment">// 记录当前 subTree</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同步修正一下 <code>createComponent</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token literal-property property">subTree</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后需要实现:</p><ul><li>Element:<ul><li>更新 props</li><li>更新 children</li></ul></li><li>组件<ul><li>更新??</li></ul></li></ul><h3 id="element-更新-props">Element 更新 props</h3><p>给定更新前后的 vNode 与目标 DOM 对象, 实现 props 更新.</p><ul><li><p>实现测试用例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> attrValue <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attrValue</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cnt<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      attrValue<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attrValue</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token operator">++</span>cnt<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> attrValue<span class="token punctuation">,</span> htmlValue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">attrValue</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attrValue<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>先实现 <code>updateElement</code> 函数</p><p>由于 <code>vNode2</code> 没有被 mount 所以 <code>vNode2.el</code>不存在, 但是两个 vNode 对应的是同一个 DOM 对象, 我们可以将<code>vNode1.el</code> 直接给到 <code>vNode2.el</code>. 同时我们定义<code>patchProps</code> 用于实现功能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateElement</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> elem <span class="token operator">=</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>el <span class="token operator">=</span> vNode1<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">patchProps</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> vNode1<span class="token operator">?.</span>props<span class="token punctuation">,</span> vNode2<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现 <code>patchProps</code></p><p>首先要明确我们需要 patch 什么样的 props.</p><ul><li>空值当不存在: 如果 props 是 <code>&#123;key: undefined / null&#125;</code>我们就不 patch 这个 key</li><li>value 可能是事件监听: 我们可以借助 mountElement 中的 props 实现</li></ul><p>先实现辅助函数判断 key 是否在 props 上. 如果 value 是 null /undefined / NaN 也当 key 不存在</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/share/index.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isUNKey</span><span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> k <span class="token keyword">in</span> obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实现 <code>patchProps</code> 函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patchProps</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">elem</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> oldProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> newProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取所有 props</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>oldProps<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>newProps<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  props<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 假设 key 是事件监听, 尝试将其转化为小驼峰</span>    <span class="token keyword">let</span> ek <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>      <span class="token operator">?</span> k<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on([A-Z].*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token comment">// 如果 key 在老 vNode 中存在, 在新 vNode 中不存在: removeAttribute</span>    <span class="token comment">// 如果 key 在老 vNode 中存在, 是事件监听: 解除 防止监听函数变化</span>    <span class="token comment">// 如果 key 在老 vNode 中存在, 不是事件监听, 在新 vNode 也有: 不管</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUNKey</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> oldProps<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isUNKey</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span> <span class="token operator">||</span> ek<span class="token punctuation">)</span><span class="token punctuation">)</span>      ek <span class="token operator">?</span> elem<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>ek<span class="token punctuation">,</span> oldProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> elem<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 不管老节点有没有, 新节点有: setAttribute / addEventListener</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUNKey</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span><span class="token punctuation">)</span>      ek        <span class="token operator">?</span> elem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>ek<span class="token punctuation">,</span> newProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">:</span> elem<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> newProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为什么叫 <code>patchProps</code> 不叫<code>updateProps</code>?</p><p>实际上这个函数也可以用于 <code>mountElement</code> 中 props 处理(令<code>oldProps = &#123;&#125;</code>), 并不是 <code>updateElement</code> 专用的.修改</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">function mountElement(vNode, container, parent) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const el = (vNode.el = document.createElement(vNode.type) as HTMLElement);</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> Object.keys(vNode.props).forEach((k) => &#123;</span><span class="token prefix deleted">-</span><span class="token line">   if (/^on[A-Z]/.test(k))</span><span class="token prefix deleted">-</span><span class="token line">     el.addEventListener(</span><span class="token prefix deleted">-</span><span class="token line">       k.replace(/^on([A-Z].*)/, (_, e) => e[0].toLowerCase() + e.slice(1)),</span><span class="token prefix deleted">-</span><span class="token line">       vNode.props[k]</span><span class="token prefix deleted">-</span><span class="token line">     );</span><span class="token prefix deleted">-</span><span class="token line">   else el.setAttribute(k, vNode.props[k]);</span><span class="token prefix deleted">-</span><span class="token line"> &#125;);</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> patchProps(el, &#123;&#125;, vNode.props);</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="element-更新-children-前三种情况">Element 更新 children前三种情况</h3><ul><li><p>Text to Text</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">T2T</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> ot <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      ot<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> ot <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ot <span class="token operator">?</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'after'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'before'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token constant">T2T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需修改 DOM 内部 textContent, 如果内容不变就不修改</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>children <span class="token operator">!==</span> vNode1<span class="token punctuation">.</span>children<span class="token punctuation">)</span>     container<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vNode2<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Array to Text</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">A2T</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> ot <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      ot<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> ot <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ot      <span class="token operator">?</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'after'</span><span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'before'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'before'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 DOM 中所有 Element 都删除, 写入 conteneText</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span>      <span class="token punctuation">[</span><span class="token operator">...</span>container<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里合并了下代码, 如果是 Array to Text, 那么 Array !== string 一定成立</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>children <span class="token operator">!==</span> vNode1<span class="token punctuation">.</span>children<span class="token punctuation">)</span>      container<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vNode2<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Text to Array</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">T2A</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> ot <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      ot<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> ot <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ot      <span class="token operator">?</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'after'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'after'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'before'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除内部 textContent 插入 vNode 数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span>      <span class="token punctuation">[</span><span class="token operator">...</span>container<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>children <span class="token operator">!==</span> vNode1<span class="token punctuation">.</span>children<span class="token punctuation">)</span>      container<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vNode2<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      container<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>      vNode2<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> element<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为 Array to Array 预留函数调用<code>patchKeyedChildren</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span>      <span class="token punctuation">[</span><span class="token operator">...</span>container<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>children <span class="token operator">!==</span> vNode1<span class="token punctuation">.</span>children<span class="token punctuation">)</span>      container<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vNode2<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      container<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>      vNode2<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> element<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">patchKeyedChildren</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>children<span class="token punctuation">,</span> vNode2<span class="token punctuation">.</span>children<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="element-更新-children-的双端对比法">Element 更新 children的双端对比法</h3><p><strong>基本思想</strong></p><p>分别从左边右边对比元素, 找到发生变化的区间, 例如前后两个 Array分别为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span> a b c d e f g h <span class="token punctuation">]</span><span class="token punctuation">[</span> a b e d i g h <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从左边找找到只有 <code>a b</code> 是相同的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span> a b <span class="token operator">|</span> c d e f g h <span class="token punctuation">]</span><span class="token punctuation">[</span> a b <span class="token operator">|</span> e d i g h <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从右边找找到只有 <code>g h</code> 是相同的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span> a b <span class="token operator">|</span> c d e f <span class="token operator">|</span> g h <span class="token punctuation">]</span><span class="token punctuation">[</span> a b <span class="token operator">|</span> e d i <span class="token operator">|</span> g h <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后我们找到变化区间(<code>[c d e f] -&gt; [e d i]</code>)</p><p>将老 vNode 独有的子 vNode 移除(<code>[c f]</code>), 将新 vNode独有的子 vNode patch上(<code>[i]</code>), 调整子 vNode 的顺序. 可以使用<code>insertBefore</code> 调整顺序.</p><ul><li><p>删除老 vNode 独有子元素</p><p>为新 vNode 变化区间上的元素编号, 建立 <code>key -&gt; index</code>的映射. 遍历老节点, 如果没有查到 key 就删除节点</p></li><li><p>创建新 vNode 独有的子元素: 在调整位置时一并处理</p></li><li><p>调整位置</p><p>可以通过之前建立的 <code>key -&gt; index</code> 映射一股脑的将 DOM调整到正常位置, 但是调整 DOM 的代价太高了, 我们希望尽可能少的减少<code>insertBefore</code> 操作.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>l1 l2 <span class="token function">l3</span> <span class="token punctuation">(</span> a b c d e f g h i <span class="token punctuation">)</span> r1 r2 r3<span class="token punctuation">]</span><span class="token punctuation">[</span>l1 l2 <span class="token function">l3</span> <span class="token punctuation">(</span> i a b c d e f g h <span class="token punctuation">)</span> r1 r2 r3<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果采用一般方法, 我们需要分别将 <code>a - h</code> 移动到<code>r1</code> 前面. 这明显不如将 <code>i</code> 移动到 <code>a</code>前面划算.</p><p>我们可以在原 vNode 的子 vNode 数组中定义一个稳定串,保证稳定串中的元素相对位置符合新 vNode 设定, 我们只需要遍历新 vNode的子元素, 如果该元素没有在老 vNode 中出现就创建并将其 patch 到指定位置,如果在非稳定串中出现我们就将其 <code>insetBefore</code> 到指定位置.考虑到我们只有 <code>insertBefore</code> 没有 <code>insertAfter</code>函数, 我们还需要保证一个元素在 <code>insertBefore</code>前他后一个的元素已经就位了. 所以我们需要倒着遍历新 vNode.</p><p>在上面的例子中, 可以将 <code>a b c d e f g h</code> 视作稳定串, 调整<code>i</code> 到 <code>a</code> 前即可</p></li><li><p>将 vNode patch 到指定位置</p><p>想要将 Element 调整到指定 Element 前面, 我们可以采用<code>container.insertBefore(elem, target)</code>, 如果<code>target == null</code> 就将元素调整到 container 尾部.</p><p>但是如果想将新 vNode 调整到指定 Element 前面就需要调用 patch 了,我们需要为 patch 加入一个锚点参数指定将 vNode patch 到哪里:<code>patch(vNode1, vNode2, container, parent = null, anchor = null)</code></p></li><li><p>寻找稳定串</p><p>寻找稳定串其实就是寻找相对位置正确的尽可能长的子串,我们又已知道老节点对应的新节点有一个 <code>key -&gt; index</code>的映射, 在新节点中, index 严格递增, 所以可以获取每个老节点对应的 index并查找 LIS. 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">oldIndex</span><span class="token operator">:</span>  <span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">2</span>    <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">3</span>   <span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span><span class="token literal-property property">oldVNode</span><span class="token operator">:</span> <span class="token punctuation">[</span>l1 l2 <span class="token function">l3</span> <span class="token punctuation">(</span> a b c d e f g  h  i <span class="token punctuation">)</span> r1 r2 r3<span class="token punctuation">]</span><span class="token literal-property property">newVNode</span><span class="token operator">:</span> <span class="token punctuation">[</span>l1 l2 <span class="token function">l3</span> <span class="token punctuation">(</span> i a b c d e f  g  h <span class="token punctuation">)</span> r1 r2 r3<span class="token punctuation">]</span><span class="token literal-property property">newIndex</span><span class="token operator">:</span>  <span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">2</span>    <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span>  <span class="token number">10</span> <span class="token number">11</span>  <span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以得到 <code>lis = [a b c d e f g h]</code></p></li></ul><p><strong>特殊情况</strong></p><p>可以针对部分特殊情况特殊处理避免计算 LIS</p><ul><li><p>新 vNode 只在最右边加了一堆元素: 只需要 patch 多出来的部分</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">old</span><span class="token operator">:</span> <span class="token punctuation">[</span>a b c<span class="token punctuation">]</span><span class="token keyword">new</span><span class="token operator">:</span> <span class="token punctuation">[</span>a b c d e f<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>新 vNode 只在最左边加了一堆元素: 只需要 patch 多出来的部分</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">old</span><span class="token operator">:</span> <span class="token punctuation">[</span>      d e f<span class="token punctuation">]</span><span class="token keyword">new</span><span class="token operator">:</span> <span class="token punctuation">[</span>a b c d e f<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>新 vNode 只最右边少了一堆元素: remove 多余 vNode 的 DOM 元素.注意这里 remove 的不能是 vNode, 这样不管子 vNode 是 Element还是组件类型的都可以一键卸载(因为 ELement 或 组件类型的 vNode 对应的 DOM树都一定只有一个根 Element)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">old</span><span class="token operator">:</span> <span class="token punctuation">[</span>a b c d e f<span class="token punctuation">]</span><span class="token keyword">new</span><span class="token operator">:</span> <span class="token punctuation">[</span>a b c<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>新 vNode 只最左边少了一堆元素: remove 多余 vNode 的 DOM 元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">old</span><span class="token operator">:</span> <span class="token punctuation">[</span>a b c d e f<span class="token punctuation">]</span><span class="token keyword">new</span><span class="token operator">:</span> <span class="token punctuation">[</span>      d e f<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p><strong>我的部分实现</strong></p><p>定义</p><ul><li><code>c1, c2</code>: 更新前后 vNode 的 children 数组</li><li><code>anchor</code>: 锚点</li><li><code>i</code>: 变化区间的左边界(包括)</li><li><code>e1, e2</code>: 变化区间对应 <code>c1, c2</code>的右边界(包括)</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patchKeyedChildren</span><span class="token punctuation">(</span><span class="token parameter">c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    e1 <span class="token operator">=</span> c1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>    e2 <span class="token operator">=</span> c2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 从左往右看, 如果类型不同或者 key 不同就退出, 否则递归更新子节点</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!==</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">||</span> c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>key <span class="token operator">!==</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">patch</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 从右往左看, 如果类型不同或者 key 不同就退出, 否则递归更新子节点</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> e1 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> e2 <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> e1 <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">,</span> e2 <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c1<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!==</span> c2<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">||</span> c1<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>key <span class="token operator">!==</span> c2<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">patch</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 右侧有新节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> c1<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    c2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> i <span class="token operator">>=</span> c2<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 右侧有老节点</span>  <span class="token comment">//     传入的是 vNode 要加上 el 找到 DOM 对象</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> c2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 左侧有新节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e1 <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> e2 <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    c2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> e2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> c1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 左侧有老节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e2 <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> e1 <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> e1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 中间</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> newRange <span class="token operator">=</span> c2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> oldRange <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> k2iNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>newRange<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">,</span> i <span class="token operator">+</span> idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> k2iOld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>oldRange<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oldRange<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 新的有, 老的有 直接更新</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>k2iNew<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">patch</span><span class="token punctuation">(</span>          d<span class="token punctuation">,</span>          c2<span class="token punctuation">[</span>k2iNew<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token keyword">as</span> number<span class="token punctuation">]</span><span class="token punctuation">,</span>          container<span class="token punctuation">,</span>          parent<span class="token punctuation">,</span>          anchor        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 新的没有, 老的有 直接删除</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k2iNew<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        d<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        k2iOld<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 新的有老的没有 新建到问题区间的尾部</span>    newRange<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k2iOld<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">patch</span><span class="token punctuation">(</span>          <span class="token keyword">null</span><span class="token punctuation">,</span>          c2<span class="token punctuation">[</span>k2iNew<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token keyword">as</span> number<span class="token punctuation">]</span><span class="token punctuation">,</span>          container<span class="token punctuation">,</span>          parent<span class="token punctuation">,</span>          e2 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> c2<span class="token punctuation">.</span>length <span class="token operator">?</span> c2<span class="token punctuation">[</span>e2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el <span class="token operator">:</span> <span class="token keyword">null</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        k2iOld<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ... 调整位置</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>存在的问题</strong></p><ul><li><p>在中间对比时: 新的有老的没有的情况可以合并到调整位置上</p></li><li><p>为只用四个 if 考虑了特殊情况, 没有考虑特殊情况的的扩展</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">old <span class="token operator">=</span> <span class="token punctuation">[</span>a b c d e f<span class="token punctuation">]</span><span class="token keyword">new</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a b     e f<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>既然从左往右看 <code>[a b]</code> 一样, 我们可以假装消掉<code>[a b]</code> 把 <code>[c d]</code>看成只有左侧有多于元素的情况此时直接消除 <code>[c d]</code> 即可,类似的还有</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">old <span class="token operator">=</span> <span class="token punctuation">[</span>a b     e f<span class="token punctuation">]</span><span class="token keyword">new</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a b c d e f<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果可以特判这种情况就爽死了</p></li></ul><p><strong>别个的实现</strong></p><p>mini-vue 的实现和原版的差不多</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patchKeyedChildren</span><span class="token punctuation">(</span> <span class="token parameter">c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parentAnchor<span class="token punctuation">,</span> parentComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> l2 <span class="token operator">=</span> c2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> e1 <span class="token operator">=</span> c1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> e2 <span class="token operator">=</span> l2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">isSameVNodeType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> n1<span class="token punctuation">.</span>type <span class="token operator">===</span> n2<span class="token punctuation">.</span>type <span class="token operator">&amp;&amp;</span> n1<span class="token punctuation">.</span>key <span class="token operator">===</span> n2<span class="token punctuation">.</span>key<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// ... 求 i e1 e2</span>  <span class="token comment">// 人家在这里是比较了 e1 e2 i 的关系, 这样变相的 "消除" 掉了前后置元素</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> e1 <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> nextPos <span class="token operator">=</span> e2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> anchor <span class="token operator">=</span> nextPos <span class="token operator">&lt;</span> l2 <span class="token operator">?</span> c2<span class="token punctuation">[</span>nextPos<span class="token punctuation">]</span><span class="token punctuation">.</span>el <span class="token operator">:</span> parentAnchor<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> parentComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> e2 <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> e1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> e1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">hostRemove</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ... 中间对比</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个明显不如四个 if 来的直观, 但是顺道处理了特殊情况的扩展情况.有一说一 vuejs/core 在这一段中代码的注释中也没有提起这种情况,但是通过这个泛泛的判断条件我们确实捕获到了这种情况.看起来这是一个无意为之的优化?</p><p><strong>最终实现</strong></p><ul><li><p>实现 diff</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">function</span> <span class="token function">patchKeyedChildren</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">c1</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">c2</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    e1 <span class="token operator">=</span> c1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>    e2 <span class="token operator">=</span> c2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">isSameType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v1<span class="token punctuation">,</span> v2</span><span class="token punctuation">)</span> <span class="token operator">=></span>    v1<span class="token punctuation">.</span>type <span class="token operator">===</span> v2<span class="token punctuation">.</span>type <span class="token operator">&amp;&amp;</span> v1<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key <span class="token operator">===</span> v2<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">;</span>  <span class="token comment">// 找到区间</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSameType</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">patch</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> e1 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> e2 <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> e1 <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">,</span> e2 <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSameType</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">patch</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 特判</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e2 <span class="token operator">&lt;</span> i <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> e1<span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e1 <span class="token operator">&lt;</span> i <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> e2<span class="token punctuation">)</span>    c2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">patch</span><span class="token punctuation">(</span>        <span class="token keyword">null</span><span class="token punctuation">,</span>        d<span class="token punctuation">,</span>        container<span class="token punctuation">,</span>        parent<span class="token punctuation">,</span>        e1 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>=</span> c1<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> c1<span class="token punctuation">[</span>e1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el      <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 中间</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> newRange <span class="token operator">=</span> c2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> oldRange <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> new2oldIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新节点 index -> 老节点 index</span>    <span class="token keyword">const</span> key2indexNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span> <span class="token comment">// 新节点 key -> 新节点 index</span>      newRange<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">,</span> i <span class="token operator">+</span> idx<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果老节点在新节点中存在 构造 新节点 index -> 老节点 index</span>    <span class="token comment">//                     不存在 删除老节点</span>    oldRange<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key2indexNew<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        new2oldIndex<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key2indexNew<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> lis <span class="token operator">=</span> <span class="token constant">LIS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>new2oldIndex<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构建稳定序列</span>    newRange<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> curIndex</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> oldVnode <span class="token operator">=</span> oldRange<span class="token punctuation">[</span>new2oldIndex<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curIndex <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 对应老节点(如果存在)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lis<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>curIndex <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 处于稳定序列就只更新</span>          <span class="token keyword">return</span> <span class="token function">patch</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> prev<span class="token operator">?.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>new2oldIndex<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>curIndex <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 不在就移动节点</span>          container<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> prev<span class="token operator">?.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">patch</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> prev<span class="token operator">?.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> cur<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> prev<span class="token operator">?.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有老节点就加入</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      e2 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>=</span> c2<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> c2<span class="token punctuation">[</span>e2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>实现 LIS</p><p>定义 <code>low</code> 数组, <code>low[i]</code> 表示长度为<code>i</code> 的LIS结尾元素的最小值.对于一个上升子序列，显然其结尾元素越小, 越有利于在后面接其他的元素,也就越可能变得更长. 因此, 我们只需要维护 <code>low</code>数组，对于每一个 <code>s[i]</code>，如果<code>s[i] &gt; low[当前最长的LIS长度]</code>，就把 <code>a[i]</code>接到当前最长的 LIS 后面，即 <code>low[++当前最长的LIS长度] = a[i]</code>对于每一个 <code>s[i]</code> ，如果 <code>s[i]</code> 能接到 LIS后面，就接上去. 否则，就用 <code>s[i]</code> 取更新 <code>low</code>数组。具体方法是, 在 <code>low</code> 数组中找到第一个大于等于<code>s[i]</code> 的元素 <code>low[j]</code>, 用 <code>s[i]</code>去更新 <code>low[j]</code>. 如果从头到尾扫一遍 <code>low</code>数组的话，时间复杂度仍是 <span class="math inline">\(O(n^2)\)</span>.我们注意到 <code>low</code> 数组内部一定是单调不降的. 所有我们可以二分<code>low</code> 数组，找出第一个大于等于 <code>s[i]</code> 的元素.总时间复杂度为 <span class="math inline">\(O(n \log n)\)</span></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/share/index.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token constant">LIS</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> low <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> cur <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      j <span class="token operator">=</span> res<span class="token punctuation">[</span>res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        low<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">let</span> u <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> v <span class="token operator">=</span> res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>u <span class="token operator">&lt;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>u <span class="token operator">+</span> v<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>res<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> cur<span class="token punctuation">)</span> u <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> v <span class="token operator">=</span> c<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>res<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> low<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>u <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> u <span class="token operator">=</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> v <span class="token operator">=</span> res<span class="token punctuation">[</span>u <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>u<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>    v <span class="token operator">=</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>为什么要用双端对比法</strong></p><ul><li>双端对比法的理论性能可能并不是最优秀的, 但是其用于前端 vNode list的对比很优秀, 因为前端 DOM 的修改很少涉及全局修改,一般都是一两个元素的增减调换, 双端对比法可以快速锁定修改区间,忽略不变部分, LIS 可以保证在较少插入次数下实现位置调整</li><li>为什么要讨论特殊情况, 明明可以直接利用最后的通用算法求解.首先这个特判会让单次 update 快很多, 同时考虑前端应用场景, update单个头尾 / 中部元素比较频繁, 这个特判会被特别多次调用</li></ul><h3 id="组件更新">组件更新</h3><p>组件 vNode 更新时 <code>setupRenderEffect</code> 会触发<code>patch(组件vNode, ...)</code> 最后 <code>updateComponent</code></p><p>不管组件有多复杂我们更新的都是组件挂载的 DOM, 组件的 render返回的是一个 <code>h</code> 也就是说组件最多有一个根 DOM,我们可以直接更新这个 DOM.</p><p>我们更新的时候拿到的是 vNode, 但是为组件传入的 props 还在 instance上, 我们需要为 vNode 绑定 instance (使用 <code>.component</code>属性)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">function</span> <span class="token function">updateComponent</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  vNode2<span class="token punctuation">.</span>el <span class="token operator">=</span> vNode1<span class="token punctuation">.</span>el<span class="token punctuation">;</span> <span class="token comment">// 绑定 DOM</span>  vNode2<span class="token punctuation">.</span>component <span class="token operator">=</span> vNode1<span class="token punctuation">.</span>component<span class="token punctuation">;</span> <span class="token comment">// 绑定 instance</span>  <span class="token comment">// 判断 props 一不一样: 一样就不更新 (说明是父节点触发了, 递归到子节点)</span>  <span class="token comment">//                      不一样就重新渲染这个组件下的 vNode</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameProps</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>props<span class="token punctuation">,</span> vNode2<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vNode1<span class="token punctuation">.</span>component<span class="token punctuation">.</span>vNode <span class="token operator">=</span> vNode2<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 我们要手动触发这个唯一的子 vNode 的render, 所以还需要保存每个 vNode 的 render 函数</span>    <span class="token comment">// 保存在 `.runner`</span>    <span class="token comment">// 同时记录 .next 为新 vNode</span>    vNode1<span class="token punctuation">.</span>component<span class="token punctuation">.</span>next <span class="token operator">=</span> vNode2<span class="token punctuation">;</span>    <span class="token comment">// 调用老 vNode 的渲染函数</span>    vNode1<span class="token punctuation">.</span>component<span class="token operator">?.</span>runner <span class="token operator">&amp;&amp;</span> vNode1<span class="token punctuation">.</span>component<span class="token punctuation">.</span><span class="token function">runner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断组件是否有必要更新(<code>props</code> 一不一样)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/component.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isSameProps</span><span class="token punctuation">(</span><span class="token parameter">props1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> props2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>props1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>props2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  props<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> props1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!==</span> props2<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>res <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在挂载组件时同步记录 instance</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">// @packages/runtime-core/src/render.tsfunction mountComponent(vNode, container, parent, anchor) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const instance = createComponent(vNode, parent);</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> vNode.component = instance;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> setupComponent(instance);</span><span class="token prefix unchanged"> </span><span class="token line"> setupRenderEffect(instance, container, anchor);</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在重新渲染组件时迁移 props</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">// @packages/runtime-core/src/component.tsexport function setupRenderEffect(instance, container, anchor) &#123;<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> instance.runner = effect(() => &#123;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   const subTree = instance.render.call(instance.proxy);</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   if (instance.next) &#123;</span><span class="token prefix inserted">+</span><span class="token line">     instance.vNode = instance.next;</span><span class="token prefix inserted">+</span><span class="token line">     instance.props = instance.next.props;</span><span class="token prefix inserted">+</span><span class="token line">     instance.next = null;</span><span class="token prefix inserted">+</span><span class="token line">   &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   patch(instance.subTree, subTree, container, instance, anchor);</span><span class="token prefix unchanged"> </span><span class="token line">   instance.vNode.el = container;</span><span class="token prefix unchanged"> </span><span class="token line">   instance.subTree = subTree;</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;);</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现-nexttrick">实现 <code>nextTrick</code></h3><p>我们希望当 Reactivity 发生变化时组件与 DOM 是同步更新的,这可能会带来不必要的资源消耗, 我们希望组件更新可以变成异步的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> cnt<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> cnt<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里会触发100次组件更新</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> cnt <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'HTML Context:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何完成异步更新呢?我们可以将更新任务放入微任务这样只有在同步代码执行完成后微任务才会执行.这也是 Vue 中 <code>nextTrick</code> 的实现原理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更新实际上就是执行 renderEffect 的中 effect 的 runner. 可以利用effect-scheduler 实现首次触发执行 runner 之后触发执行 scheduler. 在scheduler 中我们可以将更新事件加入队列. 并注册更新队列的微事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token literal-property property">jobs</span><span class="token operator">:</span> Set<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 任务队列</span><span class="token keyword">function</span> <span class="token function">insertJob</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  jobs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不重复添加</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>jobs<span class="token punctuation">.</span>size <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 确保之注册一个微任务, 防止创建不必要的 Promise.resolve()</span>    <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>jobs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> jobs<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  instance<span class="token punctuation">.</span>runner <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">componentUpdateFn</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 将更新内容提出为函数</span>    <span class="token punctuation">&#123;</span>      <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">insertJob</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>runner<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 Reactivity 发生变化时, 同步执行 insertJob 同步 add Set,注册一个微任务用于在同步代码都执行完成后执行所有刷新函数</p><p><strong>测试</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> cnt<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> cnt<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时还没修改 还是 1</span>        <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时变为 100</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> cnt <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这也告诉我们, 如果在 Vue 中触发了组件变化,如果还需要同时获取组件的状态应该使用 <code>nextTrick</code></p><h2 id="实现-runtime-dom">实现 runtime-dom</h2><p>我们的 Vue 默认是渲染在 HTML 上面的, 如果我们向将组件渲染在 canvas上(DOM 标签变为 canvas 上的一个元素)就需要重写所有 DOM API相关的函数调用.</p><p>我们希望将这些 API 抽象出来 (例如 <code>document.createElement</code>抽象为 <code>create</code> 函数). 当我们需要将 Vue 组件渲染在 HTML时只需要为 runtime-core 传入 <code>create</code> 函数即可.</p><p>至此我们的组件依赖关系由<code>vue &gt; runtime-core &gt; reactivity</code> 变为<code>vue &gt; runtime-dom &gt; runtime-core &gt; reactivity</code>,runtime-dom 就是为 Vue 提供 HTML 渲染能力的组件</p><p>实现 runtime-dom API (将 runtime-core 中调用 DOM API的地方全写出来)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRenderer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../runtime-core/src/render'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isUNKey <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../share'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createText</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=></span> el<span class="token punctuation">.</span>parent <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">insert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token operator">=></span> parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setText</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>nodeValue <span class="token operator">=</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setElementText</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchProps</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">elem</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> oldProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> newProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>oldProps<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>newProps<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  props<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> ek <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>      <span class="token operator">?</span> k<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on([A-Z].*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUNKey</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> oldProps<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isUNKey</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span> <span class="token operator">||</span> ek<span class="token punctuation">)</span><span class="token punctuation">)</span>      ek <span class="token operator">?</span> elem<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>ek<span class="token punctuation">,</span> oldProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> elem<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUNKey</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span><span class="token punctuation">)</span>      ek        <span class="token operator">?</span> elem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>ek<span class="token punctuation">,</span> newProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">:</span> elem<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> newProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还需要将 runtime-core 接入 runtime-dom, 因为我们要为 runtime-core传入刚刚定义的渲染函数, 调用这些渲染函数的文件只有<code>render.ts</code>. 之前 <code>render.ts</code>是通过导出函数向外暴露 API 的, 但是因为我们也要传入函数, 我们只能将<code>render.ts</code> 外部包裹一个函数, 让该函数传入 runtime-dom定义的渲染函数最后返回原本需要导出的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> renderer<span class="token punctuation">;</span><span class="token comment">// 创建可用 DOM API 的 render</span><span class="token keyword">function</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    renderer <span class="token operator">||</span> <span class="token comment">// 如果创建过了就不重复创建</span>    <span class="token punctuation">(</span>renderer <span class="token operator">=</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      createElement<span class="token punctuation">,</span>      createText<span class="token punctuation">,</span>      setText<span class="token punctuation">,</span>      setElementText<span class="token punctuation">,</span>      patchProps<span class="token punctuation">,</span>      insert<span class="token punctuation">,</span>      remove<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建可用 DOM API 的 createApp</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createApp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'../../runtime-core/src'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 <code>render.ts</code> 的构造方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>  createElement<span class="token punctuation">,</span>  createText<span class="token punctuation">,</span>  remove<span class="token punctuation">,</span>  insert<span class="token punctuation">,</span>  setText<span class="token punctuation">,</span>  setElementText<span class="token punctuation">,</span>  patchProps<span class="token punctuation">,</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ... 将调用 DOM API 的地方改为调用传入的渲染函数</span>  <span class="token comment">// ... 将原本所有 export 的函数改为 return &#123;该函数&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    render<span class="token punctuation">,</span>    <span class="token literal-property property">createApp</span><span class="token operator">:</span> <span class="token function">createApp</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> render<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>createApp</code> 函数需要 render, 但是我们的 render也是动态构建的, 所以我们只能为 createApp 传入 render, 并在<code>render.ts</code> 中先传入这一参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token parameter">render<span class="token punctuation">,</span> rootComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">_component</span><span class="token operator">:</span> rootComponent<span class="token punctuation">,</span>    <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> vNode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>rootComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">render</span><span class="token punctuation">(</span>        vNode<span class="token punctuation">,</span>        <span class="token function">isObject</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>          <span class="token operator">?</span> container          <span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后修改导出</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">export * from './reactivity/src/index';<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> export * from './runtime-core/src/index';</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> export * from './runtime-dom/src/index';</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>测试</strong></p><p>实现一个 <code>runtime-PIXI</code>, PIXI.js 是一个基于 canvas的游戏库, 完成了对 canvas 的封装. 我们希望通过对 PIXI.js API的二次封装实现利用 Vue 操作 canvas</p><p>我们希望实现执行 <code>test</code> 修改正方形位置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x1<span class="token punctuation">,</span> y1</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      x<span class="token punctuation">.</span>value <span class="token operator">=</span> x1<span class="token punctuation">;</span>      y<span class="token punctuation">.</span>value <span class="token operator">=</span> y1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了将测试代码写在一起, 我们将 runtime-dom 完全引入了测试用例并重写runtime-dom. 这样做可以免去将重新编译 Vue</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// modify to export createRenderer (cause the export level is different from vue runtime-dom)</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRenderer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../lib/micro-vue.esm.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'../../lib/micro-vue.esm.js'</span><span class="token punctuation">;</span><span class="token comment">// 创建元素</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> rect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rect<span class="token punctuation">.</span><span class="token function">beginFill</span><span class="token punctuation">(</span><span class="token number">0xff0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rect<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rect<span class="token punctuation">.</span><span class="token function">endFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> rect<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 插入</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">insert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token operator">=></span> parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改属性</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchProps</span><span class="token punctuation">(</span><span class="token parameter">elem<span class="token punctuation">,</span> oldProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> newProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>oldProps<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>newProps<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  props<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    elem<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> newProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> renderer<span class="token punctuation">;</span><span class="token comment">// 与测试无关的 API 直接给 NULL</span><span class="token keyword">function</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    renderer <span class="token operator">||</span>    <span class="token punctuation">(</span>renderer <span class="token operator">=</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      createElement<span class="token punctuation">,</span>      <span class="token literal-property property">createText</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token literal-property property">setText</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token literal-property property">setElementText</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      patchProps<span class="token punctuation">,</span>      insert<span class="token punctuation">,</span>      <span class="token literal-property property">remove</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createApp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 创建 game</span><span class="token keyword">const</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">360</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 挂载 canvas</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在 PIXI 中 canvas DOM 不用于挂载元素, 新元素是挂载到 game.stage 上的</span><span class="token keyword">export</span> <span class="token keyword">const</span> el <span class="token operator">=</span> game<span class="token punctuation">.</span>stage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现-compiler-core">实现 compiler-core</h2><pre class="mermaid">graph LRstring(输入string) --> parse(parse模块) --> ast1(输出AST树) --> transform(transform模块对树CRUD) --> ast2(输出AST树) --> CodeGen(CodeGen模块) --> render(输出render)</pre><p>构建相关模块</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">@packages<span class="token operator">/</span>compiler<span class="token operator">-</span>core├── src│   └── index<span class="token punctuation">.</span>ts└── __tests__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>并导出模块</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./reactivity/src/index'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./runtime-dom/src/index'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./compiler-core/src/index'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="实现-parse-模块的插值解析">实现 parse 模块的插值解析</h3><p><strong>需求</strong></p><p>我们希望可以解析 <code>&#123;&#123;message&#125;&#125;</code> 为 AST 树,插值语法的 AST 为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span>  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span>    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'message'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现</strong></p><ul><li>定义枚举 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">@packages<span class="token operator">/</span>compiler<span class="token operator">-</span>core<span class="token operator">/</span>src<span class="token operator">/</span>ast<span class="token punctuation">.</span>ts<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> NodeTypes <span class="token punctuation">&#123;</span>  <span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span>  <span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现编译 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">@packages<span class="token operator">/</span>compiler<span class="token operator">-</span>core<span class="token operator">/</span>src<span class="token operator">/</span>parse<span class="token punctuation">.</span>ts<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NodeTypes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./ast'</span><span class="token punctuation">;</span><span class="token comment">// 构造上下文, 之后源码都从 source 里面取</span><span class="token keyword">function</span> <span class="token function">createParserContext</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">source</span><span class="token operator">:</span> content<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 构造 Root 节点, 其只包含子节点属性</span><span class="token keyword">function</span> <span class="token function">createRoot</span><span class="token punctuation">(</span><span class="token parameter">children</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    children<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果代码中包含 '&#123;&#123;' 就执行解析</span><span class="token keyword">function</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token keyword">as</span> any<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'&#123;&#123;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> node <span class="token operator">=</span> <span class="token function">parseInterpolation</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  node <span class="token operator">&amp;&amp;</span> nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> nodes<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 找到一对最近的 &#123;&#123; &#125;&#125;, 提取插值, 删除这个插值代码</span><span class="token keyword">function</span> <span class="token function">parseInterpolation</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> closeDelimiter <span class="token operator">=</span> <span class="token string">'&#125;&#125;'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> openDelimiter <span class="token operator">=</span> <span class="token string">'&#123;&#123;'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> closeIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>    closeDelimiter<span class="token punctuation">,</span>    openDelimiter<span class="token punctuation">.</span>length  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">adviceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> openDelimiter<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> content <span class="token operator">=</span> context<span class="token punctuation">.</span>source    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> closeIndex <span class="token operator">-</span> openDelimiter<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">adviceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> closeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span>    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span>      content<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 推进操作(删除已解析代码)</span><span class="token keyword">function</span> <span class="token function">adviceBy</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  context<span class="token punctuation">.</span>source <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 解析器入口</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseParse</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">content</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createParserContext</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">createRoot</span><span class="token punctuation">(</span><span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现-parse-模块的-element-解析">实现 parse 模块的 Element解析</h3><p><strong>需求</strong></p><p>识别 <code>&lt;xx&gt;&lt;/xx&gt;</code> 的代码并解析为 AST 树,其结构为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">,</span>  <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现</strong></p><ul><li>定义枚举 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> NodeTypes <span class="token punctuation">&#123;</span>  <span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span>  <span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span>  <span class="token constant">ELEMENT</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现解析函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/compiler-core/src/parse.ts</span><span class="token comment">// 识别条件 &lt;字母模式, 这个定义看起来很宽松, 但是却是标准定义</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&lt;[a-zA-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> node <span class="token operator">=</span> <span class="token function">parseElement</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">parseElement</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> tagMatch <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&lt;([a-zA-Z]*)>.*&lt;\/\1></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> tag <span class="token operator">=</span> tagMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">adviceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> tagMatch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">,</span>    tag<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现-parse-模块的-text-解析">实现 parse 模块的 Text 解析</h3><p><strong>需求</strong></p><p>将不满足两种规范的代码识别为 Text 并解析为 AST 树, 其结构为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">,</span>  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'bulabula'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现</strong></p><ul><li>定义枚举: 略</li><li>返回 AST <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">parseText</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> content <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">;</span>  <span class="token function">adviceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> content<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">,</span>    content<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="同时解析三种类型">同时解析三种类型</h3><p><strong>需求</strong></p><p>将 <code>&lt;div&gt;hi, &#123;&#123;message&#125;&#125;&lt;/div&gt;</code>解析为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">,</span>  <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">,</span>      <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'hi, '</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span>      <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span>        <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'message'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现</strong></p><ul><li><p>修正 Element 使之可以解析 Element 标签内部文本</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">function parseElement(context) &#123;<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> const tagMatch = context.source.match(/^&lt;([a-zA-Z]*)>.*&lt;\/\1>/);</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const tagMatch = context.source.match(/^&lt;([a-zA-Z]*)>(.*)&lt;\/\1>/);</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const tag = tagMatch[1];</span><span class="token prefix unchanged"> </span><span class="token line"> adviceBy(context, tagMatch[0].length);</span><span class="token prefix unchanged"> </span><span class="token line"> return &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   type: NodeTypes.ELEMENT,</span><span class="token prefix unchanged"> </span><span class="token line">   tag,</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   children: parseChildren(createParserContext(tagMatch[2])),</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;;</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修正 Text 解析使之可以在遇到插值 / Element 前导时停止解析</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">function parseText(context) &#123;<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> let content = context.source;</span><span class="token prefix inserted">+</span><span class="token line"> if (~content.indexOf('&#123;&#123;')) &#123;</span><span class="token prefix inserted">+</span><span class="token line">   content = content.slice(0, content.indexOf('&#123;&#123;') );</span><span class="token prefix inserted">+</span><span class="token line"> &#125; else if (/&lt;\/?[a-zA-Z].+/.test(content)) &#123;</span><span class="token prefix inserted">+</span><span class="token line">   content = content.slice(</span><span class="token prefix inserted">+</span><span class="token line">     0,</span><span class="token prefix inserted">+</span><span class="token line">     content.length - content.match(/&lt;\/?[a-zA-Z].+/).length</span><span class="token prefix inserted">+</span><span class="token line">   );</span><span class="token prefix inserted">+</span><span class="token line"> &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> adviceBy(context, content.length);</span><span class="token prefix unchanged"> </span><span class="token line"> return &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   type: NodeTypes.TEXT,</span><span class="token prefix unchanged"> </span><span class="token line">   content,</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;;</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在一次解析并推进完成后继续解析剩余代码 <pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">function parseChildren(context) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const nodes = [] as any[];</span><span class="token prefix unchanged"> </span><span class="token line"> let node = null as any;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> while (context.source) &#123;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   if (context.source.startsWith('&#123;&#123;')) node = parseInterpolation(context);</span><span class="token prefix unchanged"> </span><span class="token line">   else if (/^&lt;[a-zA-Z]/.test(context.source)) node = parseElement(context);</span><span class="token prefix unchanged"> </span><span class="token line">   else node = parseText(context);</span><span class="token prefix unchanged"> </span><span class="token line">   nodes.push(node);</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return nodes;</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li></ul><h3 id="实现-transform-模块">实现 Transform 模块</h3><p>希望为 transform 传入一个函数组, 对每个节点执行这些函数.我们只需要做一个 DFS 即可</p><ul><li>DFS <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NodeTypes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./ast'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">TO_DISPLAY_STRING</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./runtimeHelpers'</span><span class="token punctuation">;</span><span class="token comment">// 创建上下文并遍历</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createTransformContext</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">traverseNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>context<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建上下文</span><span class="token keyword">function</span> <span class="token function">createTransformContext</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    root<span class="token punctuation">,</span>    <span class="token literal-property property">nodeTransforms</span><span class="token operator">:</span> options<span class="token punctuation">.</span>nodeTransforms <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">helpers</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">helper</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      context<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 遍历节点, 如果是插值节点就调用 helper, ROOT 与 Element 就遍历子节点</span><span class="token keyword">function</span> <span class="token function">traverseNode</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token literal-property property">exitFns</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> context<span class="token punctuation">.</span>nodeTransforms<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> onExit <span class="token operator">=</span> <span class="token function">i</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    onExit <span class="token operator">&amp;&amp;</span> exitFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onExit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token operator">:</span>      context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">TO_DISPLAY_STRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token operator">:</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token operator">:</span>      <span class="token function">traverseChildren</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> exitFns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> exitFns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 遍历子节点</span><span class="token keyword">function</span> <span class="token function">traverseChildren</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">context</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> child <span class="token keyword">of</span> node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token function">traverseNode</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>定义枚举 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">TO_DISPLAY_STRING</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">toDisplayString</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">CREATE_ELEMENT_VNODE</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"createElementVNode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> helperNameMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token constant">TO_DISPLAY_STRING</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"toDisplayString"</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token constant">CREATE_ELEMENT_VNODE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"createElementVNode"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>为 ROOT 打上 tag <pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">function createRoot(children) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> return &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   type: NodeTypes.ROOT,</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   children,</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;;</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现-compile-模块">实现 compile 模块</h3><p>需要将 AST 转换为代码字符串. 可以将 AST 分为四类</p><ul><li>Text</li><li>插值</li><li>Element: children 只有一个元素 (e.g.<code>&lt;div&gt;as&lt;/div&gt;</code> =&gt;<code>h('div', &#123;&#125;, 'as')</code>)</li><li>Element: children 有多个元素 (e.g.<code>&lt;div&gt;as &#123;&#123;her&#125;&#125;&lt;/div&gt;</code> =&gt;<code>h('div', &#123;&#125;, 'as' + her)</code>), 称之为复杂类型</li></ul><p>处理最后一种 AST 需要在内容中解析出的每个元素之间用 <code>+</code>连接</p><ul><li><p>加入枚举类型 <pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">export const enum NodeTypes &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> INTERPOLATION,</span><span class="token prefix unchanged"> </span><span class="token line"> SIMPLE_EXPRESSION,</span><span class="token prefix unchanged"> </span><span class="token line"> ELEMENT,</span><span class="token prefix unchanged"> </span><span class="token line"> TEXT,</span><span class="token prefix unchanged"> </span><span class="token line"> ROOT,</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> COMPOUND_EXPRESSION,</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>代码生成 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isString <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../share'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NodeTypes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./ast'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>  <span class="token constant">CREATE_ELEMENT_VNODE</span><span class="token punctuation">,</span>  helperNameMap<span class="token punctuation">,</span>  <span class="token constant">TO_DISPLAY_STRING</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./runtimeHelpers'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token parameter">ast</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createCodegenContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建上下文</span>  <span class="token function">genFunctionPreamble</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建依赖引入</span>  <span class="token keyword">const</span> functionName <span class="token operator">=</span> <span class="token string">'render'</span><span class="token punctuation">;</span> <span class="token comment">// 函数名</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'_ctx'</span><span class="token punctuation">,</span> <span class="token string">'_cache'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 函数参数</span>  <span class="token keyword">const</span> signature <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数参数字符串</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">function </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>functionName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>signature<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)&#123;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 连接函数头</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'return '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">genNode</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>codegenNode<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成 AST 对应的内推</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">code</span><span class="token operator">:</span> context<span class="token punctuation">.</span>code<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genFunctionPreamble</span><span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> VueBinging <span class="token operator">=</span> <span class="token string">'Vue'</span><span class="token punctuation">;</span> <span class="token comment">// 引用自的变量 `import &#123;...&#125; from Vue`</span>  <span class="token keyword">const</span> <span class="token function-variable function">aliasHelper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// 引用代码生成函数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 生成代码</span>    context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const &#123; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>ast<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>aliasHelper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &#125; = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>VueBinging<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'return '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createCodegenContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 将拼接代码功能写入 context</span>      context<span class="token punctuation">.</span>code <span class="token operator">+=</span> source<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">helper</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>helperNameMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genNode</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 分类生成不同 AST 对应的代码</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token operator">:</span>      <span class="token function">genText</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token operator">:</span>      <span class="token function">genInterpolation</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span><span class="token operator">:</span>      <span class="token function">genExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token operator">:</span>      <span class="token function">genElement</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMPOUND_EXPRESSION</span><span class="token operator">:</span>      <span class="token function">genCompoundExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genCompoundExpression</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">context</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> child <span class="token keyword">of</span> node<span class="token punctuation">.</span>children<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">genNode</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genElement</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">context</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">CREATE_ELEMENT_VNODE</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">genNodeList</span><span class="token punctuation">(</span><span class="token function">genNullable</span><span class="token punctuation">(</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>props<span class="token punctuation">,</span> node<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genNodeList</span><span class="token punctuation">(</span><span class="token parameter">nodes<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> node <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">genNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genNullable</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">args</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> arg <span class="token operator">||</span> <span class="token string">'null'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genExpression</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">context</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genInterpolation</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">context</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">TO_DISPLAY_STRING</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">genNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>content<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genText</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">context</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>创建根节点的入口节点 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createRootCodegen</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">context</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>  <span class="token keyword">const</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span>codegenNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> codegenNode <span class="token operator">=</span> child<span class="token punctuation">.</span>codegenNode<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> codegenNode<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    root<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> child<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>Element 生成函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createVNodeCall<span class="token punctuation">,</span> NodeTypes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../ast"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transformElement</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// tag</span>      <span class="token keyword">const</span> vnodeTag <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>      <span class="token comment">// props</span>      <span class="token keyword">let</span> vnodeProps<span class="token punctuation">;</span>      <span class="token comment">// children</span>      <span class="token keyword">const</span> children <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">;</span>      <span class="token keyword">let</span> vnodeChildren <span class="token operator">=</span> children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      node<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> <span class="token function">createVNodeCall</span><span class="token punctuation">(</span>        context<span class="token punctuation">,</span>        vnodeTag<span class="token punctuation">,</span>        vnodeProps<span class="token punctuation">,</span>        vnodeChildren      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>生成表达式 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NodeTypes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../ast"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transformExpression</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token function">processExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processExpression</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  node<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_ctx.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>生成文本节点 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NodeTypes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../ast'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isText <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../utils'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transformText</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>      <span class="token keyword">let</span> currentContainer<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isText</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> next <span class="token operator">=</span> children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isText</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentContainer<span class="token punctuation">)</span>                currentContainer <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                  <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMPOUND_EXPRESSION</span><span class="token punctuation">,</span>                  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>              currentContainer<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">' + '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              currentContainer<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>              children<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              currentContainer <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>Text 节点与 string 判断函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isText</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span> <span class="token operator">||</span> node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li></ul><h3 id="让-runtime-core-调用-compiler-core">让 runtime-core 调用compiler-core</h3><p>runtime-core 会在确定 instance.render 时调用 compiler-core. 如果setup 不返回函数, 组件没有自带 render 函数, runtime-core 会在有 template时调用 compiler-core. compiler-core 会返回函数代码, 我们需要根据代码获得render 函数</p><p><strong>测试代码</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> h<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../lib/micro-vue.esm.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'micro-vue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'hihi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> message <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>hi, &#123;&#123;message&#125;&#125;&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现</strong></p><ul><li><p>构造 compiler-core 向外暴露的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> generate <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./codegen'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> baseParse <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./parse'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> transform <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./transform'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> transformExpression <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./transforms/transformExpression'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> transformElement <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./transforms/transformElement'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> transformText <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./transforms/transformText'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">baseParse</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">transform</span><span class="token punctuation">(</span>    ast<span class="token punctuation">,</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">nodeTransforms</span><span class="token operator">:</span> <span class="token punctuation">[</span>transformElement<span class="token punctuation">,</span> transformText<span class="token punctuation">,</span> transformExpression<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 runtime-core 中加入编译 template 功能 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  instance<span class="token punctuation">.</span>render <span class="token operator">=</span> instance<span class="token punctuation">.</span>render <span class="token operator">||</span> instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span>render <span class="token operator">||</span> <span class="token function">compiler</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li><li><p>为 patchProps 加入兜底功能 <pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">export function patchProps(elem: HTMLElement, oldProps = &#123;&#125;, newProps = &#123;&#125;) &#123;<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> oldProps ??= &#123;&#125;;</span><span class="token prefix inserted">+</span><span class="token line"> newProps ??= &#123;&#125;;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // ...</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>导出 createElementNode <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> createVNode <span class="token keyword">as</span> createElementVNode <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li><li><p>解决循环依赖问题: runtime-core 需要从 Vue 获取编译函数而 Vue需要引用 runtime-core. 为了解决循环依赖, 可以让 runtime-core 暴露一个SET 函数, 当文件加载完毕后调用祖册函数为 runtime-core 注册来自compiler-core 的编译函数.</p><ul><li>在 runtime-core 中暴露注册函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> compiler<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">registerRuntimeCompiler</span><span class="token punctuation">(</span><span class="token parameter">_compiler</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  compiler <span class="token operator">=</span> _compiler<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在最外层引入 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./reactivity/src/index'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./runtime-dom/src/index'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> baseCompile <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./compiler-core/src'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> runtimeDom <span class="token keyword">from</span> <span class="token string">'./runtime-dom/src'</span><span class="token punctuation">;</span><span class="token comment">// 将文本转换为函数的函数</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token parameter">template</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 代码</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> code <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// compiler-core 编译的函数形如</span>  <span class="token comment">//   import &#123; createElementNode as _createElementNode &#125; from Vue</span>  <span class="token comment">//   return _createElementVNode(...)</span>  <span class="token comment">// 我们希望获取 return 结果, 将这个代码段构造为函数</span>  <span class="token comment">//   function ff(Vue)&#123;</span>  <span class="token comment">//     import &#123; createElementNode as _createElementNode &#125; from Vue</span>  <span class="token comment">//     return _createElementVNode(...)</span>  <span class="token comment">//   &#125;</span>  <span class="token comment">// 只需要传入 Vue 作为参数并获取函数运行结果即可</span>  <span class="token comment">// 无需 eval, 用 Function 即可构造函数. 并传入 Vue 即可</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'Vue'</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">(</span>runtimeDom<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 将这个编译函数注入 runtime-core, runtime-core 即可拥有编译函数</span>runtimeDom<span class="token punctuation">.</span><span class="token function">registerRuntimeCompiler</span><span class="token punctuation">(</span>compileToFunction<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>编译后的函数需要两个参数, 传入相同值 <pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">function componentUpdateFn(instance, container, anchor, patch) &#123;<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> const subTree = instance.render.call(instance.proxy);</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> const subTree = instance.render.call(instance.proxy, instance.proxy);</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> if (instance.next) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   instance.vNode = instance.next;</span><span class="token prefix unchanged"> </span><span class="token line">   instance.props = instance.next.props;</span><span class="token prefix unchanged"> </span><span class="token line">   // ...</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li></ul>]]></content>
    
    
    <summary type="html">尝试理解 Vue 的设计思想与实现, 参考自: mini-vue, Vue.js 设计与实现</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="笔记" scheme="https://blog.liukairui.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端框架" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Vue" scheme="https://blog.liukairui.me/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>《你不知道的JavaScript》学习</title>
    <link href="https://blog.liukairui.me/article/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%E5%AD%A6%E4%B9%A0/"/>
    <id>https://blog.liukairui.me/article/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-07-02T16:00:01.000Z</published>
    <updated>2022-07-02T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="作用域与闭包">作用域与闭包</h2><p>作用域是一套根据名字查找变量的规则,作用域维护了所有声明的变量并确定变量的访问权限.</p><h3 id="作用域在编译中的交互">作用域在编译中的交互</h3><p>JavaScript 是一门解释型语言, 解释器有三部分构成</p><ul><li>引擎: 负责整个解释过程</li><li>编译器: 进行词法语法分析与代码生成</li><li>作用域: 维护了所有声明的变量确定变量的访问权限</li></ul><p><strong>引擎请求</strong></p><p>在解释过程中, 引擎会不断的向作用域发出 <code>LHS</code> 与<code>RHS</code> 查询. 可以认为 <code>LHS</code> 查询是在查询左值,<code>RHS</code> 是在查询右值(或者理解为非左值). 换而言之,当变量要进行赋值操作时, 引擎会执行 <code>LHS</code> 查询,这时引擎不关心变量的值, 而关心变量的位置. 其他情况下引擎执行<code>RHS</code> 查询, 这时引擎只关心变量的值.作用域收到请求后根据请求标识符返回值. 例如,在下面这段代码执行时发生了如下查询:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol type="1"><li>将 <code>function foo(a)&#123;&#125;</code> 看作<code>var foo = function()&#123;&#125;</code>, 引擎执行 <code>var foo</code>时发出 <code>RHS</code> 请求查询 <code>foo</code>, 查询不到, 遂创建<code>foo</code> 变量</li><li>引擎执行 <code>foo = ...</code> 时发出 <code>LHS</code> 请求查询<code>foo</code>, 查询到后分配变量</li><li>引擎执行 <code>var b</code> 时发出 <code>RHS</code> 请求查询<code>b</code>, 查询不到, 遂创建 <code>b</code> 变量</li><li>引擎执行 <code>b = 2</code> 时发出 <code>LHS</code> 请求查询<code>b</code>, 查询到后分配变量</li><li>引擎执行 <code>foo(2)</code> 时发出 <code>RHS</code> 请求查询<code>foo</code></li><li>引擎执行 <code>foo(2)</code> 时发出 <code>LHS</code> 请求查询<code>a</code>, 查询到后隐式分配变量</li><li>引擎执行 <code>console</code> 时发出 <code>RHS</code> 请求查询<code>console</code></li><li>引擎执行 <code>console.log</code> 时发出 <code>RHS</code> 请求查询<code>console</code> 下的 <code>log</code></li><li>引擎执行 <code>console.log(a)</code> 时发出 <code>RHS</code>请求查询 <code>a</code></li></ol><p><strong>作用域回应</strong></p><p>作用域在收到引擎的 <code>LHS/RHS</code>请求后会在本作用域下查找并返回对标识符的引用</p><p><strong>引擎的处理</strong></p><ul><li><p>若作用域没找到标识符:</p><p>引擎会请求上一层作用域直到全局作用域.若在全局作用域中还是没找到标识符</p><ul><li>若发起的是 <code>RHS</code> 请求: 直接抛出<code>ReferenceError</code></li><li>若发起的是 <code>LHS</code> 请求: 在非严格模式下会直接创建变量,在严格模式下会抛出 <code>ReferenceError</code> 异常. <strong>注意,这种情况针对的是诸如 <code>b = a</code> 的情况, 如果是<code>var b = a</code>, 那么引擎会先执行 <code>RHS</code> 创建<code>b</code> 再执行 <code>LHS</code> 赋值</strong>.</li></ul></li><li><p>若作用域找到标识符</p><ul><li>若是 <code>LHS</code> 请求则进行赋值操作</li><li>若是 <code>RHS</code>请求则继续判断是否对右值进行非法操作(如对非函数变量执行函数调用)</li></ul></li></ul><h3 id="词法作用域">词法作用域</h3><p>作用域有两种常见的模式</p><ul><li>词法作用域: 大多数语言(包括JS)采用的</li><li>动态作用域: Bash/Perl语言采用</li></ul><p>简单的说,词法作用域就是在<strong>程序执行之前的词法分析阶段</strong>确定的静态作用域.编译器会在词法分析阶段根据<strong>变量的位置关系</strong>确定直接确定作用域.</p><p>引擎请求作用域查找时, 作用域只会查找一级标识符, 例如: 查询<code>console.log</code> 时, 作用域只查询 <code>console</code>,在下一次查询时候才在 <code>console</code> 中查询 <code>log</code></p><p><strong>遮蔽效应</strong></p><p>对于存在嵌套关系的作用域,引擎在查询时会优先查找内部作用域而忽略外部作用域中的同名标识符.全局作用域中的变量会被自动加入全局对象(<code>window/global</code>),可以直接通过 <code>global</code> 访问全局作用域变量,这也是忽略内层作用域的唯一方法.</p><p><strong>欺骗词法作用域</strong></p><p>词法作用域是在词法分析进行的, 这意味着程序员无法在运行时修改作用域,但是存在几种方法可以动态干预作用域</p><ul><li><code>eval</code> 函数: 动态的为 <code>eval</code>传入参数可以对当前作用域做动态修改</li><li><code>with</code> 函数: 相当于手动创建了一个作用域,<code>with</code> 的参数会被"解构"作为作用域中的变量</li><li><code>apply/call/bind</code>函数.</li></ul><p>动态干预方法存在诸多弊端</p><ul><li><p>性能下降: JavaScript 在执行前会执行静态分析与性能优化,但是无法分析 <code>eval/with</code> 中的动态作用域,亦无法进行性能优化.</p></li><li><p>严格模式不可用:</p><ul><li>在严格模式下 <code>eval</code> 函数内部有自己的作用域, 此时<code>eval</code> 函数无法干预原作用域</li><li>严格模式下 <code>with</code> 不可用</li></ul></li><li><p>污染全局变量: 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">with</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">=</span> v<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// &#123; a: 1 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// &#123; b: 2 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 2 发生泄漏</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>动态作用域</strong></p><p>JavaScript 使用的是词法作用域模型, 但是部分语言在采用动态作用域</p><ul><li>词法作用域:词法分析阶段根据<strong>变量的位置关系</strong>确定直接确定作用域.</li><li>动态作用域: 作用域在运行时<strong>动态变化</strong>,动态作用域的作用域链一般是基于调用栈的(这与 <code>JavaScript</code> 的<code>this</code> 特性很像)</li></ul><p>例如, 对于代码:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>静态作用域: 在执行 <code>foo</code> 时, 引擎发起 <code>RHS</code>请求 <code>a</code>, 找不到, 向外直接查找全局<code>a = 2</code></p></li><li><p>动态作用域: 在执行 <code>foo</code> 时, 引擎发起 <code>RHS</code>请求 <code>a</code>, 找不到, 顺着作用域链(调用栈)直接查找<code>bar</code> 中的 <code>a = 3</code>, 看起来很像 JavaScript 的<code>this</code> 机制</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="函数与块作用域">函数与块作用域</h3><p><strong>函数作用域</strong></p><p>函数内部的变量与方法位于函数作用域中, 无法被外部访问.</p><p>利用函数作用域可以隐藏代码的部分内部实现, 从而实现</p><ul><li>最小特权原则</li><li>规避变量冲突(其他实现规避冲突的方法有配置命名空间, 模块化管理)</li></ul><p>在实践中, 实现函数作用域的方法有</p><ul><li><p>直接在代码内部定义函数, 并在定义后调用函数</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">// 上文<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> function foo()&#123;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // 保护起来的部分</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> &#125;</span><span class="token prefix inserted">+</span><span class="token line"> foo()</span></span>// 下文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法必须声明一个具名函数, 然后在调用, 不仅繁琐,具名函数还无形中污染了外层作用域</p></li><li><p>使用函数表达式代替函数</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">// 上文<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> (function foo()&#123;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // 保护起来的部分</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> &#125;)()</span></span>// 下文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript 在解析句子时, 若发现第一个关键字是 <code>function</code>则会将这句话判定为<strong>函数定义</strong>,遇到其他符号(例如这里的<code>(</code>),则会将这句话当作<strong>表达式</strong>. 可以通过<code>(function foo()&#123;&#125;)()</code> 的方法定义函数. 此时,不仅不用显式调用函数, <code>foo</code>标识符也<strong>不能被外部访问</strong>, 不会污染外层作用域</p></li><li><p>匿名函数</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">// 上文<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> (function()&#123;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // 保护起来的部分</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> &#125;)()</span></span>// 下文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点: 难以得知函数语义, 调试困难.函数内部无法通过函数名调用函数名上的变量(如:<code>callee</code>)</p></li><li><p>IIFT</p><p>实际上有两种IIFT的写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>两者在功能上完全一致, 任选其一即可</p></li></ul><p><strong>ES6的块作用域</strong></p><p><code>ES6</code> 中的关键字 <code>let</code>, <code>const</code>都支持变量块作用域, 其实现的原理是:在声明变量时<strong>隐式</strong>的将变量劫持在所在的块作用域上.但这两个关键字不支持变量提升, 在实践时最好将变量声明在作用域首部.</p><p><strong>ES6之前的块作用域实现</strong></p><p>在 <code>ES6</code> 前的时代, <code>JavaScript</code>只有全局作用域与函数作用域,伟大的程序员们利用部分特性实现了部分块作用域</p><p>实际上在 <code>ES6</code> 前有部分语法"支持"块作用域</p><ul><li><p><code>with</code> 为内部代码手动创建了一个作用域,内部代码可以认为是包在 <code>with()&#123;&#125;</code> 产生的块作用域中</p></li><li><p><code>try-catch</code> 方法的 <code>catch</code>分句会创造块作用域. 利用这个特性, 部分 JavaScript 的 polyfill转译工具会将 <code>ES6</code> 的块作用域翻译为 <code>try-catch</code>语句, 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>翻译为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>:</p><blockquote><p>早期 JavaScript 要求统一作用域下的不同 <code>try-catch</code> 语句的<code>catch</code> 分句中不能使用相同的标识符声明错误, 即<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>是错的, 需要将 <code>error</code> 改为 <code>error1</code>,<code>error2</code>...</p></blockquote></li></ul><h3 id="函数与变量提升">函数与变量提升</h3><p>对于 <code>var</code> 与 <code>function</code> 声明的标识符,存在变量提升. JavaScript 引擎会在编译阶段进行静态代码分析,获得词法作用域, 完成声明.</p><ul><li><p>对于 <code>var</code> 声明的变量或函数: JavaScript只会提升变量定义, 在正式定义前, 变量是 <code>undefined</code></p></li><li><p>对于 <code>function</code> 声明的函数: JavaScript会提升函数函数声明与定义.</p></li><li><p>若作用域中同时存在 <code>var</code> 与 <code>function</code>声明. <code>function</code> 优先, 例如:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1</span><span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相当于</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// funciton 优先</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> foo<span class="token punctuation">;</span>         <span class="token comment">// var滞后, 于是这个就废掉了</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="闭包">闭包</h3><p>当函数在自己定义作用域以外的部分执行时, 函数会保留对原作用域的引用,这个引用就是闭包. 换而言之, 一旦使用了同步/异步的回调函数,就产生了闭包.</p><p>函数可以保持对闭包的引用, 但是无法保证闭包内的值并不变. 同时,闭包可以阻止所在函数作用域的垃圾回收.</p><p><strong>实现模块化</strong></p><p>JavaScript 的模块化就借用了闭包实现, 以下是一个模块化的基本模式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">onemod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> attr1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// do sth</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        method1    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在函数内部定义变量与方法, 通过 <code>return</code>将需要暴露的变量导出.</p><p>函数每次调用就会导出一个全新模块. 但是, 也因为函数可以传入参数,编译器无法对此类模块做出静态分析与优化. 在 <code>ES6</code> 中,每个模块被定义为文件通过 <code>import/export</code> 导入导出,此时编译器可以在编译阶段对模块进行静态分析.</p><h2 id="this-和对象原型"><code>this</code> 和对象原型</h2><h3 id="关于-this">关于 <code>this</code></h3><p><strong><code>this</code> 不是什么</strong></p><ul><li><p><code>this</code> 不是函数自身</p><p>无法通过 <code>this</code> 获取函数作为对象的属性.若想对函数对象操作还是需要使用<strong>函数标识符</strong>或在函数内使用<strong><code>arguments.callee</code></strong> (已弃用)</p></li><li><p><code>this</code> 不是函数作用域</p><p><code>this</code> 不指向函数作用域, 作用域在编译阶段就生成了, 但<code>this</code> 是在运行时动态变换的. 作用域是存在于 JavaScript引擎中的"对象", 无法在代码中被引用</p></li></ul><p><strong><code>this</code> 是什么</strong></p><p>this是函数调用时被调用函数上下文中的一个属性,其具体的指向取决于函数的调用方式</p><p><strong>为什么需要<code>this</code></strong></p><p><code>this</code> 提供了一种让函数调用隐式传递其对象引用的模式,在函数被调用时, <code>this</code> 作为函数上下文中的一项被传入函数</p><h3 id="this-的指向"><code>this</code> 的指向</h3><p>分析 <code>this</code> 的指向首先要分析函数的调用位置,也就是分析调用栈的第二项</p><p>我们将先从易到难的介绍各种规则, 然后规定规则的优先级</p><p><strong>规则</strong></p><ul><li><p>默认绑定</p><p>当函数被直接调用(如: <code>foo()</code>)时, <code>this</code>会被绑定到 <code>global/window</code> 对象. 在严格模式下,<code>this</code> 无法指向全局对象, 其会指向<code>undefined</code></p></li><li><p>隐式绑定</p><p>若被调用对象被其他对象在<strong>形式上</strong>包含,<code>this</code> 将指向被包含对象.可以从下面几个例子中理解形式上的包围</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// SITUATION 1: 包围</span><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 没问题, 调用时是 foo.demo(), demo被foo包围了</span><span class="token comment">// SITUATION 2: 形式上包围</span><span class="token keyword">function</span> <span class="token function">demoGlobal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">demo</span><span class="token operator">:</span> demoGlobal<span class="token punctuation">,</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>bar<span class="token punctuation">.</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2, 虽然 bar.demo 引用自全局函数, 但是在bar.demo中demo被bar包围了</span><span class="token comment">// SITUATION 3: 形式上包围</span><span class="token keyword">const</span> demoFromFoo <span class="token operator">=</span> foo<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token function">demoFromFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 虽然 demoFromFoo 引用自 foo.demo , 但是在这里并没有被包围</span><span class="token comment">// SITUATION 4: 回调函数</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>demo<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 可以简化调用过程为</span><span class="token comment">// function setTimeout(fn, delay) &#123; // 这里其实进行了一次函数的赋值, 与SITUATION 3 类似, 于是失去了包围对象</span><span class="token comment">//   sleep(delay);</span><span class="token comment">//   fn();</span><span class="token comment">// &#125;</span><span class="token comment">// SITUATION 5: 包围陷阱</span><span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span>baz<span class="token punctuation">.</span>demo <span class="token operator">=</span> foo<span class="token punctuation">.</span>demo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 赋值语句返回的是目标函数的引用, 相当于就是一个 function()&#123;...&#125; , 但是在这里并没有被包围</span><span class="token comment">// SITUATION 6: 只关注前一层包围</span><span class="token keyword">const</span> outer <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">inner</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token literal-property property">demo</span><span class="token operator">:</span> demoGlobal<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>outer<span class="token punctuation">.</span>inner<span class="token punctuation">.</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3, 只关心包围的第一的外层元素(inner)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也将 SITUATION 3&amp;4 的情况称为<strong>隐式丢失</strong></p></li><li><p>显式绑定</p><p>JavaScript 中改变 <code>this</code> 指向的方法有<code>call / apply / bind</code>, 对于 <code>call / apply</code>,这两个函数可以直接修改 <code>this</code> 的指向. <code>bind</code>函数可以返回一个修改 <code>this</code> 后的函数,可以将其实现<strong>简单的</strong>理解为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部分 API 自身就支持改变 <code>this</code> 指向, 如<code>Array.prototype.forEach()</code> 支持修改回调的<code>this</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined undefined undefined</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>若传入 <code>this = null</code> 那么 <code>this</code> 将变为<code>global</code></strong></p></li><li><p><code>new</code> 绑定</p><p>使用 <code>new</code> 新建实例时, 构造函数的 <code>this</code>将绑定到创建的实例</p></li><li><p>箭头函数: 直接绑定非外层非箭头函数的 <code>this</code></p></li></ul><p><strong>优先级</strong></p><ol start="0" type="1"><li>箭头函数</li><li><code>new</code> 绑定</li><li>显式绑定: 注意, <code>new</code> 的优先级高于 <code>ES6</code>实现的 <code>bind</code>, 那个 <code>bind</code> 与前面简化的<code>bind</code> 不同</li><li>隐式绑定</li><li>默认绑定</li></ol><p>讨论 <code>new</code> 绑定与 <code>bind</code>绑定的优先级是有意义的, 如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> initAs12X <span class="token operator">=</span> <span class="token function">Foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">initAs123</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">initAs123</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们确定了构造函数的前两项为 <code>1, 2</code>, 希望在<code>new</code> 的时候只指定第三项, 就可以这么写, 先用<code>bind</code> 为函数传入前两个参数, 并绑定 <code>null</code> 作为<code>this</code>, 然后又用 <code>new</code> 覆盖 <code>this</code>.</p><p>在 JavaScript 中, <code>bind</code> 函数可以用来实现函数柯里化.</p><p>最后, 引用来自掘金小册的流程图</p><pre class="mermaid">graph TBwhereisthis(寻找函数中的this) --箭头函数--> outerthis(包裹箭头函数的非箭头函数的this)whereisthis(寻找函数中的this) --普通函数--> ways(函数调用方式)whereisthis(寻找函数中的this) --bind/call/apply--> fstparam(第一个参数)ways --new--> instance(this被固化在实例上)ways --其他方式--> form(函数被调用的方式)form --foo--> window(this为window/严格模式下的undefined)form --bar.foo--> obj(this为bar)</pre><p><strong>陷阱</strong></p><ul><li><p>无用 <code>this</code>:</p><p>有时函数的 <code>this</code> 并不重要, 但是部分回调函数需要指定<code>this</code>(如通过 <code>bind</code> 实现柯里化,<code>forEach</code>函数). 我们可以传入 <code>null</code> 占位,但是若函数的 <code>this</code> 为可选参数且默认值为 <code>global</code>,填入 <code>null</code> 会让 <code>this</code> 指向 <code>global</code>,这可能会污染全局作用域. 解决方法是实现一个人畜无害的对象, 将其称之为<code>DMZ</code>(Demilitarized zone, 非军事区) 对象, 可以使用<code>Object.create(null)</code> 实现, 这个对象比 <code>&#123;&#125;</code>更"空",</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> empty <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>empty<span class="token punctuation">,</span> <span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>隐式丢失问题</p><p>在实现 vue 的 runtime-dom 时我曾写过</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> create <span class="token operator">=</span> document<span class="token punctuation">.</span>createElement<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是在执行 <code>create('div')</code> 时出错了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">VM67</span><span class="token operator">:</span><span class="token number">1</span> Uncaught TypeError<span class="token operator">:</span> Illegal invocation    at <span class="token operator">&lt;</span>anonymous<span class="token operator">></span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是因为 <code>document.createElement('div')</code> 时<code>this</code> 指向 <code>document</code> 但是调用<code>create</code> 时 <code>this</code> 指向 <code>global</code>.解决方案就是</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> create <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="对象">对象</h3><p><strong>构造</strong></p><p>可以通过<strong>字面量</strong>与<strong>构造函数</strong>两种方式构造对象,在字面量构造对象时, <code>Key</code> 有多重写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token string">'C-'</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 一般模式</span>  <span class="token string-property property">'A-1'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// A-1 会被理解为A减1, 放弃简写, 将Key用引号引起来</span>  <span class="token punctuation">[</span>pre <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 可以用[]实现计算属性, 结果相当于 'C-1': 1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 JavaScript 的基本类型中, 只有 Object 是对象.<code>typeof null === 'object'</code>, 这是因为</p><blockquote><p>在 JavaScript 中二进制前三位都为 0 的话会被判断为 <code>object</code>类型, <code>null</code> 的二进制表示全是 <code>0</code>, 自然前三位也是<code>0</code>, 所以执行 <code>typeof</code> 时返回<code>object</code></p></blockquote><p><strong>访问</strong></p><p>可以通过<strong>属性访问</strong>(<code>obj.a</code>)与<strong>值访问</strong><code>obj['a']</code>访问元素,两者效果相同</p><p>当属性访问的 <code>Key</code> 违反 JavaScript语法时(如<code>a.1</code>)可以用值访问替代. 值访问中,<code>[]</code>包裹的表达式可以是非 <code>string</code>,但是在最后都会转换为 <code>string</code>, 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span>obj<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'true'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'[object Object]'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然后三项都不是同一个 <code>object</code>, 但是他们转换为<code>string</code> 后都是 <code>'[object Object]'</code>,应此映射值一样</p><p><strong>复制</strong></p><ul><li><p>浅拷贝</p><ul><li>对于<code>JSON</code> 安全的对象:<code>JSON.parse(JSON.stringify(obj));</code></li><li><code>ES6</code> 下: <code>Object.assign(obj);</code></li></ul><p>这两个方法会将所有<strong>可枚举对象</strong>拷贝出来, 但是<code>JSON</code> 方法拷来的对象的属性描述符(如: writable)会被抹去,<code>Object.assign</code> 来的对象的属性描述符会保留</p></li><li><p>深拷贝</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 深拷贝</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> copyedObjs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 此数组解决了循环引用和相同引用的问题，它存放已经递归到的目标对象</span>  copyedObjs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">fromTarget</span><span class="token operator">:</span> source<span class="token punctuation">,</span> <span class="token literal-property property">toTarget</span><span class="token operator">:</span> target <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">deepCopyFunction</span><span class="token punctuation">(</span><span class="token parameter">sourceItem<span class="token punctuation">,</span> targetItem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>sourceItem<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token keyword">typeof</span> sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span>        sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>        sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span>      <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        targetItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> copyedObjs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>copyedObjs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fromTarget <span class="token operator">===</span> sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            targetItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> copyedObjs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>toTarget<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        targetItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> targetItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        copyedObjs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">fromTarget</span><span class="token operator">:</span> sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token literal-property property">toTarget</span><span class="token operator">:</span> targetItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">deepCopyFunction</span><span class="token punctuation">(</span>sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> targetItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">deepCopyFunction</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>属性描述符</strong></p><p>可以用 <code>Object.defineProperty(obj, attr, config)</code>定义对象的属性与属性标识, <code>config</code> 结构为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    configurable<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token comment">// 是否允许修改属性描述符, 默认 false</span>    enumerable<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token comment">// 是否可以枚举, 默认 false</span>    value<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token comment">// 值, 默认 undefined</span>    writable<span class="token operator">?</span><span class="token operator">:</span>  <span class="token comment">// 值是否可修改, 默认 false</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>显而易见的是: 将 <code>configurable</code> 改为 <code>false</code>后无法改回, 但是, 即使 <code>configurable: false</code>, 仍然可以将<code>writable</code> 从 <code>true</code> 改为 <code>false</code>,且无法改回.</li><li>可以使用 <code>delete</code> 删除属性(但并不意味着会被垃圾回收,因为被删除对象可能会被其他对象引用)</li></ul><p><strong>属性不变性</strong></p><ul><li>配置 <code>&#123;configurable: false, writable: false&#125;</code>即可创建常量属性</li><li>调用 <code>Object.preventExtensions()</code>可以让对象无法再添加新的属性(添加会造成静默失败, 在严格模式下会造成<code>typeError</code> )</li><li>调用 <code>Object.seal()</code> 可以让对象无法再添加/删除属性,无法重写属性描述符</li><li>调用 <code>Object.freeze()</code> 可以让对象在 <code>seal</code>的基础上 <code>writable: false</code>. 如需冻结整个对象,该需要递归冻结每个属性, 同时,引用这个属性的所有对象的该属性都会被冻结</li></ul><p><strong>getter与setter</strong></p><ul><li>访问对象的属性实际上是在对象上的 <code>[[Get]]</code> 方法, 默认的<code>[[Get]]</code> 方法会先查找对象上是否有该属性,若是对象上没有该属性, <code>[[Get]]</code>就会顺着<strong>原型链</strong>向上查找, 都找不到则返回<code>undefined</code>. <strong>这与作用域的查找不同,作用域查找失败后会向外层作用域查找, 都找不到则抛出<code>Reference Error</code></strong></li><li>为对象设置属性等操作会出发 <code>[[put]]</code>,<code>[[put]]</code> 会先检查属性是否存在, 在检查是否定义了属性标识符,若是则直接调用 <code>setter</code>, 再检查属性是否是<code>writebale</code> 的, 如果是则会造成静默失败或<code>TypeError</code>, 若不是则会设置值</li><li>可以在 <code>defineProperty</code> 时指定 <code>getter</code> 与<code>setter</code> 接替默认 <code>[[Get]]</code> 与<code>[[Put]]</code>, <strong>若定义了 <code>getter</code> 没有的定义<code>setter</code>, 在设置属性时 <code>[[Put]]</code> 不会赋值,而是直接忽略赋值且不抛出错误. 所以最高成对定义<code>getter/setter</code></strong></li></ul><p><strong>查找</strong></p><ul><li><code>in</code> 可以判断 <code>key</code>是否在对象或其原型链上(包括不可枚举的属性)</li><li><code>hasOwnProperty</code> 可以判断 <code>key</code> 是否在对象上,但不检查原型链</li><li><code>for-in</code> 可以遍历对象上的可枚举元素的<code>key</code></li><li><code>for-of</code> 可以遍历有迭代器对象上的所有值</li><li><code>Object.keys()</code> 可以返回对象上的可枚举元素</li><li><code>Object.getOwnPropertyNames()</code>可以返回对象上的所有元素</li></ul><h3 id="混入">混入</h3><ul><li><p>显式混入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mixin</span><span class="token punctuation">(</span> <span class="token parameter">sourceObj<span class="token punctuation">,</span> targetObj</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> sourceObj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 仅拷贝非既存内容</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> targetObj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   targetObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> sourceObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> targetObj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>寄生继承</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// “传统的 JS 类” `Vehicle`</span><span class="token keyword">function</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>engines <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Vehicle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">ignition</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Turning on my engine."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Vehicle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">drive</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ignition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Steering and moving forward!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// “寄生类” `Car`</span><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 首先, `car` 是一个 `Vehicle`</span> <span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 现在, 我们修改 `car` 使它特化</span> car<span class="token punctuation">.</span>wheels <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 保存一个 `Vehicle::drive()` 的引用</span> <span class="token keyword">var</span> vehDrive <span class="token operator">=</span> car<span class="token punctuation">.</span>drive<span class="token punctuation">;</span> <span class="token comment">// 覆盖 `Vehicle::drive()`</span> car<span class="token punctuation">.</span><span class="token function-variable function">drive</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">vehDrive</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Rolling on all "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wheels <span class="token operator">+</span> <span class="token string">" wheels!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">return</span> car<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myCar<span class="token punctuation">.</span><span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Turning on my engine.</span><span class="token comment">// Steering and moving forward!</span><span class="token comment">// Rolling on all 4 wheels!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>隐式混入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Something <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">cool</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Something<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Something<span class="token punctuation">.</span>greeting<span class="token punctuation">;</span> <span class="token comment">// "Hello World"</span>Something<span class="token punctuation">.</span>count<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token keyword">var</span> Another <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">cool</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 隐式地将 `Something` 混入 `Another`</span>  Something<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Another<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Another<span class="token punctuation">.</span>greeting<span class="token punctuation">;</span> <span class="token comment">// "Hello World"</span>Another<span class="token punctuation">.</span>count<span class="token punctuation">;</span> <span class="token comment">// 1 (不会和 `Something` 共享状态)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="原型">原型</h3><p><strong>尝试理解原型链</strong></p><p>首先要明确, 虽然人们致力于通过语法糖让程序员像写类一样写 JavaScript的"类"与"继承". 但是, 实际上 JavaScript 的继承是基于原型链的.</p><p>原型是为实现继承而提出的,可以尝试将对象的原型理解成<strong>这个对象是基于什么样子的玩意魔改出来的</strong>.注意, 基于什么<strong>样子的</strong>玩意,不是基于<strong>什么玩意</strong>. 以下面这个继承关系为例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最开始, 我以为, 原型就是告诉实例对象,他是基于<strong>什么玩意</strong>构造出来的.</p><p>如果不考虑继承关系, 可以这么想象 <code>Father</code> 与<code>Son</code></p><p><img src="./你不知道的JavaScript学习/2-2.png" /></p><p>有两个独立的框框, 框中, 左边的圆是构造函数, 中间原型,右边是其构造出的实例. 按照刚刚的理解, 原型是一个神秘的<code>object</code>, 当我们要构造函数的时候, 只需要将执行<code>构造函数.apply(原型)</code>, 然后我们就得到了实例, 看起来不错.要是知道原型是什么就好了.</p><p>那, 如果 <code>Son</code> 的原型是 <code>Father</code>的实例会怎么样呢? 不错诶! <code>Son构造函数.apply(father)</code> 得到<code>son</code> 看起来合情合理!</p><p><img src="./你不知道的JavaScript学习/2-3.png" /></p><p>将原型链扩展完. 还是很棒! <code>Father构造函数.apply(&#123;&#125;)</code> 得到<code>father</code> 看起来也合情合理!<code>Object.apply(一个奇怪的东西)</code> 得到 <code>&#123;&#125;</code>看起来也合情合理! 至于这个奇怪的东西, 我们只知道他的<code>__proto__</code> 是 <code>null</code></p><p><img src="./你不知道的JavaScript学习/2-4.png" /></p><p>世界线收束了? 不对劲, 这么我们在直接操作原型呢? 这么一串搞下来,我们直接魔改了 <code>Object</code> 的原型 :(</p><p>实际上不是这样的, 原型是一个对象,他就像一个指路牌一样描述了构造函数(<code>.constructor</code>)是谁,原型链的上一层是谁<code>.__proto__</code>, 这个类上有什么方法.</p><p>看看 <code>Son.prototype</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">constructor</span><span class="token operator">:</span> <span class="token keyword">class</span> <span class="token class-name">Son</span>         <span class="token comment">// 构造函数</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object          <span class="token comment">// 原型链上一级</span>    <span class="token literal-property property">constructor</span><span class="token operator">:</span> <span class="token keyword">class</span> <span class="token class-name">Father</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./你不知道的JavaScript学习/2-5.png" /></p><p>但是, 对于创建对象来讲, 这足够了! 一旦我拥有了原型对象,我就知道了其构造函数与原型链的前一级, 在创建对象的时候,我递归让上一级帮我创建父类的实例, 然后将哪个实例喂给这一级的构造函数,对象创建成功</p><p><img src="./你不知道的JavaScript学习/2-6.png" /></p><p>这就解释了 <code>Son.prototype.__proto__ === Father.prototyp</code>,原型链即使这条蓝色的链表, 红色的就是其构造的过程:)</p><p>看起来没问题. 但是, 为啥要把类上的方法存储在原型上呢?因为这样所有的子类就访问父类的同一个方法.这与基于类的继承的实现方法不太相同, 但是 JavaScript本身就是基于原型链继承的而不是基于类继承的.</p><p>于是, 这个经典的图就可以理解了. 无非就是加入了<strong>Object&amp;Function 既是函数也是对象</strong> 的想法</p><p><img src="./你不知道的JavaScript学习/2-8.jpg" /></p><p><strong>基于原型链的继承</strong></p><ul><li><p>差异继承</p><p>回想 Java 等基于类继承的语言. 子类在实例化时只会执行父类的构造函数,并不会实例化父类, 父类的属性均会实例化在子类上.</p><p>但是 JavaScript 是基于原型链继承的,构造的过程实际上是一层一层的的调用构造函数并一层一层的构造实例.这意味着在构建子类时父子类实例都会被创建, 继承关系只是在原型上通过<code>__proto__</code> 维护子对象与父对象的关联,子类实例上只维护其与父类的差异. 也称这种继承为差异继承.</p></li><li><p><code>prototype</code> 与屏蔽</p><p>对象的<strong>赋值</strong>会触发 <code>[[Put]]</code> 操作.<code>[[put]]</code> 查找对象失败后会顺着对象的原型链查找标识符,于是产生了一些奇怪的规则.</p><p>假设执行 <code>foo.bar = 1</code>, 且 <code>foo</code> 上没有<code>bar</code></p><ul><li><p>原型链上找到了标识符且标识符 <code>writable: true</code>,<strong>会直接在 <code>foo</code> 上创建 <code>bar</code>, 然后赋值.称其为屏蔽属性</strong>(WTF!!)</p></li><li><p>原型链上找到了标识符且标识符 <code>writable: false</code>,<strong>会静默失效, 在严格模式下会抛出错误</strong></p></li><li><p>原型链上找到了标识符且标识符有 <code>setter</code>, 直接应用<code>setter</code></p></li></ul><p><strong>上面的规则都是针对 <code>=</code> 赋值的, 使用<code>Object.defineProperty()</code>就不会产生这些破玩意</strong></p></li><li><p>什么是所谓的构造函数</p><p>实际上, 构造函数就是普通函数, 构造函数也可以像普通函数一样调用.但是一旦函数前面加上了 <code>new</code>, <code>new</code>会劫持普通函数并将其当作构造函数调用</p></li><li><p>原型上的 <code>constructor</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token constant">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">C2</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">C1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// C1 &#123; v: 2 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>constructor <span class="token operator">===</span> <span class="token constant">C2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>constructor <span class="token operator">===</span> <span class="token constant">C1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对象上的 <code>constructor</code> 并不是对象的构造者, 因为<code>constructor</code> 是在对象的原型上, <code>constructor</code>原型的构造函数</p></li><li><p>手动原型继承</p><p>这是一些继承方案</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">C1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayC1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM C1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token constant">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token constant">C1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将C1的变量定义继承到了C2</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">C2</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">C1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍 将C1的方法继承到C2可行方案1(ES6前)</span><span class="token comment">// Object.setPrototypeOf(C2.prototype, C1.prototype); // 👍 将C1的方法继承到C2可行方案2(ES6)</span><span class="token comment">// C2.prototype = C1.prototype; // 👎错误方案1</span><span class="token comment">// C2.prototype = new C1(); // 👎错误方案2</span><span class="token class-name">C2</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayC2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM C2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// C1 &#123; x: 1, y: 2 &#125;</span>c<span class="token punctuation">.</span><span class="token function">sayC1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IM C1</span>c<span class="token punctuation">.</span><span class="token function">sayC2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IM C2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继承变量没得说, 直接 <code>apply()</code> 就行,但是有四个继承方法的方案</p><ul><li><p><code>C2.prototype = Object.create(C1.prototype);</code>这是在ES6之前的方案</p><p><code>Object.create()</code> 方法用于创建一个新对象,并使用参数对象来作为新创建对象的原型</p><p>一个简易的 <code>create</code> 实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Object.setPrototypeOf(C2.prototype, C1.prototype);</code>:<code>ES6</code> 新增的解决方案</p></li><li><p><code>C2.prototype = C1.prototype;</code> 会造成修改<code>C2.prototype</code> 时直接修改了 <code>C1.prototyoe</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">C1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM C1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token constant">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token constant">C1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将C1的变量定义继承到了C2</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">C2</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">C1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token class-name">C2</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM C2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IM C2</span>c2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IM C2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>C2.prototype = new C1();</code> 不推荐这个方法, 原因是</p><ul><li><code>C2</code> 的原型上会有 <code>C1</code> 的变量</li><li>调用 <code>new C1()</code>构造函数可能产生副作用(如修改全局变量)</li></ul><p>如下是两者对比</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">C1</span> <span class="token punctuation">(</span><span class="token class-name">C2</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">C1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>版<span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object    <span class="token function-variable function">sayC1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM C1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token literal-property property">constructor</span><span class="token operator">:</span> ƒ <span class="token constant">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object<span class="token constant">C1</span> <span class="token punctuation">(</span><span class="token class-name">C2</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>版<span class="token punctuation">)</span>  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object    <span class="token function-variable function">sayC1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM C1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token literal-property property">constructor</span><span class="token operator">:</span> ƒ <span class="token constant">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p><strong>对象关联</strong></p><p>通过继承可以让两个对象关联起来. 如果只是想实现跨对象调用方法,这就显得比较麻烦了(因为要维护 <code>constructor/__proto__</code>),我们可以利用 <code>Object.create()</code> 实现两个对象的关联.实现关联后最好不要使用外部委托的调用模式, 即</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">sayF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> bar <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>bar<span class="token punctuation">.</span><span class="token function">sayF</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 外部委托</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而是采用内部委托</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">sayF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> bar <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>bar<span class="token punctuation">.</span><span class="token function-variable function">doSayF</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sayF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 内部委托</span><span class="token punctuation">&#125;</span>bar<span class="token punctuation">.</span><span class="token function">doSayF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样可以提高代码可读性与安全性</p><h3 id="面向委托与面向对象的设计">面向委托与面向对象的设计</h3><ul><li><p>传统的OOP编程:鼓励在继承时使用方法重写(和多态)覆盖父类更加抽象的方法</p></li><li><p>委托编程: 要求将两个对象当作协作的兄弟,当某个对象上没有方法时会要求另一个对象帮忙实现,此外委托编程还有一些特点</p><ul><li>变量直接存储在委托上: 因为被委托者只是将原型上的属性连接到了委托者,不会带被委托者的属性</li><li>被委托者方法创建的变量会直接存在委托者上: 调用时候一般是<code>委托者.方法()</code>, 此时 <code>this</code>被隐式绑定在了委托者上</li><li>不鼓励重写方法, 鼓励在委托者身上定义更加具有描述性的方法名:JavaScript 的原型链<code>[[put]]</code> 机制让重写很麻烦</li><li>不关注类与类之间的层次关系而是关心对象与对象之间的相互借用关系(拿来吧你🖐)</li><li>不得循环委托</li></ul><p><strong>反类化</strong></p><p>有的时候, 我们不需要类, 只是需要类上的方法,此时我们可以在用委托机制在不实例化父类的情况下使用类上的方法</p><p><strong>内省</strong></p><p>检查一个对象是不是一个构造函数的实例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token operator">...</span><span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token string">"b1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 让Foo和Bar互相关联</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">;</span><span class="token comment">// true</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token comment">// 让b1关联到Foo和Bar</span>b1 <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">;</span><span class="token comment">// true</span>b1 <span class="token keyword">instanceof</span> <span class="token class-name">Bar</span><span class="token punctuation">;</span><span class="token comment">// true</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">//true</span>Foo<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>Bar<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一种更加脆弱的内省模式，但是在开发者上面用的很多</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>something<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> a1<span class="token punctuation">.</span><span class="token function">somethinf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="利用原型链的有趣写法">利用原型链的有趣写法</h3><h3 id="es6-的-class-语法"><code>ES6</code> 的 <code>class</code>语法</h3><p><strong>优点</strong>:</p><ul><li>通过 <code>supper</code> 基本杜绝了 <code>prototype</code>,并实现了多态</li><li>简洁的继承定义</li><li>不能声明属性, 只能声明方法</li></ul><p><strong>缺点</strong></p><ul><li><p>反词法</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> LoginController <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">errors</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 无需function</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>这是个语法糖, 编译后变为</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> AuthController <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">errors</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function-variable function">getUser</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>编译后 <code>getUser</code> 引用了一个匿名函数, 这意味着</p><ol type="1"><li>使调试时的栈追踪变得困难</li><li>使自引用（递归，事件绑定等）变得困难</li><li>使代码（稍稍）变得难于理解</li></ol></li><li><p>存在变量名与方法名之间的屏蔽, <code>supper</code>造成的隐式屏蔽</p></li><li><p>可以通过修改 <code>prototype</code> 的方法在 <code>class</code>定义后修改 <code>class</code> 定义</p></li></ul><h2 id="类型与语法">类型与语法</h2><h3 id="类型">类型</h3><p>JavaScript 是有类的, 但是 JavaScript 是一个动态若类型语言,我们没法说变量属于什么类型, 只能说变量对应的值是什么类型的.</p><p>内置类型有<code>null, undefined, boolean, number, string, object, symbol</code>,可以用 <code>typeof</code> 判断值的类型</p><p><code>typeof</code> 判断类型是存在部分特例</p><ul><li><p><code>typeof null === 'object'</code>, 这是 JavaScript 的一个小bug. 若确实需要检测 <code>null</code> 可以使用<code>!foo &amp;&amp; typeof foo === 'object'</code> 判定</p></li><li><p><code>typeof function () &#123;&#125; === 'function'</code>, 虽然函数是<code>Object</code> 的子类, 但是 <code>typeof</code>会特殊的返回<code>function</code> 而不是 <code>object</code>. 同时,函数的 <code>length</code> 是其形参的数量,形参的数量不包括剩余参数个数，仅包括第一个具有默认值之前的参数个数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// fun1.length = 1</span><span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// fun2.length = 2</span><span class="token keyword">function</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// fun3.length = 3</span><span class="token keyword">function</span> <span class="token function">fun4</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// fun4.length = 3</span><span class="token keyword">function</span> <span class="token function">fun5</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// fun5.length = 0</span><span class="token keyword">function</span> <span class="token function">fun6</span><span class="token punctuation">(</span><span class="token parameter">a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// fun6.length = 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>typeof 未定义值 === 'undefined'</code></p></li></ul><p><strong><code>undefined</code> 与<code>undeclared</code></strong></p><ul><li>当我们访问一个已定义但是没有赋值的变量时, 会返回<code>undefined</code></li><li>当我们返回一个没有定义的(undeclared) 值时,<ul><li>若在是访问对象上的标识符, 会返回 <code>undefined</code>, (对象上<code>[[Get]]</code> 的保护机制)</li><li>否则抛出 <code>ReferenceError</code></li></ul></li></ul><p>但是 <code>typeof</code> 的保护机制会让 <code>undefined</code> 与<code>undeclared</code> 均返回 <code>undefined</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种保护机制可以让我们轻松的判断全局作用域上是否有某个属性, 方便外部JavaScript 模块加载时检测全局环境, 实现选择性加载</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> foo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong><code>void</code>关键字</strong></p><p><code>void</code> 表达式永远返回 <code>undefined</code> 值, 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>undefined</code> 与 <code>null</code></strong></p><p>一般用 <code>null</code> 表示空值, 用 <code>undefined</code>表示没有值.</p><p>比较特殊的是: <strong><code>null</code> 是一个关键字, 但是<code>undefined</code> 只是一个标识符, 他的值默认为undefined</strong>,所以以下代码是成立的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> demo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>t <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false, 因为 undefined 标识符对应的不是 undefined 值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>t <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, 因为 void 0 返回的是 undefined 值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="值">值</h3><ul><li><p>数组</p><ul><li><p>删除元素:<code>delete a[1] / a.splice(1,1);</code>伪数组转数组</p><p>常见的伪数组有 <code>DOMList</code>, <code>arguments</code>,伪数组没有数组上的部分方法, 转换方法为(假设<code>foo -&gt; bar</code>)</p><ul><li>遍历伪数组元素</li><li><code>bar = Array.prototype.slice.call(foo);</code></li><li><code>bar = Array.from(foo);</code></li><li><code>bar = [...foo];</code></li></ul></li></ul></li><li><p>字符串</p><p>字符串不是字符数组, 两者身上的方法有差异</p><ul><li><p>字符串不可变</p><ul><li><p>字符串的值不可被外部修改</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '123'</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token string">'123'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['1', '0', '3']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>字符串上的方法不得修改字符串的值(换而言之,调用字符串的方法只会返回新值, 而不会修改字符串原值)</p></li></ul></li><li><p>字符串可以使用部分字符数组的方法:</p><ul><li><p>字符串可以通过 <code>Array</code> 原型方法访问<code>Array.prototype.reverse.call(s)</code></p></li><li><p>若访问的方法会修改原字符串, 那么该方法将无法调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Cannot assign to read only property '0' of object '[object String]'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以先将字符串转换为数组在调用方法最后转回</p></li></ul></li></ul></li><li><p>数字</p><p>JavaScript 只有数字一个类型, 没有所谓整数小数之分. 数字全部使用 IEEE754 的 64 位版本实现</p><ul><li><p>简写规则</p><p>在书写字面量时, 可以省略前导与后继 <code>0</code>, 例如<code>0.12 === .12</code>, <code>12.0 === 12.</code></p><p>受简写规则影响, 部分方法调用是无效的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍 有效</span><span class="token number">0.12</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍 有效, 第二个点不可能是小数点</span><span class="token number">12.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👎 无效, JS会其为 (12.)toFixed</span><span class="token number">12.</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍 有效, 第一个点是简写, 第二个点是链式调用</span><span class="token number">12</span> <span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍 有效, 注意数字与点之间有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>格式化方法</p><ul><li><p><code>toFixed</code> 指定小数位数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42.59</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "43"</span>a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.6"</span>a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.59"</span>a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.590</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>toPrecision</code> 指定有效位数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42.59</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "4e+1"</span>a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "43"</span>a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.6"</span>a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.59"</span>a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.590"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>运算误差: JavaScript 自带 <code>Number.EPSILON</code>作为运算误差, 这个值一般为 <spanclass="math inline">\(2^{-52}-1\)</span></p></li><li><p>整数检测: <code>Number.isInteger / Number.isSafeInteger</code>可分别用于整数, 安全整数检测</p></li><li><p>参与位运算: 虽然 IEEE 754 允许最大安全整数为 <spanclass="math inline">\(2^{53}-1\)</span>, 但是, 在执行位运算时, 只有后 32位数会参与运算, 其余位将被忽略. 借助此特性, 可以通过 <code>a | 0</code>将 <code>a</code> 转为 32 位整数</p></li><li><p><code>NaN</code>: <code>NaN</code> 是一个数值类型, 但不是数字.当出现 Number 运算结果无法返回数字时就会返回 <code>NaN</code>. 所以,<code>NaN</code> 可以用来提示数值运算出错</p><p><code>NaN !== NaN</code>, 这是 JavaScript 唯一自己与自己不等的元素.判断 <code>NaN</code> 可以采用以下方法</p><ul><li><code>Number.isNaN(a)</code>: 利用 ES6 的新方法判断 <code>a</code>是不是 <code>NaN</code></li><li><code>a !== a;</code>: 反向利用其反自反的特性判断 <code>a</code>是不是 <code>NaN</code></li><li><code>Object.is(NaN, a)</code>: 利用新方法判断 <code>a</code> 是不是<code>NaN</code> (后面解释实现)</li></ul></li><li><p><code>0 &amp; -0</code></p><p>部分场景需要使用负号表示方向, JavaScript 中有 <code>0</code> 与<code>-0</code>.</p><ul><li><p><code>-0 === 0</code></p></li><li><p>可以通过字面量, 非加减的表达式, 类型转换产生<code>-0</code></p></li><li><p><code>-0</code> 转为字符串后会失去负号</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>'-0'</code> 字符串转为非字符串时会保留负号</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token string">'-0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'-0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'-0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>判定 <code>-0</code></p><ul><li><p>手动实现方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isNegZero</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">/</span> v <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Object.is(-0, a)</code>: 利用新方法判断 <code>a</code>是不是 <code>-0</code></p><p>这个 <code>is</code> 方法看起来很神奇, 其实就是特判了<code>NaN</code> 与 <code>-0</code> 的 <code>===</code></p></li></ul></li></ul></li><li><p><code>Infinity</code></p><p>设有限正数 <code>a</code></p><ul><li>与有限数加减法: <code>Infinity (+/-) a === Infinity</code></li><li>与 <code>Infinity</code> 加减法:<code>Infinity - Infinity === NaN</code>,<code>Infinity - -Infinity === Infinity</code></li><li>与有限非0数乘除法: <code>Infinity (*//) a === Infinity</code>,<code>Infinity (*//) -a === -Infinity</code></li><li>与0乘除法: <code>a/0 === Infinity</code>,<code>-a/0 === -Infinity</code>, <code>Infinity / 0 === Infinity</code>,<code>Infinity * 0 = NaN</code>,</li><li>与 <code>Infinity</code> 乘除法:<code>Infinity * Infinity === Infinity</code>,<code>Infinity / Infinity === NaN</code></li></ul></li></ul></li></ul><h3 id="原生函数">原生函数</h3><p>在写 TS 时会遇到一个问题, 描述类型的时候应该用小写(如:<code>string</code>), 而不能用大写(如: <code>String</code>),因为大写的是构造函数.</p><p>JavaScript 内建的函数(原生函数)有:<code>String, Number, Boolean, Array, Object, Function, RegExp, Date, Error, Symbol</code>.</p><p><strong>封装</strong></p><ul><li><p>对于基本类型非 <code>Object</code>类型(<code>String, Number, Boolean, Symbol</code>)的值</p><p>基本类型值与通过构造函数创建的值不同.通过构造函数创建的值是一个对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token punctuation">;</span><span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [String: 'aaa']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时对象永远为 <code>true</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> b1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">const</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1 <span class="token operator">===</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1 <span class="token operator">==</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起来基本类型值与对象还是有区别的, 对象中封装了基本类型值.基本类型值本身只是一个基本类型值, 上面没有方法(如:<code>s.length</code>),但是当基本类型值要访问其对应原生函数对象上的方法时, <strong>JavaScript会自动将基本类型值封装为对象</strong>. 封装为对象当然要耗费时间,但是<strong>不要为此故意将字面量声明为对象</strong>, JavaScript引擎会对代码做性能调优并决定在什么时候封装对象.</p></li><li><p>对于基本类型为 <code>Object</code>类型(<code>Array, Object, Function, RegExp, Date, Error</code>)的值</p><p>使用字面量创建(如果可以)与使用函数创建是完全一样的</p><ul><li><p><code>Array</code></p><ul><li><p>创建 <code>Array</code> 时可以不带 <code>new</code></p></li><li><p>通过 <code>Array(n)</code> 可以创建包含 <code>n</code>个空值(<code>empty item</code>)的数组</p></li><li><p>直接改大数组的 <code>length</code> 会导致产生空值</p></li><li><p>空值不是 <code>undefined</code>, 不同函数对空值与<code>undefined</code> 的处理不同 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &lt;3 empty items> ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 0, 1, 2 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p><code>join</code> 不考虑空值的存在, 直接通过 <code>arr.length</code>遍历每个元素. 而 <code>map</code> 在处理空值时会直接跳过空值</p><p>应此, <code>Array(n)</code> 创建的空值数组是危险的, 可以使用<code>Array.apply(null, &#123; length: n &#125;)</code> 创建长度为 <code>n</code>的 <code>[undefined...]</code> 数组</p></li></ul></li><li><p><code>Object, Function, RegExp</code></p><ul><li>不建议使用构造函数构造这些对象,可以直接使用<code>&#123;&#125;, function, //</code> 构建</li><li>对于需要修改的正则表达式可以使用 <code>RegExp</code> 构建(但是<code>RegExp</code> 的效率不及 <code>//</code>)</li></ul></li><li><p><code>Date, Error</code></p><ul><li>无法用字面量创建这些值</li><li><code>new Date()</code> 不带参数默认使用当前时间</li><li>不带 <code>new</code> 的 <code>Date()</code> 无论参数如何,都返回日期字符串</li><li>若只是想获得当前时间戳可以使用静态方法 <code>Date.now()</code></li><li>创建 <code>Error</code> 时可以不带 <code>new</code></li></ul></li></ul></li><li><p>封装对象的 <code>[[class]]</code>: 所有 <code>typeof</code> 返回<code>object</code> 的变量上面都有一个 <code>[[class]]</code>,表示对象的"子类型"</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Number]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Boolean]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Array]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>拆封</strong></p><p>可以使用 <code>obj.valueof()</code> 获取对象封装的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="强制类型转换">强制类型转换</h3><p>JavaScript 强制类型转换只支持转化为基本类型值</p><p><strong>抽象值操作</strong></p><p>抽象类型函数是类型中内置的一些个怪方法, 在类型转换时 JavaScript会调用这些函数实现对应类型转换</p><ul><li><p><code>ToString</code> 转换为 <code>String</code></p><ul><li><p>普通对象: 对象的 <code>toString</code> 默认返回对象的<code>[[class]]</code> 值</p></li><li><p>数组: <code>Array</code> 的 <code>toString</code> 被重新定义过,等价于 <code>return this.join(',')</code>, 注意: 没有<code>[]</code></p></li><li><p>JSON对象:</p><ul><li><p><code>JSON.stringify</code></p><p><code>JSON.stringify(value[, replacer [, space]])</code>有两个可选参数</p><ul><li><p><code>replacer</code> 若是函数, 每个属性都会经过该函数的转换,若是一个数组，则只有包含在这个数组中的属性名才会被转换, 若是<code>null</code> 或者未提供，则对象所有的属性都会被序列化.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> unSafe <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// &#123;"a":1,"c":[1,3,null]&#125;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>unSafe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>k <span class="token operator">===</span> <span class="token string">'b'</span> <span class="token operator">||</span> k <span class="token operator">===</span> <span class="token string">'2'</span> <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>space</code>: 若为数字则为每级缩进指定字符, 若为字符串,则将字符串前<strong>十</strong>位作为缩进字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;</span><span class="token comment">//   "a": 1,</span><span class="token comment">//   "c": [</span><span class="token comment">//     1,</span><span class="token comment">//     3,</span><span class="token comment">//     4</span><span class="token comment">//   ]</span><span class="token comment">// &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;</span><span class="token comment">// 123"a": 1,</span><span class="token comment">// 123"c": [</span><span class="token comment">// 1231231,</span><span class="token comment">// 1231233,</span><span class="token comment">// 1231234</span><span class="token comment">// 123]</span><span class="token comment">// &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'1234567890-='</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;</span><span class="token comment">// 1234567890"a": 1,</span><span class="token comment">// 1234567890"c": [</span><span class="token comment">// 123456789012345678901,</span><span class="token comment">// 123456789012345678903,</span><span class="token comment">// 123456789012345678904</span><span class="token comment">// 1234567890]</span><span class="token comment">// &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>toJSON</code></p><p>在 <code>stringify</code> 时, 若对象中存在非 JSON安全值(<code>undefined / function / symbol / 循环引用</code>)会忽略或报错,若忽略值在数组中则会采用 <code>null</code> 代替</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">norm</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token comment">// 正常</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// 跳过</span>  <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 跳过</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 跳过</span>  <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 正常</span>    <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// null</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">//null</span>    <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// null</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">e</span><span class="token operator">:</span> t<span class="token punctuation">,</span> <span class="token comment">// 报错</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了让调用者可以自定义非 JSON 安全值的转换行为,<code>JSON.stringify</code> 实际进行了几个过程,先执行<code>replacer</code>, 再执行对象的 <code>toJSON</code> 方法,再对返回值的 <code>toString</code></p><p>对象的 <code>toJSON</code> 方法应该返回一个 JSON 安全的对象方便<code>toString</code> 调用. 该函数只会调用一次, 并且没有参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> unSafe <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>  <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">'UNDEFINED'</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'FUNCTION'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>unSafe<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;"a":"UNDEFINED","b":"FUNCTION","c":1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p><code>toNumber</code> 转换为 <code>Number</code></p><ul><li><p>特殊的:<code>true =&gt; 1, false =&gt; 0, undefined =&gt; NaN, null =&gt; 0</code></p></li><li><p>字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12, 10进制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'012'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12, 忽略8进制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'0x12'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 18, 接受16进制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'0b111'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7, 接受2进制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'0b121'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN, 出现非法字符返回NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'1a2b3c4'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN, 出现非法字符返回NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对象 / 数组 / 基本类型封装对象:</p><ul><li>对于基本类型封装的对象, 直接提取基本类型.若转换后非数值则在转换为数字.</li><li>对于其他对象, 若对象定义了 <code>valueOf</code> 函数则使用<code>valueOf</code> 函数转换, 否则使用 <code>toString</code> 转换.若转换后非数值则在转换为数字.</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"42"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"42"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> <span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "42"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">Number</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 42</span><span class="token function">Number</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 42</span><span class="token function">Number</span><span class="token punctuation">(</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 42</span><span class="token function">Number</span><span class="token punctuation">(</span> <span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span> <span class="token punctuation">[</span> <span class="token string">"abc"</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>toBoolean</code> 转换为 <code>Boolean</code></p><p>规定假值: <code>undefined</code>, <code>null</code>,<code>false</code>, <code>+0 / -0 / NaN</code>, <code>''</code>,其他都是真值 部分被废弃 / 非标准的 JavaScript 也会被标记为<code>false</code> (例如 <code>document.all</code> 已经被废弃,在老版浏览器中依然存在 <code>!!document.all === true</code>,在新版浏览器中为 <code>!!document.all === true</code>,这可以用于浏览器版本判定)</p></li></ul><p><strong>强制类型转换</strong></p><ul><li><p><code>String &amp; Number</code></p><ul><li><p><code>+var</code> 可以实现 <code>String</code> 到<code>Number</code></p></li><li><p><code>~~var</code> 可以实现将值按位反转再翻回来从而实现小数转 32位整数.</p><p>与 <code>floor / cell</code> 不同, 上述函数会做向上或下取整, 但是<code>~~</code> 会直接去尾</p><p>同时 <code>~</code> 相当于取反码, <code>-1</code> 的反码为<code>0</code>. 而 <code>-1</code> 经常被用作错误标记(如<code>indexof</code>). 所以, 所以经常用于判断值是否为<code>-1</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">'asdfghjkl'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">~</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'find it'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'not find  f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>Number &amp; parseInt</code>: <code>Number</code>构造函数可以读入纯数字的字符串并返回 <code>Number</code> 包装对象. 而<code>parseInt</code> 读入字符串并解析数字直到遇到非数字停止.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">'42'</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">'42px'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不指定进制, <code>parseInt</code> 的行为也不一样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'0x10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 16 自动识别 16 进制</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'0b10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 自动识别 2 进制</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'010'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 不识别 8 进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同时, 两函数在遇到非字符串输入时会先转换为 <code>String</code>在转换</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'42px'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'42'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种转换会带来一些"半隐式"的转换问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 18 ( Infinity 会被转换为 'Infinity', 'I' 在 19 进制中是 18)</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">0.000008</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 (这个数会被转换为 '0.000008')</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">0.0000008</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8 (这个数会被转换为 '8e-7')</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 250 (会被转换为 'false', 'fa' 都是 16 进制数)</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15  (会被转换为 'function..', 'f' 是 16 进制数 )</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>+</code> 二元加法造成的类型转换:若加法两边有字符串就将两边转换为字符串(与直接转字符串不同, 流程是先<code>toValue</code> 再 <code>toString</code> )执行字符串拼接,否则先转换为 <code>Number</code> 再执行数值相加.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'42'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42: 直接 toString = '42'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4: 先 valueOf = 4 然后 toString = '4'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5: valueOf = 4, 4 + 1 = 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>true =&gt; 1, false =&gt; 0</code></p></li></ul></li><li><p><code>Boolean</code></p><ul><li><p><code>!!</code> 可以用于转换类型为 <code>Boolean</code></p></li><li><p><code>if / for / while / do...while / ?:</code> 表达式会自动转换<code>Boolean</code></p></li><li><p><code>|| / &amp;&amp;</code>的<strong>左</strong>操作数在作条件判断时会自动转换.这两个逻辑运算符的返回值并不一定是 <code>Boolean</code>而是根据短路原则直接返回第一或第二个元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">||</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a 转为 false, 直接返回 b</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token operator">||</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b 转为 true, 直接返回 b</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a 转为 false, 直接返回 a</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b 转为 true, 直接返回 a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p><strong><code>==</code> 类型转换</strong></p><p><code>===</code> 是不进行类型转换的相等, 不可能产生类型转换,类型转换只会发生在 <code>==</code></p><ul><li><p>特殊情况: <code>NaN != NaN</code>, <code>-0 == 0</code></p></li><li><p><code>String == Number</code>: 将 <code>string</code> 转为<code>toNumber(string)</code> 后比较</p></li><li><p><code>Boolean == *</code>: 将 <code>boolean</code> 转为<code>toNumber(boolean)</code> 后比较</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>undefined == null</code></p></li><li><p>对象与非对象: 将对象转为基本类型值再比较. 以下是怪情况</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Yep, this happened."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>奇葩情况</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// true, 右侧 ![] => false, [] => '' => false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, '\n' / '' / 各种unicode空格 => 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总之, <code>==</code> 两边不要写 <code>true / false</code>, 避免使用<code>[], '', 0</code></p></li><li><p>各种情况比较表: <ahref="dorey/JavaScript-Equality-Table">dorey/JavaScript-Equality-Table</a></p><p><img src="./你不知道的JavaScript学习/3-1.png" /></p></li></ul><p><strong>比较符</strong></p><p>JavaScript 只定义了 <code>&lt;</code>. <code>a &gt; b</code>会被自动转为 <code>b &lt; a</code>, <code>a &lt;= b</code> 会被转换为<code>!(b &lt; a)</code>.</p><p>在比较时, 双方会先转换为基本数值类型再比较</p><h3 id="语法">语法</h3><p><strong>结果值</strong></p><p>在 DevTools 中, 在输入语句后即使没有 <code>Console</code> 语句,DevTool 也会输出一个结果, 这里显示的是语句的结果值.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">></span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;</span> <span class="token keyword">undefined</span><span class="token operator">></span> a<span class="token operator">&lt;</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在正常代码中, 如果一个语句中只有 <code>a</code>, JavaScript是不会输出结果的, 但是 DevTool 会输出这个语句的结果值</p><ul><li><p>声明语句 <code>let a = 1</code> 有结果值, 但是会被JavaScript引擎屏蔽, 最终显示 <code>undefined</code></p></li><li><p>赋值语句 <code>a = b</code> 的结果值为赋的值(但是不是<code>a</code> ! 只是 <code>a</code> 对应的右值!)</p><p>由于赋值语句的结果值是赋的右值, 可以借助这个特性实现链式赋值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>值得注意的是, 声明语句的结果值被屏蔽为了 <code>undefined</code>.所以, 不能链式声明</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 👎 静默失效</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>代码块 <code>&#123;&#125;</code> 的结果值是代码块的最后一个语句 /表达式</p></li></ul><p>在编程中, 可以使用 <code>eval</code> 获取结果值(但是不建议),未来可能可以通过 <code>do</code> 获取结果值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    b <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>表达式的结果是右值</strong></p><p>表达式的结果值是右值, 这就意味着这样的写法是非法的</p><ul><li><code>++a++</code>: 相当于 <code>++(a++)</code>, 而 <code>a++</code>返回的是右值, 无法对右值做 <code>++</code></li><li><code>(a || b) = 1</code>: <code>||</code> 是选择符号,看起来的意思是若 <code>a</code> 是假值则执行 <code>b = 1</code> 否则<code>a=1</code>. 但是 <code>(a || b)</code> 返回的是右值</li></ul><p><strong>多重语法</strong></p><ul><li><p><code>&#123;&#125;</code>: 可以是对象也可以是代码快, 这就导致了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 结果值: "[Obejct Obejct]" (&#123;&#125; 前有 +, 所以&#123;&#125;是一个对象)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 结果值: 0 (&#123;&#125;前啥也没有, 所以是个代码块, 其等价于 +[], 格式转换为 0)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// a == "[Obejct Obejct]" (&#123;&#125; 前有 +, 所以&#123;&#125;是一个对象)</span>b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// b == [Obejct Obejct]" (&#123;&#125; 前有 =, 所以&#123;&#125;是一个对象)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时, 代码块内属性的含义也变了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 此时是一个对象</span>a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">// 对象中的一个属性</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 此时是一个简单的代码块</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">// 代码快中的标签</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标签(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9sYWJlbA==">MDN<i class="fa fa-external-link-alt"></i></span>)类似于C 语言中 <code>goto</code> 的 label, 与之不同的是 JavaScript 中没有<code>goto</code>, 只能通过 <code>continue / break</code> 跳转,同时不能对非循环的块代码执行 <code>continue</code></p><p>同时注意, 标签名前后不能有双引号, 即</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"foo"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>是不合法的(震惊 JavaScript 竟然不完美兼容 JSON!)</p></li></ul><p><strong>优先级与结合性</strong></p><ul><li>优先级: <code>! &gt; &amp;&amp; &gt; || ?:</code> (<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL09wZXJhdG9yX1ByZWNlZGVuY2UjJUU2JUIxJTg3JUU2JTgwJUJCJUU4JUExJUE4">详见MDN<i class="fa fa-external-link-alt"></i></span>)</li><li>结合性: <code>?:</code> 是右结合的 (<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL09wZXJhdG9yX1ByZWNlZGVuY2UjJUU2JUIxJTg3JUU2JTgwJUJCJUU4JUExJUE4">详见MDN<i class="fa fa-external-link-alt"></i></span>)</li></ul><p><strong>自动分号(ASI)</strong></p><p>JavaScript 会自动在行末加 <code>;</code>,这可以防止很多不经意间造成的问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">do</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里在语法中必须加 ; 得益于 ASI, 程序员可以不用加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>暂时性死区</strong></p><p>就是在变量声明前使用变量(针对 <code>let</code>, <code>var</code>有声明提升不会出事). 提前使用会造成 <code>Reference Error</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 啥事没有</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span><span class="token keyword">let</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>还有个小例外</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined, 没有报错!</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span><span class="token keyword">let</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>函数参数</strong></p><p>在非严格模式下函数参数列表中标识符会与 <code>arguments</code>变量建立"连接"关系</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只修改了 a , 但是 arguments[0] 连接到了 a, 所以依然被修改了...</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2,2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无需考虑函数默认值问题, 启用默认值会自动启用函数严格模式</p><p><strong>try...finally</strong></p><p><code>finally</code>块包含的语句在<code>try</code>块和<code>catch</code>之后,无论 <code>try</code> 是否抛出异常 <code>finally</code> 子句都会执行.这里的 <code>finally</code> 就像一个回调一样, 执行顺序为<code>try -&gt; (catch) -&gt; finally -&gt; 函数的正常功能</code></p><ul><li><p>当 <code>try</code> 中出现 <code>return</code> 时</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 虽然 try return 了, 但是由于 finally 的存在, return 会被"暂存" 到finall 结束</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当 <code>try / catch &amp; finally</code> 中出现<code>return</code> 时</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// finally 的 return 会覆盖 try 的</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// console => 0, 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// finally 的 return 会覆盖 catch 的</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// console => 0, 1, 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>该规则同样适用于 <code>continue</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 0, 1, 2, 3, 4, 5(没有*)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最迷惑的是与 <code>break</code> 一起使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">lab</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">break</span> lab<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>switch</strong></p><ul><li><p>最简形式: <code>case</code> 接一个值, JavaScript 会将<code>a</code> 与 case 值做 <code>===</code> 比较</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token comment">// a == 1 成立, 但是 a === 1 不成立</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token boolean">true</span><span class="token operator">:</span> <span class="token comment">// 走这里了</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果像做一些类型转换, 可以将 <code>switch</code> 的值换成<code>true</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> a <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 走这里了</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> a <span class="token operator">==</span> <span class="token boolean">true</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果要用 <code>switch (true)</code> 的写法的话, 需要保证计算<code>case</code> 的计算结果一定是 <code>true</code> 而不是可以转换为<code>true</code>, <code>switch</code> 做的是 <code>===</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token string">'demo'</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> a <span class="token operator">&amp;&amp;</span> s<span class="token operator">:</span> <span class="token comment">// &amp;&amp; 返回 b 而 b !== true</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 走这里了</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="异步">异步</h2><h3 id="异步-1">异步</h3><p><strong>控制台异步</strong></p><p>实际上 <code>console.*</code> 系列函数并不是 ES 标准语法,其是由宿主环境决定的. 而宿主环境经常会为降低 I/O 开销而延迟输出, 这种I/O 异步的策略会造成输出"出错"</p><p><strong>程序执行时机</strong></p><p>JavaScript 中的代码是分块的(如一个个函数),我们希望可以干预函数执行的顺序与时机(如 Ajax 请求成功后再执行某个函数,先执行别的函数等一会儿再执行某个函数), 有两种常见方法</p><ul><li>回调函数</li><li><code>setTimeout</code> 等异步API</li></ul><p><strong>调用栈, 事件循环与任务队列</strong></p><p>JavaScript 是一个单线程的异步编程语言,让一个单线程的语言实现多任务异步是有点麻烦的. JavaScript搞了事件循环机制, 包括了调用栈, 任务队列, 事件循环</p><ul><li><p>调用栈(Call Stack): 存档代码执行时的 ConText(如函数嵌套)</p></li><li><p>事件循环: 每当调用栈清空(当前工作结束)时,事件循环会向任务队列首部取任务, 放调用栈执行</p></li><li><p>任务队列: 当有异步任务需要执行(如:定时器<strong>到期</strong>)时, JavaScript 会向任务队列中压入任务.任务队列又分宏队列与微队列, 不同的任务会放入不同的队列</p><p>宏队列</p><table><colgroup><col style="width: 83%" /><col style="width: 9%" /><col style="width: 6%" /></colgroup><thead><tr class="header"><th></th><th>浏览器</th><th>Node</th></tr></thead><tbody><tr class="odd"><td>整体代码(script)</td><td>✅</td><td>✅</td></tr><tr class="even"><td>UI交互事件</td><td>✅</td><td>❌</td></tr><tr class="odd"><td>I/O</td><td>✅</td><td>✅</td></tr><tr class="even"><td>setTimeout<br />(setTimeout(,0)是常用的放队尾的方法)</td><td>✅</td><td>✅</td></tr><tr class="odd"><td>setInterval</td><td>✅</td><td>✅</td></tr><tr class="even"><td>setImmediate</td><td>❌</td><td>✅</td></tr><tr class="odd"><td>requestAnimationFrame</td><td>✅</td><td>❌</td></tr></tbody></table><p>微队列</p><table><thead><tr class="header"><th></th><th>浏览器</th><th>Node</th></tr></thead><tbody><tr class="odd"><td>process.nextTick</td><td>❌</td><td>✅</td></tr><tr class="even"><td>MutationObserver</td><td>✅</td><td>❌</td></tr><tr class="odd"><td>Promise.then catch finally</td><td>✅</td><td>✅</td></tr></tbody></table></li></ul><p>总流程如下</p><ol type="1"><li>从宏任务队列中，按照<strong>入队顺序</strong>，找到第一个执行的宏任务，放入调用栈，开始执行；</li><li>执行完<strong>该宏任务</strong>下所有同步任务后，即调用栈清空后，该宏任务被推出宏任务队列，然后微任务队列开始按照入队顺序，依次执行其中的微任务，<strong>直至微任务队列清空为止</strong>；</li><li>当微任务队列清空后，一个事件循环结束；</li><li>接着从宏任务队列中，找到下一个执行的宏任务，开始第二个事件循环，直至宏任务队列清空为止。</li></ol><p>这里有几个重点：</p><ul><li>当我们第一次执行的时候，解释器会将整体代码<code>script</code>放入宏任务队列中，因此事件循环是从第一个宏任务开始的；</li><li>如果在执行微任务的过程中，产生新的微任务添加到微任务队列中，也需要一起清空；微任务队列没清空之前，是不会执行下一个宏任务的。</li></ul><p><strong>异步并行</strong></p><p>异步与并行不一样, 异步是允许指定代码块的运行时机,并行是多个代码块同时运行. 更加形象的说, 异步就是维护一个事件循环,并行就是维护一堆事件循环.</p><p>异步与并行都会带来不确定性,异步的不确定性是不知道任务会在什么时候被塞到队列尾部,而并行的不确定性是不确定指令之间的执行顺序</p><p>所幸, JavaScript 是单线程的异步语言, 这意味着 JavaScript调度最小单位是单个任务(函数要么全运行要么不运行,我们将其成为<strong>完整运行</strong>), 不会出现抢占式调度</p><p><strong>并发</strong></p><p>将常见的并发模式分为三种</p><ul><li><p>非互动式: 进程间不共享内存</p></li><li><p>互动式: 进程间共享内存</p><p>这会导致由于未知执行顺序造成的资源竞争</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ajax(..) 是某个包中任意的Ajax函数</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.1"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.2"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般解决方案有</p><ul><li><p>编号</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>url <span class="token operator">==</span> <span class="token string">"http://some.url.1"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>url <span class="token operator">==</span> <span class="token string">"http://some.url.2"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// ajax(..) 是某个包中任意的Ajax函数</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.1"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.2"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置大门(只有两个进程都完成才能继续)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> a <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> b <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ajax(..) 是某个包中任意的Ajax函数</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.1"</span><span class="token punctuation">,</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.2"</span><span class="token punctuation">,</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置"门闩"(即函数只给特定次调用者用)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> a <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> a <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ajax(..) 是某个包中任意的Ajax函数</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.1"</span><span class="token punctuation">,</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.2"</span><span class="token punctuation">,</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>协作式</p><p>对于计算量很大的同步任务, 经常将其拆解为异步的多个不冲突任务以放置JavaScript 运行阻塞</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// `response(..)`从Ajax调用收到一个10000000000的数组, 要同步执行一定会花很多时间</span><span class="token keyword">function</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>  data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ajax(..) 是某个包中任意的Ajax函数</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.1"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.2"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将其分解</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 一次只处理1000件</span> <span class="token keyword">var</span> chunk <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>  <span class="token comment">// 制造一个新的变形过的数组，所有的`data`值都翻倍</span>  chunk<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 异步规划下一个批处理</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 通过 setTImeout 将任务再次放入队尾</span>   <span class="token function">response</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// ajax(..) 是某个包中任意的Ajax函数</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.1"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.2"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>语句顺序</strong></p><p>JavaScript 编译器在执行代码前会做代码优化, 这可能改变语句执行顺序,但是这些改变都是安全的, 不必担心</p><h3 id="回调">回调</h3><p>JavaScript 是单线程的,其实现异步的最基本模式就是让主线程在不同任务上下文之间快速切换.基础的异步模式有回调与 <code>Promise</code>.</p><p><strong>回调的问题</strong></p><p>回调会让代码变得难以预测, 跟踪, 调试. 其存在多种问题</p><ul><li><p>回调地狱</p><p>称多层嵌套回调函数的代码为回调地狱.回调地狱不仅会造成代码形式上的难以理解,更重要的是在同步异步函数混杂的回调嵌套代码中,代码的行为与异步函数的执行时机往往是多样化的且容易被搞错.</p></li><li><p>信任问题</p><p>当使用第三方库异步函数时, 我们需要为第三方函数传入回调.而我们完全不清楚第三方库触发回调的时机, 次数, 三方函数出错后行为.过早过晚过多或出错后触发回调将会带来未知的问题.使用者在设计回调时需要考虑回调在不同时机调用的处理问题. 同时,称这种将函数执行时机交给三方函数的行为称为: 控制权反转</p></li></ul><p><strong>解决</strong></p><ul><li><p>解决回调地狱: 链式回调</p><p>将嵌套式回调</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转为链式回调</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do something</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>doB<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do something</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>doC<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">doC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do something</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这让代码在形式上看起来清晰了一点, 但是没有根本解决问题.函数的执行还是难以追踪的.</p></li><li><p>解决信任问题: <code>Error-Else</code> 风格</p><p>也称 Node.JS 分格. 在设计回调函数时, 传入第一个参数为 Error 信息.若函数出错, 在执行回调时候将第一个参数设置为 Error 信息,回调一旦看到第一个函数非假就知道上层函数出错了, 若 Error 为假,则从第二个参数开始获取传入信息.</p></li><li><p>解决信任问题: 借用并发解决方案</p><p>为解决回调时机问题, 可以借助并发思路, 通过设置 flag 识别运行时机,解决运行时机问题</p></li></ul><h3 id="promise">Promise</h3><p>回调存在的两个问题: 信任问题 &amp; 回调地狱(异步代码难以理解). 在 ES6中, Promise &amp; 生成器分别解决了这两个问题.</p><p><strong>鸭子类型</strong></p><p>如何判断一个对象是 Promise 对象呢? JavaScript的判断方式是检查对象是否是 "thenable" 的, 即: 对象是否具有<code>then</code> 方法. <strong>任何有 <code>then</code> 方法的对象都是Promise</strong></p><p>显然, 这会造成严重的兼容问题, 老代码中定义 <code>then</code>的对象都莫名其妙变成了 Promise</p><p><code>Promise.resolve</code> 可以一定程度上解决这一问题.该函数不仅可以返回一个 Promise, 更重要的是其可以将参数中的<code>thenable</code> 转换为非 <code>thenable</code></p><p><strong>Promise 解决了信任问题</strong></p><ul><li><p>控制权反转: 在回调中, 我们将回调交给三方函数.三方函数的执行是不可预测的. 而在 Promise 中,三方异步函数只在结束时向我们返回执行结果 / 错误信息.</p></li><li><p>调用过早: 在回调中, 可能出现异步函数结束前调用回调的问题, 在Promise 中, 即使后继函数被注册, 也要等到 Promise 被决议后的下一个 trick再执行</p></li><li><p>调用过晚: 在回调中, 可能会出现后注册的回调先执行的问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'TEST1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'TEST2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hook'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// TEST1</span><span class="token comment">// Hook         // 👎</span><span class="token comment">// TEST2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Promise 中, 后继函数的执行顺序是严格按照注册顺序来到</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'THEN 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hook'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'THEN 2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// THEN 1</span><span class="token comment">// THEN 2</span><span class="token comment">// Hook        // 👍</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>超时不调用: 在回调中, 如果三方函数不调用, 我们也没办法, 但是在Promise 中, 可以通过 <code>Promise.race()</code> 的方式解决这一问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">timeOutError</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'TIME OUT'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">timeOutError</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'T1 FUL: '</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'T1 REJ: '</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">timeOutError</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'T2 FUL: '</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'T2 REJ: '</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// T2 FUL:  OK</span><span class="token comment">// T1 REJ:  TIME OUT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>调用次数不正确: Promise 一旦确定就无法更改(之后的<code>resolve</code> / <code>reject</code> 静默失效), 通过<code>then</code> 注册的函数也只能执行一次</p></li><li><p>传参异常: 在回调中可能出现参数长度不正确, 但是 Promise只允许传入一个参数, 多传的参数静默失效</p></li><li><p>异常处理: 在回调中, 如果三方函数出现异常, 回调函数可能不执行.但是在 Promise 中, 若执行出现异常, Promise 会自动执行 reject,捕获异常并传递到后继函数.</p></li></ul><p><strong>为什么是 <code>resolve</code> 而不是<code>fulfill</code></strong></p><p>Promise 的状态有 <code>pending</code> &amp; <code>fulfilled</code>&amp; <code>rejected</code>, 但是我们在构造 Promise回调的时候习惯上写的却是 <code>resolve</code> &amp; <code>reject</code>.为什么这里不用 <code>fulfill</code> &amp; <code>reject</code> 呢?</p><p><code>fulfilled</code> 表示 Promise 被接受, 而 <code>rejected</code>表示被拒绝. 然而 Promise 构造函数上的 <code>resolve &amp; reject</code>功能却不是这样的</p><ul><li><p><code>reject</code> 调用会让 Promise 无条件变为<code>rejected</code>, 且原因为传入的参数</p></li><li><p><code>resolve</code> 调用会让 Promise 变为调用<code>Promise.resolve</code> 后的结果. 如果传入的是一个 Error, Promise将变为 <code>rejected</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'FLU'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'REJ'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// REJ</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说 <code>resolve</code> 不会让 Promise 无条件变为<code>fulfilled</code>, 这也就是不用 <code>fulfill</code>的原因</p></li></ul><p><strong>链式调用</strong></p><ul><li>Promise 每次调用 <code>then</code> 都会创建并返回一个 Promise 替代原Promise</li><li>若 <code>then</code> 中函数返回非 Promise, 则自动为其包上<code>Promise.resolve</code>. 不返回则相当于返回 <code>undefined</code>即返回 <code>Promise.resolve(undefined)</code></li><li><code>then</code> 中函数的返回值将被用作下一个 <code>then</code>中函数的参数.</li><li><code>then</code> 中的函数抛出错误, 并不会引全局错误, 而是会返回<code>Promise.reject</code> 交由下一个 <code>then</code> 处理.</li><li><code>then</code> 函数有两个默认值, 第一个会将收到的参数重新<code>resolve</code> 传给下一级,第二个会将传入的参数重新作为错误抛出</li><li><code>catch(fn)</code> 相当于 <code>then(undefined, fn)</code></li></ul><p><strong>为什么不是 <code>try...catch</code></strong></p><p>Promise 中使用 <code>reject</code> 而不是 <code>try...catch</code>的原因是 <code>reject</code> 可以异步的处理错误.</p><p><strong>并发</strong></p><ul><li><code>Promise.all</code> 可以实现并发执行, 传入<code>Promise.all</code> 数组中的每个元素在执行前都会被<code>Promise.resolve</code> 过滤一遍. 若执行时出现了一个<code>reject</code> 则直接返回 <code>reject</code>,否则全部执行并返回结果数组</li><li><code>Promise.race</code> 无论结果如何, 只返回第一个. (为<code>Promise.race</code> 传入空数组会导致 Promise 永远处于<code>pedding</code> 状态)</li><li><code>Promise.none</code>: <code>Promise.all</code> 的反面, 只有全<code>rejected</code> 才返回数组</li><li><code>Promise.any</code>: 忽略拒绝, 返回第一个<code>fulfilled</code>, 若都失败则返回失败</li><li><code>Promise.first</code>: <del>和 any 一样</del></li><li><code>Promise.last</code>: 返回最后一个成功</li></ul><p><strong>缺陷</strong></p><p><del>其实我觉得这都不是缺陷</del></p><ol type="1"><li>无法可靠捕获 <code>Promise</code> 最终的结果: 我们不知道 Promise什么时候执行完, 也无法知道 Promise 是否出现错误. 最简单的想法是在Promise 最后注册一个 <code>then</code> 用于通知 Promise 执行完成. 但是,如果这个这个函数出错了, 我们将无法得知 Promise 最后是<code>fulfilled</code> 还是 <code>rejected</code>.唯一的可行方法是利用浏览器的垃圾回收机制, 若一个 Promise 处于待回收状态,那么这个 Promise 肯定是执行完了, 这个时候可以检测 Promise 的状态</li><li>一旦确定无法修正: Promise 一旦做出决定就无法变化, 这意味着很难让Promise 做重复性工作(一旦监听到鼠标按下就执行函数),我们只能借助辅助函数不断的生成新的 Promise</li><li>无法取消. 我们可以使用 <code>Promise.race</code> 实现超时报错,但是报错并不会影响超时的 Promise 继续执行.</li></ol><h3 id="生成器">生成器</h3><p>Promise 解决了异步的信任问题, 而生成器解决了回调地狱问题.将异步代码转换为看似同步的顺序代码风格.</p><p><strong>异步执行</strong></p><p>生成器返回一个迭代器,调用者可以在任何时机调用迭代器以实现看似同步的异步调用.一个生成器可以生成多个迭代器. 这些迭代器之间可以交替执行,迭代器之间独立无法直接通信, 但是可以通过外部变量闭包通信.</p><p><strong>双向数据传递</strong></p><p>我们希望在每次调用迭代器时候都能为生成器传入参数, 并获得迭代器的相应.可以通过 <code>yield X</code> 或 <code>return X</code> 的方式获取返回值,通过 <code>yield</code> 传入参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> y <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3.      ^ 执行到这里就停下, 返回 C</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token comment">// &lt;- 5. 执行到这里, 返回 y</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1. 只是返回生成器, 但是一点都不执行</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2. 开始执行生成器</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4. 传入 3 继续执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>构造迭代器</strong></p><p>为对象加入 <code>[Symbol.iterator]</code> &amp; <code>next</code>方法, 即可将对象变为迭代器.</p><ul><li><code>[Symbol.iterator]</code> 方法是一个计算属性, 与 TypeScript的计算属性一样, <code>Symbol.iterator</code> 就是 <code>Symbol</code>的静态成员. 该方法应该返回一个迭代器自身.</li><li><code>next</code> 方法返回 <code>&#123;done: boolean, value: &#125;</code>对象.</li></ul><p><code>for...of</code>可以实现遍历迭代器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> it <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 返回一个随机数</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">of</span> it<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 永远不 done 就会陷入死循环</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>生成器与迭代器</strong></p><p>为生成器产生的迭代器做一些改造可以实现特殊功能</p><ul><li><p>实现一个计数器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> counter1 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> counter2 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现关闭迭代器钩子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">yield</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 相当于实现了一个执行结束的钩子, 可以用来做垃圾回收</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'OK I will clean all the code'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> counter1 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> counter2 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token comment">// 关闭生成器, 执行 finally</span>counter2<span class="token punctuation">.</span><span class="token function">return</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>同步风格的异步代码</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">ajax</span><span class="token punctuation">(</span>  <span class="token string">"http://some.url.1/?x="</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">"&amp;y="</span> <span class="token operator">+</span> y<span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 向`*main()`中扔进一个错误</span>    it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使用收到的`data`来继续`*main()`</span>    it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回并执行异步, 异步执行后会调用生成器下一步. 同时支持错误处理</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使一切开始运行！</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>生成器与Promise</strong></p><p>迭代器可以用来写异步代码且不产生回调地狱.但是生成器需要外界不断控制自己执行下一块代码. 这个工作如果由 Promise完成那就会变得十分优雅</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'demo.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// request 会返回一个 Promise</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ERROR'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// p 现在是一个Promise对象</span>it<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 让 Promise 执行流程控制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里, Promise的异步控制只是在程序执行成功与出错的时候返回与抛出消息.完全可以用一个函数实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 感谢Benjamin Gruenbaum (@benjamingr在GitHub)在此做出的巨大改进！</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">gen</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">;</span> <span class="token comment">// 在当前的上下文环境中初始化generator</span> it <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 为generator的完成返回一个promise</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">handleNext</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 运行至下一个让出的值</span>   <span class="token keyword">var</span> next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">handleResult</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// generator已经完成运行了？</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> next<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 否则继续执行</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> next<span class="token punctuation">.</span>value <span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>       <span class="token comment">// 在成功的情况下继续异步循环，将解析的值送回generator</span>       handleNext<span class="token punctuation">,</span>       <span class="token comment">// 如果`value`是一个拒绝的promise，就将错误传播回generator自己的错误处理g</span>       <span class="token keyword">function</span> <span class="token function">handleErr</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>         it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> handleResult <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 ES7 中, 还可以使用 <code>async</code> &amp; <code>await</code>实现上述功能</p><p><strong>并发</strong></p><p>可以借助 Promise API 实现并发(这也启示了我们应该在哪里使用<code>async</code> &amp; <code>await</code>)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">yield</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'demo-partA.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'demo-partB.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">demo-full.com?a=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;b=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// p 现在是一个Promise对象</span>it<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 让 Promise 执行流程控制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>生成器委托</strong></p><p>可以将生成器嵌套生成器直接扁平化为一维生成器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 在调用的时候带上 * 这样相当于实现了生成器"转移"</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 3 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成器委托的对象可以是任何可迭代的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span><span class="token operator">*</span> foo<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 9 8 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以委托异常</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span> <span class="token string">"B"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"error caught inside `*foo()`:"</span><span class="token punctuation">,</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">yield</span> <span class="token string">"C"</span><span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token string">"D"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">yield</span> <span class="token string">"A"</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"error caught inside `*bar()`:"</span><span class="token punctuation">,</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">yield</span> <span class="token string">"E"</span><span class="token punctuation">;</span> <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// note: can't get here!</span> <span class="token keyword">yield</span> <span class="token string">"G"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> <span class="token string">"F"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"outside:"</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// outside: A</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"outside:"</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// outside: B</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"outside:"</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// error caught inside `*foo()`: 2</span><span class="token comment">// outside: C</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"outside:"</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// error caught inside `*bar()`: D</span><span class="token comment">// outside: E</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"outside:"</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"error caught outside:"</span><span class="token punctuation">,</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// error caught outside: F</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>形实转换(Thunk)</strong></p><p>一种古老的模式: 执行某个无参函数, 相当于这个另一个函数. 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fooThunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 稍后</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">fooThunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上, 这种模式也实现了异步. 但是 Thunk 的无参意味着硬编码.可以通过工厂函数解决这个问题.</p><p><strong>polyfill</strong></p><p>我们可以轻松实现 Promise 的兼容代码, 因为 Promise 是一个API,但是生成器是一种语法. 我们没法实现兼容. 可以先看看生成器的实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 管理 generator 状态</span> <span class="token keyword">var</span> state<span class="token punctuation">;</span> <span class="token comment">// generator-范围的变量声明</span> <span class="token keyword">var</span> val<span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"requesting:"</span><span class="token punctuation">,</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>    val <span class="token operator">=</span> v<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> val <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    <span class="token keyword">var</span> err <span class="token operator">=</span> v<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Oops:"</span><span class="token punctuation">,</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 制造并返回 iterator</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 初始状态</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>     <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// 成功地让出继续值</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token function">process</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// generator 已经完成了</span>   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string-property property">"throw"</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 在状态 *1* 中，有唯一明确的错误处理</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    state <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token function">process</span><span class="token punctuation">(</span> e <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// 否则，是一个不会被处理的错误，所以我们仅仅把它扔回去</span>   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果真的需要在不支持 ES6 的环境下实现生成器.可以考虑代码转译工具.</p><h2 id="性能">性能</h2><h3 id="性能提升">性能提升</h3><p>异步可以实现多任务并发并显著提高性能. JavaScript中其他性能提升特性有</p><p><strong>Web Worker(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYl9Xb3JrZXJzX0FQSS9Vc2luZ193ZWJfd29ya2Vycw==">MDN<i class="fa fa-external-link-alt"></i></span>)</strong></p><p>Web Worker 并不是 ES 标准语法, 只是宿主环境的功能.其可以提供一个并行的, 不共享作用域与资源的新线程. 通过与主线程<code>post</code> &amp; <code>listen</code> 消息实现通信.消息传递有如下方式</p><ul><li>转换为 String</li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYl9Xb3JrZXJzX0FQSS9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobQ==">结构化拷贝<i class="fa fa-external-link-alt"></i></span>:高级的克隆算法, 支持循环引用等特殊对象的拷贝</li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYl9Xb3JrZXJzX0FQSS9Vc2luZ193ZWJfd29ya2VycyMlRTklODAlOUElRTglQkYlODclRTglQkQlQUMlRTglQUUlQTklRTYlODklODAlRTYlOUMlODklRTYlOUQlODMlRTUlOEYlQUYlRTglQkQlQUMlRTglQUUlQTklRTUlQUYlQjklRTglQjElQTElRTYlOUQlQTUlRTQlQkMlQTAlRTklODAlOTIlRTYlOTUlQjAlRTYlOEQlQUU=">所有权转移<i class="fa fa-external-link-alt"></i></span>:直接将对象的引用与所有权发给 Worker, 此时宿主函数无法访问对象</li></ul><p>Web Worker 也支持创建共享 Worker(并不是资源共享, 而是一个 Worker可以与多个宿主通行). 在实现共享 Worker 时, 需要为每次通行建立新的port</p><p><strong>SIMD</strong></p><p>单指令多数据(SIMD)是一种数据并行方法.其原理是将多个小数据拼成一个大数据一起运算. CPU 将其底层 API 暴露给JavaScript 以实现高效计算</p><p><strong>asm.js</strong></p><p>是一个 JavaScript 子集(只保留可优化的语法), 可以将 JavaScript编译为二进制文件</p><h3 id="性能测试">性能测试</h3><p>错误的测试方法: 多次循环测执行时间</p><p><strong>问题</strong></p><ul><li>计时器本身有不可忽视的误差</li><li>不能通过简单的除以测试次数的方法计算单次执行时间(考虑到极端数据,执行事件方差等). 应该用一系列统计学方法衡量执行时间</li><li>指令通过循环测得的执行效率与真实环境的执行效率可能不同</li></ul><p><strong>解决方案</strong></p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9iZW5jaG1hcmtqcy5jb20v">Benchmark.js<i class="fa fa-external-link-alt"></i></span>:提供了一套性能检测框架, 提供详细的测试结果</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pzcGVyZi9qc3BlcmYuY29t">jsPerf.com<i class="fa fa-external-link-alt"></i></span>:该网站提供不同 JavaScript 运行时性能测试</li></ul><p><strong>优化哪些</strong></p><ul><li><p>全局视角: 专注优化执行频率极高的部分</p><blockquote><p>非关键路径的优化都是万恶之源</p></blockquote></li><li><p>微优化: 不关注微优化(如: <code>++a</code> 与 <code>a++</code>的区别, <code>x &gt;&gt;&gt; 1</code> 与 <code>x/2</code> 的区别),编译器会在执行前自动优化. 虽然不同引擎优化不尽相同, 但是</p><blockquote><p>永远不要觉得自己比引擎聪明</p></blockquote><p>这些微优化很可能随着引擎种类的不同, 引擎版本的不同而失效.</p></li><li><p>尾调用优化(TCO): ES6 的一个特殊优化.</p><p>当一个函数在执行过程中调用另一个函数时,引擎需要开辟一个而外的空间(栈帧)管理调用栈.但是如果函数调用发生在函数最后, 那么引擎就无需开辟新栈帧,直接覆盖使用老栈帧即可.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">foo</span><span class="token punctuation">(</span> y <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 尾部调用</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">bar</span><span class="token punctuation">(</span> <span class="token number">40</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不是尾部调用, 因为调用后还要执行加法</span><span class="token punctuation">&#125;</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="回顾-javascript">回顾 JavaScript</h2><ul><li><p>在浏览器环境中通过 JavaScript 输入字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'Please input a string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在注释中应该写的是程序为什么是这样运行的,而不是程序是什么(暴论)</p></li><li><p>JavaScript 中通常使用全大写书写变量并使用 <code>_</code>连接单词(指的是常量而不是不变的const)</p></li><li><p><code>?:</code> 运算符不一定用在赋值上,但是这肯定是最常见的</p></li><li><p>基于原型链的继承方案与类继承方案是两套完全不同的设计模式.原型链继承的主要思想是委托.</p></li><li><p>兼容方案</p><ul><li>polufilling: 直接实现某个新功能API</li><li>transpliling: 通过转译实现新语法</li></ul></li></ul><h2 id="es6">ES6</h2><h3 id="语法-1">语法</h3><p><strong>Let &amp; Const</strong></p><ul><li><p>新增 <code>let &amp; const</code> 声明,这俩都具有块作用域其不会发生提升. <code>let</code>声明会产生暂时性死区(TDZ)问题, 建议在块首第一行就一起声明<code>let</code> 变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span> <span class="token comment">//最好放一行, 方便看. 暂时无法赋值的就只声明以规避 TDZ</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>  d <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>for</code> 的括号中使用 <code>let</code>声明迭代变量相当于为每个循环块中声明了一次变量(裸着可以理解为条件部分与循环体之间有一层作用域)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 相当于为每个循环体声明了一个 i</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>函数</strong></p><ul><li><p>函数实参部分有自己的块作用域</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 在作用域内找不到 w 就去全局找</span><span class="token comment">// 在作用域内找到了 x 且 x 已经声明, 不存在 TDZ, 搞定</span><span class="token comment">// 在作用域内找到了 z 但是 z 还没有被初始化, 抛出异常</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token parameter">x <span class="token operator">=</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> z <span class="token operator">=</span> z <span class="token operator">+</span> <span class="token number">1</span></span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ReferenceError</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>只有向函数实参传入 <code>undefined</code>(或者不传参)才会触发默认值</p></li><li><p>默认值是惰性求值的(如果有参数传入就不计算默认值的表达式了)</p></li><li><p>如果希望默认值是一个空函数可以使用<code>Function.prototype</code> 而不是<code>function() &#123;&#125;</code></p></li></ul><p><strong>解构与赋值</strong></p><ul><li><p>对象解构:</p><ul><li><p>对象解构与对象的表述不太相同, 对象的表述是 <code>标识符-值</code>模式, 但是对象的解构是 <code>对应属性-目标标识符</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> aa <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> bb <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> aa<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> bb <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 标识符: 值</span><span class="token keyword">var</span>     <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token constant">AA</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token constant">BB</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">;</span> <span class="token comment">// 对应属性: 目标标识符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token constant">AA</span><span class="token punctuation">,</span> <span class="token constant">BB</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 10 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在对象解构中如果对应属性和目标标识符同名, 可以只写目标标识符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实际上是</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> a<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>中省去 <code>a:</code> 的结果</p></li><li><p>在对象解构中如果对象前没有关键字(如<code>let / var / const</code>)就需要为加一层<code>()</code>防止将对象解析为代码块</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> a<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">;</span> <span class="token comment">// 正常版本</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> a<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">;</span> <span class="token comment">// &#123;&#125; 会被解析为代码快</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> a<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment">// ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对象解构时允许出现计算属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">:</span> t<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 前者是计算属性, 后者只是属性访问</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; a: 1, b: 2, c: 3 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>支持重复赋值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> na<span class="token punctuation">,</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> nb<span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> nc <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>na<span class="token punctuation">,</span> nb<span class="token punctuation">,</span> nc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; b: 1, c: 2 &#125; 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>支持连环赋值, 由于赋值的结果值是原值,所以支持在链上不完全解构</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> a1<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> b1 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> a2<span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> c2 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> b3<span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> c3 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> b3<span class="token punctuation">,</span> c3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 0 2 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对象解构默认值</p><p>就是在目标标识符后面加上 <code>= x</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token literal-property property">w</span><span class="token operator">:</span> <span class="token constant">WW</span> <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token constant">WW</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 5 6 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时由于简化对象解构是简化了前半部分 <code>x:</code> 所以支持简写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">[</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">12</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">var</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是不要过度依赖, 会严重降低可读性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> z <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> y <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o1 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">z</span><span class="token operator">:</span> y <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> z <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o1 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> z <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> x <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o1 <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">.</span>y<span class="token punctuation">,</span> y<span class="token punctuation">.</span>y<span class="token punctuation">,</span> z<span class="token punctuation">.</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 300 100 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>数组解构</p><ul><li><p>支持部分赋值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>数组 / 对象解构支持嵌套</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">[</span> a<span class="token punctuation">,</span> <span class="token punctuation">[</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token punctuation">]</span><span class="token punctuation">,</span> e <span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">z</span><span class="token operator">:</span> w <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o1<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> w <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>对象</strong></p><ul><li><p>简洁属性(当属性与变量同名)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    x<span class="token punctuation">,</span>    y<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>简洁方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ..</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token operator">*</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 生成器</span>    <span class="token comment">// ..</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种简洁方法相当于是</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">x</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ..</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">y</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ..</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带来的后果就是对象中的方法变成了匿名函数, 这不利于内部对方法引用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">runSomething</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> <span class="token function">something</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token function">something</span><span class="token punctuation">(</span> y<span class="token punctuation">,</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> y <span class="token operator">-</span> x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">runSomething</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">something</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">something</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token function">something</span><span class="token punctuation">(</span> y<span class="token punctuation">,</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok, 因为有块作用域</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> y <span class="token operator">-</span> x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>简洁 <code>getter &amp; setter</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">__id</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">get</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__id<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">set</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__id <span class="token operator">=</span> v<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>supper</code></p><p>不止 <code>class</code> 支持 <code>supper</code>, 对象也可以使用<code>supper</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">'FA'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> o2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">'SON'</span><span class="token punctuation">,</span>  <span class="token comment">// na: super.a // 👎, supper 不能用于属性声明时</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>o2<span class="token punctuation">,</span> o1<span class="token punctuation">)</span><span class="token punctuation">;</span>o2<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SON FA</span><span class="token comment">// console.log(o2.super.a); // 👎, supper 不能用于属性访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>模板字符串</strong></p><ul><li><p>在模板字符串中, 除非出现转义, <code>\n, \r, \r\n</code>都会被转为 <code>\n</code></p></li><li><p>模板字符串没有自己的动态作用域</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hi, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>模板字符串的标签函数(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjJUU1JUI4JUE2JUU2JUEwJTg3JUU3JUFEJUJFJUU3JTlBJTg0JUU2JUE4JUExJUU2JTlEJUJGJUU1JUFEJTk3JUU3JUFDJUE2JUU0JUI4JUIy">MDN<i class="fa fa-external-link-alt"></i></span>)</p><p>可以在模板字符串前面加一个函数名, 这样模板字符串会作为参数传入函数,函数的返回结果作为模板字符串的结果. 参数传入的形式比较特殊.传入两个数组, 第一个数组包含为 <code>$&#123;&#125;</code> 的内容, 将<code>$&#123;&#125;</code> 作为分隔符将字符串分开, 第二个数组包含所有<code>$&#123;&#125;</code> 传入的内容</p><p>简单的实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">tag</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> v<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s <span class="token operator">+</span> <span class="token punctuation">(</span>idx <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> values<span class="token punctuation">[</span>idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> v<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> desc <span class="token operator">=</span> <span class="token string">'awesome'</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> tag<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Everything is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>desc<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Everything is awesome!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将模板字符串中插入的所有数字前加上 <code>$</code> 并保留两位小数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dollabillsyall</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span>v<span class="token punctuation">,</span>idx</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> values<span class="token punctuation">[</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 看，也使用插值性字符串字面量！</span>    s <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">$</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>values<span class="token punctuation">[</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    s <span class="token operator">+=</span> values<span class="token punctuation">[</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> s <span class="token operator">+</span> v<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> amt1 <span class="token operator">=</span> <span class="token number">11.99</span><span class="token punctuation">,</span> amt2 <span class="token operator">=</span> amt1 <span class="token operator">*</span> <span class="token number">1.08</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"Kyle"</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> dollabillsyall<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Thanks for your purchase, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">! Yourproduct cost was </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>amt1<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, which with taxcomes out to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>amt2<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Thanks for your purchase, Kyle! Your</span><span class="token comment">// product cost was $11.99, which with tax</span><span class="token comment">// comes out to $12.95.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>模板字符串函数中的 <code>raw</code></p><p>类似于 HTML 中的 <code>pre</code> 标签</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showraw</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>showraw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello\nWorld</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token comment">// [ "Hello</span><span class="token comment">// World" ]</span><span class="token comment">// [ "Hello\nWorld" ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>箭头函数</strong></p><ul><li>箭头函数: 一般用于短小的, 不需要自己作用域的匿名函数(无需绑定, 监听,递归).</li><li>箭头函数有自己的作用域, 但是父作用域与声明时的作用域绑定.箭头函数没有自己的 <code>this</code>, <code>arguments</code>,<code>super</code>, <code>new.target</code> 均从父作用域继承</li></ul><p><strong>迭代器</strong></p><ul><li><p>JavaScript 中默认可迭代的对象有</p><ul><li>Array</li><li>String</li><li>生成器</li><li>Collections &amp; TypedArrays</li></ul></li><li><p><code>for...of</code> 可以迭代可迭代对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span>a <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> o<span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1 2 3</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> o<span class="token punctuation">.</span>a<span class="token punctuation">&#125;</span> <span class="token keyword">of</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> o<span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>正则表达式</strong></p><ul><li><p>Unicode</p><p>Unicode 字符可以分为BMP(基本多语言平面)部分(0x000000-0x00ffff)与其他部分(0x00ffff-0x10ffff).在 ES6 之前, 正则只能匹配 BMP 部分的内容, 非 BMP部分的字符会被匹配为多个 BMP 字符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">'👍👍👍'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^👍.👍$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 将一个 👍 解析为两个字符所以 . 失效了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^👍.&#123;2&#125;👍$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^👍.👍$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 加上 u 后支持解析 Unicode 非 BMP 部分</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^👍.&#123;2&#125;👍$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>支持 Unicode 后还可以用这种操作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">'👍🏻'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[👍-👍🏼]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>定点标识(黏滞标识)</p><p>定点标识(<code>lastIndex</code>)可以指定从哪一位开始正则匹配(必须从这一位开始).</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span><span class="token punctuation">;</span> <span class="token comment">// 使用 y 开启定点标识</span>str <span class="token operator">=</span> <span class="token string">'abcfooabc'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认是0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false: 让第0位 a 作为开头匹配失败</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由于匹配失败变为0</span>re<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true: 让第3位 f 作为开头匹配成功</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匹配成功后 lastIndex 匹配部分最后一位的下一位 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false: 让第6位 a 作为开头匹配失败</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由于匹配失败变为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们必须手动将 <code>lastIndex</code> 设置到指定的位置,或在每次匹配成功后自动修改位置. 这玩意看起来没什么用.常规的使用场景有</p><ul><li><p>要求每若干位置出现一次匹配串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]+\.[^ ]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span><span class="token punctuation">;</span> <span class="token comment">// 使用 y 开启定点标识</span>str <span class="token operator">=</span> <span class="token string">'1.你好, 我是ABC    2.Hello, IM A  3.HI'</span><span class="token punctuation">;</span><span class="token comment">// 测试每15位出现一次 x.一段文字</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  re<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>已知匹配串的固定模式由 JavaScript 自动更新<code>lastIndex</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]+\.[^0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span><span class="token punctuation">;</span> <span class="token comment">// 使用 y 开启定点标识</span>str <span class="token operator">=</span> <span class="token string">'1.你好, 我是ABC          2.Hello, IM A     3.HI'</span><span class="token punctuation">;</span><span class="token comment">// 测试文本符合 x.一段文字 的模式并获得每次模式开头的下标</span><span class="token keyword">while</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// true 21 true 39 true 43</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>注意</strong>: 若正则使用了 <code>^</code> 而定点标识的<code>lastIndex !== 0</code> 那必定匹配失败</p></li><li><p>flags</p><ul><li><code>g</code>: 全局匹配</li><li><code>i</code>: 忽略大小写</li><li><code>m</code>: 支持多行模式(此时 <code>^</code> 与 <code>$</code>既表示行始末也表示文本始末)</li><li><code>u</code>: 支持 Unicode 非 BMP 区域字符</li><li><code>y</code>: 支持定点标识</li></ul></li></ul><p><strong>Unicode</strong></p><ul><li>Unicode 的表示<ul><li>ES6 之前: 使用 <code>"\uxxxx"</code> 但是只支持 BMP 部分字符</li><li>ES6 的 Unicode 转义: <code>"\u&#123;1-ffff&#125;"</code> 支持全部 Unicode字符</li></ul></li></ul><p><strong>Symbol</strong></p><ul><li><p>使用 <code>symbol(string)</code> 即可声明 Symbol(无需<code>new</code>)</p></li><li><p><code>Symbol.toString</code> 的结果为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'hihi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol(hihi)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>可以通过 <code>Symbol.for</code> 将一个 Symbol 注册为全局符号.<code>Symbol.for</code> 相当于一个单例构造函数 API.若构造用字符串从未被注册则会构造并返回 Symbol. 若已经注册, 则直接返回Symbol(前提是必须用 <code>Symbol.for</code> 创建)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'ruru'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'ruru'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token keyword">const</span> s3 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'hihi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> s4 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'hihi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s3 <span class="token operator">===</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Symbol.keyfor</code> 可以获取 <code>Symbol.for</code> 注册Symbol 的描述字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'ruru'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ruru</span><span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'hihi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当 Symbol 作为对象属性时, 无法通过<code>Object.key / Object.getOwnPropertyNames</code> 获取, 可以通过<code>Object.getOwnPropertySymbols</code> 获取</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'c'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'hihi'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; a1: 1, c1: 2, [Symbol(hihi)]: 3 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'a1', 'c1' ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'a1', 'c1' ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ Symbol(hihi) ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="代码组织">代码组织</h3><p><strong>迭代器</strong></p><ul><li><p>接口</p><ul><li><p><code>next</code> 函数[必须实现]: 返回一个<code>&#123;value:, done: boolean&#125;</code></p></li><li><p><code>return</code> 函数[可选实现]: 返回一个<code>&#123;value:, done: boolean&#125;</code>, 用来结束迭代器,并完成代码清理工作</p></li><li><p><code>throw</code> 函数[可选实现]: 返回一个<code>&#123;value:, done: boolean&#125;</code>,用来通过异常的方式结束迭代器并调用并完成代码清理工作</p><p>若是调用生成器的 <code>throw</code>相当于是在生成器函数执行上下文上插入一个错误, 结束迭代器.</p></li><li><p><code>[Symbol.iterator]</code> 函数[可选实现]:返回一个迭代器</p></li></ul></li><li><p>自定义迭代器: 只需要返回一个 <code>thenable</code> 的对象即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Fib <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> n2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 使迭代器成为一个可迭代对象</span>   <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> n2<span class="token punctuation">;</span>    n2 <span class="token operator">=</span> n1<span class="token punctuation">;</span>    n1 <span class="token operator">=</span> n1 <span class="token operator">+</span> current<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> current<span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token keyword">return</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>     <span class="token string">"Fibonacci sequence abandoned."</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> v<span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> Fib<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1 1 2 3 5 8 13 21 34 55</span><span class="token comment">// Fibonacci sequence abandoned.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>迭代器相关 API</p><p><code>...</code> &amp; <code>for...of</code> &amp;数组解构(不能是普通对象) 都需要消耗迭代器生成序列</p></li></ul><p><strong>生成器</strong></p><ul><li><p>yield 的优先级与 <code>=</code> 基本相同, <code>yield</code>时注意加 <code>()</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 合法</span>b <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 不合法</span>b <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 合法</span><span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 合法</span>a <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 不合法</span>a <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 合法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>yield</code> 委托返回后会自动 <code>next</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    x <span class="token operator">=</span> <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; value: 24, done: true &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>yield</code> 与 <code>next</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1. 先构造生成器, 但是不执行</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2. 传入 'A' 可惜没东西接收, 执行到 yield 暂停, 返回 1, 输出 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3. 转入 'B' 被 console.log 接收, 执行到第2个 yield 暂停, 返回 2, 输出 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3. 转入 'C' 被 console.log 接收, 执行到第3个 yield 暂停, 返回 3, 输出 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3. 转入 'D' 被 console.log 接收, 执行结束, 返回 done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在执行 <code>next</code> 时: 先传入, 再暂停, 最后返回.<strong>对于同一个 <code>yield</code>, 传入参数的 <code>next</code>与返回参数的 <code>next</code> 不同!</strong>.</p><p>同时注意: 在第三个 <code>next</code> 执行结束后虽然没有<code>yield</code> 了, 但是仍然不返回 <code>&#123;done: true&#125;</code>,这是因为 <code>for...of</code> 语句在遇到 <code>&#123;done: true&#125;</code>后会立马停止(这是书上的说法, 我觉得不对, 为了碟醋包饺子行为)</p></li><li><p>调用生成器上迭代器的 <code>throw</code> 相当于为上下文加入 Error,用 <code>try...catch</code> 可以捕获</p></li></ul><p><strong>模块</strong></p><ul><li><p>ES6 之前的模块: 通过函数与闭包实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello '</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">greeting</span><span class="token operator">:</span> greeting<span class="token punctuation">,</span> <span class="token comment">// 需要暴露的API</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> me <span class="token operator">=</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token string">'Kyle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>me<span class="token punctuation">.</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello Kyle!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有 AMD, CMD 等各种兼容方案</p></li><li><p>ES6 模块特性</p><ul><li><p>模块基于文件: 一个文件一个模块,暂时无法在一个文件中放多模块</p></li><li><p>模块是单例的: 实例只有一个, 多个模块导入同一个模块,该模块被多模块共享(如果不想共享, 可以考虑搞一个工厂函数)</p><ul><li><p><code>/index.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'./mod1.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./mod2.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> o <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod3.js'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;a: 2&#125;, 所有模块引入的都是一个实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>/mod1.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> o <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod3.js'</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>/mod2.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> o <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod3.js'</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>/mod3.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>模块是静态定义的: 这意味着在网络请求模块时可以预加载</p></li><li><p>导入声明只能在模块的顶层使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> o <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod3'</span><span class="token punctuation">;</span> <span class="token comment">// 👍</span><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> o <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod3'</span><span class="token punctuation">;</span> <span class="token comment">// 👎</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自动提升: 所有导入的对象会自动提升到顶层作用域最前面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Function: foo]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod3.js'</span><span class="token punctuation">;</span> <span class="token comment">// 不论是导入的函数还是变量, 都会提升</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>支持循环依赖</p><p>JavaScript 执行模块的过程: 打开文件 - 扫描文件的所有导出并记录导出项- 扫描文件的所有导入 - 对于每个导入, 以同样的模式扫描每个导入文件</p><p>对于循环依赖: 设模块 A 被首先加载, 经过上述扫描, 更具加载指令加载模块B 并做同样的扫描分析. 看到 B 加载 A 时发现 A 以及扫描过,直接标注这个导入合法</p><ul><li><p><code>mod1.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> foo <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod2.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM MOD 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>mod2.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> bar <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod1.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM MOD 2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>导出模块</p><p>有两种导出方式</p><ul><li><p>命名导出: 将模块与<strong>变量本身</strong>绑定,导出的是变量的引用(或指针). <strong>这意味着在导出后若修改变量的值,导出的变量也会发生变化</strong></p><ul><li><p>一个一个导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 需要导出 o 就在前面加个 export</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>批量导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> o<span class="token punctuation">,</span> a <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 将需要导出的内容写入一个括号内.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: 这个括号只是语法, 不是对象,<strong>不是导出了一个匿名对象</strong></p></li><li><p>导出并重命名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>  o <span class="token keyword">as</span> q<span class="token punctuation">,</span> <span class="token comment">// 导出的就只有 q 没有 o 了, 但是 q 就是 o 的指针</span>  a<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>默认导出: 将模块与<strong>值</strong>绑定, 导出的是值,不导出变量名. <strong>这意味着在导出后若修改变量的值,导出的值也不会变化</strong>. 默认导出只能绑定一个值</p><ul><li><p>一般写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> o<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>命名导出与默认导出同时导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在批量命名导出时指定一个值默认导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>  o<span class="token punctuation">,</span>  a <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token comment">// 相当于默认导出值 1, 命名导出 o</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不要图方便将所有需要导出的变量默认导出, 这会导致 JavaScript无法做静态分析</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 👎</span>  <span class="token literal-property property">s</span><span class="token operator">:</span> a<span class="token punctuation">,</span>  b<span class="token punctuation">,</span>  c<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>导入同时导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./mod.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于从 <code>/mod.js</code> 导入所有命名导出, 然后再导出. 此时<code>/mod.js</code> 中的命名导出不会被导入, 会直接导出</p></li></ul></li></ul></li><li><p>导入模块</p><p>两种导出方式对应两种导入方式</p><ul><li><p>导入默认导出的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> s <span class="token keyword">from</span> <span class="token string">'./mod.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认导入的是值, 需要自己命名, 同时导出的是值, 导入后默认为常量,不可修改值.</p></li><li><p>导入命名导出的变量</p><ul><li><p>按需导入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// mod.js</span><span class="token comment">//   export &#123;a,b,c&#125; // 注意, 这不是导出匿名对象! 只是语法</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod.js'</span><span class="token punctuation">;</span> <span class="token comment">// 注意, 这不是对象解构! 只是语法!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种方法最好, 但是每次需要变量都要修改导入命令</p></li><li><p>全部导入</p><p>将全部命名导出的变量导入固然方便, 但是会污染命名空间.解决方案是全部导入并重命名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> s <span class="token keyword">from</span> <span class="token string">'./mod.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>混合导入默认与命名导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// mod.js</span><span class="token comment">//   export default function foo() &#123;&#125;</span><span class="token comment">//   export function bar() &#123;&#125;</span><span class="token comment">//   export function baz() &#123;&#125;</span><span class="token comment">//   export function yoo() &#123;&#125;</span><span class="token keyword">import</span> s<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bar<span class="token punctuation">,</span> baz <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p><strong>类(ES6)</strong></p><ul><li><p><code>class</code> 语法糖</p><ul><li><p><code>constructor</code> 相当于原来的函数名</p></li><li><p>类上的方法(包括 <code>getter</code> &amp;<code>setter</code>)都支持简洁模式</p></li><li><p>类上的方法相当于 <code>类.prototype.方法</code></p></li></ul></li><li><p>与 ES5 的区别</p><ul><li><p>在 ES6 之前可以用 <code>Foo.call(obj)</code> 创建对象, 使用<code>class</code> 后只能用 <code>new</code></p></li><li><p><code>class</code> 不像 <code>function</code>一样支持提升</p></li><li><p><code>class</code> 声明的类会创建作用域词法分析符</p></li></ul></li><li><p><code>supper</code></p><ul><li><p><code>supper</code> 在不同位置表意不同</p><ul><li><p>在构造函数中: 父类的构造函数</p></li><li><p>在类的非构造函数中: 指向父类, 可以调用父类的静态方法,构造函数(只能带 <code>new</code> 用:<code>new super.constructor</code>)</p></li><li><p>在对象中: 指向对象的 <code>__protp__</code></p></li></ul></li><li><p>子类构造函数必须先调用 <code>this</code> 在访问<code>this</code>(JavaScript 的委托继承)</p></li><li><p>类上的 <code>supper</code> 是静态绑定的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ParentA</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ParentA:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ParentB</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ParentB:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ChildA</span> <span class="token keyword">extends</span> <span class="token class-name">ParentA</span> <span class="token punctuation">&#123;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ChildA:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ChildB</span> <span class="token keyword">extends</span> <span class="token class-name">ParentB</span> <span class="token punctuation">&#123;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ChildB:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 常规操作</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChildA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ParentA: a</span>         <span class="token comment">// ChildA: a</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChildB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ParentB: b</span>         <span class="token comment">// ChildB: b</span><span class="token comment">// 修改 this</span>b<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ParentB: a (supper不变, 依然指向 B, this 变了)</span>               <span class="token comment">// ChildB: a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>extends</code></p><p>相当于 ES6 之前用 <code>prototype</code> 将两个类连起来. 除此之外,<code>extends</code> 还完美支持了原生类型的扩展. 例如: 在 ES6 之前,手动创建的 <code>Array</code> 子类并不会像 <code>Array</code>一样实现自动更新 <code>.length</code> 但是 <code>extends</code>支持</p></li><li><p><code>new.target</code></p><p>在构造函数中查看此属性可以返回类名, 在其他函数中是<code>undefined</code>.可以通过此属性判断构造函数是作为被继承类构造还是直接构造</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Foo: '</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token keyword">extends</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Bar: '</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'baz: '</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Foo: Foo</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Foo: Bar   &lt;-- 虽然调用的是 Foo 的构造函数, 但是 new 的是 Bar</span><span class="token comment">// Bar: Bar</span>b<span class="token punctuation">.</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// baz: undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>static</code></p><p>用于声明类上的静态对象, 相当于在 ES5 的构造函数上直接绑定对象.子类可以通过 <code>supper</code> 直接调用</p></li></ul><h3 id="集合">集合</h3><p>主要包含 <code>TypedArray</code>, <code>Map</code>,<code>WeakMap</code>, <code>Set</code>, <code>WeakSet</code></p><p><strong><code>TypedArray</code></strong></p><ul><li><p>静态长度与类型的 <code>Array</code>,一般用于表示二进制数据.</p></li><li><p><code>TypedArray</code>存在大小端问题(低位存左边还是右边)</p></li><li><p>通过 <code>ArrayBuffer</code> 申请空间(Buffer), 通过<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvVHlwZWRBcnJheQ==">类型数组构造函数<i class="fa fa-external-link-alt"></i></span>创建指定类型与大小的视图,并绑定的 Buffer. Buffer 与视图可以是一对多的关系</p></li></ul><p><strong><code>Map</code> &amp; <code>WeakMap</code></strong></p><ul><li><p>构造函数接受 <ahref="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries"><code>Object.entire()</code>模式</a>的数组</p></li><li><p>通过 <code>get</code> / <code>set</code> / <code>delete</code>方法查询 / 增加 / 删除Map</p></li><li><p>通过 <code>has</code> 方法查询是否有键名</p></li><li><p>通过 <code>clear</code> 方法清空 Map</p></li><li><p>Map 本身是可迭代的</p><ul><li>迭代器每次迭代一个数组, 第一个是 Key, 第二个是 Value</li><li>可以通过 <code>entries</code> 获取键值对数组</li><li>可以通过 <code>keys</code> 获取键值对数组</li><li>可以通过 <code>values</code> 获取键值对数组</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Map Entries] &#123; [ 'a', 1 ], [ 'b', 2 ], [ 'c', 3 ] &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Map Iterator] &#123; 1, 2, 3 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Map Iterator] &#123; 'a', 'b', 'c' &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果将对象作为 <code>Map</code> 的 Key, 对象的引用次数将<code>+1</code>, 这意味着不将 Key 删除, 对象将无法被 GC.<code>WeakMap</code> 解决了这一问题</p><ul><li><code>WeakMap</code> 的 Key只能是对象但是对象引用次数不会被影响</li><li>当对象被 GC 时, 映射会自动删除</li><li><code>WeakMap</code> 没有 <code>size</code>, <code>clear</code>方法</li></ul></li></ul><p><strong><code>Set</code> &amp; <code>WeakSet</code></strong></p><ul><li><p>相当于 <code>set</code> 换为 <code>add</code> 且<code>Vaule === Key</code> 的 <code>Map</code> &amp;<code>WeakMap</code></p></li><li><p>不支持强制类型转换(<code>1 !== '1'</code>)</p></li><li><p>同样支持迭代器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Set Entries] &#123; [ 1, 1 ], [ 2, 2 ], [ 3, 3 ] &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Set Iterator] &#123; 1, 2, 3 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Set Iterator] &#123; 1, 2, 3 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>WeakSet</code> 的 Key 只能是对象</p></li></ul><h3 id="es6新api">ES6新API</h3><p><strong>Array</strong></p><ul><li><p><code>Array.of</code> 方法</p><p>类似 <code>Array</code> 构造函数,区别是若传入单个数字会创建一个长度为 1 的数组, 而不是那么长的数组.不仅规避的 <code>Array</code> 的陷阱, 还防止了<code>&lt;empty items&gt;</code> 的出现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &lt;5 empty items> ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 5 ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 5, 6, 7 ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 5, 6, 7 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Array.from</code> 方法</p><p>将一个 <code>Object</code> 中的正整数 Key 提取出来构造数组. 长度为<code>object.length</code>, 找不到的下标直接设为<code>undefined</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fakeArr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span>arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>fakeArr<span class="token punctuation">)</span> <span class="token comment">// [body]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相对于 <code>Array.prototype.slice</code> 不会产生空值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">'HIHI'</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">'RURU'</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">'LALA'</span><span class="token punctuation">,</span>  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'HIHI', 'RURU', undefined, 'LALA' ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'HIHI', 'RURU', &lt;1 empty item>, 'LALA' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Array.prototype.copyWithin</code> 方法</p><p>浅复制数组的一部分到同一数组中的另一个位置.</p><p>用法: <code>arr.copyWithin(target[, start[, end]])</code>,区间前取后不取, 起止位置接受负数(倒数第几个)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,1,2]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,1,5]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4,5,3,4,5]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4,2,3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>拷贝的顺序是自右向左的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自左向右拷贝的话是</span><span class="token comment">// [1,2,3,4,5] -> [1,2,2,4,5] -> [1,2,2,2,5] -> [1,2,2,2,5] -> [1,2,2,2,2]</span><span class="token comment">// 自右向左拷贝的话是</span><span class="token comment">// [1,2,3,4,5] -> [1,2,3,4,4] -> [1,2,3,3,4] -> [1,2,2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Array.prototype.find</code>方法: 使用 <code>===</code>查找元素返回 <code>boolean</code>. 如果需要自定义比较规则, 可以使用<code>Array.prototype.some</code>(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvc29tZQ==">MDN<i class="fa fa-external-link-alt"></i></span>).如果想要找到下标可以用 <code>Array.prototype.findIndex</code>(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmluZEluZGV4">MDN<i class="fa fa-external-link-alt"></i></span>)</p></li></ul><p><strong>Object</strong></p><ul><li><p><code>Object.is(..)</code> 方法</p><p>比 <code>===</code> 更严格的比较</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">,</span>  y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  z <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">;</span>x <span class="token operator">===</span> x<span class="token punctuation">;</span> <span class="token comment">// false</span>y <span class="token operator">===</span> z<span class="token punctuation">;</span> <span class="token comment">// true</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Object.assign</code> 方法</p><p>用来合并对象, 只保留原对象中自有(非继承)的, 可枚举的属性</p></li></ul><p><strong>Number</strong></p><ul><li><p><code>Number.isNaN()</code></p></li><li><p><code>Number.isFinite()</code>:不进行强制类型转换判断是不是有穷的(NaN, Infinity都不算). 如需类型转换,可以使用全局的 <code>isFinite</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token string">'10'</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">isFinite</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token function">isFinite</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Number.isInteger()</code>: 判断是不是整数, 虽然 JavaScript的数都是基于 IEEE 754 的, 但是还是可以通过判断小数位是否全 0判断是不是整数</p></li></ul><p><strong>String</strong></p><ul><li><p><code>String.prototype.repeat</code> 方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"foo"</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'foofoofoo'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="元编程">元编程</h3><p>通过操作程序实体, 在编译时计算出运行时需要的常数, 类型,代码的方法(说白了就是操作代码实体)</p><p><strong>获取函数名</strong></p><p>通过 <code>.name</code> 可以获取函数名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name:</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name:</span>window<span class="token punctuation">.</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// name:</span><span class="token keyword">class</span> <span class="token class-name">Awesome</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// name: Awesome</span>  <span class="token function">funny</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// name: funny</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Awesome</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// name: Awesome</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: foo</span>  <span class="token operator">*</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: bar</span>  <span class="token function-variable function">baz</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: baz</span>  <span class="token function-variable function">bam</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: bam</span>  <span class="token keyword">get</span> <span class="token function">qux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: get qux</span>  <span class="token keyword">set</span> <span class="token function">fuz</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: set fuz</span>  <span class="token punctuation">[</span><span class="token string">'b'</span> <span class="token operator">+</span> <span class="token string">'iz'</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: biz</span>  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'buz'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: [buz]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: bound foo</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: bound</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// name: default</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: anonymous</span><span class="token keyword">var</span> <span class="token function-variable function">GeneratorFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor<span class="token punctuation">;</span><span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneratorFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: anonymous</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Symbol</strong></p><ul><li><p><code>Symbol.iterator</code>: 返回对象的迭代器</p></li><li><p><code>Symbol.toStringTag</code>: toString的返回结果</p></li><li><p><code>Symbol.hasInstance</code>: 判断对象是不是该类型的实例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">greeting</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> greeting<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Foo'</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Foo<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">inst</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> inst<span class="token punctuation">.</span>greeting <span class="token operator">==</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'cool'</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Foo]</span><span class="token function">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object cool]</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">;</span> <span class="token comment">// true</span>b <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Symbol.species</code></p></li><li><p><code>Symbol.toPrimitive</code></p></li><li><p>正则相关:</p><ul><li><code>Symbol.match</code></li><li><code>Symbol.replace</code></li><li><code>Symbol.search</code></li><li><code>String.prototype.split</code> 对应四个正则方法, 一般不要改,引擎实现的版本性能很好</li></ul></li><li><p><code>Symbol.isConcatSpreadable</code>:对象在合并时是否可以展开</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,[4,5,6]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>Symbol.unscopables</code> 属性是否可以在 <code>with</code>中暴露</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>  b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span>  c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>o<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>unscopables<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">with</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// o.b 不暴露, 所以只能请求外部的 b</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 20 3</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="es6-1">ES6+</h3><ul><li><p><code>async &amp; await</code> 异步支持: 相当于生成器 + Promise语法糖</p></li><li><p>对象的 <code>...</code>: <strong>这不是 Spread 表达式,对象默认是不可迭代的</strong>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Found non-callable @@iterator</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个功能可以将对象解构成并并入其他对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> o2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token operator">...</span>o<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; c: 3, a: 1, b: 2 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Array.prototype.includes</code>:查找数组并返回数组中是否有元素. 支持查找 <code>NaN</code>, 无法区分<code>+0 &amp; -0</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 找不到</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, 找的到</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, 无法区分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Object.observe()</code> (没有支持但是很伟大的 API)</p><ul><li><p>相当于一个钩子函数, 支持对象在如下变化后调用函数</p><ul><li><p>add</p></li><li><p>update</p></li><li><p>delete</p></li><li><p>reconfigure(通过 <code>Object.defineProperty(..)</code>而重新配置时触发)</p></li><li><p>setPrototype(不论是使用<code>__proto__.setter</code>,还是使用<code>Object.setPrototypeOf(..)</code>都会触发)</p></li><li><p>preventExtensions(状态改变, <code>Object.seal(..)</code> 和<code>Object.freeze(..)</code> 也会触发)</p></li></ul></li><li><p>也支持自定义事件并触发(这不就相当于是个全局事件总线??)</p></li><li><p>可以直接使用该功能实现 MVVM</p></li><li><p>虽然目前没有实现, 但是实现了对 DOM 树监控的 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL011dGF0aW9uT2JzZXJ2ZXI=">MutationObserver<i class="fa fa-external-link-alt"></i></span></p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">JS黄宝书第一版</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://blog.liukairui.me/tags/JavaScript/"/>
    
  </entry>
  
</feed>
