<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuKairui&#39;s Blog</title>
  
  <subtitle>整点薯条</subtitle>
  <link href="https://blog.liukairui.me/atom.xml" rel="self"/>
  
  <link href="https://blog.liukairui.me/"/>
  <updated>2024-03-10T16:00:01.000Z</updated>
  <id>https://blog.liukairui.me/</id>
  
  <author>
    <name>Liu Kairui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React渲染与更新的基本原理与实现</title>
    <link href="https://blog.liukairui.me/article/React%E6%B8%B2%E6%9F%93%E4%B8%8E%E6%9B%B4%E6%96%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://blog.liukairui.me/article/React%E6%B8%B2%E6%9F%93%E4%B8%8E%E6%9B%B4%E6%96%B0%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/</id>
    <published>2024-03-10T16:00:01.000Z</published>
    <updated>2024-03-10T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>完整代码: <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vS2FpcnVpTGl1L2RjOGFhYWIxNzc3NDI1ZWNlM2E3NDZlMzVmM2RlNDJj">GitHubGist<i class="fa fa-external-link-alt"></i></span></p><h2 id="总览与环境搭建">总览与环境搭建</h2><p>模板: React 以 <code>[JT]sx</code> 作为模板,无需自己实现编译模块.</p><p>响应式: React 对外暴露 <code>useState</code>, 用户调用<code>setState</code> 后 React 对组件做重新构建, 对比 vDOM的变化并完成节点的替换</p><p>核心: React 的基本数据结构 Fiber 串起整个渲染流, 挂载,更新等机制都通过 Fiber 链这一数据结构完成.</p><p><strong>实验环境搭建</strong></p><ul><li><p>初始化项目</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装 Vite 用于 jsx 的编译与项目打包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pnpm</span> i <span class="token parameter variable">-D</span> vite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建入口文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span>├── components│   └── Welcome.jsx├── core│   ├── ReactDOM.js│   └── React.js├── index.html├── main.jsx├── package.json└── pnpm-lock.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="实现简易挂载-同步渲染-同步挂载">实现简易挂载 (同步渲染,同步挂载)</h2><p><strong>实现 <code>index.html</code></strong></p><p>我们需要一个组件的挂载容器, 引入 JS 的入口文件<code>main.jsx</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--...--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/main.jsx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现 <code>main.jsx</code></strong></p><p>只需要实现获取挂载节点并挂载组件的操作</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'./core/ReactDOM'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'./core/React'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Welcome <span class="token keyword">from</span> <span class="token string">'./components/Welcome'</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>Welcome<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里 <code>import React from './core/React';</code>可能会报错引入但没有使用. 我们应该保留这段代码,因为所有的<code>JSX</code> Element 在编译后都会默认变成<code>React.createElement(nodeName, props, ...children)</code>如果不引入 <code>React</code> 编译后的代码就会报错找不到<code>createElement</code></p><p><strong>暂时实现 <code>Welcome.jsx</code></strong></p><p>我们暂时没有实现函数式组件, 因此直接导出一个对象</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'../core/React'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">      Hello World </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emoji<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">🤗</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">This is a mini react</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">    Looks Cool !  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里我们测试了:</p><ul><li>嵌套 Element 的构建</li><li>props 的构建</li><li>TextNode 与 Element 混杂构建</li></ul><p><strong>实现 <code>ReactDOM.js</code></strong></p><p>需要实现 <code>ReactDOM.createRoot</code> 用于接受挂载根, 并暴露<code>render</code> 方法用来接受根节点的组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'./React.js'</span><span class="token punctuation">;</span><span class="token keyword">const</span> ReactDOM <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">createRoot</span><span class="token punctuation">(</span><span class="token parameter">container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        React<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ReactDOM<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>render</code> 的实现交给 <code>React.js</code> 完成</p><p><strong>实现 <code>React.js</code></strong></p><p>首先看一下 Component 的编译后代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"/core/React.js"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token comment">/* @__PURE__ */</span><span class="token comment">// 创建最外层的 div, props 为空, 子元素有 h1, p, Looks Cool !</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">/* @__PURE__ */</span><span class="token comment">// h1 元素, 有 id="title" 子元素 Hello World, emoji</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">"title"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"Hello World "</span><span class="token punctuation">,</span> <span class="token comment">/* @__PURE__ */</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">"emoji"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"🤗"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">/* @__PURE__ */</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"This is a mini react"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Looks Cool !"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要实现 <code>createElement(nodeName, props, ...children)</code>创建 vDOM. vDOM 的数据结构为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">nodeName</span><span class="token operator">:</span> string<span class="token operator">|</span><span class="token keyword">function</span><span class="token punctuation">,</span><span class="token comment">// 对于组件来说是 function, 对于 HTML Element 是标签名</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">attributeKey</span><span class="token operator">:</span> value    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到函数有如下重载:</p><ul><li><code>props</code>: 可以为 <code>null</code> 或者<code>&#123;k: v&#125;</code></li><li><code>children</code>: 可以为 <code>String</code>,<code>React.createElement()</code></li></ul><p>我们先将重载问题处理掉</p><ul><li>如果 <code>props</code> 是 null, 将 props 赋为 <code>&#123;&#125;</code></li><li>如果 <code>children</code> String, 我们就将他包一层 vDOM</li></ul><p>实现如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">nodeName<span class="token punctuation">,</span> props <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">...</span>children</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    nodeName<span class="token punctuation">,</span>    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token operator">...</span>props<span class="token punctuation">,</span>      <span class="token literal-property property">children</span><span class="token operator">:</span> children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>formatNode<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再实现一个格式化节点功能处理 <code>children</code> 值为<code>String</code> 的问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isTextNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> node <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 组件不是 TextNode</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> node <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 考虑了 false 等非 string</span>  <span class="token keyword">const</span> proto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 考虑了 Array 等情况</span>  <span class="token keyword">return</span> proto <span class="token operator">!==</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype <span class="token operator">&amp;&amp;</span> proto <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">formatNode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTextNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">nodeName</span><span class="token operator">:</span> <span class="token string">'TEXT_ELEMENT'</span><span class="token punctuation">,</span>      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  node<span class="token punctuation">.</span>props <span class="token operator">??=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  node<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children <span class="token operator">??=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  node<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span>    <span class="token operator">?</span> node<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children    <span class="token operator">:</span> <span class="token punctuation">[</span>node<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token punctuation">;</span>  node<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>formatNode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后实现 <code>render(component, container)</code> 函数交付给ReactDOM 挂载. 渲染节点可以分为: DOM 创建, 绑定属性, 子节点处理,挂载</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> componentFormatted <span class="token operator">=</span> <span class="token function">formatNode</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 格式化 String</span>  <span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>componentFormatted<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 Node</span>  <span class="token function">patchProps</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> componentFormatted<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绑定属性</span>  <span class="token function">fillNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> componentFormatted<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 填充子节点</span>  container<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 挂载</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建节点: 将 TextNode 与 Element 分开</span><span class="token keyword">function</span> <span class="token function">createNode</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> nodeName<span class="token punctuation">,</span> props <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeName <span class="token operator">===</span> <span class="token string">'TEXT_ELEMENT'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 绑定属性: 将非 children 的属性绑定在 Element 上</span><span class="token keyword">function</span> <span class="token function">isEvent</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> k<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on[A-Z][a-zA-Z]*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getEventName</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> k<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on([A-Z])([a-zA-Z]*)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> suffix</span><span class="token punctuation">)</span> <span class="token operator">=></span> prefix<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> suffix  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bindProps</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEvent</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token function">getEventName</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> node<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">patchProps</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">===</span> <span class="token string">'children'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">bindProps</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 填充子节点: 如果当前节点是 TextNode: 将孩子合并为 String, 否则 render 子节点</span><span class="token keyword">function</span> <span class="token function">fillNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> nodeName<span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeName <span class="token operator">===</span> <span class="token string">'TEXT_ELEMENT'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>data <span class="token operator">=</span> children<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">childNode</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">render</span><span class="token punctuation">(</span>childNode<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引入-fiber-的挂载-异步渲染-异步挂载">引入 <code>Fiber</code>的挂载 (异步渲染, 异步挂载)</h2><ul><li>Fiber是什么: Fiber 是 React 的工作单元, 对应 React 中的一个组件,Fiber 上不仅包含组件 vDOM, 还包含了渲染与更新的上下文</li><li>为什么引入 Fiber: 目前的 React 挂载是同步实现的,渲染非常重的页面会造成同步代码阻塞. 为了减少同步代码阻塞, React 16引入了基于 Fiber 的组件<strong>异步渲染与挂载</strong>并基于 Fiber实现了任务优先级调度.</li><li>如何实现基于 Fiber 的挂载: Fiber 以链表的形式构造, 在<code>render</code> 的时候构造 Root Fiber, 渲染 Root Fiber 后 React将指针切换到下一个 Fiber 渲染下一个 Fiber 中的组件</li><li>如何实现异步渲染与挂载:<ul><li>异步渲染: React 使用 <code>requestIdleCallback</code>向全局注册一个闲时回调, 只有在当前没有任务需要执行的时候浏览器才会调用React 执行 Fiber 的渲染. 一旦有代码需要执行, React 会停止渲染,保存当前的 Fiber 指针, 知道下一次全局空闲时执行</li><li>异步挂载: Fiber 在渲染后并不会直接挂载到全局, 只有当前全局 Fiber全部执行完才会<strong>统一提交挂载</strong>. 这样一来减少了 DOM重绘次数, 二来防止页面渲染了一半就展示给用户</li></ul></li></ul><p><strong>Fiber 的数据结构与 Fiber 链表</strong></p><p>vDOM 是一棵树, Fiber 链是一个链表, 使用 DFS 序将树转为链表. 一个Fiber 的数据结构为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token comment">// 记录渲染信息</span>  dom<span class="token punctuation">,</span> <span class="token comment">// 这个 vDOM 对应的 DOM</span>  component<span class="token punctuation">,</span> <span class="token comment">// Fiber 对应的 vDOM</span>  <span class="token comment">// 记录树上信息</span>  parentFiber<span class="token punctuation">,</span> <span class="token comment">// 父 Fiber</span>  firstChildFiber<span class="token punctuation">,</span> <span class="token comment">// 第一个孩子对应 Fiber</span>  siblingFiber<span class="token punctuation">,</span> <span class="token comment">// 右兄弟组件对应 Fiber</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了减少递归, 我们不会在 <code>render</code> 的时候计算整个链表,而是在处理 fiber 的时候动态计算链表</p><p><strong>Fiber Loop 的实现</strong></p><p>在全局定义一个 <code>nextFiber</code> 存储接下来要处理的 Fiber. 每次React 在空闲渲染的时候就从这个 <code>nextFiber</code> 开始渲染</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> nextFiber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 接下来要处理的 Fiber</span><span class="token comment">// 用户提交 render 请求的时设置接下来要处理的 Fiber</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这个 Fiber 比较特殊, 我们手动指定了 dom 为 container, 即 component 的父节点.</span>  <span class="token comment">// 这是因为根节点是一个组件, 组件只能 return 一个 child 作为根. 我们可以跳过组件的渲染, 直接渲染他唯一的子组件</span>  <span class="token comment">// 将本来的: container -> 根组件 -> 根组件唯一的 child</span>  <span class="token comment">// 变成: container -> 根组件唯一的 child</span>  nextFiber <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">dom</span><span class="token operator">:</span> container<span class="token punctuation">,</span>    component<span class="token punctuation">,</span>    <span class="token literal-property property">parentFiber</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token literal-property property">firstChildFiber</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token literal-property property">siblingFiber</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">performFiberLoop</span><span class="token punctuation">(</span><span class="token parameter">idleDeadline</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 如果预计空闲时间 >1 有需要处理的 Fiber</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>idleDeadline<span class="token punctuation">.</span><span class="token function">timeRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nextFiber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 处理 Fiber</span>    <span class="token function">performFiber</span><span class="token punctuation">(</span>nextFiber<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>performFiberLoop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 在空闲时候调用 performFiberLoop 完成 Fiber Loop</span><span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>performFiberLoop<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>处理单个 Fiber (异步渲染, 同步挂载)</strong></p><p>实现单个 Fiber 的处理过程与实现无 Fiber 时的 <code>render</code>类似. 在 <code>render</code> 外我们在处理当前 Fiber 时还构造了孩子的Fiber 并确定了孩子 Fiber 之间的关系</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 5. 处理当前 Fiber 的孩子</span><span class="token keyword">function</span> <span class="token function">processChildFiber</span><span class="token punctuation">(</span><span class="token parameter">fiber<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Text Node 是最小单元了, 不处理 Text Node 的孩子</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>component<span class="token punctuation">.</span>nodeName <span class="token operator">===</span> <span class="token string">'TEXT_ELEMENT'</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 没有孩子直接返回</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 遍历所有孩子, cur = 当前孩子, prev = 当前孩子的左兄弟</span>  children<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 为当前孩子创建 Fiber</span>    <span class="token keyword">const</span> curFiber <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">dom</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// DOM 还没创建</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> cur<span class="token punctuation">,</span>      <span class="token literal-property property">parentFiber</span><span class="token operator">:</span> fiber<span class="token punctuation">,</span>      <span class="token literal-property property">firstChildFiber</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token literal-property property">siblingFiber</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 如果是第一个孩子, 刷新父亲的第一个孩子信息</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prev<span class="token punctuation">)</span> fiber<span class="token punctuation">.</span>firstChildFiber <span class="token operator">=</span> curFiber<span class="token punctuation">;</span>    <span class="token comment">// 否则左兄弟的右兄弟就是当前 Fiber</span>    <span class="token keyword">else</span> prev<span class="token punctuation">.</span>siblingFiber <span class="token operator">=</span> curFiber<span class="token punctuation">;</span>    <span class="token keyword">return</span> curFiber<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 4. 获取下一个孩子</span><span class="token keyword">function</span> <span class="token function">getNextFiber</span><span class="token punctuation">(</span><span class="token parameter">fiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 4.1. DFS 优先找孩子</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>firstChildFiber<span class="token punctuation">)</span> <span class="token keyword">return</span> fiber<span class="token punctuation">.</span>firstChildFiber<span class="token punctuation">;</span>  <span class="token comment">// 4.2. 没有孩子找右兄弟</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>siblingFiber<span class="token punctuation">)</span> <span class="token keyword">return</span> fiber<span class="token punctuation">.</span>siblingFiber<span class="token punctuation">;</span>  <span class="token comment">// 4.3. 没有兄弟则回溯到父亲节点, 找父亲的右兄弟, 如果没有兄弟就继续回溯</span>  <span class="token keyword">let</span> grandFiber <span class="token operator">=</span> fiber<span class="token punctuation">.</span>parentFiber<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>grandFiber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>grandFiber<span class="token punctuation">.</span>siblingFiber<span class="token punctuation">)</span> <span class="token keyword">return</span> grandFiber<span class="token punctuation">.</span>siblingFiber<span class="token punctuation">;</span>    grandFiber <span class="token operator">=</span> grandFiber<span class="token punctuation">.</span>parentFiber<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 4.4. 都没有就说明 Fiber 链执行完毕</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 3. 对于 FC, 他本身不需要渲染, 只需要将他的孩子加入他的父容器就可以</span><span class="token keyword">function</span> <span class="token function">processFunctionComponentFiber</span><span class="token punctuation">(</span><span class="token parameter">fiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 执行函数, 获取组件</span>  <span class="token keyword">const</span> component <span class="token operator">=</span> fiber<span class="token punctuation">.</span>component<span class="token punctuation">.</span><span class="token function">nodeName</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>component<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 生成子 Fiber, 绑定链表关系</span>  <span class="token function">processChildFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> <span class="token punctuation">[</span>component<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2. 对于非 FC</span><span class="token keyword">function</span> <span class="token function">processHostFiber</span><span class="token punctuation">(</span><span class="token parameter">fiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 针对 render 的 根组件特殊 Fiber 的处理</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fiber<span class="token punctuation">.</span>dom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fiber<span class="token punctuation">.</span>dom <span class="token operator">=</span> <span class="token function">createNode</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">patchProps</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>dom<span class="token punctuation">,</span> fiber<span class="token punctuation">.</span>component<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 完成同步挂载</span>    <span class="token comment">// TODO: 未来要修改为异步挂载</span>    fiber<span class="token punctuation">.</span>parentFiber<span class="token punctuation">.</span>dom<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 生成子 Fiber, 绑定链表关系</span>  <span class="token function">processChildFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> fiber<span class="token punctuation">.</span>component<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 判断是不是 FC</span><span class="token keyword">function</span> <span class="token function">isFunctionComponent</span><span class="token punctuation">(</span><span class="token parameter">component</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> component<span class="token punctuation">.</span>nodeName <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1. 处理单个 Fiber</span><span class="token keyword">function</span> <span class="token function">performFiber</span><span class="token punctuation">(</span><span class="token parameter">fiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 针对 FC 与 非 FC 分开处理</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunctionComponent</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>component<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">processFunctionComponentFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token function">processHostFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取 DFS 序链表中下一元素, 移动指针</span>  nextFiber <span class="token operator">=</span> <span class="token function">getNextFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现异步挂载 (统一提交)</strong></p><p>我们希望在 Fiber 全部执行完成后再实现节点的挂载,也就是说在计算全部完成后重新遍历 Fiber 链完成 DOM 操作</p><p>首先删除同步挂载功能</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function processHostFiber(fiber) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   if (!fiber.dom) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     fiber.dom = createNode(fiber.component);</span><span class="token prefix unchanged"> </span><span class="token line">     patchProps(fiber.dom, fiber.component.props);</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     fiber.parentFiber.dom.append(fiber.dom);</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span><span class="token prefix unchanged"> </span><span class="token line">   processChildFiber(fiber, fiber.component.props.children);</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> function fillNode(node, &#123; nodeName, props: &#123; children &#125; &#125;) &#123;</span><span class="token prefix deleted">-</span><span class="token line">   if (nodeName === 'TEXT_ELEMENT')</span><span class="token prefix deleted">-</span><span class="token line">     return (node.data = children.reduce((pre, cur) => pre + cur, ''));</span><span class="token prefix deleted">-</span><span class="token line"></span><span class="token prefix deleted">-</span><span class="token line">   children.forEach((childNode) => render(childNode, node));</span><span class="token prefix deleted">-</span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>持久化一个全局的 rootFiber, 用来记录这次 render 的时候的头 Fiber,用于下次遍历</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> let rootFiber = null;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function render(component, container) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   nextFiber = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     dom: container,</span><span class="token prefix unchanged"> </span><span class="token line">     component,</span><span class="token prefix unchanged"> </span><span class="token line">     parentFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">     firstChildFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">     siblingFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   // 保存这次 render 的头 Fiber 方便提交的时候再次遍历链表</span><span class="token prefix inserted">+</span><span class="token line">   rootFiber = nextFiber;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在全部 Fiber 执行完成后调用提交函数执行全部 DOM</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function performFiberLoop(idleDeadline) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   while (idleDeadline.timeRemaining() > 1 &amp;&amp; nextFiber) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     performFiber(nextFiber);</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   // 已经没有要处理的 Fiber 了 (Fiber 执行完成 / 当前 Callback 没有任务) &amp;&amp;</span><span class="token prefix inserted">+</span><span class="token line">   // 当前 render 还没有结束, 不是没有任务的 callback => 提交并重置 rootFiber</span><span class="token prefix inserted">+</span><span class="token line">   if (!nextFiber &amp;&amp; rootFiber) &#123;</span><span class="token prefix inserted">+</span><span class="token line">     applySubmit(getNextFiber(rootFiber));</span><span class="token prefix inserted">+</span><span class="token line">     rootFiber = null;</span><span class="token prefix inserted">+</span><span class="token line">   &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   requestIdleCallback(performFiberLoop);</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提交的过程是对 Fiber 的第二次遍历, 我们每次提交以 Fiber</p><ul><li>如果当前 Fiber 是 FC: FC 组件本身不渲染节点, 我们直接处理他的子Fiber. 例如 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">TextFC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>text<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span><span class="token operator">&lt;</span>TestFC <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment">// 对应的函数是</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token comment">// &lt;- 这个 vDOM 并不会渲染为 DOM</span>  TextFC<span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">)</span> <span class="token comment">// &lt;- 我们需要将这个 vDOM 渲染到 container 上</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>如果当前 Fiber 不是 FC: 我们应该将他的子节点挂载到他的 DOM 上,如果他本身没有 DOM, 就挂载在他父亲身上(如果父亲也没有, 就继续回溯)</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 将当前 fiber 中的 DOM 加入最近的有 DOM 的祖先中</span><span class="token keyword">function</span> <span class="token function">appendDOM</span><span class="token punctuation">(</span><span class="token parameter">fiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> containerFiber <span class="token operator">=</span> fiber<span class="token punctuation">.</span>parentFiber<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>containerFiber<span class="token punctuation">.</span>dom<span class="token punctuation">)</span> containerFiber <span class="token operator">=</span> containerFiber<span class="token punctuation">.</span>parentFiber<span class="token punctuation">;</span>  containerFiber<span class="token punctuation">.</span>dom<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 切换到下一个 Fiber 并更新指针</span><span class="token keyword">function</span> <span class="token function">switchFiber</span><span class="token punctuation">(</span><span class="token parameter">fiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> nextFiber <span class="token operator">=</span> <span class="token function">getNextFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> nextFiber <span class="token operator">&amp;&amp;</span> <span class="token function">applySubmit</span><span class="token punctuation">(</span>nextFiber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 提交挂载</span><span class="token keyword">function</span> <span class="token function">applySubmit</span><span class="token punctuation">(</span><span class="token parameter">fiber</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 如果是 FC 直接切换处理子节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunctionComponent</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>component<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">switchFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 如果不是 FC 就将当前 Fiber 挂载起来</span>  <span class="token function">appendDOM</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 切换 Fiber</span>  <span class="token function">switchFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现更新-新增节点">实现更新 (新增节点)</h2><p>更新的基本逻辑是重新渲染一份新的 Fiber 链, 在每一个新创建的 Fiber上记录这个 Fiber 对应的老 Fiber (alternate Fiber), 对比新老 Fiber确定更新的具体操作</p><p>例如, 当页面中新增了一个节点时</p><pre class="mermaid">graph LR    subgraph Fiber        Fiber1 --> Fiber2 ----> Fiber3    end    subgraph newFiber        newFiber1 --> newFiber2 --> newFiber4 --> newFiber3    end    newFiber1 -.alternate.-> Fiber1    newFiber2 -.alternate.-> Fiber2    newFiber3 -.alternate.-> Fiber3</pre><p>我们会发现 Fiber 链表中多了一个 <code>newFiber4</code> 并且这个<code>newFiber4</code> 没有 alternate Fiber, 这就意味着<code>newFiber4</code> 是一个新增的节点, 我们将其加入即可</p><p><strong>新增变量记录老队列队头</strong></p><p>用户手动调用 <code>React.update()</code> 发起更新,在更新时我们需要分别记录新链表和老链表的头,因此我们要创建全局变量记录老链表.</p><p>我们已经实现过</p><ul><li><code>nextFiber</code>: 为实现异步任务调度,在全局注册的指向<strong>当前要处理的 Fiber</strong></li><li><code>rootFiber</code>: 为实现统一提交,在全局注册的记录的<strong>正在处理的链表的根 Fiber</strong></li></ul><p>我们定义一个新的 Fiber</p><ul><li><code>currentRootFiber</code>: 表示在这次更新之前的根节点(即将要被取代的链表的链表头)</li></ul><p>将 <code>rootFiber</code> 改名为 <code>wipRootFiber</code>.这样我们就有了三个全局变量</p><ul><li><code>nextFiber</code>: 指向当前要挂载/更新的 Fiber</li><li><code>wipRootFiber</code>: 挂载轮次中要挂载的 Fiber 链表的根 Fiber /更新轮次中新 Fiber 链表的根 Fiber</li><li><code>currentRootFiber</code>: 当前更新轮次中老的链表的根 Fiber</li></ul><p><strong>扩充 Fiber 属性</strong></p><ul><li>新增属性 <code>alternateFiber</code> 记录新 Fiber 对应的老 Fiber.如果 <code>alternateFiber</code> 存在, 说明是在更新链上的</li><li>新增属性 <code>effectTag</code> 标记统一提交时应该如何处理 Fiber(如果是 <code>placement</code> 表示要新挂载, <code>update</code> 表示DOM 已经存在, 只需要更新)</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  dom<span class="token punctuation">,</span>  component<span class="token punctuation">,</span>  parentFiber<span class="token punctuation">,</span>  firstChildFiber<span class="token punctuation">,</span>  siblingFiber<span class="token punctuation">,</span>  <span class="token comment">// 新增属性</span>  alternateFiber<span class="token punctuation">,</span> <span class="token comment">// 新 Fiber 对应的老 Fiber</span>  <span class="token literal-property property">effectTag</span><span class="token operator">:</span> <span class="token string">'update'</span> <span class="token operator">|</span> <span class="token string">'placement'</span> <span class="token comment">// 统一提交时应该如何处理</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重命名<code>wipRootFiber</code></strong></p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> let rootFiber = null;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> let wipRootFiber = null;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function render(component, container) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   nextFiber = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     dom: container,</span><span class="token prefix unchanged"> </span><span class="token line">     component,</span><span class="token prefix unchanged"> </span><span class="token line">     parentFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">     firstChildFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">     siblingFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;;</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   rootFiber = nextFiber;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   wipRootFiber = nextFiber;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function performFiberLoop(idleDeadline) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   while (idleDeadline.timeRemaining() > 1 &amp;&amp; nextFiber) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     performFiber(nextFiber);</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   if (!nextFiber &amp;&amp; rootFiber) &#123;</span><span class="token prefix deleted">-</span><span class="token line">     applySubmit(getNextFiber(rootFiber));</span><span class="token prefix deleted">-</span><span class="token line">     rootFiber = null;</span><span class="token prefix deleted">-</span><span class="token line">   &#125;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   if (!nextFiber &amp;&amp; wipRootFiber) &#123;</span><span class="token prefix inserted">+</span><span class="token line">     applySubmit(getNextFiber(wipRootFiber));</span><span class="token prefix inserted">+</span><span class="token line">     currentRootFiber = wipRootFiber; // 提交完成后刷新上一轮的 Root Fiber</span><span class="token prefix inserted">+</span><span class="token line">     wipRootFiber = null;</span><span class="token prefix inserted">+</span><span class="token line">   &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   requestIdleCallback(performFiberLoop);</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>构造新的 Fiber</strong></p><p>调用函数, 构造一个新的 Fiber 链的头, 将这个头设为下一个需要执行的Fiber</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 存储上一轮 Fiber 头</span><span class="token keyword">let</span> currentRootFiber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 如果还没有挂载, 就直接返回</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentRootFiber<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 新建 Fiber 头, 新 Fiber 头继承上一轮的 Fiber 头属性, 同时加入 alternateFiber 表示这个新 Fiber 对应的老 Fiber</span>  wipRootFiber <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>currentRootFiber<span class="token punctuation">,</span>    <span class="token literal-property property">alternateFiber</span><span class="token operator">:</span> currentRootFiber<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 刷新下一个需要执行的 Fiber 等待 FiberLoop 的调用</span>  nextFiber <span class="token operator">=</span> wipRootFiber<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于仅有新节点增加的情况, 统一提交的时候页面会新增 Fiber链表中新加入的节点</p><h2 id="实现更新-同类型节点更新">实现更新 (同类型节点更新)</h2><p>当一个新 Fiber 存在老 Fiber 的时候我们需要对其 DOM 更新. 我们无法修改DOM 的 Node Name, 所以我们只对同类型节点做更新.</p><p>更新的时候考虑三个属性:</p><ul><li><code>nodeName</code>: 保证相同, 无需更新</li><li><code>props</code>: 需要更新</li><li><code>children</code>: 无需在本轮次更新, 因为下一个 Fiber 就是当前Fiber 的孩子, 孩子们会在之后的 Fiber 处理中完成更新. 这与 Vue的处理逻辑不同, Vue 在更新元素的时候要递归处理子元素, 但是因为 React是链式处理, 已经将 DFS 转换为一条链. 因此我们只需要聚焦节点,关心当前节点的变换</li></ul><p>因此在更新时, 我们只需要考虑 <code>props</code> 的更新 (或者说 React对 Fiber 的更新是 shadow 的)</p><p><strong>实现同类节点判定</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isSameType</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> alternateComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> component<span class="token punctuation">.</span>nodeName <span class="token operator">===</span> alternateComponent<span class="token operator">?.</span>nodeName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>实现节点更新任务标注</strong></p><p>创建新根组件 Fiber 后, 我们还需要修改子组件 Fiber 的实现 (将<code>processChildFiber</code> 改名为 <code>reconcileChildren</code>扩充功能).</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> function processChildFiber(fiber, children) &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> function reconcileChildren(fiber, children) &#123;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   if (fiber.component.nodeName === 'TEXT_ELEMENT') return;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   // alternateFiber 是父 fiber 的第一个孩子, 将来将作为 cur 对应的 Fiber 同步步进</span><span class="token prefix inserted">+</span><span class="token line">   let alternateFiber = fiber?.alternateFiber?.firstChildFiber;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   children.reduce((prev, cur) => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     const curFiber = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       dom: null,</span><span class="token prefix unchanged"> </span><span class="token line">       component: cur,</span><span class="token prefix unchanged"> </span><span class="token line">       parentFiber: fiber,</span><span class="token prefix unchanged"> </span><span class="token line">       firstChildFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">       siblingFiber: null,</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       effectTag: null,</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     &#125;;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     // 老 Fiber 存在, 说明是更新, 这里我们处理同类型更新</span><span class="token prefix inserted">+</span><span class="token line">     if (alternateFiber &amp;&amp; isSameType(cur, alternateFiber.component)) &#123;</span><span class="token prefix inserted">+</span><span class="token line">       curFiber.dom = alternateFiber.dom;</span><span class="token prefix inserted">+</span><span class="token line">       curFiber.effectTag = 'update';</span><span class="token prefix inserted">+</span><span class="token line">       curFiber.alternateFiber = alternateFiber;</span><span class="token prefix inserted">+</span><span class="token line">     // 老 Fiber 不存在, 要么是不同类型, 要么是在挂载阶段, 要么是更新出了全新节点</span><span class="token prefix inserted">+</span><span class="token line">     &#125; else &#123;</span><span class="token prefix inserted">+</span><span class="token line">       curFiber.effectTag = 'placement';</span><span class="token prefix inserted">+</span><span class="token line">     &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     if (!prev) fiber.firstChildFiber = curFiber;</span><span class="token prefix unchanged"> </span><span class="token line">     else prev.siblingFiber = curFiber;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     // 如果 alternate Fiber 存在, 那么切换 alternate Fiber 使其与 cur 的切换一致</span><span class="token prefix inserted">+</span><span class="token line">     if (alternateFiber) alternateFiber = alternateFiber?.siblingFiber;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     return curFiber;</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;, null);</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改函数调用</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function processFunctionComponentFiber(fiber) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   const component = fiber.component.nodeName(fiber.component.props);</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   processChildFiber(fiber, [component]);</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   reconcileChildren(fiber, [component]);</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function processHostFiber(fiber) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   if (!fiber.dom) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     fiber.dom = createNode(fiber.component);</span><span class="token prefix unchanged"> </span><span class="token line">     patchProps(fiber.dom, fiber.component.props);</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   processChildFiber(fiber, fiber.component.props.children);</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   reconcileChildren(fiber, fiber.component.props.children);</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现属性更新</strong></p><p>在统一提交时我们只需要更新节点上的 props, 所以重写 patchProps</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">removeProps</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEvent</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> node<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token function">getEventName</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> node<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">patchProps</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> props<span class="token punctuation">,</span> oldProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 以默认参数提交老的 props</span>  <span class="token keyword">const</span> oldKey <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>oldProps<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> newKey <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 对于全新的 key 直接绑定</span>  newKey    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> k <span class="token operator">!==</span> <span class="token string">'children'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>oldKey<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">bindProps</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> k<span class="token punctuation">,</span> props<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 部队不存在的 key 直接删除</span>  oldKey    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> k <span class="token operator">!==</span> <span class="token string">'children'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>newKey<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">removeProps</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> k<span class="token punctuation">,</span> oldProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 对于有变更的 key 移除再新增</span>  newKey    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> k <span class="token operator">!==</span> <span class="token string">'children'</span> <span class="token operator">&amp;&amp;</span> oldKey<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> oldProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!==</span> props<span class="token punctuation">[</span>k<span class="token punctuation">]</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">removeProps</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> k<span class="token punctuation">,</span> oldProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">bindProps</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> k<span class="token punctuation">,</span> props<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在统一提交时候根据 <code>effectTag</code> 判断是要挂载还是只更新</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function applySubmit(fiber) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   if (isFunctionComponent(fiber.component)) return switchFiber(fiber);</span><span class="token prefix unchanged"> </span><span class="token line">   appendDOM(fiber);</span><span class="token prefix unchanged"> </span><span class="token line">   switchFiber(fiber);</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function applySubmit(fiber) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   if (isFunctionComponent(fiber.component)) return switchFiber(fiber);</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   appendDOM(fiber);</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   // 如果是挂载阶段或者是更新全新节点, DOM</span><span class="token prefix inserted">+</span><span class="token line">   if (fiber.effectTag === 'placement') &#123;</span><span class="token prefix inserted">+</span><span class="token line">     appendDOM(fiber);</span><span class="token prefix inserted">+</span><span class="token line">   // 否则只更新节点上的属性</span><span class="token prefix inserted">+</span><span class="token line">   &#125; else if (fiber.effectTag === 'update') &#123;</span><span class="token prefix inserted">+</span><span class="token line">     patchProps(</span><span class="token prefix inserted">+</span><span class="token line">       fiber.dom,</span><span class="token prefix inserted">+</span><span class="token line">       fiber.component.props,</span><span class="token prefix inserted">+</span><span class="token line">       fiber?.alternateFiber?.component?.props</span><span class="token prefix inserted">+</span><span class="token line">     );</span><span class="token prefix inserted">+</span><span class="token line">   &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   switchFiber(fiber);</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现更新-节点移除">实现更新 (节点移除)</h2><p>如果老 Fiber 链中没有被任何 newFiber 的 <code>alternateFiber</code>指向, 那么这个元素就应该被删除了 (例如图中的 <code>Fiber2</code>)</p><p>当一个元素应该被删除时, 我们会将元素压入 <code>deletions</code> 数组,在统一提交时统一删除. (创建 <code>deletions</code>数组而不是在统一提交是查找是因为在新链表上已经找不到待删除的 oldFiber了)</p><pre class="mermaid">graph LR    subgraph Fiber        Fiber1 --> Fiber2 --> Fiber3    end    subgraph newFiber        newFiber1 ----> newFiber3    end    newFiber1 -.alternate.-> Fiber1    newFiber3 -.alternate.-> Fiber3</pre><p><strong>创建 <code>deletion</code> 并在统一提交时删除</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> deletions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 等待删除元素</span><span class="token comment">// 删除元素</span><span class="token keyword">function</span> <span class="token function">applyDeletions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>deletions<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> fiber <span class="token operator">=</span> deletions<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isFunctionComponent</span><span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>component<span class="token punctuation">)</span><span class="token punctuation">)</span> fiber<span class="token punctuation">.</span>dom<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> fiber<span class="token punctuation">.</span>childrenFiber<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> deletions<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在统一提交时删除</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">function performFiberLoop(idleDeadline) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> while (idleDeadline.timeRemaining() > 1 &amp;&amp; nextFiber) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   performFiber(nextFiber);</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> if (!nextFiber &amp;&amp; wipRootFiber) &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   applyDeletions();</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   applySubmit(getNextFiber(wipRootFiber));</span><span class="token prefix unchanged"> </span><span class="token line">   currentRootFiber = wipRootFiber;</span><span class="token prefix unchanged"> </span><span class="token line">   wipRootFiber = null;</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> requestIdleCallback(performFiberLoop);</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>建立老 Fiber 到新 Fiber 的映射</strong></p><p>扩充 Fiber 属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  dom<span class="token punctuation">,</span>  component<span class="token punctuation">,</span>  parentFiber<span class="token punctuation">,</span>  firstChildFiber<span class="token punctuation">,</span>  siblingFiber<span class="token punctuation">,</span>  alternateFiber<span class="token punctuation">,</span>  <span class="token literal-property property">effectTag</span><span class="token operator">:</span> <span class="token string">'update'</span> <span class="token operator">|</span> <span class="token string">'placement'</span>  <span class="token comment">// 新的 Fiber 属性</span>  <span class="token literal-property property">childrenFiber</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 记录当前 Fiber 的孩子 Fiber (方便检索当前 Fiber 上那些子 Fiber 没有对应元素)</span>  newFiber<span class="token punctuation">,</span> <span class="token comment">// 指向当前 Fiber 对应的新 Fiber (如果存在)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成这两个属性的构建</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function update() &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   if (!currentRootFiber) return;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   wipRootFiber = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     ...currentRootFiber,</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     childrenFiber: [],</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     alternateFiber: currentRootFiber,</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   currentRootFiber.newFiber = wipRootFiber;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   nextFiber = wipRootFiber;</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>reconcileChildren</code> 的时候实现删除元素收集</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function reconcileChildren(fiber, children) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   if (fiber.component.nodeName === 'TEXT_ELEMENT') return;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   let alternateFiber = fiber?.alternateFiber?.firstChildFiber;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   children.reduce((prev, cur) => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     const curFiber = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       dom: null,</span><span class="token prefix unchanged"> </span><span class="token line">       component: cur,</span><span class="token prefix unchanged"> </span><span class="token line">       parentFiber: fiber,</span><span class="token prefix unchanged"> </span><span class="token line">       firstChildFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">       siblingFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">       effectTag: null,</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       childrenFiber: [],</span><span class="token prefix inserted">+</span><span class="token line">       newFiber: null,</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     &#125;;</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     if (alternateFiber &amp;&amp; isSameType(cur, alternateFiber.component)) &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     if (alternateFiber) &#123;</span><span class="token prefix inserted">+</span><span class="token line">       // 相同类型依然执行更新</span><span class="token prefix inserted">+</span><span class="token line">       if (isSameType(cur, alternateFiber.component)) &#123;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">         curFiber.dom = alternateFiber.dom;</span><span class="token prefix unchanged"> </span><span class="token line">         curFiber.effectTag = 'update';</span><span class="token prefix unchanged"> </span><span class="token line">         curFiber.alternateFiber = alternateFiber;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">         // 新增对 newFiber 的映射</span><span class="token prefix inserted">+</span><span class="token line">         alternateFiber.newFiber = curFiber;</span><span class="token prefix inserted">+</span><span class="token line">       &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     &#125; else &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       curFiber.effectTag = 'placement';</span><span class="token prefix unchanged"> </span><span class="token line">     &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     if (!prev) fiber.firstChildFiber = curFiber;</span><span class="token prefix unchanged"> </span><span class="token line">     else prev.siblingFiber = curFiber;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     if (alternateFiber) alternateFiber = alternateFiber?.siblingFiber;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     // 收集子元素</span><span class="token prefix inserted">+</span><span class="token line">     fiber.childrenFiber.push(curFiber);</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     return curFiber;</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;, null);</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   // 如果处于更新模式, 遍历子元素, 找到老 Fiber 的子 Fiber 中没有对应新 Fibber 的加入删除列表</span><span class="token prefix inserted">+</span><span class="token line">   if (fiber.alternateFiber) &#123;</span><span class="token prefix inserted">+</span><span class="token line">     fiber.alternateFiber.childrenFiber.forEach(</span><span class="token prefix inserted">+</span><span class="token line">       (d) => !d.newFiber &amp;&amp; deletions.push(d)</span><span class="token prefix inserted">+</span><span class="token line">     );</span><span class="token prefix inserted">+</span><span class="token line">   &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现更新-不同类型节点">实现更新 (不同类型节点)</h2><p>不同节点之间无法更新, 实际上是做了删除然后新增的操作</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function reconcileChildren(fiber, children) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   if (fiber.component.nodeName === 'TEXT_ELEMENT') return;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   let alternateFiber = fiber?.alternateFiber?.firstChildFiber;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   children.reduce((prev, cur) => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     const curFiber = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       dom: null,</span><span class="token prefix unchanged"> </span><span class="token line">       component: cur,</span><span class="token prefix unchanged"> </span><span class="token line">       parentFiber: fiber,</span><span class="token prefix unchanged"> </span><span class="token line">       firstChildFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">       siblingFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">       effectTag: null,</span><span class="token prefix unchanged"> </span><span class="token line">       childrenFiber: [],</span><span class="token prefix unchanged"> </span><span class="token line">       newFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">     &#125;;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     if (alternateFiber) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       if (isSameType(cur, alternateFiber.component)) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">         curFiber.dom = alternateFiber.dom;</span><span class="token prefix unchanged"> </span><span class="token line">         curFiber.effectTag = 'update';</span><span class="token prefix unchanged"> </span><span class="token line">         curFiber.alternateFiber = alternateFiber;</span><span class="token prefix unchanged"> </span><span class="token line">         alternateFiber.newFiber = curFiber;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       // 不同类型的更新元素: 删除, 然后将当前 Fiber 标记为新增</span><span class="token prefix inserted">+</span><span class="token line">       &#125; else &#123;</span><span class="token prefix inserted">+</span><span class="token line">         deletions.push(alternateFiber);</span><span class="token prefix inserted">+</span><span class="token line">         curFiber.effectTag = 'placement';</span><span class="token prefix inserted">+</span><span class="token line">       &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     &#125; else &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       curFiber.effectTag = 'placement';</span><span class="token prefix unchanged"> </span><span class="token line">     &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     if (!prev) fiber.firstChildFiber = curFiber;</span><span class="token prefix unchanged"> </span><span class="token line">     else prev.siblingFiber = curFiber;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     if (alternateFiber) alternateFiber = alternateFiber?.siblingFiber;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     fiber.childrenFiber.push(curFiber);</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     return curFiber;</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;, null);</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   if (fiber.alternateFiber) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     fiber.alternateFiber.childrenFiber.forEach(</span><span class="token prefix unchanged"> </span><span class="token line">       (d) => !d.newFiber &amp;&amp; deletions.push(d)</span><span class="token prefix unchanged"> </span><span class="token line">     );</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将更新粒度缩小为组件">将更新粒度缩小为组件</h2><p>之前 update 的使用方法为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function">demoFC</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    num <span class="token operator">+=</span> <span class="token number">1</span>    React<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们执行 update 会将整个页面刷新一遍. 我们希望实现调用<code>update</code> 时仅对当前组件做刷新</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function">demoFC</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> update <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现思路:</p><ul><li>向函数暴露一个 <code>update</code> 工厂函数,通过闭包存储当前正在调用的组件对应的 Fiber. 从而实现在调用<code>update</code> 时找到调用者</li><li>在调用 update 的时候将 <code>currentRootFiber</code> 设置为调用<code>update()</code> 的组件, 将 <code>wipRootFiber</code>也同步为这个组件</li><li>由于 <code>currentRootFiber</code> 不再是根组件, 当 currentRootFiber的后代 Fiber 全部遍历结束后, 我们应该立即停止, 而不是遍历<code>currentRootFiber</code> 的右兄弟</li></ul><p><strong>实现 <code>update()</code></strong></p><p>我们知道组件函数 (包括 <code>update = React.update()</code>)会在构造的时候被调用, 构造的时候 <code>nextFiber</code> 恰好是当前组件的Fiber, 因此直接用闭包保存 <code>nextFiber</code></p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function update() &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   const currentFiber = nextFiber;</span><span class="token prefix inserted">+</span><span class="token line">   return () => &#123;</span><span class="token prefix inserted">+</span><span class="token line">     // 新 Fiber 链表的头不再是上次处理的头 Fiber</span><span class="token prefix inserted">+</span><span class="token line">     currentRootFiber = currentFiber;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     wipRootFiber = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       ...currentRootFiber,</span><span class="token prefix unchanged"> </span><span class="token line">       alternateFiber: currentRootFiber,</span><span class="token prefix unchanged"> </span><span class="token line">       childrenFiber: [],</span><span class="token prefix unchanged"> </span><span class="token line">     &#125;;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     nextFiber = wipRootFiber;</span><span class="token prefix inserted">+</span><span class="token line">   &#125;;</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   currentRootFiber.newFiber = wipRootFiber;</span><span class="token prefix deleted">-</span><span class="token line">   nextFiber = wipRootFiber;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>仅允许 Fiber 在 <code>currentRootFiber</code>内部切换</strong></p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function getNextFiber(fiber) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   if (fiber.firstChildFiber) return fiber.firstChildFiber;</span><span class="token prefix unchanged"> </span><span class="token line">   if (fiber.siblingFiber) return fiber.siblingFiber;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   let grandFiber = fiber.parentFiber;</span><span class="token prefix unchanged"> </span><span class="token line">   while (grandFiber) &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     if (grandFiber === wipRootFiber) return null;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     if (grandFiber.siblingFiber) return grandFiber.siblingFiber;</span><span class="token prefix unchanged"> </span><span class="token line">     grandFiber = grandFiber.parentFiber;</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return null;</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现简易-usestate-hook-同步更新">实现简易 <code>useState</code>Hook (同步更新)</h2><p>在实现 <code>useState</code> 之前我们需要通过如下方式手动更新</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function">demoFC</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> update <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们希望实现为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function">demoFC</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> setNum<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setNum</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这意味着我们需要实现一个 <code>React.useState</code></p><ul><li>在构造阶段返回初始值与更新回调</li><li>在更新阶段返回持久化的值与回调</li><li>调用回调后更新状态, 调用 <code>update()</code>,在下一次构造时返回更新后值</li><li><code>React.useState</code> 应该可以在组件中被多次调用,并且在下次构造的时候根据调用顺序返回值</li></ul><p>简而言之:</p><ul><li>持久化状态是跟随组件存储的</li><li>组件实例之间状态不能共享的 (同时如果页面中有两个相同的组件,两个组件各自维护状态)</li><li>状态在更新时可以被传递</li><li>一个组件可以有多个状态, 根据调用函数顺序返回不同的值</li></ul><p>这么看组件对应的 Fiber 是一个很好的存储仓库.</p><ul><li>持久化状态是跟随组件存储的 =&gt; 状态对应一个组件对应一个Fiber</li><li>组件实例之间状态不能共享的 =&gt; 同一组件不同实例是不同 Fiber</li><li>状态在更新时可以被传递 =&gt; 在创建新 Fiber 时赋值</li><li>一个组件可以有多个状态, 根据调用函数顺序返回不同的值 =&gt; 在 Fiber中维护数组, 与构造时 <code>React.useState</code> 计数,每次调用返回数组中下一个元素</li></ul><p><strong>扩展 Fiber 数据结构</strong></p><p>新 Fiber 结构如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  dom<span class="token punctuation">,</span>  component<span class="token punctuation">,</span>  parentFiber<span class="token punctuation">,</span>  firstChildFiber<span class="token punctuation">,</span>  siblingFiber<span class="token punctuation">,</span>  childrenFiber<span class="token punctuation">,</span>  newFiber<span class="token punctuation">,</span>  <span class="token comment">// 新增属性</span>  <span class="token literal-property property">useStateCount</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 每次构造新 Fiber 的时候清空</span>  <span class="token literal-property property">useStateStorage</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 在构造新 Fiber 的时候从老 Fiber 继承</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用修改</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function render(component, container) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   wipRootFiber = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     dom: container,</span><span class="token prefix unchanged"> </span><span class="token line">     component,</span><span class="token prefix unchanged"> </span><span class="token line">     parentFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">     firstChildFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">     siblingFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">     childrenFiber: [],</span><span class="token prefix unchanged"> </span><span class="token line">     newFiber: null,</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     useStateCount: 0,</span><span class="token prefix inserted">+</span><span class="token line">     useStateStorage: [],</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">   nextFiber = wipRootFiber;</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">function update() &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> const currentFiber = nextFiber;</span><span class="token prefix unchanged"> </span><span class="token line"> return () => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   currentRootFiber = currentFiber;</span><span class="token prefix unchanged"> </span><span class="token line">   wipRootFiber = &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     // 解构时继承数据</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     ...currentRootFiber,</span><span class="token prefix unchanged"> </span><span class="token line">     alternateFiber: currentRootFiber,</span><span class="token prefix unchanged"> </span><span class="token line">     childrenFiber: [],</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     useStateCount: 0, // 重置计数</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">   nextFiber = wipRootFiber;</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;;</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function reconcileChildren(fiber, children) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   if (fiber.component.nodeName === 'TEXT_ELEMENT') return;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   let alternateFiber = fiber?.alternateFiber?.firstChildFiber;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   children.reduce((prev, cur) => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     const curFiber = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       dom: null,</span><span class="token prefix unchanged"> </span><span class="token line">       component: cur,</span><span class="token prefix unchanged"> </span><span class="token line">       parentFiber: fiber,</span><span class="token prefix unchanged"> </span><span class="token line">       firstChildFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">       siblingFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">       effectTag: null,</span><span class="token prefix unchanged"> </span><span class="token line">       childrenFiber: [],</span><span class="token prefix unchanged"> </span><span class="token line">       newFiber: null,</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       useStateCount: 0,</span><span class="token prefix inserted">+</span><span class="token line">       useStateStorage: [],</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     &#125;;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     if (alternateFiber) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       if (isSameType(cur, alternateFiber.component)) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">         curFiber.dom = alternateFiber.dom;</span><span class="token prefix unchanged"> </span><span class="token line">         curFiber.effectTag = 'update';</span><span class="token prefix unchanged"> </span><span class="token line">         curFiber.alternateFiber = alternateFiber;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">         // 状态传递</span><span class="token prefix inserted">+</span><span class="token line">         curFiber.useStateStorage = alternateFiber.useStateStorage;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">         alternateFiber.newFiber = curFiber;</span><span class="token prefix unchanged"> </span><span class="token line">       &#125; else &#123;</span><span class="token prefix unchanged"> </span><span class="token line">         deletions.push(alternateFiber);</span><span class="token prefix unchanged"> </span><span class="token line">         curFiber.effectTag = 'placement';</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">     &#125; else &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       curFiber.effectTag = 'placement';</span><span class="token prefix unchanged"> </span><span class="token line">     &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     // ...</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;, null);</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // ...</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现 <code>React.useState</code></strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取针对当前组件的 update</span>  <span class="token keyword">const</span> updateComponent <span class="token operator">=</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 缓存当前 Fiber</span>  <span class="token keyword">const</span> currentFiber <span class="token operator">=</span> nextFiber<span class="token punctuation">;</span>  <span class="token comment">// 记录是第几次调用 useState</span>  <span class="token keyword">const</span> index <span class="token operator">=</span> currentFiber<span class="token punctuation">.</span>useStateCount<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 如果没有这个 index 说明是初次调用, 直接将传入的初始值记录下来</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>currentFiber<span class="token punctuation">.</span>useStateStorage<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> index<span class="token punctuation">)</span>    currentFiber<span class="token punctuation">.</span>useStateStorage<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回持久化的值, 更新函数</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>    currentFiber<span class="token punctuation">.</span>useStateStorage<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 对 setState 的参数做类型合并</span>      <span class="token keyword">const</span> newValue <span class="token operator">=</span> f <span class="token keyword">instanceof</span> <span class="token class-name">Function</span> <span class="token operator">?</span> <span class="token function">f</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> f<span class="token punctuation">;</span>      <span class="token comment">// 前后结果相同跳过</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token comment">// 更新持久化的值</span>      currentFiber<span class="token punctuation">.</span>useStateStorage<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> newValue<span class="token punctuation">;</span>      <span class="token comment">// 重新渲染</span>      <span class="token function">updateComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现-usestate-hook-异步更新">实现 <code>useState</code> Hook(异步更新)</h2><p>如果代码中连续调用多次 <code>useState</code> 我们就会进行多次计算,此时可以做如下优化:</p><p>将 state 作为对象 <code>&#123;value, queue: []&#125;</code> 存储, 所有的<code>setState</code> 会被压入 queue, 请求更新, 再更新时再计算新数据</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function useState(value) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   const updateComponent = update();</span><span class="token prefix unchanged"> </span><span class="token line">   const currentFiber = nextFiber;</span><span class="token prefix unchanged"> </span><span class="token line">   const index = currentFiber.useStateCount++;</span><span class="token prefix unchanged"> </span><span class="token line">   if (currentFiber.useStateStorage.length &lt;= index) &#123;</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     currentFiber.useStateStorage.push(value);</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     currentFiber.useStateStorage.push(&#123;</span><span class="token prefix inserted">+</span><span class="token line">       value,</span><span class="token prefix inserted">+</span><span class="token line">       queue: [],</span><span class="token prefix inserted">+</span><span class="token line">     &#125;);</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   const hook = currentFiber.useStateStorage[index]; // 获取需要这次的 state</span><span class="token prefix inserted">+</span><span class="token line">   hook.queue.forEach((f) => (hook.value = f(hook.value))); // 执行压入的变更</span><span class="token prefix inserted">+</span><span class="token line">   hook.queue = []; // 清空待变更队列</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   const hook = currentFiber.useStateStorage[index];</span><span class="token prefix unchanged"> </span><span class="token line">   hook.queue.forEach((f) => (hook.value = f(hook.value)));</span><span class="token prefix unchanged"> </span><span class="token line">   hook.queue = [];</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">   return [</span><span class="token prefix deleted">-</span><span class="token line">     currentFiber.useStateStorage[index],</span><span class="token prefix deleted">-</span><span class="token line">     (f) => &#123;</span><span class="token prefix deleted">-</span><span class="token line">       const newValue = f instanceof Function ? f(value) : f;</span><span class="token prefix deleted">-</span><span class="token line">       if (newValue === value) return;</span><span class="token prefix deleted">-</span><span class="token line">       currentFiber.useStateStorage[index] = newValue;</span><span class="token prefix deleted">-</span><span class="token line">       updateComponent();</span><span class="token prefix deleted">-</span><span class="token line">     &#125;,</span><span class="token prefix deleted">-</span><span class="token line">   ];</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   const setState = (f) => &#123;</span><span class="token prefix inserted">+</span><span class="token line">     const action = f instanceof Function ? f : () => f;</span><span class="token prefix inserted">+</span><span class="token line">     // 如果值没有变化就跳过</span><span class="token prefix inserted">+</span><span class="token line">     const eagerValue = action(hook.value);</span><span class="token prefix inserted">+</span><span class="token line">     if (hook.value === eagerValue) return;</span><span class="token prefix inserted">+</span><span class="token line">     hook.queue.push(action);</span><span class="token prefix inserted">+</span><span class="token line">     updateComponent();</span><span class="token prefix inserted">+</span><span class="token line">   &#125;;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   return [currentFiber.useStateStorage[index].value, setState];</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现简易-useeffect-hook-同步回调">实现简易<code>useEffect</code> Hook (同步回调)</h2><p>需要实现 <code>useEffect(cb, deps)</code></p><ul><li>在初始化阶段无论 <code>deps</code> 是什么都调用 <code>cb</code></li><li>在更新阶段只有 <code>deps</code> 变化才调用 <code>cb</code></li></ul><p>效仿 useState 的思路实现:</p><p><strong>扩充 Fiber</strong></p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function update() &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   const currentFiber = nextFiber;</span><span class="token prefix unchanged"> </span><span class="token line">   return () => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     currentRootFiber = currentFiber;</span><span class="token prefix unchanged"> </span><span class="token line">     wipRootFiber = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       ...currentRootFiber,</span><span class="token prefix unchanged"> </span><span class="token line">       alternateFiber: currentRootFiber,</span><span class="token prefix unchanged"> </span><span class="token line">       childrenFiber: [],</span><span class="token prefix unchanged"> </span><span class="token line">       useStateCount: 0,</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       useEffectCount: 0,</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">     nextFiber = wipRootFiber;</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;;</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function render(component, container) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   wipRootFiber = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     dom: container,</span><span class="token prefix unchanged"> </span><span class="token line">     component,</span><span class="token prefix unchanged"> </span><span class="token line">     parentFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">     firstChildFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">     siblingFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">     childrenFiber: [],</span><span class="token prefix unchanged"> </span><span class="token line">     newFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">     useStateCount: 0,</span><span class="token prefix unchanged"> </span><span class="token line">     useStateStorage: [],</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     useEffectCount: 0,</span><span class="token prefix inserted">+</span><span class="token line">     useEffectStorage: [],</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">   nextFiber = wipRootFiber;</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function reconcileChildren(fiber, children) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   if (fiber.component.nodeName === 'TEXT_ELEMENT') return;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   let alternateFiber = fiber?.alternateFiber?.firstChildFiber;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   children.reduce((prev, cur) => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     const curFiber = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       dom: null,</span><span class="token prefix unchanged"> </span><span class="token line">       component: cur,</span><span class="token prefix unchanged"> </span><span class="token line">       parentFiber: fiber,</span><span class="token prefix unchanged"> </span><span class="token line">       firstChildFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">       siblingFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">       effectTag: null,</span><span class="token prefix unchanged"> </span><span class="token line">       childrenFiber: [],</span><span class="token prefix unchanged"> </span><span class="token line">       newFiber: null,</span><span class="token prefix unchanged"> </span><span class="token line">       useStateCount: 0,</span><span class="token prefix unchanged"> </span><span class="token line">       useStateStorage: [],</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       useEffectCount: 0,</span><span class="token prefix inserted">+</span><span class="token line">       useEffectStorage: [],</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     &#125;;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     if (alternateFiber) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       if (isSameType(cur, alternateFiber.component)) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">         curFiber.dom = alternateFiber.dom;</span><span class="token prefix unchanged"> </span><span class="token line">         curFiber.effectTag = 'update';</span><span class="token prefix unchanged"> </span><span class="token line">         curFiber.alternateFiber = alternateFiber;</span><span class="token prefix unchanged"> </span><span class="token line">         curFiber.useStateStorage = alternateFiber.useStateStorage;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">         curFiber.useEffectStorage = alternateFiber.useEffectStorage;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">         alternateFiber.newFiber = curFiber;</span><span class="token prefix unchanged"> </span><span class="token line">       &#125; else &#123;</span><span class="token prefix unchanged"> </span><span class="token line">         deletions.push(alternateFiber);</span><span class="token prefix unchanged"> </span><span class="token line">         curFiber.effectTag = 'placement';</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">     &#125; else &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       curFiber.effectTag = 'placement';</span><span class="token prefix unchanged"> </span><span class="token line">     &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     // ...</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;, null);</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   // ...</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现 <code>useEffect()</code></strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token parameter">cb<span class="token punctuation">,</span> dep</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> currentFiber <span class="token operator">=</span> nextFiber<span class="token punctuation">;</span>  <span class="token keyword">const</span> effectIndex <span class="token operator">=</span> currentFiber<span class="token punctuation">.</span>useEffectCount<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 初始化阶段, 无论是否传入 dep 列表, 都执行</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>currentFiber<span class="token punctuation">.</span>useEffectStorage<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> effectIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    currentFiber<span class="token punctuation">.</span>useEffectStorage<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> cb<span class="token punctuation">,</span> dep <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 非初始化阶段, 只有 deps 变化才执行, 同时更新 deps</span>  <span class="token keyword">const</span> hook <span class="token operator">=</span> currentFiber<span class="token punctuation">.</span>useEffectStorage<span class="token punctuation">[</span>effectIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    dep<span class="token punctuation">.</span>length <span class="token operator">!==</span> hook<span class="token punctuation">.</span>dep<span class="token punctuation">.</span>length <span class="token operator">||</span>    dep<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">!==</span> hook<span class="token punctuation">.</span>dep<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    hook<span class="token punctuation">.</span>dep <span class="token operator">=</span> dep<span class="token punctuation">;</span>    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现-useeffect-hook-异步回调">实现 <code>useEffect</code> Hook(异步回调)</h2><p>实际的 <code>useEffect</code> 还具有如下特性</p><ul><li>回调并不是在 <code>React.useEffect()</code> 时执行,而是在统一提交后执行 (否则拿不到 DOM)</li><li>我们需要收集 useEffect 中回调的返回函数 (<code>cleanup</code> 函数),并在下次执行回调的时候先执行上次返回的 <code>cleanup</code> 函数</li></ul><p>实现第一点只需要维护一个全局队列记录需要执行的回调. 实现第二点需要在hook 中维护一个 <code>cleanup</code> 参数</p><p><strong>维护全局回调 Hook 数组</strong></p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> // 需要执行的 Hook 数组</span><span class="token prefix inserted">+</span><span class="token line"> let useEffectQueue = [];</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> function useEffect(cb, dep = []) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   const currentFiber = nextFiber;</span><span class="token prefix unchanged"> </span><span class="token line">   const effectIndex = currentFiber.useEffectCount++;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   if (currentFiber.useEffectStorage.length &lt;= effectIndex) &#123;</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     currentFiber.useEffectStorage.push(&#123; cb, dep &#125;);</span><span class="token prefix deleted">-</span><span class="token line">     cb();</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     // 首次执行无需执行 cleanup, 设为空</span><span class="token prefix inserted">+</span><span class="token line">     const hook = &#123; cb, dep, cleanUp: undefined &#125;;</span><span class="token prefix inserted">+</span><span class="token line">     currentFiber.useEffectStorage.push(hook);</span><span class="token prefix inserted">+</span><span class="token line">     useEffectQueue.push(hook);</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">     return;</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   const hook = currentFiber.useEffectStorage[effectIndex];</span><span class="token prefix unchanged"> </span><span class="token line">   if (</span><span class="token prefix unchanged"> </span><span class="token line">     dep.length !== hook.dep.length ||</span><span class="token prefix unchanged"> </span><span class="token line">     dep.some((item, index) => item !== hook.dep[index])</span><span class="token prefix unchanged"> </span><span class="token line">   ) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">     hook.dep = dep;</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">     cb();</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     // 更新时执行</span><span class="token prefix inserted">+</span><span class="token line">     useEffectQueue.push(hook);</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在统一提交时调用回调</strong></p><p>执行全部的 Hooks</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">applyEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  useEffectQueue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">hook</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hook<span class="token punctuation">.</span>cleanUp<span class="token punctuation">)</span> hook<span class="token punctuation">.</span><span class="token function">cleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hook<span class="token punctuation">.</span>cleanUp <span class="token operator">=</span> hook<span class="token punctuation">.</span><span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  useEffectQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">function performFiberLoop(idleDeadline) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> // ...</span><span class="token prefix unchanged"> </span><span class="token line"> if (!nextFiber &amp;&amp; wipRootFiber) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">   applyDeletions();</span><span class="token prefix unchanged"> </span><span class="token line">   applySubmit(getNextFiber(wipRootFiber));</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   applyEffect();</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   currentRootFiber = wipRootFiber;</span><span class="token prefix unchanged"> </span><span class="token line">   wipRootFiber = null;</span><span class="token prefix unchanged"> </span><span class="token line"> &#125;</span><span class="token prefix unchanged"> </span><span class="token line"> // ...</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">理解并尝试实现 React 的 Fiber 与 DOM 构建过程, 通过 Fiber 对比实现更新调度与简单 Hook (useState, useEffect)</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="笔记" scheme="https://blog.liukairui.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端框架" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    <category term="React" scheme="https://blog.liukairui.me/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>2023-08前端新活汇总</title>
    <link href="https://blog.liukairui.me/article/ff_monthly/2023-08%E5%89%8D%E7%AB%AF%E6%96%B0%E6%B4%BB%E6%B1%87%E6%80%BB/"/>
    <id>https://blog.liukairui.me/article/ff_monthly/2023-08%E5%89%8D%E7%AB%AF%E6%96%B0%E6%B4%BB%E6%B1%87%E6%80%BB/</id>
    <published>2023-07-31T16:00:01.000Z</published>
    <updated>2023-07-31T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>信源:</p><ul><li>https://web.dev/</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlZWtoeXQvd2Vla2x5">前端食堂<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvYmxvZy8=">MDNBlog<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9pby5nb29nbGUvMjAyMy9wcm9ncmFtL2ludGwvemgvP3E9d2Vi">GoogleI/O<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9lbi9ibG9nLw==">GoogleDevelopers<i class="fa fa-external-link-alt"></i></span></li></ul></blockquote><h2 id="部分可用的内容">部分可用的内容</h2><h3 id="虚拟键盘-api">虚拟键盘 API</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlZWtoeXQvd2Vla2x5">前端食堂<i class="fa fa-external-link-alt"></i></span></p><p>FireFox NA, Chrome 94, Edge 94, Safari NA</p></blockquote><p>介绍了移动端中弹出键盘造成页面上移部分元素无法显示的问题. 通过</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body:has(input:focus)</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>    <span class="token function">var</span><span class="token punctuation">(</span>--cta-height<span class="token punctuation">)</span> + <span class="token function">env</span><span class="token punctuation">(</span>keyboard-inset-height<span class="token punctuation">,</span> 0<span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>的方法实现当用户聚焦 <code>input</code>时将元素移动位置从而规避遮盖的问题.</p><p>这里使用 <code>env()</code> 实现环境检测, 即: 若存在<code>keyboard-inset-height</code> 则使用, 否则使用 <code>0px</code></p><h3 id="浏览器八月特性">浏览器八月特性</h3><ul><li><p>Audio Output Devices API</p><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0F1ZGlvX091dHB1dF9EZXZpY2VzX0FQSQ==">MDN<i class="fa fa-external-link-alt"></i></span>FireFox 116, Chrome NA, Edge NA, Safari NA</p></blockquote><p>允许用户在浏览器中选择音频播放设备 (扬声器, 蓝牙耳机...),就像在操作系统中选择播放设备一样</p><p><img src="./2023-08前端新活汇总/1.png" /></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 选择播放设备的代码必须由用户操作触发, 因此放入一个 Listener</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#myButton"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 显示媒体选择框</span>  <span class="token keyword">const</span> audioDevice <span class="token operator">=</span> <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function">selectAudioOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 播放音频</span>  <span class="token keyword">const</span> audio <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"audio"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  audio<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"https://example.com/audio.mp3"</span><span class="token punctuation">;</span>  audio<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 指定播放设备</span>  audio<span class="token punctuation">.</span><span class="token function">setSinkId</span><span class="token punctuation">(</span>audioDevice<span class="token punctuation">.</span>deviceId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>路径运动动画支持更多函数</p><blockquote><p>来源: <span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L2Jsb2cvd2ViLXBsYXRmb3JtLTA4LTIwMjM/aGw9ZW4=">web.dev<i class="fa fa-external-link-alt"></i></span>FireFox 116, Chrome NA, Edge NA, Safari NA</p></blockquote><p><code>circle()</code>, <code>ellipse()</code>, <code>rect()</code>,<code>inset()</code>, <code>xywh()</code>, <code>polygon()</code>,<code>ray()</code>, `url()</p></li><li><p>支持 HTML Element 的画中画</p><blockquote><p>来源: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kb2NzL3dlYi1wbGF0Zm9ybS9kb2N1bWVudC1waWN0dXJlLWluLXBpY3R1cmUv">web.dev<i class="fa fa-external-link-alt"></i></span>FireFox NA, Chrome 116, Edge 116, Safari NA</p></blockquote><p>画中画曾经只支持装载 Video, 但是现在可以装载 HTML 元素</p></li><li><p>CSS 嵌套语法完成基线支持</p><blockquote><p>来源: <span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L2Jsb2cvd2ViLXBsYXRmb3JtLTA4LTIwMjM/aGw9ZW4=">web.dev<i class="fa fa-external-link-alt"></i></span>FireFox 117, Chrome 112, Edge 112, Safari 16.5</p></blockquote></li></ul><h2 id="工具">工具</h2><h3 id="node-模块分类汇总网站">Node 模块分类汇总网站</h3><p>允许分类检索不同领域的 Node 包: https://nodejstoolbox.com/</p><h3 id="dnt"><code>dnt</code></h3><p>将 deno 代码转换为 node:https://deno.com/blog/publish-esm-cjs-module-dnt</p><h3 id="size-limit">Size Limit</h3><p>一款可用于 GitHub Action, Circle CI... 的大小限制工具, 当用户提交的JS 打包后大小超限即出发错误: https://github.com/ai/size-limit</p><h2 id="实验性内容">实验性内容</h2><h3 id="object.groupby-map.groupby"><code>Object.groupBy</code>,<code>Map.groupBy()</code></h3><blockquote><p>来源: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2dyb3VwQnk=">MDN<i class="fa fa-external-link-alt"></i></span>,<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWFwL2dyb3VwQnk=">MDN<i class="fa fa-external-link-alt"></i></span>Chrome 117, Edge 117, FireFox 119, Safari NA</p></blockquote><p>可以实现一个类似分类汇总的功能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> inventory <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"asparagus"</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"vegetables"</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"bananas"</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"fruit"</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"goat"</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"meat"</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"cherries"</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"fruit"</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"fish"</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"meat"</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span>inventory<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> type <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Result is:&#123;  vegetables: [    &#123; name: 'asparagus', type: 'vegetables', quantity: 5 &#125;,  ],  fruit: [    &#123; name: "bananas", type: "fruit", quantity: 0 &#125;,    &#123; name: "cherries", type: "fruit", quantity: 5 &#125;  ],  meat: [    &#123; name: "goat", type: "meat", quantity: 23 &#125;,    &#123; name: "fish", type: "meat", quantity: 22 &#125;  ]&#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> inventory <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"asparagus"</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"vegetables"</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"bananas"</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"fruit"</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"goat"</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"meat"</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"cherries"</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"fruit"</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"fish"</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"meat"</span><span class="token punctuation">,</span> <span class="token literal-property property">quantity</span><span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> restock <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">restock</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> sufficient <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">restock</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> Map<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span>inventory<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> quantity <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>  quantity <span class="token operator">&lt;</span> <span class="token number">6</span> <span class="token operator">?</span> restock <span class="token operator">:</span> sufficient<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>restock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [&#123; name: "bananas", type: "fruit", quantity: 5 &#125;]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动画将支持更多属性">动画将支持更多属性</h3><blockquote><p>来源: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9ibG9nL2VudHJ5LWV4aXQtYW5pbWF0aW9ucy8=">web.dev<i class="fa fa-external-link-alt"></i></span></p></blockquote><h2 id="文章">文章</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly92ZXJjZWwuY29tL2Jsb2cvdW5kZXJzdGFuZGluZy1yZWFjdC1zZXJ2ZXItY29tcG9uZW50cw==">UnderstandingReact Server Components<i class="fa fa-external-link-alt"></i></span>: RSC 光速入门</li></ul>]]></content>
    
    
    <summary type="html">都是些二手信息罢了~</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="新活" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E6%96%B0%E6%B4%BB/"/>
    
    
    <category term="前端新活" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF%E6%96%B0%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>2023-07前端新活汇总</title>
    <link href="https://blog.liukairui.me/article/ff_monthly/2023-07%E5%89%8D%E7%AB%AF%E6%96%B0%E6%B4%BB%E6%B1%87%E6%80%BB/"/>
    <id>https://blog.liukairui.me/article/ff_monthly/2023-07%E5%89%8D%E7%AB%AF%E6%96%B0%E6%B4%BB%E6%B1%87%E6%80%BB/</id>
    <published>2023-06-30T16:00:01.000Z</published>
    <updated>2023-06-30T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>信源:</p><ul><li>https://web.dev/</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlZWtoeXQvd2Vla2x5">前端食堂<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvYmxvZy8=">MDNBlog<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9pby5nb29nbGUvMjAyMy9wcm9ncmFtL2ludGwvemgvP3E9d2Vi">GoogleI/O<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9lbi9ibG9nLw==">GoogleDevelopers<i class="fa fa-external-link-alt"></i></span></li></ul></blockquote><h2 id="部分可用的内容">部分可用的内容</h2><h3 id="滚动驱动动画">滚动驱动动画</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvYmxvZy9zY3JvbGwtcHJvZ3Jlc3MtYW5pbWF0aW9ucy1pbi1jc3Mv">MDN<i class="fa fa-external-link-alt"></i></span></p><p>Chrome: 115, Firefox: NA, Safari: NA</p></blockquote><p>允许用户将动画进度与某个可滚动元素的滚动进度关联起来, 使用纯 CSS实现基于滚动的动画. 可以参考 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9lbi9ibG9nL3Njcm9sbC1hbmltYXRpb24tcGVyZm9ybWFuY2UtY2FzZS1zdHVkeS8=">GoogleDevelopers 的文章<i class="fa fa-external-link-alt"></i></span></p><h3 id="es-module-外部引用完成基线支持">ES module外部引用完成基线支持</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L2ltcG9ydC1tYXBzLWluLWFsbC1tb2Rlcm4tYnJvd3NlcnMv">WebDev<i class="fa fa-external-link-alt"></i></span></p><p>Chrome: 89, Firefox: 108, Safari: 16.4</p></blockquote><p>允许开发者通过 <code>&lt;script type="importmap"&gt;</code> 定义一个ES 模块的外部引用地址, 例如:</p><p>开发者希望使用 <code>browser-fs-access</code> 这个 ES 模块,但是又不希望让这个模块通过自己的服务器 / CDN 分发, 可以这么写</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>importmap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">// 在这里定义 ES 模块名的引用地址</span>  <span class="token punctuation">&#123;</span>    <span class="token string-property property">"imports"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">"browser-fs-access"</span><span class="token operator">:</span> <span class="token string">"https://unpkg.com/browser-fs-access@0.33.0/dist/index.modern.js"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token comment">// 直接用就可以了</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span>fileOpen<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'browser-fs-access'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fileOpen</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">mimeTypes</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'text/plain'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> file<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="prettier-3.0-发布">Prettier 3.0 发布</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9wcmV0dGllci5pby9ibG9nLzIwMjMvMDcvMDUvMy4wLjAuaHRtbA==">prettier<i class="fa fa-external-link-alt"></i></span></p></blockquote><ul><li>迁移所有源码到 ESM, 支持 ESM 配置文件</li><li><code>trailingComma</code> 默认值从 <code>es5</code> 改为<code>all</code>. 意味着以后对象尾部会默认带一个 <code>,</code></li><li>从解析器中删除 <code>follow</code> 语法支持</li><li><code>--parser=css</code> 将只可以解析 CSS 语法</li></ul><h3 id="vite-4-发布">Vite 4 发布</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlZWtoeXQvd2Vla2x5L2lzc3Vlcy85Nw==">前端食堂<i class="fa fa-external-link-alt"></i></span></p></blockquote><ul><li>实验性的加入 Lightning CSS 解析器</li><li>更新 ESBuild 0.18</li><li>支持 Solid 和 Qwik 模板</li></ul><h3 id="remotion-4-发布">Remotion 4 发布</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlZWtoeXQvd2Vla2x5L2lzc3Vlcy85Nw==">前端食堂<i class="fa fa-external-link-alt"></i></span></p></blockquote><ul><li>Remotion Studio: 一个新的图形界面, 可以让你在预览视频的同时,编辑组件的属性, 配置和跟踪渲染, 管理文件和音乐等</li><li>可视化编辑属性: 可以用 Zod schema 定义组件的属性, 然后在 RemotionStudio 中用图形界面直接编辑它们</li><li>Rust-powered architecture: Remotion 4.0 内置了一个 Rust二进制文件和一个定制的 FFmpeg 6.0 版本, 这样可以提高性能, 减少安装时间,支持更多的格式和功能</li><li>数据驱动的视频:你可以利用新的数据获取和动态计算视频时长和尺寸的系统,来创建更灵活和个性化的视频</li></ul><h3 id="firefox-115-chrome-115-发布">FireFox 115 &amp; Chrome 115发布</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9lbi9ibG9nL25ldy1pbi1jaHJvbWUtMTE1Lw==">ChromeDevelopers<i class="fa fa-external-link-alt"></i></span></p></blockquote><ul><li>滚动驱动动画: 支持 ScrollTimeline 与 ViewTimeline</li><li>Topic API: 允许浏览器与三方共享用户兴趣信息并保护用户隐私.(在此之前这一功能由三方 Cookie 实现)</li><li>默认启用 fenced frame (参考 <ahref="https://blog.liukairui.me/article/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E6%80%BB%E7%BB%93/">前端安全策略总结</a>)</li><li>主线程上 <code>WebAssembly.Module</code> 的最大大小增加到 8MB</li><li><code>display</code> 属性支持 multi-keyword 语法 (参考 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2Rpc3BsYXkvbXVsdGkta2V5d29yZF9zeW50YXhfb2ZfZGlzcGxheQ==">MDN<i class="fa fa-external-link-alt"></i></span>)</li><li>Compute Pressure 特性实验: Compute Pressure是一种可以让网页应用根据系统的压力状态来调整自己的工作负载的 API</li><li>支持在 Mac 上调试 Chrome IOS 上的网站</li><li>更多数组方法</li><li>动画 <code>animation-composition</code> 属性</li></ul><h3 id="介绍-devtool-的-record-面板">介绍 DevTool 的 Record 面板</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9lbi9ibG9nL2RldnRvb2xzLXRpcHMtNC8=">ChromeDevelopers<i class="fa fa-external-link-alt"></i></span></p></blockquote><ul><li>支持操作记录</li><li>支持操作记录修改</li><li>支持导出操作记录</li><li>支持重放操作并测量性能</li></ul><p><em>如果这里导出的内容可以与 E2E 测试框架兼容就很棒了</em></p><h3 id="动画-animation-composition-属性">动画<code>animation-composition</code> 属性</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9hcnRpY2xlcy9jc3MtYW5pbWF0aW9uLWNvbXBvc2l0aW9uLw==">ChromeDevelopers<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>当动画样式出现冲突时的处理行为</p><ul><li><code>replace</code>: 效果值取代基础值</li><li><code>add</code>: 效果值添加到基础值中</li><li><code>accumulate</code>: 效果值与基础值相结合</li></ul><iframe height="300" style="width: 100%;" scrolling="no" title="CSS `animation-composition`" src="https://codepen.io/web-dot-dev/embed/VwGRBVX?default-tab=css%2Cresult" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">See the Pen <a href="https://codepen.io/web-dot-dev/pen/VwGRBVX"> CSS<code>animation-composition</code></a> by web.dev(<a href="https://codepen.io/web-dot-dev"><span class="citation"data-cites="web-dot-dev">@web-dot-dev</span></a>) on<span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlv">CodePen<i class="fa fa-external-link-alt"></i></span>.</iframe><h3 id="更多数组方法">更多数组方法</h3><blockquote><p>来自: <span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L3dlYi1wbGF0Zm9ybS0wNy0yMDIzLw==">web.dev<i class="fa fa-external-link-alt"></i></span></p></blockquote><ul><li><p><code>Array.toReversed()</code> / <code>Array.toSorted()</code> /<code>Array.toSpliced()</code> / <code>TypedArrays.toReversed()</code> /<code>TypedArrays.toSorted()</code>: <code>[Typed]Array.toXXXed</code>是 <code>[Typed]Array.XXX</code> 的浅拷贝版本,即该函数不会修改原数组的内容, 会将结果作为返回值返回, 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>arr_r <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arr <span class="token comment">// [3, 2, 1]</span>arr_r <span class="token comment">// [3, 2, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>arr_r <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">toReversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arr <span class="token comment">// [1, 2, 3]</span>arr_r <span class="token comment">// [3, 2, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Array.with()</code> / <code>TypedArrays.with()</code>:<code>[Typed]Array.with()</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 6, 4, 5]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="backforward-cache">Back/forward cache</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L2JmY2FjaGUvP3V0bV9zb3VyY2U9ZGV2dG9vbHM=">web.dev<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>将整个页面缓存到内存,当浏览器导航回到该页面时直接展示页面而无需重新加载</p><p>在缓存时浏览器所有任务队列中的任务 (定时器与 Promise)都会被挂起等待从 cache 中恢复. 该方案存在部分异步风险,</p><p>Back/forward Cache 是浏览器自身的优化机制, 无需显式声明开启, 但是部分JS API 会导致 Back/forward Cache 无法开启, 在开发中可以打开<code>DevTools - Application - Back/forward cache</code>检查是否可以开启 Back/forward cache</p><h2 id="工具">工具</h2><h3 id="crux-仪表盘">CrUX 仪表盘</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kb2NzL2NydXgvZGFzaGJvYXJkLw==">ChromeDevelopers<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>CrUX 仪表盘通过收集 Chrome用户在访问网站时性能指标汇总了每个网站的平均性能报告,只需要输入网址即可查询网站性能信息. 使用方法参考 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kb2NzL2NydXgvZGFzaGJvYXJkLw==">ChromeDevelopers<i class="fa fa-external-link-alt"></i></span></p><h3 id="treo.sh">treo.sh</h3><p>一款付费的网站性能分析工具,支持测试基于不同设备的性能并提供性能监测服务</p><h3 id="gitstars">gitstars</h3><p>一款 github stars 管理工具, 参考 <span class="exturl" data-url="aHR0cHM6Ly9naXRzdGFycy5jZm91ci50b3Av">gitstars<i class="fa fa-external-link-alt"></i></span></p><h3 id="低代码的页面自动化工具">低代码的页面自动化工具</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYUFwcC9hdXRvbWE=">atoma<i class="fa fa-external-link-alt"></i></span>允许用户通过拖拽的方式实现页面自动化操作</p><h3 id="iframe-大小调整工具">iframe 大小调整工具</h3><p><span class="exturl" data-url="aHR0cDovL2RhdmlkamJyYWRzaGF3LmdpdGh1Yi5pby9pZnJhbWUtcmVzaXplci8=">iframe-resizer<i class="fa fa-external-link-alt"></i></span>允许用户将 frame 调整为任何或者适合的大小</p><h3 id="检测-npm-包在浏览器中的真实大小">检测 npm包在浏览器中的真实大小</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlZWtoeXQvd2Vla2x5L2lzc3Vlcy85OA==">前端食堂<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>借助 WebContainers, <span class="exturl" data-url="aHR0cHM6Ly9wa2ctc2l6ZS5kZXYv">pkg-size<i class="fa fa-external-link-alt"></i></span>可以在浏览器检测出 npm 包的真实大小</p><h3 id="typechat">TypeChat</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlQ2hhdA==">TyoeChat<i class="fa fa-external-link-alt"></i></span>是一个可以阅读你的 ts 代码并给出 / 验证结构性例子的 GPT. 微软出品</p><h2 id="实验性内容">实验性内容</h2><h3 id="未来可能支持的-js-语法">未来可能支持的 JS 语法</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlZWtoeXQvd2Vla2x5L2lzc3Vlcy85Nw==">前端食堂<i class="fa fa-external-link-alt"></i></span></p></blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtdHlwZS1hbm5vdGF0aW9ucw==">支持类型系统<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtaW50bC1tZXNzYWdlZm9ybWF0">Intl.MessageFormat<i class="fa fa-external-link-alt"></i></span>:类似带参数的 i18n 格式化</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2phdmFzY3JpcHQtY29tcGlsZXItaGludHMvY29tcGlsZXItbm90YXRpb25zLXNwZWM=">编译器符号规范<i class="fa fa-external-link-alt"></i></span>:目前希望支持 <code>#__PURE__</code>,<code>#__NO_SIDE_EFFECTS__</code></li></ul><h2 id="文章">文章</h2><ul><li><span class="exturl" data-url="aHR0cHM6Ly90dXJyaWF0ZS5jb20vYXJ0aWNsZXMvbW9kZXJuLWphdmFzY3JpcHQtZXZlcnl0aGluZy15b3UtbWlzc2VkLW92ZXItMTAteWVhcnM=">现在JavaScript 的十年<i class="fa fa-external-link-alt"></i></span>: ES6+ 特性总结</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21lbmdqaWFuLWdpdGh1Yi9jb3BpbG90LWFuYWx5c2lz">逆向分析GitHub Copilot<i class="fa fa-external-link-alt"></i></span>: 可以学到一些 JS 逆向的知识</li><li><span class="exturl" data-url="aHR0cHM6Ly9jc3N3aXphcmRyeS5jb20vMjAyMy8wNy9pbi1kZWZlbmNlLW9mLWRvbWNvbnRlbnRsb2FkZWQv">捍卫DOMContentLoaded<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L3RhLXR5cGVzLw==">测试自动化的类型<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvYmxvZy9zZWN1cmluZy1jZG4tdXNpbmctc3JpLXdoeS1ob3cv">使用SRI 提高 CDN 资源安全性<i class="fa fa-external-link-alt"></i></span>: 加个 Hash 罢了</li><li><ahref="https://vladimirzdrazil.com/posts/object-keys-keyof-t/">为什么<code>Object.key</code> 的类型不是 <code>(kayof T)[]</code></a>: 因为 JS中的对象是结构化类型</li><li><span class="exturl" data-url="aHR0cHM6Ly92ZXJjZWwuY29tL2Jsb2cvaG93LXJlYWN0LTE4LWltcHJvdmVzLWFwcGxpY2F0aW9uLXBlcmZvcm1hbmNl">React18 如何提高应用程序性能<i class="fa fa-external-link-alt"></i></span>: WIP</li><li><span class="exturl" data-url="aHR0cHM6Ly92OC5kZXYvYmxvZy9zcGVlZGluZy11cC12OC1oZWFwLXNuYXBzaG90cw==">加速 V8堆快照的调试记录<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9jc3N3aXphcmRyeS5jb20vMjAyMy8wNy9jb3JlLXdlYi12aXRhbHMtZm9yLXNlYXJjaC1lbmdpbmUtb3B0aW1pc2F0aW9uLw==">谷歌搜索的核心生命体征网络<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L3RhLXN0cmF0ZWdpZXMv">金字塔还是螃蟹？找到适合的测试策略<i class="fa fa-external-link-alt"></i></span>:聊了如何分配单元测试, 集成测试, E2E</li><li><span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L2FkYXB0aW5nLXR5cG9ncmFwaHktdG8tdXNlci1wcmVmZXJlbmNlcy13aXRoLWNzcy8=">CSS使用CSS使排版适应用户偏好<i class="fa fa-external-link-alt"></i></span>: 如何在不同阅读偏好模式下微调字体,包括</li><li>暗模式的灰度略有降低</li><li>高对比度得到更大胆的字体</li><li>低对比度得到更薄的字体</li></ul>]]></content>
    
    
    <summary type="html">都是些二手信息罢了~</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="新活" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E6%96%B0%E6%B4%BB/"/>
    
    
    <category term="前端新活" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF%E6%96%B0%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>🏗️掘金前端初阶训练营笔记</title>
    <link href="https://blog.liukairui.me/article/%E6%8E%98%E9%87%91%E5%89%8D%E7%AB%AF%E5%88%9D%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.liukairui.me/article/%E6%8E%98%E9%87%91%E5%89%8D%E7%AB%AF%E5%88%9D%E9%98%B6%E8%AE%AD%E7%BB%83%E8%90%A5%E7%AC%94%E8%AE%B0/</id>
    <published>2023-06-21T16:00:01.000Z</published>
    <updated>2023-06-21T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="html">HTML</h2><ul><li><p>组成分类:</p><ul><li><p>元素 (Element):</p></li><li><p>文本: Text &amp; <code>&lt;![CDATA[text]]&gt;</code></p></li><li><p>注释</p></li><li><p>DTD (Document Type Defination):<code>&lt;!Doctype html&gt;</code></p></li><li><p>处理信息: <code>&lt;?a 1?&gt;</code></p></li></ul></li><li><p>值得看的 HTML 功能</p><ul><li><p><code>&lt;head&gt;</code> 中的 <code>&lt;base&gt;</code> 定义 URL前缀, 目前不建议使用了</p></li><li><p>ARIA: 用于设计语义化系统</p></li><li><p>AMP: 谷歌的一套标准, 用于提升页面曝光度</p></li><li><p>Audio Context: 新的音频 API 接口, 使用增幅,频率等相对科学的定义音频</p></li><li><p>二进制处理: 包括 Blob, File, ArrayBuffer, Buffer 等对象</p></li></ul></li></ul><h2 id="css">CSS</h2><h3 id="层叠优先级判断">层叠优先级判断</h3><p>先判断样式表来源, 无法判定则判定选择器优先级,最后判断样式表在源码中的位置</p><ul><li><p>通过样式表来源判断, 优先顺序从低到高是</p><ol type="1"><li>用户代理样式: 浏览器 (也就是用户代理) 定义的默认样式</li><li>用户样式表: 由使用浏览器的用户定义的,例如视障用户可能需要高对比度样式</li><li>作者样式表: 开发者写的</li><li>作者样式表中的 <code>!important</code></li><li>用户样式表中的 <code>!important</code></li><li>用户代理样式表中的 <code>!important</code></li></ol><p>加 <code>!important</code> 之后优先级会反过来, 例如: 如果浏览器给<code>&lt;a&gt;</code> 设置了 <code>color: red !important</code>,那么谁都无法修改 <code>color</code></p></li><li><p>通过选择器优先级判断, 优先级从高到低是</p><p>内联 &gt; Id选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt;类型选择器 = 伪元素选择器</p><p>优先级一共有四个等级, 可以用四元组标出选择器出现的次数 (例如非内联的<code>#btn:hover</code> 就是 <code>(0,1,1,0)</code>),在比较时从高优先级对比, 同一优先级相同比较下一优先级.</p><p>逻辑选择器 <code>:is()</code>, <code>:not()</code>,<code>:has()</code> 本身没有优先级, 以参数中优先级最高者为准,<code>:where()</code> 优先级为 0</p></li><li><p>通过在源码中的顺序判断</p><p>最后声明的生效, 通过 <code>link</code> 与 <code>style</code>引入的根据标签相对位置决定, 通过 <code>@important</code> 引入相当于在<code>@important</code> 处做了文本替换</p></li></ul><h3 id="样式的继承">样式的继承</h3><p>默认可以继承的属性:</p><ul><li>文本相关的属性: <code>color</code>, <code>font</code>,<code>font-family</code>, <code>font-size</code>,<code>font-weight</code>, <code>font-variant</code>,<code>font-style</code>, <code>line-height</code>,<code>letter-spacing</code>, <code>text-align</code>,<code>text-indent</code>, <code>text-transform</code>,<code>white-space</code>, <code>word-spacing</code></li><li>少部分列表, 表格相关属性</li></ul><p>也可以通过显式指定 <code>inherit</code> 关键字指定</p><h3 id="值与单位">值与单位</h3><ul><li><p>单位:</p><ul><li>长度单位:<ul><li>绝对长度: <code>px</code>, <code>pt</code>, <code>cm</code>,<code>in</code>...</li><li>相对长度: <code>em</code>, <code>rem</code>, <code>ex</code> (字符'x' 的高度), <code>ch</code> (数字 0 的宽度), <code>lh</code>(行高),<code>rlh</code>(根元素行高), <code>vw</code>, <code>vh</code>...</li></ul></li><li>角度: <code>deg</code>, <code>grad</code>, <code>turn</code>,<code>rad</code></li><li>时间: <code>s</code>, <code>ms</code></li><li>分辨率: <code>dpi</code>, <code>dpcm</code>, <code>dppx</code>(一般用于媒体查询 <code>min-resolution</code> 等)</li></ul><p>参考: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9MZWFybi9DU1MvQnVpbGRpbmdfYmxvY2tzL1ZhbHVlc19hbmRfdW5pdHM=">MDN<i class="fa fa-external-link-alt"></i></span></p></li><li><p>值</p><ul><li>文字类: 关键字, 颜色,位置</li><li>数字类</li><li>函数生成: calc, min, max ...</li></ul></li></ul><h3 id="布局">布局</h3><ul><li><p>常见布局有: 常规流 (Normal Flow), 浮动流 (Float), 定位流(Position) Flex 布局, Grid 布局, Multicol 布局</p></li><li><p>BFC &amp; IFC</p><ul><li><p>块格式化上下文 (BFC)</p><p>BFC 是 Web 页面的可视 CSS 渲染的一部分,它是块级盒子布局中与其他元素的交互的界限. BFC既定义了元素内部的排序规则, 又定义了元素间的表现</p><p>以下情况的元素会生成 BFC</p><ul><li><p>根元素</p></li><li><p>浮动元素 (元素的 <code>float</code> 不是<code>none</code>)</p></li><li><p>绝对定位元素 (元素的 <code>position</code> 为<code>absolute</code> 或 <code>fixed</code>)</p></li><li><p><code>display</code> 值为 <code>inline-block</code>,<code>table-cells</code>, <code>table-caption</code> 的元素</p></li><li><p><code>overflow</code> 值不是 <code>visible</code> 的元素</p></li><li><p>flex 或 grid 元素（<code>display: flex</code> 或<code>display: grid</code>）</p></li></ul><p>在 BFC 中:</p><ul><li>BFC 内部的盒子会在垂直方向上一个接一个地排列</li><li>BFC 的垂直方向的距离由 <code>margin</code> 决定. 属于同一个 BFC的两个相邻盒子的 <code>margin</code> 会发生重叠</li><li>BFC 的区域不会与 <code>float</code> 元素的盒子重叠</li><li>BFC 是一个独立的容器, 外面的元素不会影响 BFC 内的元素, BFC内的元素也不会影响外部的元素</li><li>BFC 的宽度为包含块的宽度, 除非该 BFC 是一个浮动元素,其宽度将为内容区的宽度</li></ul></li><li><p>内联格式化上下文 (IFC)</p><p>IFC 是 CSS 渲染的一部分, 它的区域包含了生成环境的内联元素,也就是说，IFC 中的元素会水平排列, 直到容器宽度不够, 然后会移到新的一行.在 IFC 中，盒子的左右都有可能接触到其它盒子, 除非当然,他们之间存在着空白或者垂直的分隔条.盒子垂直方向的起点是当前行盒子的顶端,垂直方向的终点是当前行盒子的底部.</p><p>在 IFC 中:</p><ul><li><p>IFC 的行框高度由其内部最高的元素决定, 但是并不受到顶部和底部<code>padding</code>, <code>border</code> 的影响</p></li><li><p>IFC 中的每个元素的 <code>margin</code>, <code>border</code>,<code>padding</code> 在水平方向上是互相影响的,但在垂直方向上不影响其他元素</p></li><li><p>IFC 中的元素不会有垂直方向的 <code>margin</code>重叠问题</p></li><li><p><strong>线条框模型:</strong></p><blockquote><p>“在内联格式区域中，盒子会从包含块的顶部开始，按序水平排列。只有水平外边距、边框和内边距会被保留。这些盒子可以以不同的方式在垂直方向上对齐：可以底部对齐或顶部对其，或者按文字底部进行对齐。我们把包含一串盒子的矩形区域称为一个<strong>线条框</strong>。”- 9.4.2</p></blockquote><p>==这里应该有张图==</p><p>在线条框 (line-box) 中, line-box 高度所在 box 最高最低元素的编剧,其值是 <code>line-height</code>, <code>line-height</code> -内容区域的高度是 leading, leading默认会均匀的分布在内容区域的上下两部分.</p></li><li><p><strong>基线与垂直对齐</strong></p><p>基线是一种看不见的线, 它是用来决定行内元素如何垂直对齐.</p><ul><li>对于文本, 基线通常是指字符的底部线条. 比如, 在拉丁字母中,基线是大部分字母 (例如 a, b, c, d 等) 的底部, 有些字母 (如 p, q)等会部分延伸到基线以下, 这部分被称为下行部分 (descender)</li><li>对于一个行内元素或一个行内块元素,它的基线默认是其内部最后一行文本的基线.如果行内元素或行内块元素没有文本或者由于其他原因没有基线,则其底边界就被认为是其基线.</li><li>对于一个块级元素, 基线的计算则更复杂一些.块级元素的基线是其最后一行盒子的基线, 除非它有 overflow 且不是 visible,那么这个块级元素的基线就不存在。</li></ul><p><code>vertical-align</code> 决定了 IFC 中元素的位置, 默认是base-line,</p><ul><li><code>baseline</code> (默认值): 元素的基线与父元素的基线对齐.</li><li><code>top</code>: 元素的顶部与行中最高元素的顶部对齐.</li><li><code>middle</code>: 元素的中心线与父元素基线上方约<code>0.5ex</code> 的位置对齐. <strong>注意:文字的中心线是基线向上半个小写 <code>x</code> 的位置</strong></li><li><code>bottom</code>: 元素的底部与行中最低元素的底部对齐.</li></ul><p>应用:</p><ul><li>单行文本垂直对齐 (设置<code>line-height</code>)</li><li>文字与 icon 对齐. (设置图标文本的对齐均为 <code>middle</code>,此时图片的垂直几何中心与文本的中心线(基线向上半个x)与父元素中心(基线向上半个x)对齐,图文仍不对齐, 再设置父元素 <code>font-size: 0</code> 即可让半个<code>x</code> 消失, 完成彻底对齐)</li></ul></li></ul></li></ul></li><li><p>常规流布局</p><ul><li><p>盒子的 <code>display</code> 属性可以分为外部显示的<code>display-outside</code> 与内部显示的 <code>display-inside</code>.外部显示类型约定了盒子如何与其他相同格式的上下文一起显示,内部显示类型约定了盒子内部的布局方式. 例如:<code>display: inline-flex</code> 的外部为 <code>inline</code> 参与 IFC,内部参与 flex 布局</p></li><li><p>常规流中的盒子的外部显示类型可以是 block 参与 BFC, 也可以是inline 参与 IFC.</p></li><li><p>常规流的 BFC 会通过如下方法处理其一级子 IFC 混排问题: 当 IFC的父元素是 BFC, 且父元素中有非 IFC. 浏览器会自动为连续的 IFC外部生成一个 BFC 包裹, BFC 内部要么都是 BFC 要么都是 IFC 的目的</p><p>==这里应该有一张图==</p></li></ul></li><li><p>弹性盒子布局</p><ul><li>作用于父元素的属性: <code>display</code>,<code>flex-direction</code>, <code>flex-wrap</code>,<code>justify-content</code>, <code>align-items</code>,<code>align-content</code>, <code>gap</code>.这些属性作用于所有内部元素</li><li>作用于子元素的属性: <code>flex-basis</code>, <code>flex-grow</code>,<code>flex-shrink</code>, <code>order</code>, <code>align-self</code>,这些属性用于控制单个元素</li></ul></li><li><p>网格布局</p><ul><li>作用于父元素的属性: <code>display</code>,<code>grid-template-colums/rows</code>, <code>grid-auto-flow</code>,<code>grid-tempate-areas</code></li><li>作用于子元素的属性: <code>grid-colum/row</code>,<code>grid-area</code></li><li>flex 与 grid 如何选择?: 整体布局建议 grid, 小面积, 小组件用 flex灵活一点</li></ul></li></ul><h3 id="层叠上下文">层叠上下文</h3><p>这里的层叠与 CSS 层叠样式表中的层叠不同, 这是指当元素具有层叠属性时,它们在三维空间中的层叠顺序. 一个层叠上下文对应了浏览器渲染的一个 renderlayer (渲染层).</p><p>32:41</p><h3 id="变形与动画">变形与动画</h3><h3 id="响应式设计">响应式设计</h3><h3 id="css-生态">CSS 生态</h3><h2 id="javascript">JavaScript</h2>]]></content>
    
    
    <summary type="html">语言部分</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>2023-06前端新活汇总</title>
    <link href="https://blog.liukairui.me/article/ff_monthly/2023-06%E5%89%8D%E7%AB%AF%E6%96%B0%E6%B4%BB%E6%B1%87%E6%80%BB/"/>
    <id>https://blog.liukairui.me/article/ff_monthly/2023-06%E5%89%8D%E7%AB%AF%E6%96%B0%E6%B4%BB%E6%B1%87%E6%80%BB/</id>
    <published>2023-05-31T16:00:01.000Z</published>
    <updated>2023-05-31T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>信源:</p><ul><li>https://web.dev/</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlZWtoeXQvd2Vla2x5">前端食堂<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvYmxvZy8=">MDNBlog<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9pby5nb29nbGUvMjAyMy9wcm9ncmFtL2ludGwvemgvP3E9d2Vi">GoogleI/O<i class="fa fa-external-link-alt"></i></span></li></ul></blockquote><h2 id="部分可用的内容">部分可用的内容</h2><h3 id="官方支持模态框">官方支持模态框</h3><blockquote><p>来自 Google I/O 2023</p><p>Chrome:37, Firefox: 98, Edge: 79, Safari: 15.4</p></blockquote><ul><li><p>原生支持的对话框元素</p></li><li><p>优势</p><ul><li>与传统组件库实现相比: 内置支持了焦点管理, 选项卡最终, 多对话框堆叠,快捷键关闭, 支持更多行为管理(背景是否可以滚动, 是否可以被聚焦)</li><li>与 Alert 相比: 可以自定义内部内容 (相当于一个 slot), 样式,支持响应式</li></ul></li><li><p>简易使用</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">newDialog</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> dialogElem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'dialog'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> textElem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> backDialogElem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> nextDialogElem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  textElem<span class="token punctuation">.</span>innerText <span class="token operator">=</span> text<span class="token punctuation">;</span>  backDialogElem<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'Back'</span><span class="token punctuation">;</span>  backDialogElem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> dialogElem<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  nextDialogElem<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'Addition'</span><span class="token punctuation">;</span>  nextDialogElem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">newDialog</span><span class="token punctuation">(</span>text <span class="token operator">+</span> <span class="token string">' + '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>textElem<span class="token punctuation">,</span> backDialogElem<span class="token punctuation">,</span> nextDialogElem<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> dialogElem<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dialogElem<span class="token punctuation">)</span><span class="token punctuation">;</span>  dialogElem<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">newDialog</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>show me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li><li><p>更多: <span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L2J1aWxkaW5nLWEtZGlhbG9nLWNvbXBvbmVudC8=">https://web.dev/building-a-dialog-component/<i class="fa fa-external-link-alt"></i></span></p></li></ul><h3 id="更好用的-vh-vw">更好用的 <code>vh</code> &amp;<code>vw</code></h3><blockquote><p>来自 Google I/O 2023</p><p>Chrome: 108, Firefox: 101, Edge: 108, Safari:15.4</p></blockquote><ul><li><p><code>vh</code> 与 <code>vw</code>两个单位在移动端适配中存在问题, 移动端中的 <code>100 vh</code>一般指工具栏收起后的视口高度, 当动态工具栏展开时, <code>100 vh</code>会超出视口</p><p><img src="./2023-06前端新活汇总/1.png" /></p><p>当工具栏收起时才可以正常表现</p><p><img src="./2023-06前端新活汇总/2.png" /></p><p>此次新增了三组单位分别表示小视口 (工具栏展开时) , 大视口 (工具栏收起), 动态视口 (动态适配) 大小, 单位分别为 <code>sv*</code>,<code>lv*</code>, <code>dv*</code>. 在桌面端中四个单位都等于<code>v*</code></p><p><img src="./2023-06前端新活汇总/3.png" /></p><p>也就是说目前 CSS 有 20 个相对视口的长度单位 ( <code>vw</code>,<code>vh</code>, <code>vmin</code>, <code>vmax</code>, <code>vi</code>,<code>vb</code> 及其对应的 <code>dv*</code>, <code>lv*</code>,<code>sv*</code>) p.s. <code>vi</code> 表示内联方向的视口长度的<code>1%</code>, 例如在中英文网站中, 我们是横向书写, 因此<code>vi = vw</code>, 在古中文中, 书写方向竖向, 因此<code>vi = vh</code>. <code>vb</code> 表示视口在块方向上的长度的<code>1%</code>, 也就是与 <code>vi</code> 恰好相反</p></li><li><p>更多: https://web.dev/viewport-units/</p></li></ul><h3 id="transform-允许拆分"><code>transform</code> 允许拆分</h3><blockquote><p>来自 Google I/O 2023</p></blockquote><ul><li><p>允许以如下方向写 <code>transform</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.target</span> <span class="token punctuation">&#123;</span>  <span class="token property">translate</span><span class="token punctuation">:</span> 50% 0<span class="token punctuation">;</span>  <span class="token property">rotate</span><span class="token punctuation">:</span> 30deg<span class="token punctuation">;</span>  <span class="token property">scale</span><span class="token punctuation">:</span> 1.2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而不是</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.target</span> <span class="token punctuation">&#123;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>50%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>这可以解决大量动画手动计算问题, 例如我们需要完成以下动画</p><p><img src="./2023-06前端新活汇总/4.svg" /></p><p>可以看到 scale, rotate, translate 在不同的时间点发生变化,我们需要在<strong>某一个动画</strong>发生变化的时候定义<strong>所有动画</strong>的状态.例如scale 在 5% 的时候运动发生了变化, rotate 在 10% 的时候发生了变化,我们就要分别定义 5%, 10% 的时候所有动画的状态, 线性变化还好, 如果 rotate是做了一个非线性动画, 那么我们在 5% 变更 scale 的时候就要手动计算 5%rotate 的状态, 代码为</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> anim</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%</span> <span class="token punctuation">&#123;</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">5%</span> <span class="token punctuation">&#123;</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>5%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">10%</span> <span class="token punctuation">&#123;</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>10%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">90%</span> <span class="token punctuation">&#123;</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>90%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">95%</span> <span class="token punctuation">&#123;</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>95%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>270deg<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>1.2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">100%</span> <span class="token punctuation">&#123;</span> <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>100%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了分开写的 feature, 我们就可以这样定义动画</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> anim</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%</span> <span class="token punctuation">&#123;</span> <span class="token property">translate</span><span class="token punctuation">:</span> 0% 0<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">100%</span> <span class="token punctuation">&#123;</span> <span class="token property">translate</span><span class="token punctuation">:</span> 100% 0<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">0%, 100%</span> <span class="token punctuation">&#123;</span> <span class="token property">scale</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">5%, 95%</span> <span class="token punctuation">&#123;</span> <span class="token property">scale</span><span class="token punctuation">:</span> 1.2<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">0%</span> <span class="token punctuation">&#123;</span> <span class="token property">rotate</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">10%, 90%</span> <span class="token punctuation">&#123;</span> <span class="token property">rotate</span><span class="token punctuation">:</span> 180deg<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">100%</span> <span class="token punctuation">&#123;</span> <span class="token property">rotate</span><span class="token punctuation">:</span> 360deg<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>甚至更加清晰的写成这样</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> move</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%</span> <span class="token punctuation">&#123;</span> <span class="token property">translate</span><span class="token punctuation">:</span> 0% 0<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">100%</span> <span class="token punctuation">&#123;</span> <span class="token property">translate</span><span class="token punctuation">:</span> 100% 0<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> scale</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%, 100%</span> <span class="token punctuation">&#123;</span> <span class="token property">scale</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">5%, 95%</span> <span class="token punctuation">&#123;</span> <span class="token property">scale</span><span class="token punctuation">:</span> 1.2<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> rotate</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%</span> <span class="token punctuation">&#123;</span> <span class="token property">rotate</span><span class="token punctuation">:</span> 0deg<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">10%, 90%</span> <span class="token punctuation">&#123;</span> <span class="token property">rotate</span><span class="token punctuation">:</span> 180deg<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">100%</span> <span class="token punctuation">&#123;</span> <span class="token property">rotate</span><span class="token punctuation">:</span> 360deg<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token selector">.target</span> <span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> move 2s<span class="token punctuation">,</span> scale 2s<span class="token punctuation">,</span> rotate 2s<span class="token punctuation">;</span>  <span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> forwards<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更多: <span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L2Nzcy1pbmRpdmlkdWFsLXRyYW5zZm9ybS1wcm9wZXJ0aWVzLw==">https://web.dev/css-individual-transform-properties/<i class="fa fa-external-link-alt"></i></span></p></li></ul><h3 id="简易的深克隆">简易的深克隆</h3><blockquote><p>来自 Google I/O 2023</p><p>Chrome: 98, Firefox: 94, Edge: 98, Safari: 15.4</p></blockquote><ul><li><p>支持对象, 循环引用, getter 的深拷贝, 不支持函数,<code>setter</code>, <code>Symbol</code></p><p>可以把他当作 <code>JSON.parse(JSON.stringify())</code>的替代品</p></li><li><p>简易测试</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>  <span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">inner</span><span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">_self</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token keyword">get</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">'ok'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">set</span> <span class="token function">setter</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">set for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.setter as </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>val<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">bigInt</span><span class="token operator">:</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">'test'</span><span class="token punctuation">,</span>  <span class="token comment">// 以下为不可被复制的属性, 复制会报错</span>  <span class="token comment">// symbol: Symbol.for('test'),</span>  <span class="token comment">// func()&#123;console.log('test')&#125;,</span><span class="token punctuation">&#125;</span>test<span class="token punctuation">.</span>_self <span class="token operator">=</span> test<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">structuredClone</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>res<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'res'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>_self <span class="token operator">===</span> res<span class="token punctuation">)</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>obj <span class="token operator">===</span> test<span class="token punctuation">.</span>obj<span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>arr <span class="token operator">===</span> test<span class="token punctuation">.</span>arr<span class="token punctuation">)</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>bigInt<span class="token punctuation">)</span> <span class="token comment">// 123n</span><span class="token comment">// Symbol 属性不复制但不报错</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// test</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span><span class="token comment">// setter 不复制不报错, 但是 getter 可以...</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>getter<span class="token punctuation">)</span> <span class="token comment">// 输出 ok</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>setter <span class="token operator">=</span> <span class="token string">'ok'</span><span class="token punctuation">)</span> <span class="token comment">// 输出 set for test.setter as ok</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>setter <span class="token operator">=</span> <span class="token string">'ok'</span><span class="token punctuation">)</span> <span class="token comment">// 没有输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更多: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL3N0cnVjdHVyZWRDbG9uZQ==">https://developer.mozilla.org/zh-CN/docs/Web/API/structuredClone<i class="fa fa-external-link-alt"></i></span></p></li></ul><h3 id="focus-visible-属性"><code>:focus-visible</code> 属性</h3><blockquote><p>来自 Google I/O 2023</p><p>Chrome: 86, Firefox: 85, Edge: 86, Safari: 15.4</p></blockquote><ul><li><p>与 <code>:focus</code> 类似的伪类, 两者区别是</p><ul><li><p><code>:focus</code>：当元素获得焦点时，无论是通过键盘还是鼠标，都会应用<code>:focus</code>伪类的样式。这对于视觉反馈和可访问性都是有用的。然而，对于鼠标和触摸屏用户来说，<code>:focus</code>的样式可能会干扰视觉体验，因为它们通常不需要通过显示的焦点来导航。</p></li><li><p><code>:focus-visible</code>：只有当元素通过键盘获得焦点时，才会应用<code>:focus-visible</code>伪类的样式。这使得开发者可以为键盘导航创建专门的样式，而不干扰鼠标或触摸屏用户的体验。这是一种改善可访问性的方式，因为它允许开发者为那些依赖键盘导航的用户（例如视障用户或只使用键盘的用户）提供更清晰的视觉反馈。</p></li></ul></li></ul><h3 id="流式-fetch">流式 Fetch</h3><blockquote><p>来自 Google I/O 2023</p><p>Chrome: 105, Firefox: 110, Edge: 105, Safari: NA</p></blockquote><ul><li><p>支持流式通信后, 我们可以在一次请求中边接收数据边处理数据,而不需要先完成数据下载再处理数据.例如当媒体网站在请求一个视频的时候其可以直接请求整个视频文件,边下载边为用户展示, 而不是分段请求视频, 存放在 blob 中处理再展示.</p><p>以下是一个慢慢请求的例子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">milliseconds</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> milliseconds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReadableStream</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token keyword">async</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token parameter">controller</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    controller<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'This '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    controller<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'is '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    controller<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'a '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    controller<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'slow '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    controller<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'request.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    controller<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipeThrough</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextEncoderStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>  <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/plain'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">body</span><span class="token operator">:</span> stream<span class="token punctuation">,</span>  <span class="token literal-property property">duplex</span><span class="token operator">:</span> <span class="token string">'half'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更多: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9hcnRpY2xlcy9mZXRjaC1zdHJlYW1pbmctcmVxdWVzdHMv">https://developer.chrome.com/articles/fetch-streaming-requests/<i class="fa fa-external-link-alt"></i></span></p></li></ul><h3 id="新的-css-颜色表示法">新的 CSS 颜色表示法</h3><blockquote><p>来自 <a href="web.dev">web.dev</a></p><p>Chrome: 111, Firefox: 113, Edge: 111, Safari: 16.2</p></blockquote><ul><li><p>传统的写法: <code>rgb</code>, <code>hsl</code>, <code>hwb</code>,<code>lch</code>, <code>lab</code>, <code>oklch</code>,<code>oklab</code>例如</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>31 120 50<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*注意一下这个最新的写法捏*/</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255 122 127 / 80%<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>color</code> 函数: 可以直接使用 <code>color</code>函数指定色彩空间与四个色值, 例如</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.valid-css-color-function-colors</span> <span class="token punctuation">&#123;</span>  <span class="token property">--srgb</span><span class="token punctuation">:</span> <span class="token function">color</span><span class="token punctuation">(</span>srgb 1 1 1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">--srgb-linear</span><span class="token punctuation">:</span> <span class="token function">color</span><span class="token punctuation">(</span>srgb-linear 100% 100% 100% / 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">--display-p3</span><span class="token punctuation">:</span> <span class="token function">color</span><span class="token punctuation">(</span>display-p3 1 1 1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">--rec2020</span><span class="token punctuation">:</span> <span class="token function">color</span><span class="token punctuation">(</span>rec2020 0 0 0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">--a98-rgb</span><span class="token punctuation">:</span> <span class="token function">color</span><span class="token punctuation">(</span>a98-rgb 1 1 1 / 25%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">--prophoto</span><span class="token punctuation">:</span> <span class="token function">color</span><span class="token punctuation">(</span>prophoto-rgb 0% 0% 0%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">--xyz</span><span class="token punctuation">:</span> <span class="token function">color</span><span class="token punctuation">(</span>xyz 1 1 1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbG9yX3ZhbHVlL2NvbG9y">https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color<i class="fa fa-external-link-alt"></i></span></p></li><li><p><code>color-mix</code> 函数: 可以实现混色, 语法<code>color-mix(in colorspace, color[ p1], color[ p2])</code>. 其中<code>in</code> 是语法标记, 必须写上, <code>colorspace</code>为颜色空间, 接着是两个被混合的颜色, <code>p1</code>, <code>p2</code>,是该颜色所占比例, 都省略则按 <code>50%, 50%</code> 计,省略一个则根据另一个推导, 均没有省略但两值和不为 <code>100%</code>则加权平均</p><p>例如: 以下表示 25% 的 <code>#34c9eb</code> 与 75% 的<code>#fff</code> 混合</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">li:nth-child(2)</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">color-mix</span><span class="token punctuation">(</span>in srgb<span class="token punctuation">,</span> #34c9eb 25%<span class="token punctuation">,</span> white<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更多: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbG9yX3ZhbHVlL2NvbG9yLW1peA==">https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix<i class="fa fa-external-link-alt"></i></span></p></li></ul><h3 id="webgpu">WebGPU</h3><blockquote><p>来自 <a href="web.dev">web.dev</a></p><p>Chrome: 113, Firefox: NA, Edge: 113, Safari: NA</p></blockquote><p>内容很多, 请参考: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9ibG9nL3dlYmdwdS1yZWxlYXNlLw==">https://developer.chrome.com/blog/webgpu-release/<i class="fa fa-external-link-alt"></i></span></p><h3 id="cookie-first-party-sets">Cookie First-Party Sets</h3><blockquote><p>来自 <a href="web.dev">web.dev</a></p><p>Chrome: 80, Firefox: 86, Edge: 86, Safari: 15</p></blockquote><p>从 Chrome 115 起默认情况下, 没有 <code>SameSite</code> 的 Cookie被视为 <code>Lax</code>, 没有 <code>Secure</code> 的<code>SameSite=none</code> 的 cookie 会被拒绝</p><p>参考<ahref="https://blog.liukairui.me/article/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E6%80%BB%E7%BB%93/">之前的<前端安全策略总结></a></p><h3 id="text-wrap-balance-属性"><code>text-wrap: balance</code>属性</h3><blockquote><p>来自 <a href="web.dev">web.dev</a></p><p>Chrome: 114, Firefox: NA, Edge: 114, Safari: NA</p></blockquote><p>使用该属性可以让浏览器根据育种优化文本换行, 使其更加平衡美观</p><p><img src="./2023-06前端新活汇总/5.png" /></p><p>这个属性可能会增加文本行数, 仅建议在标题中开启, 同时该属性与<code>white-space</code> 冲突. 建议写成</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1, h2, h3, h4, h5, h6, blockquote</span> <span class="token punctuation">&#123;</span>  <span class="token property">white-space</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span>  <span class="token property">text-wrap</span><span class="token punctuation">:</span> balance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更多: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9ibG9nL2Nzcy10ZXh0LXdyYXAtYmFsYW5jZS8=">https://developer.chrome.com/blog/css-text-wrap-balance/<i class="fa fa-external-link-alt"></i></span></p><h3 id="官方支持的弹窗-popover-api">官方支持的弹窗 popover API</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9ibG9nL2ludHJvZHVjaW5nLXBvcG92ZXItYXBp">web.dev<i class="fa fa-external-link-alt"></i></span></p><p>Chrome: 114, Firefox: NA, Edge: 114, Safari: NA</p></blockquote><ul><li><p>popover API 支持在页面中展示一个弹窗 DOM, 支持配置以下特性</p><ul><li>在顶层显示, 而不需要配置 <code>z-index</code></li><li>背景变黑, 禁用与非弹窗区域交互, 禁用焦点</li><li>默认焦点管理</li><li>绑定关闭快捷键</li><li>自定义样式</li><li>[未来支持] 弹出消失动画</li><li>[未来支持] 锚定弹出位置</li></ul></li><li><p>与组件库相比支持了焦点管理, 锚点弹出, 快捷键绑定</p></li><li><p>简易使用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">popovertarget</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-popover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Open Popover <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-popover<span class="token punctuation">"</span></span> <span class="token attr-name">popover</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I am a popover with more information.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更多: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9ibG9nL2ludHJvZHVjaW5nLXBvcG92ZXItYXBp">https://developer.chrome.com/blog/introducing-popover-api<i class="fa fa-external-link-alt"></i></span></p></li></ul><p><em>感觉未来 HTML 会越来越强, 直到取代组件库,未来的组件库会不会直接变成一个可配置的 CSS 文件?</em></p><h3 id="image-content-多样化"><code>&lt;image&gt;</code> content多样化</h3><blockquote><p>来自: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvYmxvZy9tZG4tZG9jcy1qdW5lLTIwMjMv">MDN<i class="fa fa-external-link-alt"></i></span></p></blockquote><p><code>content</code> 是 CSS 中为(伪)元素写入内容的 Key, 除了写入文字,他<strong>还支持写入图片, 渐变色, CSS 计数器函数, 引用</strong>,(更多使用参考 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbnRlbnQ=">MDN<i class="fa fa-external-link-alt"></i></span>)</p><p>在 Chrome 113 中与 FireFox 113 中, 我们可以为 content写入渐变色与使用 <code>img-set</code> 的图片, 例如</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>replaced<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Mozilla<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#replaced</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>purple<span class="token punctuation">,</span> yellow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此处的 Mozilla 会被一个渐变色色块取代</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>replaced<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Mozilla<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#replaced</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">image-set</span><span class="token punctuation">(</span>    <span class="token string">"1x.png"</span> 1x<span class="token punctuation">,</span>    <span class="token string">"2x.png"</span> 2x  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处我们可以为替换物指定 1x 与 2x 图</p><h3 id="更好的全屏按键绑定">更好的全屏按键绑定</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9ibG9nL2JldHRlci1mdWxsLXNjcmVlbi1tb2RlLw==">ChromeDevelopers<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>传统的<strong>按下</strong> ESC 退出全屏可能会与其他快捷键冲突,在新特性中, 我们可以将<strong>按下</strong> ESC 锁住,让他完成其他快捷任务, 此时用户需要<strong>长按</strong> ESC才能推出全屏</p><h3 id="新的-web-animation">新的 Web Animation</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1vRGNiM2Z2dEVUcyZsaXN0PVJEQ01VQ25VWVpMdW95MXJxMWFWTXd4NGFUencmc3RhcnRfcmFkaW89MSZydj1vRGNiM2Z2dEVUcyZ0PTcmYWJfY2hhbm5lbD1Hb29nbGVDaHJvbWVEZXZlbG9wZXJz">GoogleI/O<i class="fa fa-external-link-alt"></i></span></p></blockquote><ul><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kb2NzL3dlYi1wbGF0Zm9ybS92aWV3LXRyYW5zaXRpb25zLw==">ViewTransitions API<i class="fa fa-external-link-alt"></i></span>: 原生支持使用纯 CSS 实现页面(路由)切换时的过渡动画,使路由切换更像是一个页面中的行为, 而不是页面刷新</li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9hcnRpY2xlcy9zY3JvbGwtZHJpdmVuLWFuaW1hdGlvbnMv">Scroll-drivenAnimations<i class="fa fa-external-link-alt"></i></span>: 通过定义时间轴的方法实现了讲容器滚动与 CSS 属性在纯 CSS层面绑定. <span class="exturl" data-url="aHR0cHM6Ly9zY3JvbGwtZHJpdmVuLWFuaW1hdGlvbnMuc3R5bGUv">使用案例参考<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9saW5lYXItZWFzaW5nLWdlbmVyYXRvci5uZXRsaWZ5LmFwcC8=">linear()<i class="fa fa-external-link-alt"></i></span>:更简洁的 CSS 线性缓动函数定义方法</li></ul><h3 id="新的-chrome-扩展">新的 Chrome 扩展</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1RWWQyWGlVWU5sRSZ0PTEycyZhYl9jaGFubmVsPUdvb2dsZUNocm9tZURldmVsb3BlcnM=">GoogleI/O<i class="fa fa-external-link-alt"></i></span></p></blockquote><ul><li><p>优化了空闲终止检测算法</p></li><li><p>新增 background 的 offscreen API</p></li><li><p>增强 Web Request APIs 的安全性</p></li><li><p>新的扩展管理菜单提供了更细粒度的扩展工作范围控制(23年年底上线)</p></li><li><p>新增 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kb2NzL2V4dGVuc2lvbnMvcmVmZXJlbmNlL3NpZGVQYW5lbC8=">sidepanel API<i class="fa fa-external-link-alt"></i></span>. 允许扩展常驻侧边栏</p><p><img src="./2023-06前端新活汇总/6.png" /></p></li></ul><h3 id="使用-chrome-devtools-调试表单与自动填充">使用 Chrome DevTools调试表单与自动填充</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9ibG9nL2RldnRvb2xzLWF1dG9maWxsLw==">GoogleI/O<i class="fa fa-external-link-alt"></i></span></p></blockquote><p><strong>Google 自动填充的原理</strong></p><ul><li>如果 Chrome 识别到了要填写内容的语义 (姓名, 邮箱, 银行卡信息,位置信息), Chrome 会直接调用用户存储的个人信息 (如 Google Pay绑定的银行卡, Google 中存储的位置) 填充表单. 语义识别参考: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRNTC9BdHRyaWJ1dGVzL2F1dG9jb21wbGV0ZQ==">MDN<i class="fa fa-external-link-alt"></i></span></li><li>如果识别失败, 则会以表单的 <code>name</code> 属性为 key记住用户填写的信息, 之后根据 <code>name</code>属性为用户提供书写建议.</li></ul><p><strong>给开发者的建议</strong></p><ul><li>用上自动填充 &gt; 不用自动填充 &gt; 写错填充字段</li><li>针对敏感信息采用 <code>iframe</code> 包裹</li><li>自动填充仅用于填充客观信息, 不要用于填充个性化信息 (如产品订阅时间,验证码), 对于个性化信息, 可以采用随机的 <code>name</code> 防止被 Chrome记住 (如: <code>verify233</code>)</li></ul><p><strong>未来的变化</strong></p><ul><li>针对触屏交互优化</li><li>console 中自动警告不规范的表单写法与无法自动填充的原因</li><li>开辟一个详细解释自动填充工作流程的 DevTool 选项卡</li></ul><h3 id="firefox-114-发布">FireFox 114 发布</h3><ul><li><p>首次支持 <code>:lang()</code> 伪类选择器</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* Matches nl and de */</span><span class="token selector">:lang("nl", "de")</span> <span class="token punctuation">&#123;</span>  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>SVG 支持 <code>crossorigin</code> 属性</p></li><li><p>支持 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYlRyYW5zcG9ydF9BUEk=">WebTransportAPI<i class="fa fa-external-link-alt"></i></span>, 这是一个升级版的 ws, 其基于 HTTP/3, 通过 UDP传输数据因此具有更高的性能, 更低的延迟,更好的网络切换和更灵活的数据传输模式</p><p>优点：</p><ul><li>避免了队头阻塞的问题</li><li>减少了安全握手所需的往返次数</li><li>支持多个流, 单向流和乱序交付, 提高了传输效率</li><li>支持不可靠的数据报传输, 适用于对实时性要求高的场景,如游戏或音视频通信</li><li>支持在不同网络之间保持连接 ID 不变, 实现无缝切换</li></ul></li></ul><h2 id="工具">工具</h2><h3 id="检测支持本浏览器-css-支持新的网站">检测支持本浏览器 CSS支持新的网站</h3><blockquote><p>来自<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlZWtoeXQvd2Vla2x5">前端食堂<i class="fa fa-external-link-alt"></i></span></p></blockquote><p><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0c2Nzcy5kZXYv">SupportsCSS.dev<i class="fa fa-external-link-alt"></i></span></p><p>虽然我不知道这东西有啥用</p><h3id="谷歌发布了一款扩展程序安装模拟器">谷歌发布了一款扩展程序安装模拟器</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dvb2dsZUNocm9tZUxhYnMvZXh0ZW5zaW9uLXVwZGF0ZS10ZXN0aW5nLXRvb2w=">GoogleChromeLabs<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>这款工具可以用来模拟扩展程序通过不同途径安装与更新时与用户交互的流程(包括权限授予)</p><h2 id="实验性内容">实验性内容</h2><h3 id="typescript-5.2-前瞻内容">TypeScript 5.2 前瞻内容</h3><blockquote><p>来自<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0dlZWtoeXQvd2Vla2x5">前端食堂<i class="fa fa-external-link-alt"></i></span></p></blockquote><ul><li><p><code>using</code> 关键字</p><p><code>using</code> 关键字可以在一个带有 <code>Symbol.dispose</code>函数的对象被回收时执行函数. 以下是使用与不使用 <code>using</code>完成文件句柄的例子</p><ul><li><p>不使用 <code>using</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> open <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"node:fs/promises"</span><span class="token punctuation">;</span><span class="token keyword">let</span> filehandle<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  filehandle <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"thefile.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">await</span> filehandle<span class="token operator">?.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用 <code>using</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> open <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"node:fs/promises"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">getFileHandle</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">path</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> filehandle <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    filehandle<span class="token punctuation">,</span>    <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>asyncDispose<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> filehandle<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span>  <span class="token keyword">await</span> using file <span class="token operator">=</span> <span class="token function">getFileHandle</span><span class="token punctuation">(</span><span class="token string">"thefile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Do stuff with file.filehandle</span><span class="token punctuation">&#125;</span> <span class="token comment">// Automatically disposed!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>引入类型占位符, 并运行 TS 动态推断类型而不是使用默认值(相当于解决了类型缩窄问题)</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// The underscores tell TypeScript to infer those type arguments!</span><span class="token generic-function"><span class="token function">func</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="of-selector-选择器"><code>of &lt;selector&gt;</code> 选择器</h3><blockquote><p>来自: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvYmxvZy9tZG4tZG9jcy1qdW5lLTIwMjMv">MDN<i class="fa fa-external-link-alt"></i></span></p></blockquote><p><code>of &lt;selector&gt;</code>选择器以选择匹配给定选择器的所有元素的子孙元素. 它类似于后代组合器(空格)，但是它可以使用伪类和伪元素来过滤匹配的元素</p><ul><li><p>与后代选择器的相似之处</p><p><code>li of :is(ul, ol)</code>: 匹配所有位于 <code>&lt;ul&gt;</code>或 <code>&lt;ol&gt;</code> 元素内的 <code>&lt;li&gt;</code> 元素. 与<code>ul li, ol li</code> 作用相同</p></li><li><p>与后代选择器的不同之处</p><p><code>div of p::first-child</code> 匹配所有位于<code>&lt;p&gt;</code> 元素内的第一个子元素的 <code>&lt;div&gt;</code>元素. 后代选择器无法实现</p></li></ul><h3 id="实验性的-prefers-reduced-transparency-媒体查询">实验性的<code>prefers-reduced-transparency</code> 媒体查询</h3><blockquote><p>来自: <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0BtZWRpYS9wcmVmZXJzLXJlZHVjZWQtdHJhbnNwYXJlbmN5">MDN<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>FireFox 113 引入了一个实验性的媒体查询,该查询可以检测用户是否设置了减少透明图层的偏好设置,开启该设置有助于提升页面对比度与可读性, 此后,开发者也可以根据该媒体查询的结果决定是否手动增强对比度, 例如:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.translucent</span> <span class="token punctuation">&#123;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.4<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 如果用户希望提高对比度, 那么我开发者就再帮他一把 */</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span>prefers-reduced-transparency<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.translucent</span> <span class="token punctuation">&#123;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.8<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="css-ray-的新属性">CSS <code>ray()</code> 的新属性</h3><blockquote><p>来自 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL3JheQ==">MDN<i class="fa fa-external-link-alt"></i></span></p></blockquote><p>该函数在 CSS 中可以定义一个射线. 可以用于定义一些运动路径, 如<code>offset-path: ray(120deg sides contain);</code></p><h2 id="文章">文章</h2><p>https://mp.weixin.qq.com/s/TFxQSwOLQJWBC-ErWaHS9Q</p><p>https://www.builder.io/blog/hydration-tree-resumability-map</p><p>https://chriscoyier.net/2023/06/06/modern-css-in-real-life/</p><p>https://mp.weixin.qq.com/s/sfbQUFzhJzYWGdfLh0yIzA</p><p>https://mp.weixin.qq.com/s/b5RJ4ZArlbzOmM3Zz1VDhg</p>]]></content>
    
    
    <summary type="html">都是些二手信息罢了~</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="新活" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E6%96%B0%E6%B4%BB/"/>
    
    
    <category term="前端新活" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF%E6%96%B0%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>了解客户端容器</title>
    <link href="https://blog.liukairui.me/article/%E4%BA%86%E8%A7%A3%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/"/>
    <id>https://blog.liukairui.me/article/%E4%BA%86%E8%A7%A3%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%B9%E5%99%A8/</id>
    <published>2023-05-30T16:00:01.000Z</published>
    <updated>2023-05-30T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器架构">浏览器架构</h2><ul><li><p>浏览器架构演进</p><ol type="1"><li>单进程架构: 所有模块都跑在一个进程里</li><li>多进程架构: 分为主进程, 网络进程, 渲染进程, GPU 进程,插件进程等</li><li>面向服务的(多进程)架构: 为解决多进程架构中部分进程臃肿的问题, 分为UI, 数据库, 文件, 设备, 网络等多个独立服务</li></ol><p><img src="./掘金前端初阶训练营笔记/1-1.png" /></p><table><colgroup><col style="width: 5%" /><col style="width: 25%" /><col style="width: 19%" /><col style="width: 25%" /><col style="width: 24%" /></colgroup><thead><tr class="header"><th>架构类型</th><th>扩展性</th><th>安全性</th><th>稳定性</th><th>流畅度</th></tr></thead><tbody><tr class="odd"><td>单进程架构</td><td><strong>低</strong>, 所有模块运行在同一进程里, 访问同一块内存区域,数据没有隔离, 新增模块可能会影响原有功能</td><td><strong>低</strong>, 三方插件可直接访问操作系统里任意资源</td><td><strong>低</strong>, 三方插件漏洞或者某个 tab 页面 JavaScript脚本问题可能导致浏览器崩溃</td><td><strong>卡顿</strong>, 所有页面运行在同一进程中,开启多个页面时明显卡顿</td></tr><tr class="even"><td>多进程架构</td><td><strong>中</strong>, 各进程分配独立的内存区域, 有些进程功能较大,耦合度高</td><td><strong>高</strong>, 运行在独立沙箱中, 不能访问系统敏感资源</td><td><strong>高</strong>, 进程相互隔离, 当一个页面或者插件崩溃时,不会影响其他进程</td><td><strong>流畅</strong>,每个页面运行在独立的渲染进程中,充分利用系统资源</td></tr><tr class="odd"><td>面向服务架构</td><td><strong>高</strong>,服务模块划分更细, 更内聚, 耦合性低,易于扩展</td><td><strong>高</strong>,运行在独立沙箱中, 不能访 问系统敏感资源</td><td><strong>高</strong>,进程相互隔离, 当一个页面或者插件崩溃时,不会影响其他进程</td><td><strong>流畅</strong>, 每个页面运行在独立的渲染进程中,充分利用系统资源</td></tr></tbody></table></li><li><p>三种架构的应用</p><ul><li>单进程架构: 在古早年代有应用, 节约资源</li><li>多进程架构:现代浏览器会在机器性能不充足的时候退化到该模式以节约资源</li><li>面向服务架构: 占用资源多, 现代浏览器会在机器资源充足的时候使用</li></ul></li><li><p>典型多进程架构</p><ul><li>浏览器主进程: 逻辑展示, 用户交互, 进程管理</li><li>GPU 进程: 负责整个浏览器的 UI 绘制</li><li>网络进程</li><li>渲染进程(标签页): 负责 Tab 页面中的所有内容, 包括 HTML, CSS, JS的解析与执行</li><li>插件进程</li><li>其他实用程序进程: Storage, Network, Audio...</li></ul></li></ul><h2 id="渲染进程">渲染进程</h2><ul><li><p>渲染进程中又包含多个线程</p><ul><li>JS 引擎线程: 负责解析, 执行 JS 脚本. <strong>与 GUI渲染线程互斥</strong>, JS 线程执行时间过长会导致页面卡顿</li><li>GUI 渲染线程: 负责渲染浏览器界面, 解析 HTML, CSS, 构建 DOM 树,render 树, 布局, 绘制页面</li><li>定时器触发线程: 负责当 <code>setTimeout</code>,<code>setInteval</code> 计时完毕后将回调放入事件队列</li><li>网络线程</li><li>事件触发线程: 宿主环境提供的事件循环处理线程</li></ul></li><li><p>JS 引擎与 GUI 渲染引擎</p><ul><li><p>JS 引擎的执行流程</p><pre class="mermaid">    graph LRJS源码 --解析器--> AST --翻译--> 字节码 --解析执行--> OS字节码 --JIT--> 机器码 --直接执行--> OS</pre><ul><li>字节码: 是一种更高效的源码表示形式, 比源码更接近机器码,但<strong>不依赖于平台</strong>, 还不是机器码</li><li>JIT (Just-in-Time): 是一种编译策略, 当 JavaScript引擎在运行时发现代码被反复执行时,会将反复执行的字节码编译为<strong>依赖于平台的机器码</strong>以提高执行效率</li></ul></li><li><p>GUI 渲染引擎</p><pre class="mermaid">    graph LRHTML源码 --XML解析器--> DOM树 --合成--> render树CSS源码 --CSS解析器--> CSSOM树 --合成--> render树 --渲染--> 显存</pre><ul><li>CSSOM 树: 将 CSS 规则解析为规则树用于描述 CSS 样式规则. 这是 CSS解析的必经之路, 很多 CSS in JS 方案 (例如 StyledComponents)就采用了这个技术实现空 Style 标签写入 CSS. 但是不建议开发直接撰写 CSSOM,虽然理论上这可以节约 CSS 解析时间, 但是动态修改 CSSOM 的危害十分巨大,同时 CSSOM API 并不直观, 即使是 CSS 库也不会直接操作 CSSOM 树</li></ul></li><li><p>两个引擎通过 JS Bridge 通信并实现互斥</p></li></ul></li></ul><h2 id="浏览器地址输入-url-后发生了什么">浏览器地址输入 URL 后发生了什么:(</h2><ol type="1"><li><p>输入 URL</p><ul><li>UI线程获取输入内容, 判断是否是 URL</li><li>UI 线程统治网络线程发起网络请求, 获取站点内容. 将 Tab 页设置为Loading</li></ul></li><li><p>浏览器查找 DNS 记录</p></li><li><p>解析 DNS</p></li><li><p>建立 TCP 连接</p></li><li><p>发起 HTTP 连接</p></li><li><p>服务端处理请求</p></li><li><p>客户端接收响应内容</p><p>网络线程在收到 HTTP 响应后检查媒体类型 (MIME Type).</p><ul><li><p>如果是 HTML 则通知主进程寻找渲染进程加载页面, 主线程通过 IPC消息告知渲染进程处理导航</p></li><li><p>如果是其他文件类型则交给下载管理器处理</p></li></ul></li><li><p>渲染页面</p><ul><li>渲染进程接收数据, 统治主进程开始处理, 导航结束,进入文档加载阶段</li><li>渲染进程加载页面所需的子资源(CSS, JS). 执行脚本</li><li>构建 DOM, CSSOM 树, 构建 render 树</li><li>计算布局: 计算每个节点的位置与大小, 绘制元素边框,将元素写入文档流</li><li>构建与绘制图层: 为特定节点生成专用图层,对于每个图层生成多个绘制指令, 交给合成线程,合成线程生成图块交给栅格线程完成光栅化</li><li>光栅化</li></ul></li><li><p>执行 JavaScript</p></li><li><p>断开连接</p></li></ol><h2 id="跨端容器">跨端容器</h2><ul><li><p>跨端方案</p><ul><li><p>webview:</p><ul><li><p>网页视图, 可以嵌套在移动端 APP 中加载网页</p></li><li><p>优点:</p><ul><li>一次开发, 多次使用, 学习成本低</li><li>即时更新, 无需下载安装包</li><li>通过 JSBridge 与系统交互, 可以实现复杂功能</li></ul></li><li><p>JavaScript 调用 Native</p><ul><li>API 注入: Navive 获取 JavaScript 环境上下文,对其挂载的对象或方法进行拦截</li><li>使用 Webview URL Scheme 跳转拦截</li><li>在 IOS 中使用 <code>window.webkit.messageHandler</code> 通信</li></ul></li><li><p>Native 调用 JavaScript</p><ul><li>直接通过 webview 暴露 API 执行</li><li>IOS 的<code>webview.stringByEvaluatingJavaScriptFromString</code></li><li>安卓的 <code>webview.evaluateJavascript</code></li></ul></li></ul></li><li><p>小程序:</p><ul><li>双线程方案: 将逻辑与渲染线程分开, 两者通过 Native 完成通信转发.</li><li>渲染层采用多 webview 方案</li></ul></li><li><p>React Native / WeeX</p><ul><li>采用原生 Android / IOS 组件渲染</li><li>上层采用前端框架生成 Virtual DOM, Virtual DOM 通过 JSBridge 操作Native API 最后渲染成原生组件</li></ul></li><li><p>Flutter</p><ul><li>谷歌的跨端框架</li><li>新语法, 采用 dart VM</li><li>采用 skia 完成渲染, 保证跨端一致性</li></ul></li></ul></li><li><p>实现原理</p><ul><li>一套 UI 组件规范</li><li>一个渲染引擎 (webview, Native, 其他如 skia)</li><li>逻辑层: JS 引擎</li><li>通信工具: JSBridge, JSBinding</li><li>底层 API 抹平: Native API</li></ul></li><li><p>总结: 推荐 webview, React Native, Flutter</p></li><li><p>八股:</p><ul><li>为什么小程序比 webview 流畅:<ul><li>小程序做了很多离线缓存 (比如开屏那个加载很慢的进度条)</li><li>小程序屏蔽了一部分危险 / 重 API</li></ul></li><li>未来的跨端方案: 更可能是 webview. 因为配置简单, 学习成本低</li></ul></li></ul>]]></content>
    
    
    <summary type="html">来自掘金前端初阶训练营</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="跨端" scheme="https://blog.liukairui.me/tags/%E8%B7%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>一些前端认证技术</title>
    <link href="https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9B%E5%89%8D%E7%AB%AF%E8%AE%A4%E8%AF%81%E6%8A%80%E6%9C%AF/"/>
    <id>https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9B%E5%89%8D%E7%AB%AF%E8%AE%A4%E8%AF%81%E6%8A%80%E6%9C%AF/</id>
    <published>2023-05-22T16:00:03.000Z</published>
    <updated>2023-07-21T16:00:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="比较新的认证方案">比较新的认证方案</h2><h3 id="web-authentication">Web Authentication</h3><blockquote><p>Web Authentication 仅在安全上下文 (HTTPS) 中可用</p><hr /><p>Web Authentication 一般用于辅助验证 (两步验证)单独使用的话用户数据会直接和认证设备绑定...设备丢了数据就寄了</p><p>update: 2023.7.22 最近这个概念似乎有点热, GitHub以及支持这种认证方案, Apple 也全面支持该方案了</p></blockquote><p>Web Authentication API 是一种新的验证模式, 其允许网站调用计算机的PIN, 生物特征 (如指纹或面部识别) 识别器或硬件令牌 (如USB密钥)来验证用户身份，而无需依赖传统的用户名和密码组合. 例如在用户可以通过Windows Hello 扫脸直接登陆网站</p><p>Web Authentication API 的主要目标是替代传统的用户名和密码登录方式,以解决密码泄露, 弱密码和重复密码使用等安全隐患.通过采用公钥加密和生物特征识别技术,Web身份验证API提供了更高的安全性和用户友好性. 可以在<span class="exturl" data-url="aHR0cHM6Ly90cnktd2ViYXV0aG4uYXBwc3BvdC5jb20v">这个网站<i class="fa fa-external-link-alt"></i></span>尝试使用 WebAuthentication API</p><p>基本流程</p><ul><li><p>注册</p><p><img src="./一些前端认证技术/WebAuthen.png" /></p><ol start="0" type="1"><li><p>客户端请求服务器用户希望注册凭据, 一般包括用户名 (非 WebAuthentication 标准)</p></li><li><p>服务器返回构建密钥所需信息, 包含</p><ol type="1"><li>一个 "挑战" (Challenge): 一般是一个大随机数</li><li>一个 <code>pubKeyCredParams</code>: 包含服务端希望的加密算法优先级(例如: <code>[EdDSA, SHA-256]</code> 就是希望使用 <code>EdDSA</code>如果不行就用 <code>SHA-256</code>)</li><li><code>authenticatorSelection</code>: 允许使用的认证器类型</li><li><code>attestation</code>: 是否需要来自认证器的证明</li></ol><p>这步仍然不是 Web Authentication 标准规定的</p></li><li><p>客户端基于传回的 <code>authenticatorSelection</code> 选择认证器.向认证器调用 <code>authenticatorMakeCredential</code>并传入服务器回传的信息</p></li><li><p>认证器先要求用户完成一次某种形式的认证 (PIN, 指纹, 面容)以确认用户正在操作并同意注册</p></li><li><p>认证器向浏览器推送一个公钥凭据对象,该公钥对象上包含了用于证明公钥与认证器私钥匹配的签名</p></li><li><p>客户端获取数据并构造 <code>PublicKeyCredential</code>, 其包含</p><ol type="1"><li><code>identifier</code>: 标识符</li><li><code>response</code>: 认证器客户端请求的回应<ul><li><code>clientData</code>: 凭据上下文, 包括挑战与发起请求的来源</li><li><code>attestationObject</code>: 证明信息(如果第一步服务端有要求)</li></ul></li></ol></li><li><p>Web 服务器做验证</p><ol type="1"><li>检查返回的 challange 与发出的 challange 是否匹配</li><li>检查发回数据与最初请求 challange 的源地址是否相同</li><li>检查服务器发回的证明是否足够</li></ol><p>并关联凭据到用户</p></li></ol></li><li><p>登录验证</p><p><img src="./一些前端认证技术/WebAuthen-log.png" /></p><ol start="0" type="1"><li>客户端发起登录请求, 并携带一些可能的识别字段(用户名啥的)</li><li>服务端确定公钥, 生成一个挑战并构造可选的<code>PublicKeyCredentialRequestOptions</code>, 其包括<ul><li><code>allowCredentials</code>: 若客户端传入了用户名,该字段返回该用户的凭据</li><li><code>userVerification</code>是否应该执行用户验证</li></ul></li><li>浏览器调用 <code>navigator.credentials.get()</code> 方法,将服务器挑战和其他数据 (如允许的凭据列表) 转换为一个<code>PublicKeyCredential</code> 请求参数对象</li><li>用户在其身份验证设备上验证自己的身份</li><li>设备响应, 浏览器接收到一个公钥凭据对象. 此对象包含一个签名,证明设备具有与凭据公钥配对的私钥, 并且用户已经验证了自己的身份</li><li>客户端获取认证器创建的数据并构造 <code>PublicKeyCredential</code>,包括:<ul><li><code>identifier</code>: 标识符</li><li><code>response</code>: 认证器客户端请求的回应<ul><li><code>clientData</code>: 凭据上下文, 包括挑战与发起请求的来源</li><li><code>authenticatorData</code>: 凭证, 签名, 签名计数器</li><li><code>signature</code>: 包含 <code>clientDataJSON</code> 与<code>authenticatorData</code> 对象</li></ul></li></ul></li><li>服务器验证该凭据对象</li></ol></li></ul><p>代码实现:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> rawId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// store cert id (get it from server actually)</span><span class="token comment">// registor</span><span class="token keyword">let</span> challenge <span class="token operator">=</span> window<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span><span class="token function">getRandomValues</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> Uint8Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">"UZSL85T9AFC"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token parameter">c</span><span class="token operator">=></span>c<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// sample user id in Base64</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"kairuiliu@msn.com"</span><span class="token punctuation">,</span>    <span class="token literal-property property">displayName</span><span class="token operator">:</span> <span class="token string">"Kairui Liu"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> relyingParty <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Example Domain"</span><span class="token punctuation">,</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">"example.com"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> credentialCreationOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">challenge</span><span class="token operator">:</span> challenge<span class="token punctuation">,</span>    <span class="token literal-property property">rp</span><span class="token operator">:</span> relyingParty<span class="token punctuation">,</span>    <span class="token literal-property property">user</span><span class="token operator">:</span> user<span class="token punctuation">,</span>    <span class="token comment">// most device support -7 (ES256), but windows hello can only worked on -257 (RS256), you can aslo add -8 (EdDSA), but in most of cases -7 (and -257, if you want to use windows hello) is enough (https://github.com/w3c/webauthn/issues/1757)</span>    <span class="token literal-property property">pubKeyCredParams</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">alg</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"public-key"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">alg</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">257</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"public-key"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">,</span>    <span class="token literal-property property">attestation</span><span class="token operator">:</span> <span class="token string">"direct"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>navigator<span class="token punctuation">.</span>credentials<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">publicKey</span><span class="token operator">:</span> credentialCreationOptions<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">newCredentialInfo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>newCredentialInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    rawId <span class="token operator">=</span> newCredentialInfo<span class="token punctuation">.</span>rawId<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// verify</span><span class="token keyword">let</span> challenge <span class="token operator">=</span> window<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span><span class="token function">getRandomValues</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> allowCredentials <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"public-key"</span><span class="token punctuation">,</span>    <span class="token literal-property property">id</span><span class="token operator">:</span> rawId<span class="token punctuation">,</span>    <span class="token comment">// transports: ["usb", "nfc", "ble"] // do not write this config if you want to use build-in verifier. actually, it should be provided by server</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> credentialRequestOptions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">challenge</span><span class="token operator">:</span> challenge<span class="token punctuation">,</span>    <span class="token literal-property property">allowCredentials</span><span class="token operator">:</span> allowCredentials<span class="token punctuation">,</span>    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">60000</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>navigator<span class="token punctuation">.</span>credentials<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">publicKey</span><span class="token operator">:</span> credentialRequestOptions<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">assertion</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>assertion<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以参考 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS93ZWJhdXRobmRlbW8=">google/webauthndemo<i class="fa fa-external-link-alt"></i></span></p><h3 id="oauth">OAuth</h3><p>OAuth (开放授权)允许用户通过授权的方式授予第三方服务商使用其账户的部分权限与数据.其设计的目的是通过一种更安全, 可扩展的方式完成授权而无需输入用户名密码.例如: Reddit 允许用户从 Google Driver 上传图片,微信从各种健康软件中拉取运动步数, 就使用了该特性</p><p>OAuth 的先进之处在于: 无需输入用户名密码 &amp; 允许更细粒度的授权(可以授权特定的权限或数据) &amp; SSO</p><p>OAuth 分为 1.0 与 2.0 两个版本, 相比之下 2.0 流程更加简单, 更加安全,扩展性更强</p><p>OAuth 授权流程可以分为 8 步</p><pre class="mermaid">sequenceDiagram    participant Resource Owner    participant Client    participant Authorization Server    participant Resource Server    Client->>Authorization Server: 1. 发起授权请求    Authorization Server-->>Resource Owner: 2. 请求用户进行身份验证    Resource Owner-->>Authorization Server: 3. 提供凭据进行身份验证    Authorization Server->>Client: 4. 生成授权码    Client->>Authorization Server: 5. 使用授权码请求令牌    Authorization Server-->>Client: 6. 返回访问令牌    Client->>Resource Server: 7. 使用访问令牌请求资源    Resource Server-->>Client: 8. 返回受保护的资源</pre><p>在此, 我们需要明确四个术语, 以 reddit 希望访问 google driver 为例</p><ul><li>资源所有者 (Resource Owner): 用户自己</li><li>客户端 (Client): Reddit 应用程序, 并不是浏览器</li><li>授权服务器 (Authorization Server): 指的是客户端的授权服务器, 也就是reddit 的服务器</li><li>资源服务器 (Resource Server): 被访问资源的服务器, 即 Google Driver服务器</li></ul><p>具体流程为</p><ol type="1"><li>客户端 (Client) 向授权服务器 (Authorization Server)发起授权请求</li><li>授权服务器向资源拥有者 (Resource Owner)发送请求，要求其进行身份验证</li><li>资源拥有者提供凭据进行身份验证</li><li>授权服务器生成授权码并将其发送给客户端</li><li>客户端使用授权码向授权服务器请求访问令牌</li><li>授权服务器返回访问令牌给客户端</li><li>客户端使用访问令牌向资源服务器 (Resource Server)请求受保护的资源</li><li>资源服务器返回受保护的资源给客户端</li></ol><h3 id="oauth2-pkce-proof-key-for-code-exchange">OAuth2 PKCE (Proof Keyfor Code Exchange)</h3><p>OAuth2 PKCE 是 OAuth2 的一个小加强, 主要为了解决 OAuth 2.0 第 4, 5步授权码安全性问题. 其增强方法为:</p><ul><li>在第 1 步发起授权请求时, 客户端生成随机的 CodeVerifier，通过加密算法 (通常是 SHA-256) 计算 Code Challenge, 并携带 CodeChallenge</li><li>在第 5 步客户端请求令牌时带上 Code Verifier</li><li>在第 6 步前, 服务端会校验 Code Verifier 与 Code Challenge的匹配性</li></ul><h3 id="openid-connect">OpenID Connect</h3><p>OpenID Connect 是一个标准的身份层, 其基于 OAuth 2.0 协议构建,允许客户端验证用户身份, 以及获取用户基本的身份信息.它允许用户使用一个帐户在多个网站进行身份认证,而无需为每个网站创建新的帐户. 例如常见的 "使用 Google 账户登录"就使用了这个技术</p><p>不过要区分 OpenID Connect 与 OAuth 2.0 的区别, OpenID是借用其他账户登录某个账户, 而 OAuth 2.0是<strong>授权</strong>访问三方账户. 可以通过以下例子理解</p><ul><li>OAuth 2.0: 通过 Reddit 访问 Google Driver 的数据.在外卖小程序中调用微信中的收货地址</li><li>OpenID: 使用 Google 账户登录 Reddit. 使用微信登录外卖 App</li></ul><p>相比于传统的用户名密码认证方式, OpenID</p><ol type="1"><li>增强安全性: 用户的密码只在身份提供商 (IdP) 上进行验证,不再需要在每个应用中存储和验证, 减少了被攻击的可能性。</li><li>提升用户体验: 用户只需要记住一个帐户和密码,就可以在多个网站进行身份认证, 不再需要为每个网站创建新的帐户.</li><li>简化开发: 开发者可以专注于应用本身的开发,而将身份验证交给专门的身份提供商处理, 减轻了开发的负担。</li></ol><p>流程</p><pre class="mermaid">sequenceDiagram  participant User  participant Client  participant IdP  User->>Client: 发起登录请求  Client->>User: 重定向到 IdP  User->>IdP: 输入凭据进行身份认证  IdP->>User: 返回身份验证成功和授权码  User->>Client: 使用授权码返回  Client->>IdP: 使用授权码获取访问令牌和 ID 令牌  IdP->>Client: 返回访问令牌和 ID 令牌  Client->>IdP: 可使用访问令牌获取用户信息</pre><h3 id="saml-security-assertion-markup-language">SAML (SecurityAssertion Markup Language)</h3><p>SAML 是一种基于 XML 的开放数据验证格式,允许安全域之间交换身份验证和授权数据. 它允许用户在一个地方进行身份验证,并在另一个地方获取对资源的访问权限, 而无需再次进行身份验证. 可以将 SAML理解另一种 OpenID 实现. 但是也有不同</p><ul><li>协议层面<ul><li>数据格式: SAML 基于 XML, OpenID 基于更加简洁的 JWT.</li><li>认证流程: 在 SAML 中 IdP 会响应带上包含用户信息的断言,用户将断言发给 SP, SP 直接验证断言获取用户信息. 在 OpenID 中, SP需要使用授权码向 IdP 询问用户信息</li><li>复杂性: SAML 更加复杂强大, 提供了更多的属性, 也相对安全</li></ul></li><li>应用层面<ul><li>SAML 更多用于 B2B 场景, IdB 一般是用户所属的组织或企业,所属组织维护用户信息, 并允许用户在自己组织完成认证访问第三方企业应用. SP一般是 toB 应用 (例如 Zoom 的 SSO 登录)</li><li>OpenID 更多用于 B2C 场景, IdB 一般是大型身份验证服务商 (谷歌, FB),SP 一般是 toC 应用 (例如 reddit 的使用谷歌账户登录)</li></ul></li></ul><p>认证流程</p><pre class="mermaid">sequenceDiagram    User->>Service Provider: 请求资源    Service Provider->>User: 重定向到 IdP 进行身份验证    User->>Identity Provider: 提交身份验证信息    Identity Provider->>User: 验证成功，生成 SAML 断言    User->>Service Provider: 带有 SAML 断言的请求    Service Provider->>Service Provider: 验证 SAML 断言    Service Provider->>User: 提供资源</pre><h2 id="比较常见的方案">比较常见的方案</h2><p>基本逻辑都是客户端发送用户名密码, 服务端生成用户编码 (Session /Token), 客户端在后续请求时带上编码, 只不过编码方式, 请求方式不同罢了</p><h3 id="session-based-authentication">Session-based Authentication</h3><ul><li>sessionID 生成方式: 纯随机, 不包含用户信息</li><li>服务端验证: 服务端维护 sessionID 与用户信息的关系</li><li>存储 / 传输方式: Cookie</li></ul><p>最传统的认证方式, 用户登录成功, 浏览器下发 token 到 Cookie,每次请求的时候带上. 其与 JWT 的区别在于 JWT 的用户信息存储在 Token 中,而 Session-based Authentication 是存储在服务器中</p><h3 id="jwt">JWT</h3><ul><li>Token 生成方式: 编码方式, 用户信息的 Hash</li><li>服务端验证: 在认证时将 Token 验证解码获取用户信息</li><li>存储 / 传输方式: 前后端协商</li></ul><p>JWT (JSON Web Token) 用于安全的传输一个 JSON 对象. 由三部分组成</p><ul><li><p>头部 (Header): 一般包括令牌类型与所使用的摘要算法, 例如</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>  <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>载荷 (Payload): 包含了对用户的声明信息, 一般包括令牌发行者,过期时间, 主题. 允许发行者自定义</p></li><li><p>签名 (Signature): 对前两部分信息的加密</p></li></ul><p>JWT 是可读不可伪造的, 其头部与载荷一般是 Base64 加密的, 因此任何获取JWT 的人都可以解码, 但是由于签名部分对载荷做了摘要,而摘要算法只存储在服务端, 因此无法伪造.</p><p>在认证中, 服务端一般将用户名与过期时间放入载荷加密,之后客户端只需要携带加密后 JWT 即可.</p><h3 id="bearer-认证">Bearer 认证</h3><ul><li>sessionID 生成方式: 可以随机也可以使用 JWT 等方案</li><li>服务端验证: 生成方式不同, 服务端可能维护 sessionID与用户信息的关系</li><li>存储 / 传输方式: 前后端协商</li></ul><p>可以将 JWT 看作 Bearer 认证的一种形式, Bearer 认证从服务端获取 Token,在请求时携带, 没有更多要求...</p><h2 id="远古方案">远古方案</h2><h3 id="http-基本认证-basic-authentication">HTTP 基本认证 (BasicAuthentication)</h3><p>这是一种非常原始的认证模式,用户通过直接与浏览器对话框交互完成认证</p><figure><img src="./一些前端认证技术/base.png" alt="长这么个样子" /><figcaption aria-hidden="true">长这么个样子</figcaption></figure><p>当用户访问需要认证的资源时, 服务端会返回一个<code>401 Unauthorized</code> 的响应, 并在响应头中附带<code>WWW-Authenticate</code> 字段, 通知客户端需要进行认证. 当客户端收到401 响应后, 会出现一个对话框, 提示用户输入用户名和密码. 用户输入后,浏览器将用户名和密码拼串 (<code>user:passwd</code>) 使用 base64进行编码, 然后将这个编码后的字符串放在 Authorization 请求头中,然后重新发送请求.</p><pre class="mermaid">sequenceDiagram    Browser->>Server: 访问敏感数据    Server-->>Browser: 返回401，需要认证    Browser->>User: 弹出认证对话框    User->>Browser: 输入用户名和密码    Browser->>Server: 发送带有用户名和密码的请求    Server-->>Browser: 认证成功，返回资源    Browser->>User: 显示请求的资源</pre><p>可以看到, HTTP 基本认证</p><ul><li>并不安全: 用户名和密码不加密就发送出去了</li><li>无法保持登录: 需要用户在请求敏感资源时手动带上用户名和密码拼串(<code>user:passwd</code>) 的 base64 编码 (实际上现在浏览器会自动保存Authorization 头并在同域请求时自动带上这个头)</li><li>无法自定义登录表单, 使用浏览器原生表单</li></ul><h3 id="http-摘要认证-digest-authentication">HTTP 摘要认证 (DigestAuthentication)</h3><p>安全性加强的 HTTP 基本认证</p><ul><li>在返回 401 的时候加入一个用于加密的信息 (例如一个随机的数(nonce),一个域名(realm))</li><li>用户发送信息时. 在 Base64 编码用户名密码后,再使用服务端给的加密信息加密一次</li><li>服务端收到信息后将存储在后台的用户名密码做一次一样的加密,对于加密值</li></ul><h2 id="非技术方案">非技术方案</h2><h3 id="multi-factor-authentication-mfa">Multi-Factor Authentication(MFA)</h3><p>多步认证~, 没啥好说的</p><h2 id="总结">总结</h2><table style="width:100%;"><colgroup><col style="width: 32%" /><col style="width: 8%" /><col style="width: 8%" /><col style="width: 8%" /><col style="width: 11%" /><col style="width: 11%" /><col style="width: 8%" /><col style="width: 11%" /></colgroup><thead><tr class="header"><th>技术</th><th>安全性</th><th>易用性</th><th>跨平台</th><th>用户体验</th><th>实现难度</th><th>扩展性</th><th>数据隐私</th></tr></thead><tbody><tr class="odd"><td>OpenID Connect</td><td>高</td><td>一般</td><td>良好</td><td>良好</td><td>高</td><td>良好</td><td>高</td></tr><tr class="even"><td>OAuth2 PKCE</td><td>高</td><td>一般</td><td>良好</td><td>良好</td><td>高</td><td>良好</td><td>高</td></tr><tr class="odd"><td>WebAuthn</td><td>高</td><td>一般</td><td>一般</td><td>良好</td><td>高</td><td>良好</td><td>高</td></tr><tr class="even"><td>SAML</td><td>高</td><td>一般</td><td>良好</td><td>一般</td><td>高</td><td>良好</td><td>高</td></tr><tr class="odd"><td>Multi-Factor Auth (MFA)</td><td>高</td><td>一般</td><td>良好</td><td>一般</td><td>一般</td><td>良好</td><td>高</td></tr><tr class="even"><td>OAuth</td><td>一般</td><td>良好</td><td>良好</td><td>良好</td><td>一般</td><td>良好</td><td>一般</td></tr><tr class="odd"><td>Bearer Tokens</td><td>一般</td><td>良好</td><td>良好</td><td>良好</td><td>一般</td><td>良好</td><td>一般</td></tr><tr class="even"><td>JWT</td><td>一般</td><td>良好</td><td>良好</td><td>良好</td><td>一般</td><td>良好</td><td>低</td></tr><tr class="odd"><td>Digest Authentication</td><td>一般</td><td>一般</td><td>良好</td><td>一般</td><td>高</td><td>一般</td><td>一般</td></tr><tr class="even"><td>Session-based Auth</td><td>一般</td><td>良好</td><td>良好</td><td>良好</td><td>低</td><td>一般</td><td>一般</td></tr><tr class="odd"><td>HTTP Basic Auth</td><td>低</td><td>良好</td><td>良好</td><td>一般</td><td>低</td><td>一般</td><td>低</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">最近被网站唤醒 Windows Hello 震惊到了, 简单了解一下这块的技术</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="安全" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="安全" scheme="https://blog.liukairui.me/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>前端安全策略总结</title>
    <link href="https://blog.liukairui.me/article/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.liukairui.me/article/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E6%80%BB%E7%BB%93/</id>
    <published>2023-04-05T16:00:03.000Z</published>
    <updated>2023-04-05T16:00:03.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c77527f16d0cef26b975021417675d416e5f41d6154514e40275542a3b79f058"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">文章被加密了, 请输入密码查看.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">🔒浏览器的安全限制越来越复杂且零散, 各大浏览器厂商的安全限制还不兼容, 确实需要详细了解一下这些鬼安全限制了</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="安全" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="加密文章" scheme="https://blog.liukairui.me/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    
    <category term="安全" scheme="https://blog.liukairui.me/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>ShadowDOM的坑</title>
    <link href="https://blog.liukairui.me/article/ShadowDOM%E7%9A%84%E5%9D%91/"/>
    <id>https://blog.liukairui.me/article/ShadowDOM%E7%9A%84%E5%9D%91/</id>
    <published>2023-04-05T16:00:02.000Z</published>
    <updated>2023-04-05T16:00:02.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>CSS 隔离问题</p><ul><li>可继承 ShadowDOM提供了样式隔离, 但是 ShadowDOM 还是会继承外部Document Body 定义的可继承 <code>style</code>, 可以使用<code>all: initial</code> 隔离</li><li>组件库 组件库的样式可能由于 CSS 隔离无法被应用</li><li>Tailwind 等基于 <code>rem</code> 的 CSS 解决方案 由于<code>rem</code> 是可继承的, 因此, Tailwind 中的相对值都会应用最外部的<code>rem</code></li></ul></li><li><p>open &amp; close</p><ul><li>如果将模式设置为 <code>open</code>, 那么主文档可以通过访问组件的<code>.shadowRoot</code> 属性来访问组件内部的 ShadowDOM,这意味着开发者可以在主文档中修改组件内部的代码.</li><li>如果将模式设置为 <code>close</code>, 那么主文档将无法通过<code>.shadowRoot</code> 属性访问组件内部的 ShadowDOM.</li></ul><p>因此, 当我们在 <code>closed</code> 模式的 ShadowDOM中使用了某些组件库, 这些组件库如果没有在 ShadowDOM 内部的监听,那么这些监听大概率会失效</p></li><li><p>事件冒泡被重定向</p><p>为了保护内部 Element 不被外部获取, 当事件触发冒泡时, 外部EventHandler 无法获取到内部 target, 例如下面例子中两个按钮分别在 closed与 open ShadowDOM, 但是外部的 onClick 获取到的 target 都是被重定向后的Container</p><iframe src="https://codesandbox.io/embed/stoic-swartz-hw8u8f?expanddevtools=1&amp;fontsize=14&amp;hidenavigation=1&amp;theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="stoic-swartz-hw8u8f" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe></li><li><p>CSP 问题</p><p>ShadowDOM 内部的元素依然遵守外部 document 定义的 CSP 规则, 无法通过meta 修改 CSP</p></li></ul>]]></content>
    
    
    <summary type="html">ShadowDOM 虽然可以将内外部 CSS 与 JS 隔离开, 但是也存在一些由此产生的小坑</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ShadowDOM" scheme="https://blog.liukairui.me/tags/ShadowDOM/"/>
    
    <category term="插件开发" scheme="https://blog.liukairui.me/tags/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>CSS样式隔离方案</title>
    <link href="https://blog.liukairui.me/article/CSS%E6%A0%B7%E5%BC%8F%E9%9A%94%E7%A6%BB%E6%96%B9%E6%A1%88/"/>
    <id>https://blog.liukairui.me/article/CSS%E6%A0%B7%E5%BC%8F%E9%9A%94%E7%A6%BB%E6%96%B9%E6%A1%88/</id>
    <published>2023-04-05T16:00:01.000Z</published>
    <updated>2023-04-05T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们想让保护一个元素不被外部 CSS 所污染时, 有如下方案</p><ol type="1"><li><p>让元素不被选中</p><ol type="1"><li>覆写所有可继承样式</li><li>使用 custom elements 自定义标签名防止被选中</li></ol></li></ol><p>可用是可用, 但是 css 会写起来很乱</p><ol start="2" type="1"><li>采用 ShadowDOM</li></ol><p>ShadowDOM 看起可以在 HTML 中产生一个隔离环境,但是可继承的样式并不会被隔离. 例如,</p><ul><li><p>在外部 css 中定义</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html</span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 100px<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在 ShadowDOM 中写入 css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:root, :host</span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 50px<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在 ShadowDOM 中使用</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">span</span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span> <span class="token comment">/* 最后得到的是 100px */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>最后我们 ShadowDOM 中的 <code>font-size</code> 为 <code>100px</code>,在 Element Panel 中可以看到, ShadowDOM 继承了 Body 的样式... 并且<code>:root</code> 选择器失效了...</p><ol start="3" type="1"><li>iframe</li></ol><p>最彻底的解决方案, 但是 iframe 并不好用</p><ol start="4" type="1"><li><code>all: initial</code></li></ol><p>这个 css 可以重置来自上级页面可继承的 CSS,但是当内部元素恰好命中了外部 CSS 选择器时仍然会被修改样式</p><p>综上, 最佳方案似乎是 <code>all: initial</code> + ShadowDOM:<code>all: initial</code> 阻止了宿主网页的样式侵入到 ShadowDOM 内部, 而ShadowDOM 则阻止了宿主网页里相同类名的样式应用到内部,它们俩正好形成了一个互补.</p>]]></content>
    
    
    <summary type="html">原以为 ShadowDOM 可以直接解决掉样式隔离问题, 但是实际上 ShadowDOM 并不可靠</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://blog.liukairui.me/tags/CSS/"/>
    
    <category term="ShadowDOM" scheme="https://blog.liukairui.me/tags/ShadowDOM/"/>
    
    <category term="插件开发" scheme="https://blog.liukairui.me/tags/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>媒体元数据相关方法</title>
    <link href="https://blog.liukairui.me/article/%E5%AA%92%E4%BD%93%E5%85%83%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://blog.liukairui.me/article/%E5%AA%92%E4%BD%93%E5%85%83%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</id>
    <published>2023-03-02T16:00:01.000Z</published>
    <updated>2023-03-02T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直好奇 chrome /操作系统是如何获取到用户网站正在播放的媒体信息(标题, 作者, 播放进度,专辑封面)并提供类似上一首下一首 API 的</p><p><img src="./媒体元数据相关方法/chrome_player.png" style="zoom:50%;" /></p><p><img src="./媒体元数据相关方法/macos.jpg" style="zoom: 25%;" /></p><p>曾经有了解过 Linux 上基于 D-Bus 的 <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvTVBSSVM=">mpris<i class="fa fa-external-link-alt"></i></span>协议大概可以猜到系统可以通过类似的协议获取到浏览器上报的媒体信息,但是一直不明白浏览器是怎么获取到网站播放的媒体信息的.</p><h2 id="video-标签上的元数据"><code>&lt;video&gt;</code>标签上的元数据</h2><p>考虑到 <code>&lt;video&gt;</code> 有一个<code>onloadedmetadata</code> 回调, 感觉 <code>&lt;video&gt;</code>上肯呢个存着视频的元数据, 于是读取 <code>&lt;video&gt;</code> 的属性,发现上面<strong>只有播放进度, 总时长, 视频长宽</strong>这几个信息.视频的标题, 作者, 专辑名并没有</p><h2 id="从无障碍角度入手">从无障碍角度入手</h2><p>对于视觉障碍用户,网站在播放视频的时候一定做了特殊照顾(例如只展示封面, 自动朗读字幕) 在MDN 上找到了 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYlZUVF9BUEk=">WebVTT<i class="fa fa-external-link-alt"></i></span>该文件<strong>标识了媒体标题,</strong> 但是这似乎并不是一套强制标准,很多网站都没有使用</p><h2 id="从-api-角度入手">从 API 角度入手</h2><p>我们只是想知道 JS 上报媒体信息的协议名字是什么,于是我尝试爬取包含视频元信息的请求报文, 如果一个包里面只有媒体元数据,而这个 API 又是有语义的(例如<code>example.com/api/video/xxx-api/</code>) 那么大概能猜到存在一个<code>xxx</code> 协议用于描述元数据. 但是没有收获</p><h2 id="从-chromium-设计文档入手">从 Chromium 设计文档入手</h2><p>既然是 Chromium 的功能, Chromium 一定会有关于这方面的介绍. 在 <ahref="chromium.org/developers/design-documents/">Chromium项目的开发者设计文档索引</a> 搜索 <code>media</code>(因为视频音频都可以被检测, 所以不能搜索 <code>video</code> /<code>audio</code>) 找到 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hyb21pdW0ub3JnL2RldmVsb3BlcnMvZGVzaWduLWRvY3VtZW50cy9leHRlbnNpb25zL3Byb3Bvc2VkLWNoYW5nZXMvYXBpcy11bmRlci1kZXZlbG9wbWVudC9tZWRpYS1nYWxsZXJ5Lw==">MediaGallery<i class="fa fa-external-link-alt"></i></span>这个 feature, 在介绍中可以看到</p><blockquote><p>Overview Media and metadata access API. ...</p></blockquote><p>在 MDN 上以 <code>Media and metadata access API</code>为关键字就可以找到 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01lZGlhTWV0YWRhdGE=">MediaMetadata<i class="fa fa-external-link-alt"></i></span>这个 API.</p><p>这就是我们想要的东西, 他包含了: 标题, 艺术家, 组, 创建者, 专辑名,媒体相关的图片(一般是专辑封面)数组</p><p>一下是一个 metadate 样例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">navigator<span class="token punctuation">.</span>mediaSession<span class="token punctuation">.</span>metadata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediaMetadata</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Unforgettable"</span><span class="token punctuation">,</span>  <span class="token literal-property property">artist</span><span class="token operator">:</span> <span class="token string">"Nat King Cole"</span><span class="token punctuation">,</span>  <span class="token literal-property property">album</span><span class="token operator">:</span> <span class="token string">"The Ultimate Collection (Remastered)"</span><span class="token punctuation">,</span>  <span class="token literal-property property">artwork</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/96x96"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"96x96"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/128x128"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"128x128"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/192x192"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"192x192"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/256x256"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"256x256"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/384x384"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"384x384"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/512x512"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"512x512"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更多功能">更多功能</h2><p>mediaSession 还可以控制播放位置, 切换音轨, 挂断电话, 切换麦克风,开启摄像头</p><p>参考: https://web.dev/media-session/</p>]]></content>
    
    
    <summary type="html">一些与媒体元信息相关的 BOM API</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化总结</title>
    <link href="https://blog.liukairui.me/article/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.liukairui.me/article/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</id>
    <published>2023-02-22T16:00:01.000Z</published>
    <updated>2023-06-04T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a9f46a898252c8fa04bee20b8bd230ab5abb6cccdee26311a9dd2b5b9ee0c6cb"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">文章被加密了, 请输入密码查看.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">🔒各种各样性能优化的奇淫异巧, 不包含框架层面的优化</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="性能优化" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="加密文章" scheme="https://blog.liukairui.me/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    
    <category term="性能优化" scheme="https://blog.liukairui.me/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>一些 React 的 Tips</title>
    <link href="https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BReact%E7%9A%84Tips/"/>
    <id>https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BReact%E7%9A%84Tips/</id>
    <published>2023-02-12T16:00:01.000Z</published>
    <updated>2023-02-12T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础">基础</h2><ul><li><p><strong>修改数组类型的 state</strong></p><ul><li><p>💩拷贝-修改-回填</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// push 会修改原数组所以必须复制</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> items <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>👍️合并-回填</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// concat 并不会修改原数组</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong><code>state</code> &amp; <code>props</code>异步的</strong></p><ul><li><p>💩直接使用 <code>state</code> &amp; <code>props</code> 做更新</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>increment<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>👍️使用函数更新</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">counter</span><span class="token operator">:</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> props<span class="token punctuation">.</span>increment<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong><code>useState</code>初始值何时采用函数作为入参</strong></p><ul><li><p>当初始值需要被计算时</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 💩 在每次渲染组件时, reduce 都会被计算一遍结果然后被丢弃</span><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  props<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍️ 在每次渲染组件时, 都会声明一个匿名函数, 但是函数不会执行, 不会计算 reduce</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始值是很复杂对象时</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">,</span> k3<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> k1000<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 💩 在每次渲染组件时, 都要花大力气一个很大的对象, 然后丢弃</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">,</span> k3<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> k1000<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍️ 函数的声明耗时与函数内部的代码量不相关</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong><code>useState</code> &amp;<code>useRef</code></strong></p><ul><li><p>区别: <code>useState</code> 的值在每个 <code>render</code>中都是独立存在的, 而 <code>useRef.current</code>则更像是相对于render函数的一个全局变量, 每次他会保持 <code>render</code>的最新状态. (<code>useRef</code> 相当于创建了类组件的成员变量)</p></li><li><p>场景</p><ul><li>变量维护 UI 状态, 更新时需要刷新 UI: <code>useState</code></li><li>变量不维护 UI 状态, 更新时不需要刷新 UI: <code>useRef</code></li><li>变量不更新: <code>const [foo] = useState(initValue)</code></li></ul></li><li><p>陷阱: 不要使用 <code>ref</code> 非幂等(增量)的更新<code>ref</code>. 在 StrictMode 的 Dev 环境下, 组件会被渲染两次,以检查组件的幂等性, 并且不提供 Warning...</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ref1<span class="token punctuation">.</span>current <span class="token operator">=</span> ref1<span class="token punctuation">.</span>current <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 💩 会执行两次相当于 + 2</span>ref1<span class="token punctuation">.</span>current <span class="token operator">=</span> someState <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 👍️ state 连续渲染两次值并不会变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>不要吝啬 <code>setState</code></p><p>与 Vue 不同, React 并不会在数据被 Set 后同步刷新数据, 而是会合并更新,所以同步的多个 <code>setState</code> 不会造成性能问题</p></li><li><p>不要在组件中过度使用 <code>useEffect</code></p><p>将这层逻辑抽离成自己的 <code>Hook</code>, 方便复用, 方便阅读.否则光读 <code>useEffect</code> 都读不完, <code>useEffect</code>也可以让代码更加工整, 可读性也更高</p></li><li><p>强调数据流向, 单一事实来源</p><ul><li>尽量让响应式数据的数据来源变简单</li><li>没有了自动依赖手机, 要理清楚状态发生变化的原因,数据变化会引发哪些状态变化</li><li>强调数据的提供与消费, 我向外暴露什么样的数据,什么组件会消费我的数据</li></ul></li><li><p>在 <code>setState</code> 的时候注意有没有 Effect 依赖于这个<code>State</code>, 是否会造成循环更新(还是数据流问题)</p></li><li><p><code>useEffect</code> 的 <code>shadow</code> 比较</p><p>在写 <code>useEffect(()=&gt;&#123;&#125;, [])</code> 时第二个参数是一个数组,当数组内元素变化时会触发重新执行,但是这里检测变化的方法是对数组中元素<strong>进行 shadow 比较</strong>,并不是像 Vue 一样进行依赖追踪, 例如 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token parameter">vals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>vals<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre> 每次渲染时传入的<code>vals</code> 都是新 <code>vals</code>, react 在对比时就会发现<code>vals</code> 不同, 触发 <code>rerender</code></p><p>可以通过如下方法修复这个问题 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> vals<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每次对比的都是 vals 数组内部的值</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>vals<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p><strong>千万注意 react 只是对数组进行 shadow 比较,不是对我们传入的变量做依赖追踪</strong></p></li><li><p>Hook 的闭包陷阱</p><p>只要是要在 Hook 中使用外部的东西就要注意陷阱, 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">consoleStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">consoleStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跑起来没毛病, 但是如果后期将代码改成</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>store<span class="token punctuation">,</span> setStore<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">function</span> <span class="token function">consoleStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token function">consoleStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就完蛋了, 因为 useEffect 拿到的永远是最开始定义的<code>consoleStore</code>, 其中的 <code>store</code>也永远是第一次渲染的 <code>store</code>. 为了防止出这种问题,一定要装这个包 <span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXNsaW50LXBsdWdpbi1yZWFjdC1ob29rcw==">eslint-plugin-react-hooks<i class="fa fa-external-link-alt"></i></span></p></li><li><p>减小 <code>useEffect</code> 的体积</p><p>俺理解 React 所谓的函数式并不是严格的函数式, 而是形式上的函数式.如果我写一个组件, 里面没有 <code>useEffect</code>, 只要事实来源不变,整个 View 就不变, 事实来源变了, View 可以符合预期的变化. 当然,不可能所有的组件都是纯函数的, 我们可以用一些 Hooks 在 Hooks 内部加入<code>Effect</code> 代码, 但是向外部表现为一个自动化的事实来源,当状态发生变化时对 View 做一定程度的精修. 在外层组件看来,代码并没有副作用, 外层组件也可以忘记 Hooks 内部存在副作用,像着纯函数一样使用. 例如这样的函数式组件就看起来很舒服</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>display<span class="token punctuation">,</span> disabled<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 事实来源是 props</span>  <span class="token comment">// working 是一个额外的属性, 但是他不是事实来源, 只是算出来的数据</span>  <span class="token keyword">const</span> working <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>display <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>disabled<span class="token punctuation">,</span> <span class="token punctuation">[</span>display<span class="token punctuation">,</span> disabled<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// useLocalStorge 是一个 Hook, 内部通过 useEffect 获取数据, 同步修改</span> <span class="token comment">// 但是作为视图层, 我完全可以忽略这个问题, 从我的角度看这就是一个 Storgae 的事实来源, 从外部看这就是一个 state, 就是一个数据来源. 函数副作用这些脏活, 已经被 Hook 实现时候帮忙处理掉了</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>storage<span class="token punctuation">,</span> setStorage<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cookie'</span><span class="token punctuation">,</span> <span class="token string">'tocken'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">  </span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以, 俺觉得, 好的代码的事实来源一定是 <code>props</code>,<code>useXXHook</code> 而 <code>useMemo</code> 只是做状态桥接的,<code>useState</code> 只是帮忙存储数据的,并不是发生变化的事实来源</p></li><li><p>增加一个 <code>useEffect</code> 依赖的时候要想:这个依赖会不会在每次 render 的时候变化造成循环依赖,这个依赖变化的时候函数内部产生的内容应不应该变化</p></li><li><p><code>useState</code> 可以传引用类型</p><p>如果 <code>useState</code> 传入一个引用类型, 在 <code>rerender</code>时候引用值<strong>并不会变</strong>, 例如下面的代码会一直输出<code>false</code></p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">let</span> demos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 存储每次 rerender 时候的函数</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>demo<span class="token punctuation">,</span> setDemo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入一个函数</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> setFoo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入一个常量用于触发更新</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">// 每秒钟 rerender 一下</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setFoo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>foo<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  demos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将每次 rerender 的函数放在 demos 中</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demos<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d <span class="token operator">!==</span> demos<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查函数引用是否发生变化</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>foo<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>useMemo</code> 的使用场景</p><p>当成 Vue 的 <code>computed</code> 用, 能用 <code>useMemo</code>就不要用 <code>useState</code>, <strong>减少可变数据, 减少数据源,尽可能减少事实来源</strong></p></li><li><p><code>useCallback</code> 的使用场景</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>deps<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于 <code>foo</code>, 每次 rerender 时候 <code>foo</code>的引用值都会发生变化.</p><p>对于 <code>bar</code>, 每次 rerender 事后, 只要 <code>deps</code>不发生变化, <code>bar</code> 的引用值不变.</p><p>那么 <code>useCallback</code> 有什么用呢? 可以节约函数定义? 因为只要<code>deps</code> 不变, 返回的函数不变. 看起来我们没有定义新的函数,但是</p><p><strong><code>useCallback</code> 并不会节约函数定义的开销, 因为在调用<code>useCallback</code> 之前, 我们已经声明了这个函数</strong></p><p>为什么用 <code>useCallback</code> 而不是直接定义, 或者使用<code>useState</code></p><p><code>useState</code> + <code>useEffect(()=&gt;&#123;&#125;, [deps])</code>当然可以, 但是 <code>useCallback</code> 显然简洁</p><p>直接定义并不会影响当前组件的调用, 但是如果该函数作为<code>props</code> 传给了其他组件, 其他组件使用了 <code>memo()</code>,只要 <code>props</code> 不变组件就不 rerender, 但是你传给组件一个函数,这父组件每次 rerender 就会导致函数引用变化, 就会导致子组件一直<code>rerender</code>, 这时 <code>useCallback</code> 就变得很有用,所以</p><p><strong>给向外提供函数的时候尽量 <code>useCallback</code>一下</strong></p></li><li><p><code>StrickMode</code> 严格模式</p><p><span class="exturl" data-url="aHR0cHM6Ly96aC1oYW5zLnJlYWN0anMub3JnL2RvY3Mvc3RyaWN0LW1vZGUuaHRtbCNpZGVudGlmeWluZy11bnNhZmUtbGlmZWN5Y2xlcw==">奇奇怪怪<i class="fa fa-external-link-alt"></i></span></p></li></ul>]]></content>
    
    
    <summary type="html">菜菜子</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://blog.liukairui.me/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>WebAnimation 与 FLIP 技术</title>
    <link href="https://blog.liukairui.me/article/WebAnimation%E4%B8%8EFLIP%E6%8A%80%E6%9C%AF/"/>
    <id>https://blog.liukairui.me/article/WebAnimation%E4%B8%8EFLIP%E6%8A%80%E6%9C%AF/</id>
    <published>2023-02-08T16:00:01.000Z</published>
    <updated>2023-02-08T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web-animations-api">Web Animations API</h2><p>类似于 CSS in JS 的 animation 实现.</p><ul><li><p>基本使用</p><ul><li><p>定义关键帧</p><p>使用对象数组的模式定义关键帧</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> aliceTumbling <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">'rotate(0) translate3D(-50%, -50%, 0)'</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#000'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#431236'</span><span class="token punctuation">,</span> <span class="token literal-property property">offset</span><span class="token operator">:</span> <span class="token number">0.3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">'rotate(360deg) translate3D(-50%, -50%, 0)'</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#000'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>offset</code> 指定关键帧出现在动画位置的百分比,首尾对象默认 <code>offset = 0/1</code></p><p>若不指定 <code>offset</code> 则直接选取中点作为 <code>offset</code>,例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 第一个元素, offset = 0</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">offset</span><span class="token operator">:</span> <span class="token number">0.4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 手动指定, offset = 0.4</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 未指定, 均分为 0.4 + (1-0.4)/3*1 = 0.6</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 未指定, 均分为 0.4 + (1-0.4)/3*2 = 0.8</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span> <span class="token comment">// &lt;- 最后一个元素, offset = 1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义动画执行模式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> aliceTiming <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>  <span class="token literal-property property">iterations</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行动画</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> anim <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>aliceTumbling<span class="token punctuation">,</span> aliceTiming<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>Hooks</p><ul><li>下面的 <code>anim</code> 就是 <code>elem.animate()</code>的返回值</li><li><code>anim.play() / anim.pause()</code>: 执行 / 暂停动画. 注意,动画在 <code>animate()</code> 的时候回自动执行, 如需手动控制需要立刻<code>pause</code> 一下</li><li><code>anim.playbackRate</code>: 动画执行速率(可以为负数),可写属性</li><li><code>anim.currentTime</code>: 动画执行时间, 可写属性</li><li><code>anim.effect.timing.duration</code>: 动画持续时间, 类似属性见<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYl9BbmltYXRpb25zX0FQSS9Vc2luZ190aGVfV2ViX0FuaW1hdGlvbnNfQVBJ">MDN<i class="fa fa-external-link-alt"></i></span></li><li><code>anim.finish()</code>: 动画结束</li><li><code>anim.cancel()</code>: 终止动画</li><li><code>Animation.reverse()</code>: 反向播放动画</li><li><code>document.getAnimations()</code>: 获取全部 Web Animation注册动画</li><li><code>anim.onfinish(callback)</code>: 动画结束回调</li><li><code>anim.oncancel(callback)</code>: 动画取消回调</li></ul></li></ul><h2 id="flip-技术">FLIP 技术</h2><p>当我们需要对 DOM 的位置做调整但是又不知道目标位置的具体时可以用 FLIP实现带有过渡动画的位置调整.</p><p>例如, 有 <code>a b c d</code> 元素, 我们希望将元素变为<code>d c b a</code>. 可以直接通过 DOM API 调整位置, 但是无法实现动画.FLIP 的做法是先将元素的起始位置记下来, 再调整到目标位置, 再通过 CSS将元素调到原为止, 最后通过动画完成过渡</p><ul><li><strong>First</strong>：在任何事情发生之前，记录将要转换的元素的当前（即第一）位置和尺寸。您可以使用<code>element.getBoundingClientRect()</code>它，如下所示。</li><li><strong>Last</strong>：执行使过渡瞬间发生的代码，并记录元素的最终（即last）位置和尺寸。</li><li><strong>Invert</strong>：由于元素位于最后一个位置，我们想通过<code>transform</code>修改其位置和尺寸来创建它位于第一个位置的错觉。这需要一点数学运算，但并不难。</li><li><strong>Play</strong>：元素反转（并假装在第一个位置），我们可以通过将其设置为<code>transform</code>来将其移回到最后一个位置<code>none</code>。</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly92Mi52dWVqcy5vcmcvdjIvZ3VpZGUvdHJhbnNpdGlvbnMuaHRtbCNMaXN0LU1vdmUtVHJhbnNpdGlvbnM=">vue2 文档<i class="fa fa-external-link-alt"></i></span>中提到的效果</p><iframe src="https://codesandbox.io/embed/github/vuejs/v2.vuejs.org/tree/master/src/v2/examples/vue-20-list-move-transitions?fontsize=14&amp;hidenavigation=1" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="vue-20-list-move-transitions" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h2 id="动画实现的比较">动画实现的比较</h2><p>动画的实现方法:</p><ul><li>纯 CSS (animation / transition) with GPU</li><li>纯 JS (requestAnimationFrame &amp; style)</li><li>WebAnimation API</li></ul><p>其中</p><ul><li><p>JS 实现的动画会被同步代码阻塞. 但是更加灵活</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;- request 卡死</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>不使用 GPU 渲染的 CSS 动画会被同步代码阻塞, 采用 GPU 的不阻塞.只要动画涉及的属性不引起 reflow 动画的采样就会交给 GPU 处理.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#alice_css</span> <span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> cssRound infinite 3s linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> cssRound</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token comment">/* &lt;- left 会引发重绘, 此时动画的渲染是由 CPU 完成的, 如果执行 while(true); 动画就会卡死*/</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#alice_css</span> <span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> cssRound infinite 3s linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> cssRound</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* &lt;- rotateZ 不会引发重绘, 此时动画的渲染是由 GPU 完成的, 如果执行 while(true); 动画不会卡死*/</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此, 能使用 CSS 动画的就不要用 JS 动画</p></li><li><p>WebAnimation API: 通过 JS 的方式定义动画, 最终会将动画效果通过CSS 动画完成, 其对同步 JS 代码阻塞的表现与 CSS 动画一致</p><p>这个 API 既保留了 JS 的灵活性(控制动画执行, 动画执行观测, 与JS交互),同时使用类似 CSS 的方式执行动画, 减少了同步代码对动画的影响</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> aliceJs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'alice_js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> aliceRoundJs <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">'rotateZ(0deg)'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 同步代码阻塞也卡死</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">'rotateZ(360deg)'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> aliceTimeJs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    <span class="token literal-property property">iterations</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  aliceJs<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>aliceRoundJs<span class="token punctuation">,</span> aliceTimeJs<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> aliceJs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'alice_js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> aliceRoundJs <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'0'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 同步代码阻塞也不卡死</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'300px'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> aliceTimeJs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>  <span class="token literal-property property">iterations</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>aliceJs<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>aliceRoundJs<span class="token punctuation">,</span> aliceTimeJs<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">一些动画相关的魔法</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="动画" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%8A%A8%E7%94%BB/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="性能" scheme="https://blog.liukairui.me/tags/%E6%80%A7%E8%83%BD/"/>
    
    <category term="动画" scheme="https://blog.liukairui.me/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Chrome DevTool Console APIs</title>
    <link href="https://blog.liukairui.me/article/ChromeDevToolConsoleAPIs/"/>
    <id>https://blog.liukairui.me/article/ChromeDevToolConsoleAPIs/</id>
    <published>2023-02-02T16:00:01.000Z</published>
    <updated>2023-02-02T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="console-apis">Console APIs</h2><blockquote><p>来自: https://developer.chrome.com/docs/devtools/console/api</p><p>以下插件可在 JavaScript 代码中使用, 非 DevTools 专有 API</p></blockquote><ul><li><p><code>console.assert(assertion, obj1[, obj2...])</code>: 传入一个boolean 若为假则抛出异常</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">number</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> errorMsg<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>console.count([label])</code>: 输出 label 被放入 count执行的次数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// default: 1 (不写 label 就是 default)</span>console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">'coffee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// coffee: 1</span>console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">'coffee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// coffee: 2</span>console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// default: 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>console.countReset([label])</code>: 重置一个 count</p></li><li><p><code>console.debug / info / error / warn</code>: 与<code>console.log</code> 用法相同, 但等级不同</p></li><li><p><code>console.dir()</code>: 打印对象</p></li><li><p><code>console.dirxml(xml)</code>: 打印 XML 对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">dirxml</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>console.table</code>: 打印表格</p></li><li><p><code>console.group*</code>: 一系列打印可折叠日志的方法</p></li><li><p><code>console.time([label]) / console.timeEnd([label])</code>:计时</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> square <span class="token operator">=</span> i <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>console.trace()</code>: 打印当前调用栈</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">first</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">second</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">third</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">third</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">fourth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">fourth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="console-实用-apis">Console 实用 APIs</h2><blockquote><p>内容来自:https://developer.chrome.com/docs/devtools/console/utilities</p><p>以下 API 在 JS 中不可用, 仅限 DevTool 下使用</p></blockquote><ul><li><p><code>$_</code>: 返回最近计算的表达式值</p></li><li><p><code>$0-$4</code>: 返回最近 1 - 5 个 Element面板选中的元素</p></li><li><p><code>$(selector, startNode)</code>: 选中一个元素, 相当于<code>document.querySelector(selector)</code>, 其中<code>startNode</code> 为检索的根节点. 注意<strong>这不是jQuery</strong></p></li><li><p><code>$$(selector, startNode)</code>: 选中元素, 相当于<code>document.querySelectorAll(selector)</code>, 其中<code>startNode</code> 为检索的根节点. 注意<strong>这不是jQuery</strong></p></li><li><p><code>$x(selector)</code>: 通过 <code>xpath</code> 选中元素, 例如<code>$x("//p")</code></p></li><li><p><code>copy(object)</code>将指定对象的字符串表示形式复制到剪贴板</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">copy</span><span class="token punctuation">(</span>$0<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>debug(fn) / undebug(fn)</code>: 调试函数,当函数被调用时中断执行并跳转源代码面板</p></li><li><p><code>dir / dirxml / key / value</code>: 和<code>console.*</code> 一样, 只不过是做了 preclude</p></li><li><p><code>inspect(object / function)</code>: 若为 Element 则在Element 面板选中元素. 若为 function 则在源代码中显示函数</p></li><li><p><code>getEventListeners(element)</code>: 获取 Element的所有事件监听.</p></li><li><p><code>keys(object) / values(object)</code>: 获取对象的 key /value</p></li><li><p><code>monitor(fn) / unmonitor(fn)</code>:当函数被调用时输出函数名与调用参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">monitor</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// function sum called with arguments: 1, 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>monitorEvents(element, stirng[] | string) / unmonitorEvents(object[, events])</code>:监听对象的事件被触发, 触发后输出事件与 <code>event</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">monitorEvents</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token string">"scroll"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// resize Event &#123;isTrusted: true, type: 'resize', target: Window, currentTarget: Window, eventPhase: 2, …&#125;</span><span class="token function">monitorEvents</span><span class="token punctuation">(</span>$0<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>profile([label]) / profileEnd([label])</code>: 开启 /关闭一个 JavaScript 性能分析. 关闭后可在 DevTool 的 JavaScript性能剖析器查看分析内容. <strong>支持同时开多个分析器</strong></p></li><li><p><code>queryObjects(Constructor)</code>:返回一个构造函数的所有实例的<strong>类数组</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">queryObjects</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token comment">//Array(20)</span><span class="token comment">//0: Promise &#123;&lt;pending>&#125;</span><span class="token comment">//1: Promise &#123;&lt;pending>&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">一些 Concole API 以及一些只有在 Chrome DevTool Console 下可用的魔法</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="DevTool" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/DevTool/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="DevTool" scheme="https://blog.liukairui.me/tags/DevTool/"/>
    
    <category term="调试" scheme="https://blog.liukairui.me/tags/%E8%B0%83%E8%AF%95/"/>
    
    <category term="chrome" scheme="https://blog.liukairui.me/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>奇怪的 DOM API</title>
    <link href="https://blog.liukairui.me/article/%E5%A5%87%E6%80%AA%E7%9A%84DOMAPI/"/>
    <id>https://blog.liukairui.me/article/%E5%A5%87%E6%80%AA%E7%9A%84DOMAPI/</id>
    <published>2023-01-18T16:00:01.000Z</published>
    <updated>2023-01-18T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="node-element">Node &amp; Element</h2><ul><li><p><strong>两者关系</strong>: Element 是 Node 的子类</p></li><li><p><strong>区分方法</strong>: 一个简易的区分 Node 和 Element的方法是: <strong>所有按照标签语法书写的元素都是 Element</strong>.依照这个规则,</p><ul><li><p>以下节点都是不是 Element 而是 Node</p><ul><li><p>Text Node: <code>"I am a text node"</code></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0NEQVRBU2VjdGlvbg==">CDataSection Node<i class="fa fa-external-link-alt"></i></span>:<code>&lt;![CDATA[  &lt; &gt; &amp; ]]&gt;</code></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Byb2Nlc3NpbmdJbnN0cnVjdGlvbg==">ProcessingInstruction Node<i class="fa fa-external-link-alt"></i></span>:<code>&lt;?xml-stylesheet type="text/css" href="rule.css"?&gt;</code></p></li><li><p>Comment Node: <code>&lt;!-- I am comment--&gt;</code></p></li><li><p>Document Type Node: <code>&lt;!doctype html&gt;</code></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0RvY3VtZW50RnJhZ21lbnQ=">DocumentFragment Node<i class="fa fa-external-link-alt"></i></span>: <code>#document</code></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0F0dHI=">AttributeNode<i class="fa fa-external-link-alt"></i></span>: <code>class="dmeo"</code></p></li></ul></li><li><p>以下节点是 Element</p><ul><li>Element Node</li><li>Document Node</li></ul></li></ul><p>可以采用 <code>node instanceof Node</code>,<code>node instanceof Element</code> 判断节点类型</p><p>也可以采用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL05vZGUvbm9kZVR5cGU=">nodeType<i class="fa fa-external-link-alt"></i></span>判断</p></li><li><p><strong>property 区别</strong></p><ul><li><p><strong><code>childNodes</code> &amp;<code>children</code></strong></p><p>后者只能获取子 <code>Element</code> 不能获取非 Element 的 Node.前者返回的是 <code>NodeList</code> 后者返回的是<code>HTMLCollection</code>. <code>HTMLCollection</code>没有任何数组方法, 例如 <code>map()</code>, <code>find()</code>,<code>forEach()</code> 等等. 但是NodeList确实有 <code>forEach()</code>方法. 这是它唯一拥有的数组方法. <code>HTMLCollection</code>总是实时更新.</p></li><li><p><strong><code>firstChild</code> &amp;<code>lastChild</code></strong> 返回的 <code>NodeList</code></p></li><li><p><strong><code>getElement*</code></strong> 返回的是<code>HTMLCollection</code></p><p><strong><code>query*</code></strong> 返回的是<code>NodeList</code></p></li><li><p><strong><code>tagName</code> &amp;<code>nodeName</code></strong></p><p><code>nodeName</code> 为 <code>Node</code> 的方法,<code>tagName</code> 为 <code>Element</code> 的方法</p><p><code>nodeName</code> 结果全大写, <code>tagName</code>全小写</p></li><li><p><strong><code>innerText</code> &amp;<code>textContent</code>:</strong> <code>innerText</code> 是<code>Element</code> 的方法, <code>textContent</code> 是<code>Node</code> 的方法</p></li><li><p><strong><code>setAttribute</code></strong> 是一个<code>Element</code> 方法</p></li><li><p>CSS 选择器只能选中 Element./img</p></li></ul></li></ul><h2 id="innertext-textcontent"><code>innerText</code> &amp;<code>textContent</code></h2><ul><li><code>innerText</code> 是 <code>Element</code> 的方法,<code>textContent</code> 是 <code>Node</code> 的方法</li><li><code>textContent</code> 会把所有子元素的文本连接起来并返回, 但是<code>innerText</code> 会返回一个"人类可见&amp;可读"的文本,它不会返回不可见元素的文本(例如<code>&lt;style&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;span style="display:none"&gt;</code>).就好像你用鼠标选中这段文本后再 Ctrl+C 得到的文本.</li><li>也正因为上面这一点, 所以在读取(或修改)一个元素的<code>innerText</code> 属性时会为了计算 CSS 而造成一次重绘(reflow),所以它的性能比 <code>textContent</code> 低.</li></ul><h2 id="样式与属性">样式与属性</h2><ul><li><p>增加样式:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>增加 class</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">'aaa'</span>  <span class="token comment">// 设置元素的class为aaa ，如果元素上原本有class则会覆盖</span>Ele<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span> <span class="token comment">// 给Ele新增aaa</span>Ele<span class="token punctuation">.</span>className <span class="token operator">+=</span> <span class="token string">" aaa"</span>  <span class="token comment">// 给Ele新增aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>包含 class</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>增加属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"data-id"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"data-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取属性值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p>以下内容来自: https://juejin.cn/post/6966062224892756005</p></blockquote><h2 id="尺寸相关">尺寸相关</h2><ul><li><p>尺寸示意图</p><figure><img src="./img08.jpg" alt="img01" /><figcaption aria-hidden="true">img01</figcaption></figure></li><li><p>获取实际屏幕宽高</p><figure><img src="./img01.png" alt="img01" /><figcaption aria-hidden="true">img01</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">W</span>  <span class="token operator">=</span>  window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width<span class="token keyword">const</span> <span class="token constant">H</span>  <span class="token operator">=</span>  window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取浏览器宽高</p><figure><img src="./img02.png" alt="img02" /><figcaption aria-hidden="true">img02</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>outerWidth<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>outerHeight<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取当前窗口宽高（浏览器视口宽高）</p><figure><img src="./img03.png" alt="img03" /><figcaption aria-hidden="true">img03</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取元素布局宽高</p><figure><img src="./img04.png" alt="img04" /><figcaption aria-hidden="true">img04</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取元素内容宽高</p><figure><img src="./img05.png" alt="img05" /><figcaption aria-hidden="true">img05</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取滚动后被隐藏页面的宽高</p><figure><img src="./img06.png" alt="img06" /><figcaption aria-hidden="true">img06</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取元素距离顶部和左边距离</p><figure><img src="./img07.png" alt="img07" /><figcaption aria-hidden="true">img07</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> top <span class="token operator">=</span> Ele<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span><span class="token keyword">const</span> left <span class="token operator">=</span> Ele<span class="token punctuation">.</span>offsetLeft<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="事件相关">事件相关</h2><h3 id="鼠标事件">鼠标事件</h3><ul><li><p>单击事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>双击事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">ondblclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ondblclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>右击事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"oncontextmenu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标按下事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmousedown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标移动事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmousemove"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标抬起事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmouseup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标进来事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 鼠标移动到自身时候会触发事件，同时移动到其子元素身上也会触发事件</span>Ele<span class="token punctuation">.</span><span class="token function-variable function">onmouseover</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmouseover"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 鼠标移动到自身是会触发事件，但是移动到其子元素身上不会触发事件</span>Ele<span class="token punctuation">.</span><span class="token function-variable function">onmouseenter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmouseenter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标离开事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 鼠标移动到自身时候会触发事件，同时移动到其子元素身上也会触发事件</span>Ele<span class="token punctuation">.</span><span class="token function-variable function">onmouseout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmouseout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 鼠标移动到自身是会触发事件，但是移动到其子元素身上不会触发事件</span>Ele<span class="token punctuation">.</span><span class="token function-variable function">onmouseleave</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmouseleave"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="键盘事件">键盘事件</h3><ul><li><code>keydown</code>：当用户按下键盘上的任意键时触发，而且如果按住按住不放的话，会重复触发此事件。</li><li><code>keypress</code>：当用户按下键盘上的字符键时触发（就是说用户按了一个能在屏幕上输出字符的按键keypress事件才会触发），而且如果按住不放的，会重复触发此事件（按下Esc键也会触发这个事件）。</li><li><code>keyup</code>：当用户释放键盘上的键时触发。</li></ul><h3 id="表单事件">表单事件</h3><ul><li><code>submit</code>：表单提交</li><li><code>reset</code>：表单重置</li><li><code>change</code>：值发生改变</li><li><code>blur</code>：离焦（不会冒泡）</li><li><code>focus</code>：聚焦（不会冒泡）</li></ul><h3 id="window">window</h3><p><code>window</code>事件指的是浏览器窗口本身而不是窗口内的文档对象。</p><ul><li><code>onload</code>：当文档和资源加载完成后调用</li><li><code>unload</code>：当用户离开当前文档转而其他文档时调用</li><li><code>resize</code>：浏览器窗口改变</li></ul><h3 id="其他事件">其他事件</h3><ul><li><p><code>beforeunload</code>：关闭浏览器窗口之前触发的事件</p></li><li><p><code>DOMContentLoaded</code>：文档对象加载完成之后就触发的事件，无需等待样式、图片等资源</p></li><li><p><code>readystatechange</code>：document有 readyState 属性来描述document 的 loading状态，readyState 的改变会触发 readystatechange事件</p><ul><li><p><code>document.readyState === 'complete'</code>页面已加载完毕</p></li><li><p><code>document.readyState === 'loading'</code>页面正在加载</p></li></ul></li><li><p><code>pageShow</code> 和<code>pagehide</code>：每次用户浏览关闭页面时触发</p></li></ul>]]></content>
    
    
    <summary type="html">易混 &amp; 易忘的 API 们</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>一些@&lt;svg width=&quot;32&quot; height=&quot;32&quot; viewBox=&quot;0 0 24 29&quot; style=&quot;vertical-align:bottom&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M19.877 1.468L24 2.534v18.942l-4.123 1.056V1.468zM6.53 10.898l4.115 1.064v8.978L6.53 22.003V10.896zM0 2.572l4.115 1.064v16.736L0 21.428V2.572zm17.455 5.62V19.3l-4.122-1.064V9.257l4.122-1.064z&quot;/&gt;&lt;/svg&gt;的东西</title>
    <link href="https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BByteD%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    <id>https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BByteD%E7%9A%84%E4%B8%9C%E8%A5%BF/</id>
    <published>2023-01-17T16:00:01.000Z</published>
    <updated>2023-01-17T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="11f8d5f51b1f47ca30d91e4dbfd7df90f2a35ae2a730d05d3ff53dff65265051"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">文章被加密了, 请输入密码查看.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">🔒这可是好东西啊~</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="加密文章" scheme="https://blog.liukairui.me/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>VueConf 2022 - Vue 的进化历程</title>
    <link href="https://blog.liukairui.me/article/VueConf2022-Vue%E7%9A%84%E8%BF%9B%E5%8C%96%E5%8E%86%E7%A8%8B/"/>
    <id>https://blog.liukairui.me/article/VueConf2022-Vue%E7%9A%84%E8%BF%9B%E5%8C%96%E5%8E%86%E7%A8%8B/</id>
    <published>2022-12-12T16:00:01.000Z</published>
    <updated>2022-12-12T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="库阶段library-2013-2015">库阶段(Library) 2013-2015</h2><p><strong>库与框架</strong>: 库更像是一个小模块嵌入于在大项目中,而框架则定义了一套自己的工程实践与配套工具</p><p>库阶段实现了基于 ES5 getter/setter 的响应式系统, MVVM, 模板数据绑定.并没有对构建工具等做出限制</p><p>此时 Vue 的组件与响应式系统强耦合, 没有编译过程, 直接将模板实例为 DOM并遍历实现数据绑定</p><h2 id="框架阶段framework-phase-2015-2016">框架阶段(Framework Phase)2015-2016</h2><p>实现 Vue 1.0</p><ul><li>引入了 Vue Router(SPA), vue-cli, Vuex(状态管理) 此时 Vue更像是一个框架了</li><li>引入了 <code>v-bind</code>, <code>v-on</code>, <code>v-for</code>及其缩写</li><li>实现了热更新与 Scoped CSS</li></ul><h2id="通用框架阶段universal-framework-phase-2016-2019">通用框架阶段(UniversalFramework Phase) 2016-2019</h2><p>完全重写, 实现 Vue 2.0.</p><ul><li>引入了模板编译 Virtual DOM</li><li>引入了基于 Virtual DOM 的服务端渲染</li><li>引入了基于 Virtual DOM 的跨端渲染</li><li>手动实现了 TS 定义</li><li>扩展了 vue-cli, 完成了工具链与 vue 的解绑</li><li>2.1 引入了作用域插槽</li><li>2.2 引入了基于路由的代码分割(SSR)</li><li>2.3 引入了基于路由的资源预加载(SSR, 基于 webpack 生成的 manifest文件分析资源引用关系)</li><li>2.4 引入了异步组件支持与编译输出(SSR)</li></ul><h2id="编译运行时混合阶compilerruntime-hybrid-phase-2019-now">编译/运行时混合阶(Compiler/RuntimeHybrid Phase) 2019-now</h2><p>Vue 2 的编译与运行模块是完全解耦的, 两者互不通信息,这导致编译器与运行时无法协作优化.</p><p>Vue 3</p><ul><li>实现了基于编译优化的 Virtual DOM 性能策略(Block Tree,PatchFlags)</li><li>提出了 Composition API(当时也提出了基于 class 的 API, 但是因为 class的装饰器语法不稳定, 最后选择了 Composition API). 切换 Composition API 后<ul><li>可扩展性得到了显著提升, 逻辑易于重组, 抽取, 复用</li><li>TS 更加友好</li></ul></li><li>实现了完全优化的 SSR 编译输出</li><li>开发了 Vite, 将 vue-cli 功能部分剥离到 Vite.</li><li>实现了同一份模版,不同的编译输出<ul><li>浏览器: 高度优化的 Virtual DOM 渲染函数</li><li>SSR: buffer + 字符串拼接</li><li>将来: Vapor mode (无 Virtual DOM 的渲染代码)</li></ul></li><li>单文件组件语法糖<ul><li><code>&lt;script setup&gt;</code></li><li>CSS v-bind()</li><li>Reactivity Transform</li></ul></li><li>3.1 引入了 Migration Build</li><li>3.2 引入了 <code>&lt;script setup&gt;</code></li></ul><p>现在的 Vue3</p><ul><li>core: 运行时, 编译器</li><li>文档</li><li>工具链 (create-vue)</li><li>SPA 路由 (Vue Router)</li><li>状态管理 (Pinia)</li><li>浏览器开发工具 (vue-devtools)</li><li>IDE 支持 (Volar)</li><li>TypeScript 支持 (将 tsc 扩展为 vue-tsc 以支持 sfc 检查)</li><li>静态分析 (eslint-plugin-vue)</li><li>单元测试 (<span class="citation"data-cites="vue/test-utils">@vue/test-utils</span>)</li></ul><h2 id="未来">未来</h2><ul><li>短期<ul><li>Reactivity Transform / Suspense 稳定化</li><li>SSR 水合改进 (lazy / on-demand / server-only)</li></ul></li><li>中到长期<ul><li>Vapor mode (受 Solid 启发的模版编译策略)</li></ul></li></ul>]]></content>
    
    
    <summary type="html">尤雨溪讲的关于框架设计的思考</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Vue" scheme="https://blog.liukairui.me/tags/Vue/"/>
    
    <category term="VueConf" scheme="https://blog.liukairui.me/tags/VueConf/"/>
    
  </entry>
  
  <entry>
    <title>一些字符编码规则</title>
    <link href="https://blog.liukairui.me/article/Unicode%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://blog.liukairui.me/article/Unicode%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</id>
    <published>2022-12-11T16:00:01.000Z</published>
    <updated>2022-12-11T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="unicode-编码规则">Unicode 编码规则</h1><blockquote><p>以下部分转自: <span class="exturl" data-url="aHR0cHM6Ly93YW5nd2wubmV0L3N0YXRpYy9wYWdlcy91bmljb2RlLmh0bWw=">一文彻底搞懂Unicode编码问题<i class="fa fa-external-link-alt"></i></span></p></blockquote><h2 id="ascii">ASCII</h2><p>最基础的编码格式，打字机时代的产物，共128个字符，其包含键盘上每一个可显字符，可应对只有英文字母场景下的编码需求。</p><p>ASCII编码，共128个字符，编码范围为0~127，每个字符占用一个字节(8位)，但ASCII实际7位就够用了，所以第8位可用于保存额外的信息，早期多用来做奇偶校验，目前都是填充0。</p><p>其中第32到126的字符( - 7E)，共95个，为可显字符(printablecharacter)，为空格、数字、字母、标点符号、和几个特殊符号(例如脱字符^)。其中：</p><ul><li>32()，为空格</li><li>48-57(-)，数字0-9</li><li>65-90(-5A)，字母A-Z</li><li>97-122(-7A)，字母a-z</li></ul><p>前32个字符和最后1个字符(0到32和127)，共33个字符，称之为控制字符(Controlcharacter)。</p><p>每个控制字符除了通过ASCII编码表示，还有另外的「脱字符表示法」(Caretnotation)，第0个为<code>^0</code>，后续26个为<code>^A</code>~<code>^Z</code>，剩余的为<code>^[</code>，<code>^\</code>，<code>^]</code>，<code>^^</code>，<code>^_</code>，最后一个为<code>^?</code>。在JS中的正则表达式中，用<code>\c</code>来替代脱字符匹配控制字符，例如<code>\cJ</code>代表<code>^J</code>。另外，有几个特殊的在现在编码中仍然有用的控制字符，还有「转义符表示法」(escapesequence)。如下表所示：</p><table><colgroup><col style="width: 10%" /><col style="width: 17%" /><col style="width: 17%" /><col style="width: 26%" /><col style="width: 14%" /><col style="width: 14%" /></colgroup><thead><tr class="header"><th style="text-align: center;">十进制</th><th style="text-align: center;">脱字符表示</th><th style="text-align: center;">转义符表示</th><th style="text-align: center;">名称</th><th style="text-align: center;">名称简写</th><th style="text-align: center;">作用</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">^@</td><td style="text-align: center;">\0</td><td style="text-align: center;">Null</td><td style="text-align: center;">NUL</td><td style="text-align: center;">空</td></tr><tr class="even"><td style="text-align: center;">7</td><td style="text-align: center;">^G</td><td style="text-align: center;"></td><td style="text-align: center;">Bell</td><td style="text-align: center;">Bel</td><td style="text-align: center;">振铃</td></tr><tr class="odd"><td style="text-align: center;">8</td><td style="text-align: center;">^H</td><td style="text-align: center;"> Backspace</td><td style="text-align: center;">BS</td><td style="text-align: center;">退格</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">9</td><td style="text-align: center;">^I</td><td style="text-align: center;"> Horizontal Tab</td><td style="text-align: center;">HT</td><td style="text-align: center;">水平制表</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">10</td><td style="text-align: center;">^J</td><td style="text-align: center;"></td><td style="text-align: center;">Line Feed</td><td style="text-align: center;">LF</td><td style="text-align: center;">换行</td></tr><tr class="even"><td style="text-align: center;">11</td><td style="text-align: center;">^K</td><td style="text-align: center;"> Vertical Tab</td><td style="text-align: center;">VT</td><td style="text-align: center;">垂直制表</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">12</td><td style="text-align: center;">^L</td><td style="text-align: center;"> Form feed</td><td style="text-align: center;">FF</td><td style="text-align: center;">换页</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">13</td><td style="text-align: center;">^M</td><td style="text-align: center;"> Carriage Return</td><td style="text-align: center;">CR</td><td style="text-align: center;">回车</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">27</td><td style="text-align: center;">^[</td><td style="text-align: center;"></td><td style="text-align: center;">Escape</td><td style="text-align: center;">ESC</td><td style="text-align: center;">换码</td></tr></tbody></table><p>显然128个字符对于英文表达足够了，但是明显不适用中文，以及其他非英文表达的语言，所以中国后来有了GBK编码。ASCII编码在早期遇到编码不够用的时候，也有一些扩展和变体，例如「扩展ASCII」可表示256个字符。不过由于后来有了Unicode编码格式，这些都没用了，所以就没必要去了解了。</p><h2 id="unicode">Unicode</h2><p>Unicode编码标准，可表示目前全世界所有语言的所有字符。同时兼容ASCII编码。</p><p>Unicode的前128个字符编码和ASCII是一致的，即向后兼容ASCII，对于使用ASCII编码的程序可以直接使用Unicode规范。在Unicode中，对于每一个字符编码的值，叫做<code>code point</code>。例如小写字母a的<code>code point</code>为97，对应十六进制为<code>\x61</code>。下文为了方便对<code>code point</code>称作「码位」。</p><p>在Unicode中，码位的总范围为<code>\x0</code>到<code>\x10FFFF</code>，共1,114,112个码位。2048个用于编码代理(UTF-16)，66个非字符码位(例如BOM)，137,468个预留给私人使用，最终剩余974,530用于普通字符分配。</p><p>码位的最大值为<code>\x10FFFF</code>，对应二进制有21位，我们将2<sup>16个值分为一组，则Unicode总共可以分为17份，每一份称之为平面(Plane)，每一个平面有65,536(2</sup>16)个码位。</p><p>为什么Unicode的最大值为<code>\x10FFFF</code>？因为对于<code>UTF16</code>编码，双字节最多可编码2<sup>20个字符，单字节可编码2</sup>16个字符，加起来共17个平面的字符数。</p><p>下表为每个平面详情：</p><table><colgroup><col style="width: 12%" /><col style="width: 18%" /><col style="width: 10%" /><col style="width: 58%" /></colgroup><thead><tr class="header"><th style="text-align: center;">平面编号</th><th style="text-align: center;">码位范围(十六进制)</th><th style="text-align: center;">名称简写</th><th style="text-align: center;">名称</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Plane 0</td><td style="text-align: center;">0000–FFFF</td><td style="text-align: center;">BMP</td><td style="text-align: center;">基础多语言平面(Basic MultilingualPlane)</td></tr><tr class="even"><td style="text-align: center;">Plane 1</td><td style="text-align: center;">10000–1FFFF</td><td style="text-align: center;">SMP</td><td style="text-align: center;">补充多语言平面(SupplementaryMultilingual Plane)</td></tr><tr class="odd"><td style="text-align: center;">Plane 2</td><td style="text-align: center;">20000–2FFFF</td><td style="text-align: center;">SIP</td><td style="text-align: center;">补充表意语言平面(SupplementaryIdeographic Plane)</td></tr><tr class="even"><td style="text-align: center;">Plane 3</td><td style="text-align: center;">30000–3FFFF</td><td style="text-align: center;">TIP</td><td style="text-align: center;">第三表意语言平面(Tertiary IdeographicPlane)</td></tr><tr class="odd"><td style="text-align: center;">Planes 4–13</td><td style="text-align: center;">40000–DFFFF</td><td style="text-align: center;">- (未分配)</td><td style="text-align: center;">- (未分配)</td></tr><tr class="even"><td style="text-align: center;">Plane 14</td><td style="text-align: center;">E0000–EFFFF</td><td style="text-align: center;">SSP</td><td style="text-align: center;">补充特殊用途平面(SupplementarySpecial-purpose Plane)</td></tr><tr class="odd"><td style="text-align: center;">Planes 15–16</td><td style="text-align: center;">F0000–10FFFF</td><td style="text-align: center;">SPUA-A/B</td><td style="text-align: center;">补充私有使用区平面(Supplementary PrivateUse Area planes)</td></tr></tbody></table><p>BMP为基础平面，目前收录了全球范围内大部分的字符。剩余的16个平面均为补充平面，用于进行新的字符的补充。其中私有平面，用于给个人做编码扩展，Unicode不指定字符编码。比如我编写了一个英雄联盟相关的程序，然后定义某一个字符代表一种游戏里的操作，就可以使用私有平面。</p><p>Unicode中还有一个概念：对于逻辑上属于一类的字符，称之为块(block)。例如:</p><ul><li><code>C0 Controls and Basic Latin</code>块，<code>\x0000</code>-<code>\x007F</code>，就是从ASCII继承来的前128个字符。</li><li><code>CJK Unified Ideographs</code>块，<code>\x4E00</code>-<code>\x9FFC</code>，包含大部分的中日韩文字，</li><li><code>Halfwidth and Fullwidth Forms</code>，<code>\xFF00</code>-<code>\xFFEF</code>，用于英文字母/数字/日文/个别符号等一些字符的全角-半角相互转换。</li><li><code>Miscellaneous Symbols and Pictographs</code>，<code>\x1F300</code>-<code>\x1F5FF</code>，<code>Supplemental Symbols and Pictographs</code>，<code>\1F900</code>-<code>\1F9FF</code>，包含大部分emoji表情</li></ul><p>另外还有一个比较重要的块<code>General Punctuation</code>，码位在<code>[2000,206F]</code>，包含一些符号以及一些特殊的分隔符、连接符、空格符等，这些符号不一定是可显字符，而是告诉解释器该如何操作当前字符。对于所有块，<span class="exturl" data-url="aHR0cHM6Ly91bmljb2RlLm9yZy9jaGFydHMvbmFtZXNsaXN0Lw==">可通过该链接查阅<i class="fa fa-external-link-alt"></i></span>。</p><h2 id="半角全角">半角/全角</h2><p>对于全角字符，在展示上占用的宽度是半角字符的两倍。每个字符都在Unicode标准里定义了是全角还是半角，对于不需要精确计算的简单业务场景，也可以简单的认为码位大于128的都是全角字符。</p><p>半角和全角，对应英文为halfwidth，fullwidth。半角全角对应的是UI显示的概念，对于定宽的字体，全角字符占用的宽度是半角字符的两倍。Unicode中每个字符都有一个<code>East_Asian_Width</code>属性，用于指示当前是全角字符还是半角字符，<span class="exturl" data-url="aHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjQ0L3RyNDQtMjYuaHRtbCNWYWxpZGF0aW9uX29mX0VudW1lcmF0ZWQ=">具有以下值<i class="fa fa-external-link-alt"></i></span>：</p><ul><li>A， Ambiguous，根据上下文决定</li><li>F， Fullwidth，全角</li><li>H， Halfwidth，半角</li><li>N， Neutral，中立，作为半角</li><li>Na， Narrow，半角</li><li>W， Wide，全角</li></ul><p>在<span class="exturl" data-url="aHR0cHM6Ly93d3cudW5pY29kZS5vcmcvUHVibGljL1VDRC9sYXRlc3QvdWNkL0Vhc3RBc2lhbldpZHRoLnR4dA==">EastAsianWidth.txt文件<i class="fa fa-external-link-alt"></i></span>中列举了已显示声明<code>East_Asian_Width</code>属性的字符。对于不在该文件内的字符，符合下列规则的为<code>W</code>(全角)：</p><ul><li>the CJK Unified Ideographs Extension A block， 对应区间：<code>\x3400</code>..<code>\x4DBF</code></li><li>the CJK Unified Ideographs block， 对应区间：<code>\x4E00</code>..<code>\x9FFF</code></li><li>the CJK Compatibility Ideographs block， 对应区间：<code>\xF900</code>..<code>\xFAFF</code></li><li>the Supplementary Ideographic Plane， 对应区间：<code>\x20000</code>..<code>\x2FFFF</code></li><li>the Tertiary Ideographic Plane， 对应区间：<code>\x30000</code>..<code>\x3FFFF</code></li></ul><p>其余未列出的，默认为<code>N</code>(半角)。</p><p>在一些编码集中，有的字符既有全角形式也有半角形式，Unicode为了实现与这些编码集之间的无损转换，在第一平面的最后，<code>\xFF00</code>到<code>\xFFEF</code>区段，定义了用于半角全角转换的字符，如下所示：</p><ul><li><code>\xFF01</code>–<code>\xFF5E</code>为ASCII的<code>\x21</code>到<code>\x7E</code>的全角形式。其中空格没有纳入进来，因为全角空格已通过<code>\x3000</code>定义。</li><li><code>\xFF65</code>–<code>\xFF9F</code> 为半角的日语字符。</li><li><code>\xFFA0</code>–<code>\xFFDC</code> 为半角的汉语字符。</li><li><code>\xFFE0</code>–<code>\xFFEE</code>包含了一些符号，有半角有全角。</li></ul><p>对于在JS中判断字符是全角还是半角，目前下载量比较多的一个npm包：<code>is-fullwidth-code-point</code>。<code>string-width</code>依赖<code>is-fullwidth-code-point</code>计算字符长度。不过实际测试，<code>is-fullwidth-code-point</code>没有完全覆盖所有全角字符(<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9pcy1mdWxsd2lkdGgtY29kZS1wb2ludC9pc3N1ZXMvMTI=">issue<i class="fa fa-external-link-alt"></i></span>)，不过对于日常中文场景的开发够用了。</p><p>在日常开发中，对于UI展示的场景中，会比较关心字符宽度的问题。但是在涉及存储的时候，更关心的其实是存储该字符占用了几个字节。所以在涉及存储的场景下，关注点就不应该是全角/半角的概念，而是字符编码所占用的字节数。对于<code>UTF8</code>编码，码位小于等于128的使用1字节存储，大于128的会根据需要，使用双字节，三字节或四字节存储。所以多数场景下，为了简便，前后端都可以通过码位是否大于128来判断全角/半角。</p><h2 id="htmlxml实体转义">HTML/XML实体转义</h2><p>我们常说的HTML转义，实际正式应该称之为HTML实体引用。对应有两种引用方式：数字字符引用(numericcharacter reference) 和 字符实体引用(character entity reference)。</p><p>先说常见的字符实体引用，语法为：<code>&amp;name;</code>，name必须小写。例如：<code>&lt;</code>表示小于号<code>&lt;</code>。</p><p>可以进行引用的实体，称之为命名实体。命名实体有两种，一种是语法中内置的，另一种是在DTD中显示声明的：<code>&lt;!ENTITY name "value"&gt;</code>。</p><p>数字字符引用方式：</p><ul><li>十进制：<code>&amp;#nnnn;</code></li><li>十六进制：<code>&amp;#xhhhh;</code>，x必须小写。hhhh大小写可以混用。</li></ul><p>还是同样的例子，小于号<code>&lt;</code>如果使用数字字符引用的方式，为：<code>&lt;</code>。</p><h3 id="html">HTML</h3><p><span class="exturl" data-url="aHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvbmFtZWQtY2hhcmFjdGVycy5odG1sI25hbWVkLWNoYXJhY3Rlci1yZWZlcmVuY2Vz">通过该链接查看目前HTML5中支持的命名实体<i class="fa fa-external-link-alt"></i></span>。</p><h3 id="xml">XML</h3><p>XML规范中，有5个预定义的实体，如下所示，如果需要使用更多的实体转义，需要在DTD中声明。</p><table><colgroup><col style="width: 5%" /><col style="width: 5%" /><col style="width: 16%" /><col style="width: 14%" /><col style="width: 9%" /><col style="width: 47%" /></colgroup><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">字符</th><th style="text-align: center;">码位十六进制</th><th style="text-align: center;">码位十进制</th><th style="text-align: center;">标准</th><th style="text-align: center;">名称全称</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">quot</td><td style="text-align: center;">"</td><td style="text-align: center;"></td><td style="text-align: center;">34</td><td style="text-align: center;">XML 1.0</td><td style="text-align: center;">quotation mark</td></tr><tr class="even"><td style="text-align: center;">amp</td><td style="text-align: center;">&amp;</td><td style="text-align: center;"></td><td style="text-align: center;">38</td><td style="text-align: center;">XML 1.0</td><td style="text-align: center;">ampersand</td></tr><tr class="odd"><td style="text-align: center;">apos</td><td style="text-align: center;">'</td><td style="text-align: center;"></td><td style="text-align: center;">39</td><td style="text-align: center;">XML 1.0</td><td style="text-align: center;">apostrophe (1.0: apostrophe-quote)</td></tr><tr class="even"><td style="text-align: center;">lt</td><td style="text-align: center;">&lt;</td><td style="text-align: center;">003C</td><td style="text-align: center;">60</td><td style="text-align: center;">XML 1.0</td><td style="text-align: center;">less-than sign</td></tr><tr class="odd"><td style="text-align: center;">gt</td><td style="text-align: center;">&gt;</td><td style="text-align: center;">003E</td><td style="text-align: center;">62</td><td style="text-align: center;">XML 1.0</td><td style="text-align: center;">greater-than sign</td></tr></tbody></table><h2 id="unicode-encoding-forms">Unicode Encoding Forms</h2><p>Unicode字符编码格式(Unicode EncodingForms)，简写为:UTF，即：将一个Unicode字符保存为字节序列的格式规范，用于文件存储、数据传输等。Unicode标准支持3种编码格式，如下：</p><ul><li>UTF-32: 使用4字节表示一个Unicode字符。</li><li>UTF-16:变长的编码格式，码位大于<code>\xFFFF</code>的字符，使用4字节存储，小于等于<code>\xFFFF</code>的字符，使用2字节存储。</li><li>UTF-8:变长的编码格式，码位大于<code>\xFFFF</code>的字符，使用4字节存储，小于等于<code>\xFFFF</code>大于<code>\x07FF</code>的使用3字节，小于等于<code>\x07FF</code>大于<code>\x007F</code>的使用2字节，小于等于<code>\x007F</code>使用1字节。</li></ul><p>Unicode标准支持3种编码格式，<code>UTF32</code>/<code>UTF16</code>/<code>UTF8</code>，用于映射码位为<code>\x0000</code>到<code>\xD7FF</code> 和<code>\xE000</code>到<code>\x10FFFF</code>的字符，即除去高位代理和低位代理的所有字符。至于什么是高位代理和低位代理后面会讲到。</p><h3 id="utf32">UTF32</h3><p>是一种定长编码格式，使用32位(4字节)表示Unicode中的一个码位。由于Unicode的码位实际只用了21位，所以多余部分前导0。例如字符小写字母a，对应码位为<code>\x61</code>，存储的字节序列为：<code>\x00000061</code>。</p><h3 id="utf16">UTF16</h3><p>变长编码格式，按平面区分，位于第一平面中的字符(<code>\x0000..\xD7FF</code>和<code>\xE000..\xFFFF</code>)，使用16位(2字节)存储，使用和码位相同的值。位于其他平面的字符(<code>\x10000..\x10FFFF</code>)，通过高位和低位代理使用32位(4字节)表示。</p><p>对于位于第一平面的值，即小于等于<code>\xFFFF</code>的值，使用2个字节就足够表示，所以直接使用两个字节表示其码位的值，如下所示：</p><table><thead><tr class="header"><th style="text-align: center;">code point</th><th style="text-align: center;">UTF16编码后实际存储的值</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">xxxx xxxx xxxx xxxx</td><td style="text-align: center;">xxxx xxxx xxxx xxxx</td></tr></tbody></table><p>位于其他平面平面的值，即大于<code>\xFFFF</code>的值，使用4个字节表示，如下所示：</p><table><colgroup><col style="width: 41%" /><col style="width: 58%" /></colgroup><thead><tr class="header"><th style="text-align: center;">code point</th><th style="text-align: center;">UTF16编码后实际存储的值(wwww = uuuuu -1)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">000u uuuu hhhh hhxx xxxx xxxx</td><td style="text-align: center;">1101 10ww wwhh hhhh 1101 11xx xxxxxxxx</td></tr></tbody></table><p>位于其他平面的值，即<code>\x10000</code>到<code>\x10FFFF</code>的值，二进制最高使用21位。将其拆分为两部分，即前11位和后10位，前11为用<code>hhhhhh hhhh</code>表示，后10位用<code>xxxxx xxxxx</code>表示。其中，前11位中，前5位是用来表示位于第几个平面，所以这里也特殊标注出来，用u表示，即前11位为：<code>uuuuuh hhhhh</code>。</p><p>由于这里前五位的有效值为<code>\x1</code>到<code>\x10</code>，所以可以减1，让有效值从0开始，则有效值变成了<code>\x00</code>到<code>\x0F</code>，即4位，减1后的值用w表示，从而前11位可以表示为：wwwwh hhhhh。</p><p>将前10位前导<code>110110</code>，后10位前导<code>110111</code>，即<code>UTF16</code>对于大于<code>\xFFFF</code>字符的表示如上述表格所示。</p><p>这里,二进制<code>1101 1000 0000 0000</code>为<code>\xD800</code>，二进制<code>1101 1100 0000 0000</code>为<code>\xDC00</code>，从而，该规则简单描述如下：</p><ul><li>假设某个字符x位于<code>\x10000</code>到<code>\x10FFFF</code>之间，将其减去<code>\x10000</code>，得到x'，x'的范围为：<code>\x00000</code>–<code>\xFFFFF</code>。</li><li>将x'分成两部分，前10位和后10位，用w1和w2表示，其范围为<code>\x0000</code>–<code>\x03FF</code>。</li><li>将w1加上<code>\xD800</code>，得到w1'，范围为：<code>\xD800</code>–<code>\xDBFF</code>.</li><li>将w2加上<code>\xDC00</code>，得到w2'，范围为：<code>\xDC00</code>–<code>\xDFFF</code>.</li></ul><p>将w1'和w'2转换为二进制，即<code>UTF16</code>下x存储的字节序列。</p><pre class="line-numbers language-none"><code class="language-none">x&#39; &#x3D; yyyyyyyyyyxxxxxxxxxx   &#x2F;&#x2F; x - 0x10000x1&#39; &#x3D; 110110yyyyyyyyyy      &#x2F;&#x2F; 0xD800 + yyyyyyyyyyx2&#39; &#x3D; 110111xxxxxxxxxx      &#x2F;&#x2F; 0xDC00 + xxxxxxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="utf8">UTF8</h3><p>变长编码格式，是直接兼容ASCII的编码格式，对于能在1字节内保存的，直接保存为1字节。否则进行类似<code>UTF16</code>高低位代理的方式，最高位使用4字节。</p><p><code>UTF8</code>中没有减1的逻辑，只是简单的增加前缀，具体规则如下:</p><table style="width:100%;"><colgroup><col style="width: 26%" /><col style="width: 30%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /></colgroup><thead><tr class="header"><th style="text-align: center;">范围</th><th style="text-align: center;">码位(二进制)</th><th style="text-align: center;">第1个字节</th><th style="text-align: center;">第2个字节</th><th style="text-align: center;">第3个字节</th><th style="text-align: center;">第4个字节</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"> .. 007F(7位)</td><td style="text-align: center;">00000000 0xxxxxxx</td><td style="text-align: center;">0xxxxxxx</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td></tr><tr class="even"><td style="text-align: center;"> .. 07FF(11位)</td><td style="text-align: center;">00000yyy yyxxxxxx</td><td style="text-align: center;">110yyyyy</td><td style="text-align: center;">10xxxxxx</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td></tr><tr class="odd"><td style="text-align: center;"> .. </td><td style="text-align: center;">zzzzyyyy yyxxxxxx</td><td style="text-align: center;">1110zzzz</td><td style="text-align: center;">10yyyyyy</td><td style="text-align: center;">10xxxxxx</td><td style="text-align: center;">-</td></tr><tr class="even"><td style="text-align: center;"> .. 10FFFF</td><td style="text-align: center;">000uuuuu zzzzyyyy yyxxxxxx</td><td style="text-align: center;">11110uuu</td><td style="text-align: center;">10uuzzzz</td><td style="text-align: center;">10yyyyyy</td><td style="text-align: center;">10xxxxxx</td></tr></tbody></table><p>在<code>UTF8</code>中，</p><ul><li>如果字节序列以<code>0</code>开头，代表当前字节本身表示了一个字符。</li><li>如果为<code>10</code>开头，则代表当前字节为多字节字符中的一个字节。</li><li>如果当前字符以<code>11</code>开头，则前面<code>1</code>的个数，代表当前字符所使用的字节数，2个<code>1</code>代表使用两个字节表示一个字符，3个<code>1</code>代表使用3个字节表示一个字符。</li></ul><h2 id="byte-order-mark">Byte order mark</h2><p>字节顺序标记(Byte ordermark)，指预定义的，放置在文本流开头的，一段特殊的字节序列，用于标记当前文本使用的哪种编码格式(<code>UTF32</code>/<code>UTF16</code>/<code>UTF8</code>)。具体规则如下：</p><table><thead><tr class="header"><th style="text-align: center;">编码格式</th><th style="text-align: center;">文本流开头的字节序列</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">UTF-8</td><td style="text-align: center;">EF BB BF</td></tr><tr class="even"><td style="text-align: center;">UTF-16 (BE)</td><td style="text-align: center;">FE FF</td></tr><tr class="odd"><td style="text-align: center;">UTF-16 (LE)</td><td style="text-align: center;">FF FE</td></tr><tr class="even"><td style="text-align: center;">UTF-32 (BE)</td><td style="text-align: center;">00 00 FE FF</td></tr><tr class="odd"><td style="text-align: center;">UTF-32 (LE)</td><td style="text-align: center;">FF FE 00 00</td></tr></tbody></table><p>例如Windows的记事本应用，将文本保存为<code>UTF8</code>格式时，会在文本内容的开头添加<code>\xEF</code>,<code>\xBB</code>,<code>\BF</code>3个字节。记事本应用在读取一个文本文件的时候，发现前三个字节为<code>\xEF</code>,<code>\xBB</code>,<code>\BF</code>，则认为接下来的字节流通过<code>UTF8</code>形式解析。</p><h3 id="endianness">endianness</h3><p>字节顺序(endianness)，这里特指当保存一个数字类型数据时，存储的字节序列的顺序。分为大端序(big-endian，简写BE)和小端序(little-endian，简写LE)。</p><p>假设当前要将一个16位的整型数字<code>\x0A0B</code>指向内存地址。</p><p>对于大端序的CPU，随着内存地址的增加，认为其存储的值的重要性是递减的，所以大端序的CPU会在100的位置上存储<code>\x0A</code>，在101的位置上存储<code>\x0B</code>。</p><p>对于小端序的CPU，随着内存地址的增加，认为其存储的值的重要性是递增的，所以小端序的CPU会在100的位置上存储<code>\x0B</code>，在101的位置上存储<code>\x0A</code>。</p><p>所以反过来，假设现在在内存中，地址100的地方存储了<code>\xAA</code>，在101的地方存储了<code>\xBB</code>，假设有一个<code>int16</code>变量指向，对于大端序CPU会认为该变量的值为<code>\xAABB</code>，对于小端序CPU会认为该变量的值为<code>\xBBAA</code>。</p><h3 id="byte-order-mark-1">Byte order mark</h3><p>因为各个系统之间的字节顺序不同，所以在传输和交换Unicode文本时，要告诉对方当前是以什么顺序保存的，从而接收方才能有效的进行解析。</p><p>字节序列标记(Byte ordermark，简写BOM)，特指<code>\xFEFF</code>字符。在文本的开头，添加<code>\xFEFF</code>字符，用于标识当前文本的字节顺序。</p><ul><li>对于<code>UTF8</code>编码格式，该字符会被保存为<code>\xEFBBBF</code></li><li>对于<code>UTF16 BE</code>编码格式，该字符会被保存为<code>\xFEFF</code></li><li>对于<code>UTF16 LE</code>编码格式，该字符会被保存为<code>\xFFFE</code></li><li>对于<code>UTF32 BE</code>编码格式，该字符会被保存为<code>\x0000FEFF</code></li><li>对于<code>UTF32 LE</code>编码格式，该字符会被保存为<code>\xFFFE0000</code></li></ul><p>所以，解析程序通过判断BOM即可确定接下来的文本所使用的编码格式以及字节顺序。在Unicode中，<code>\xFEFF</code>是专门用作BOM的，如果该字符出现在文本中间，会被当做「零宽非换行空格」(zero-widthnon-breakingspace)，其实就是跳过的意思。同样的，对于它的一个镜像字符<code>\xFFFE</code>，如果出现也会被跳过。</p><p>BOM可以省略，不是必须的，因为：</p><ol type="1"><li>在某些场景下已经预设了编码格式或字节顺序，例如W3C的HTML5规范中，如果指定charset为utf-8，则会默认按照utf-8解析，而如果文件流指定了BOM，则会优先使用BOM指定的编码格式和字节顺序。</li><li>当BOM被省略时，大部分解析器都会对文本流进行推算，推算出编码格式和字节顺序，但是这个推算并不是绝对可靠的。</li></ol><p>当使用<code>UTF8</code>格式保存文本时，Unicode标准建议，如果原文本没有BOM，则不要添加BOM。因为：</p><ol type="1"><li><code>UTF8</code>是单字节存储的，不存在字节顺序问题。</li><li>解析器会默认使用<code>UTF8</code>解析文本。</li><li>因为ASCII和<code>UTF8</code>是一一对应的，如果不添加BOM，则ASCII和Unicode可以相互兼容，如果加上了BOM，就打破了相互兼容。</li></ol><p>不过当前很多系统或平台并没有按照规范来，在解析文本的时候会要求<code>UTF8</code>要有BOM，以及在保存文本的时候会加上BOM，例如windows系统的记事本。</p><p>而对于<code>UTF16</code>和<code>UTF32</code>，要添加BOM，不然在解析的出的文本可能就是乱码，因为解析器在对字节顺序的推算上，并不能保证完全可靠。</p><h1 id="组合字符">组合字符</h1><p>Unicode有一类字符称为组合字符，它可以附加在前一个非组合字符上，从而使整体看起来像是一个字符。Unicode组合字符设计上，并没有加组合数量限制，这样使我们可以无限加这类组合字符,例如汉语拼音字母「ü」上面的两个小点，或「á」、「à」字母上面的音标。</p><p><strong>组合字符有两种</strong></p><ul><li>组合字符:将组合字符置于需要修饰的目标字符后边，使目标字符被渲染（或打印）成相应结果。</li><li>预组合字符:事先将字符组好并赋予码位。字符串中有可能同时使用组合字符和预组字符。这导致了若要比较两个unicode字符串时，需要先运行unicode字符的等价性。</li></ul><p><strong>组合字符在 Unicode统一码中存在多个区块，编码范围主要有：</strong></p><ul><li><p>组合用附加符号（<span class="exturl" data-url="aHR0cHM6Ly91bmljb2RlLm9yZy9jaGFydHMvUERGL1UwMzAwLnBkZg==">Combining DiacriticalMarks<i class="fa fa-external-link-alt"></i></span>）：区间从 <code>U+0300</code> 到 <code>U+036F</code> 共 80字。</p><p>它常与字母组合，修饰字母的读音。但其实它的定义比较宽泛，不但包括了拉丁、希腊及西里尔系文字中的变音记号，也包括那些不是变音但不占据宽度的附加标记。例如<code>&amp;#x61;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3662;&amp;#3662;&amp;#3662;&amp;#3662;&amp;#3657;&amp;#3657;&amp;#3657;&amp;#3657;</code>为 a็็็็๎๎๎๎้้้้</p></li><li><p>组合用附加符号补集（<span class="exturl" data-url="aHR0cHM6Ly91bmljb2RlLm9yZy9jaGFydHMvUERGL1UxREMwLnBkZg==">Combining DiacriticalMarks Supplement<i class="fa fa-external-link-alt"></i></span>）：区间从 <code>U+1DC0</code> 到<code>U+1DFF</code> 共 64 字。</p><p>它常与一些符号组合，用于渲染和修饰符号. 例如:<code>&amp;#x1DD0;&amp;#x1DD0;&amp;#x61;&amp;#x1DC4;&amp;#x1DC4;</code>为 ᷐᷐a᷄᷄</p></li><li><p>组合用记号（<span class="exturl" data-url="aHR0cHM6Ly91bmljb2RlLm9yZy9jaGFydHMvUERGL1UyMEQwLnBkZg==">Combining DiacriticalMarks for Symbols<i class="fa fa-external-link-alt"></i></span>）：区间从 <code>U+20D0</code> 到<code>U+20FF</code> 共 48 字。例如:<code>&amp;#x6587;&amp;#x20dd;</code> 为 文⃝</p></li><li><p>组合用半形符号（<span class="exturl" data-url="aHR0cHM6Ly91bmljb2RlLm9yZy9jaGFydHMvUERGL1VGRTIwLnBkZg==">Combining HalfMarks<i class="fa fa-external-link-alt"></i></span>）：区间从 <code>U+FE20</code> 到 <code>U+FE2F</code> 共 16字。</p><p>多个附加字符可以叠加到一个基础字符上. 例如<code>&amp;#xFE20;&amp;#xFE2D;&amp;#x61;</code> 为 ︭︠a</p></li></ul><p>组合字符也可以用于 Emoji, 例如 <code>&amp;#x270B;</code> 为✋, <code>&amp;#x270B;&amp;#x1F3FB;</code> 为 ✋🏻</p><h1 id="零宽字符">零宽字符</h1><p>零宽字符不可见，不可打印，主要作用于调整字符的显示格式.</p><p><strong>零宽字符主要有以下几类：</strong></p><ul><li>零宽度空格符 (zero-width space) U+200B : 用于较长单词的换行分隔</li><li>零宽度非断空格符 (zero width no-break space) U+FEFF :用于阻止特定位置的换行分隔</li><li>零宽度连字符 (zero-width joiner) U+200D :用于阿拉伯文与印度语系等文字中，使不会发生连字的字符间产生连字效果</li><li>零宽度断字符 (zero-width non-joiner) U+200C :用于阿拉伯文，德文，印度语系等文字中，阻止会发生连字的字符间的连字效果</li><li>左至右符 (left-to-right mark) U+200E :用于在混合文字方向的多种语言文本中（例：混合左至右书写的英语与右至左书写的希伯来语），规定排版文字书写方向为左至右</li><li>右至左符 (right-to-left mark) U+200F :用于在混合文字方向的多种语言文本中，规定排版文字书写方向为右至左</li></ul><p><strong>零宽字符可以用于:</strong></p><ul><li>数据防爬:将零宽度字符插入文本中，干扰关键字匹配。爬虫得到的带有零宽度字符的数据会影响他们的分析，但不会影响用户的阅读数据。</li><li>信息传递:将自定义组合的零宽度字符插入文本中，用户复制后会携带不可见信息，达到传递作用。</li><li>传递隐密信息:利用零宽度字符不可见的特性，我们可以用零宽度字符在任何未对零宽度字符做过滤的网页内插入不可见的隐形文本。下面是一个简单的利用零宽度字符对文本进行加密/解密的</li><li>隐形水印:通过零宽度字符我们可以对内部文件添加隐形水印。在浏览者登录页面对内部文件进行浏览时，我们可以在文件的各处插入使用零宽度字符加密的浏览者信息，如果浏览者又恰好使用复制粘贴的方式在公共媒体上匿名分享了这个文件，我们就能通过嵌入在文件中的隐形水印轻松找到分享者了。</li><li>加密信息分享:通过零宽度字符我们可以在任何网站上分享任何信息。敏感信息的审核与过滤在当今的互联网社区中扮演着至关重要的角色，但是零宽度字符却能如入无人之境一般轻松地穿透这两层信息分享的屏障。对比明文哈希表加密信息的方式，零宽度字符加密在网上的隐蔽性可以说是达到了一个新的高度。仅仅需要一个简单的识别/解密零宽度字符的浏览器插件，任何网站都可以成为信息分享的游乐场。</li><li>逃脱敏感词过滤:通过零宽度字符我们可以轻松逃脱敏感词过滤。敏感词自动过滤是维持互联网社区秩序的一项重要工具，只需倒入敏感词库和匹配相应敏感词，即可将大量的非法词汇拒之门外。使用谐音与拼音来逃脱敏感词过滤会让语言传递信息的效率降低，而使用零宽度字符可以在逃脱敏感词过滤的同时将词义原封不动地传达给接受者，大大提高信息传播者与接受者之间交流的效率。<strong>开发时只过滤<code>\u200b</code></strong> 就够了</li></ul><h2 id="emoji-中的零宽字符">Emoji 中的零宽字符</h2><p>零宽字符可以用于 Emoji 的组合, 例如</p><ul><li><p>在构建 👨🏻‍🦳 时</p><ul><li>👨🏻‍🦳 为<code>&amp;#x1F468;&amp;#x1F3FB;&amp;#x200D;&amp;#x1F9B3;</code></li><li>👨🏻‍ 为 <code>&amp;#x1F468;&amp;#x1F3FB;&amp;#x200D;</code></li><li>👨🏻 为 <code>&amp;#x1F468;&amp;#x1F3FB;</code></li><li>👨 为 <code>&amp;#x1F468;</code></li></ul><p>其中</p><ul><li>👨 - U+1F468 - 基础字符</li><li>🏻 - U+1F3FB - 组合字符，表示肤色</li><li><ul><li>U+200D - <strong>零宽度连字符</strong>，表示上下相连</li></ul></li><li>🦳 - U+1F9B3 - 基础字符，表示发型</li></ul><p>零字宽字符连接了发型与颜色</p></li><li><p>👩‍❤‍👨 为<code>&amp;#x1F469;&amp;#x200D;&amp;#x2764;&amp;#x200D;&amp;#x1F468;</code>,其中</p><ul><li>👩 - U+1F469 - 基础字符</li><li><ul><li>U+200D - 零宽度连字符，表示上下相连</li></ul></li><li>❤ - U+2764 - 基础字符</li><li><ul><li>U+200D - 零宽度连字符，表示上下相连</li></ul></li><li>👨 - U+1F468 - 基础字符</li></ul></li><li><p>👩‍👩‍👦‍👦 为<code>&amp;#x1F469;&amp;#x200D;&amp;#x1F469;&amp;#x200D;&amp;#x1F466;&amp;#x200D;&amp;#x1F466;</code>,其中</p><ul><li>👩 - U+1F469 - 基础字符</li><li><ul><li>U+200D - 零宽度连字符，表示上下相连</li></ul></li><li>👩 - U+1F469 - 基础字符</li><li><ul><li>U+200D - 零宽度连字符，表示上下相连</li></ul></li><li>👦 - U+1F466 - 基础字符</li><li><ul><li>U+200D - 零宽度连字符，表示上下相连</li></ul></li><li>👦 - U+1F466 - 基础字符</li></ul></li></ul>]]></content>
    
    
    <summary type="html">闲来无事仔细了解一下 Unicode 编码规则, 并尝试实现一些 &amp;#x6709;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3662;&amp;#3662;&amp;#3662;&amp;#3662;&amp;#3657;&amp;#3657;&amp;#3657;&amp;#3657;&amp;#x8da3;&amp;#3657;&amp;#3657;&amp;#3657;&amp;#3657;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3662;&amp;#3662;&amp;#3662;&amp;#3662;的&amp;#x7279;&amp;#x20dd; &amp;#x0333;&amp;#x0333;&amp;#x308;&amp;#x303;&amp;#x6548;&amp;#x200b;&amp;#x0333;&amp;#x0333;&amp;#x308;&amp;#x303;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.liukairui.me/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    <category term="编码规范" scheme="https://blog.liukairui.me/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    
    <category term="编码规范" scheme="https://blog.liukairui.me/tags/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    <category term="Unicode" scheme="https://blog.liukairui.me/tags/Unicode/"/>
    
  </entry>
  
  <entry>
    <title>🏗️前端面试题速记</title>
    <link href="https://blog.liukairui.me/article/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%80%9F%E8%AE%B0/"/>
    <id>https://blog.liukairui.me/article/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%80%9F%E8%AE%B0/</id>
    <published>2022-12-05T16:00:01.000Z</published>
    <updated>2022-12-05T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="跨域">跨域</h3><ul><li><p>触发原因:</p><ul><li><p><strong>URL不对</strong>: 协议, 地址, 端口不同违反同源策略.响应头 <code>Access-Control-Allow-Origin</code> 没有正确配置</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">Request： Access-Control-Request-Private-Network<span class="token operator">:</span> <span class="token boolean">true</span>Resonse：Access-Control-Allow-Private-Network<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>触发时机: AJAX, <code>&lt;img&gt;</code>,<code>&lt;svg&gt;</code> 中图片的 https 跨域</p></li><li><p>解决方案</p><ul><li>JSONP</li><li>代理服务器</li><li>后端改头</li></ul></li></ul>]]></content>
    
    
    <summary type="html">背呀背呀背~</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
