<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LiuKairui&#39;s Blog</title>
  
  <subtitle>整点薯条</subtitle>
  <link href="https://blog.liukairui.me/atom.xml" rel="self"/>
  
  <link href="https://blog.liukairui.me/"/>
  <updated>2023-03-02T16:00:01.000Z</updated>
  <id>https://blog.liukairui.me/</id>
  
  <author>
    <name>Liu Kairui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>媒体元数据相关方法</title>
    <link href="https://blog.liukairui.me/article/%E5%AA%92%E4%BD%93%E5%85%83%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://blog.liukairui.me/article/%E5%AA%92%E4%BD%93%E5%85%83%E6%95%B0%E6%8D%AE%E7%9B%B8%E5%85%B3%E6%96%B9%E6%B3%95/</id>
    <published>2023-03-02T16:00:01.000Z</published>
    <updated>2023-03-02T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直好奇 chrome /操作系统是如何获取到用户网站正在播放的媒体信息(标题, 作者, 播放进度,专辑封面)并提供类似上一首下一首 API 的</p><p><img src="./媒体元数据相关方法/chrome_player.png" style="zoom:50%;" /></p><p><img src="./媒体元数据相关方法/macos.jpg" style="zoom: 25%;" /></p><p>曾经有了解过 Linux 上基于 D-Bus 的 <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvTVBSSVM=">mpris<i class="fa fa-external-link-alt"></i></span>协议大概可以猜到系统可以通过类似的协议获取到浏览器上报的媒体信息,但是一直不明白浏览器是怎么获取到网站播放的媒体信息的.</p><h2 id="video-标签上的元数据"><code>&lt;video&gt;</code>标签上的元数据</h2><p>考虑到 <code>&lt;video&gt;</code> 有一个<code>onloadedmetadata</code> 回调, 感觉 <code>&lt;video&gt;</code>上肯呢个存着视频的元数据, 于是读取 <code>&lt;video&gt;</code> 的属性,发现上面<strong>只有播放进度, 总时长, 视频长宽</strong>这几个信息.视频的标题, 作者, 专辑名并没有</p><h2 id="从无障碍角度入手">从无障碍角度入手</h2><p>对于视觉障碍用户,网站在播放视频的时候一定做了特殊照顾(例如只展示封面, 自动朗读字幕) 在MDN 上找到了 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYlZUVF9BUEk=">WebVTT<i class="fa fa-external-link-alt"></i></span>该文件<strong>标识了媒体标题,</strong> 但是这似乎并不是一套强制标准,很多网站都没有使用</p><h2 id="从-api-角度入手">从 API 角度入手</h2><p>我们只是想知道 JS 上报媒体信息的协议名字是什么,于是我尝试爬取包含视频元信息的请求报文, 如果一个包里面只有媒体元数据,而这个 API 又是有语义的(例如<code>example.com/api/video/xxx-api/</code>) 那么大概能猜到存在一个<code>xxx</code> 协议用于描述元数据. 但是没有收获</p><h2 id="从-chromium-设计文档入手">从 Chromium 设计文档入手</h2><p>既然是 Chromium 的功能, Chromium 一定会有关于这方面的介绍. 在 <ahref="chromium.org/developers/design-documents/">Chromium项目的开发者设计文档索引</a> 搜索 <code>media</code>(因为视频音频都可以被检测, 所以不能搜索 <code>video</code> /<code>audio</code>) 找到 <span class="exturl" data-url="aHR0cHM6Ly93d3cuY2hyb21pdW0ub3JnL2RldmVsb3BlcnMvZGVzaWduLWRvY3VtZW50cy9leHRlbnNpb25zL3Byb3Bvc2VkLWNoYW5nZXMvYXBpcy11bmRlci1kZXZlbG9wbWVudC9tZWRpYS1nYWxsZXJ5Lw==">MediaGallery<i class="fa fa-external-link-alt"></i></span>这个 feature, 在介绍中可以看到</p><blockquote><p>Overview Media and metadata access API. ...</p></blockquote><p>在 MDN 上以 <code>Media and metadata access API</code>为关键字就可以找到 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01lZGlhTWV0YWRhdGE=">MediaMetadata<i class="fa fa-external-link-alt"></i></span>这个 API.</p><p>这就是我们想要的东西, 他包含了: 标题, 艺术家, 组, 创建者, 专辑名,媒体相关的图片(一般是专辑封面)数组</p><p>一下是一个 metadate 样例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">navigator<span class="token punctuation">.</span>mediaSession<span class="token punctuation">.</span>metadata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediaMetadata</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">"Unforgettable"</span><span class="token punctuation">,</span>  <span class="token literal-property property">artist</span><span class="token operator">:</span> <span class="token string">"Nat King Cole"</span><span class="token punctuation">,</span>  <span class="token literal-property property">album</span><span class="token operator">:</span> <span class="token string">"The Ultimate Collection (Remastered)"</span><span class="token punctuation">,</span>  <span class="token literal-property property">artwork</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/96x96"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"96x96"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/128x128"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"128x128"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/192x192"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"192x192"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/256x256"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"256x256"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/384x384"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"384x384"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">"https://dummyimage.com/512x512"</span><span class="token punctuation">,</span>      <span class="token literal-property property">sizes</span><span class="token operator">:</span> <span class="token string">"512x512"</span><span class="token punctuation">,</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"image/png"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更多功能">更多功能</h2><p>mediaSession 还可以控制播放位置, 切换音轨, 挂断电话, 切换麦克风,开启摄像头</p><p>参考: https://web.dev/media-session/</p>]]></content>
    
    
    <summary type="html">一些与媒体元信息相关的 BOM API</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化总结</title>
    <link href="https://blog.liukairui.me/article/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.liukairui.me/article/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</id>
    <published>2023-02-22T16:00:01.000Z</published>
    <updated>2023-02-22T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="ce0878a31f3619d8370ad5cb8ab34ce1b24bb52be73a2d60c463f124ea625367"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">文章被加密了, 请输入密码查看.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">🔒各种各样性能优化的奇淫异巧</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="性能优化" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="加密文章" scheme="https://blog.liukairui.me/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    
    <category term="性能优化" scheme="https://blog.liukairui.me/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>一些 React 的 Tips</title>
    <link href="https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BReact%E7%9A%84Tips/"/>
    <id>https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BReact%E7%9A%84Tips/</id>
    <published>2023-02-12T16:00:01.000Z</published>
    <updated>2023-02-12T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础">基础</h2><ul><li><p><strong>修改数组类型的 state</strong></p><ul><li><p>💩拷贝-修改-回填</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// push 会修改原数组所以必须复制</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> items <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>👍️合并-回填</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">items</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">// concat 并不会修改原数组</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong><code>state</code> &amp; <code>props</code>异步的</strong></p><ul><li><p>💩直接使用 <code>state</code> &amp; <code>props</code> 做更新</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>increment<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>👍️使用函数更新</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">counter</span><span class="token operator">:</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> props<span class="token punctuation">.</span>increment<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong><code>useState</code>初始值何时采用函数作为入参</strong></p><ul><li><p>当初始值需要被计算时</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 💩 在每次渲染组件时, reduce 都会被计算一遍结果然后被丢弃</span><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  props<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍️ 在每次渲染组件时, 都会声明一个匿名函数, 但是函数不会执行, 不会计算 reduce</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始值是很复杂对象时</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">,</span> k3<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> k1000<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 💩 在每次渲染组件时, 都要花大力气一个很大的对象, 然后丢弃</span><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>k1<span class="token punctuation">,</span> k2<span class="token punctuation">,</span> k3<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> k1000<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍️ 函数的声明耗时与函数内部的代码量不相关</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong><code>useState</code> &amp;<code>useRef</code></strong></p><ul><li><p>区别: <code>useState</code> 的值在每个 <code>render</code>中都是独立存在的, 而 <code>useRef.current</code>则更像是相对于render函数的一个全局变量, 每次他会保持 <code>render</code>的最新状态. (<code>useRef</code> 相当于创建了类组件的成员变量)</p></li><li><p>场景</p><ul><li>变量维护 UI 状态, 更新时需要刷新 UI: <code>useState</code></li><li>变量不维护 UI 状态, 更新时不需要刷新 UI: <code>useRef</code></li><li>变量不更新: <code>const [foo] = useState(initValue)</code></li></ul></li><li><p>陷阱: 不要使用 <code>ref</code> 非幂等(增量)的更新<code>ref</code>. 在 StrictMode 的 Dev 环境下, 组件会被渲染两次,以检查组件的幂等性, 并且不提供 Warning...</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ref1<span class="token punctuation">.</span>current <span class="token operator">=</span> ref1<span class="token punctuation">.</span>current <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 💩 会执行两次相当于 + 2</span>ref1<span class="token punctuation">.</span>current <span class="token operator">=</span> someState <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 👍️ state 连续渲染两次值并不会变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>TODO</p></li></ul>]]></content>
    
    
    <summary type="html">菜菜子</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://blog.liukairui.me/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>WebAnimation 与 FLIP 技术</title>
    <link href="https://blog.liukairui.me/article/WebAnimation%E4%B8%8EFLIP%E6%8A%80%E6%9C%AF/"/>
    <id>https://blog.liukairui.me/article/WebAnimation%E4%B8%8EFLIP%E6%8A%80%E6%9C%AF/</id>
    <published>2023-02-08T16:00:01.000Z</published>
    <updated>2023-02-08T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web-animations-api">Web Animations API</h2><p>类似于 CSS in JS 的 animation 实现.</p><ul><li><p>基本使用</p><ul><li><p>定义关键帧</p><p>使用对象数组的模式定义关键帧</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> aliceTumbling <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">'rotate(0) translate3D(-50%, -50%, 0)'</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#000'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#431236'</span><span class="token punctuation">,</span> <span class="token literal-property property">offset</span><span class="token operator">:</span> <span class="token number">0.3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">'rotate(360deg) translate3D(-50%, -50%, 0)'</span><span class="token punctuation">,</span> <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">'#000'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <code>offset</code> 指定关键帧出现在动画位置的百分比,首尾对象默认 <code>offset = 0/1</code></p><p>若不指定 <code>offset</code> 则直接选取中点作为 <code>offset</code>,例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 第一个元素, offset = 0</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">offset</span><span class="token operator">:</span> <span class="token number">0.4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 手动指定, offset = 0.4</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 未指定, 均分为 0.4 + (1-0.4)/3*1 = 0.6</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 未指定, 均分为 0.4 + (1-0.4)/3*2 = 0.8</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span> <span class="token comment">// &lt;- 最后一个元素, offset = 1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义动画执行模式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> aliceTiming <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>  <span class="token literal-property property">iterations</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行动画</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> anim <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>aliceTumbling<span class="token punctuation">,</span> aliceTiming<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>Hooks</p><ul><li>下面的 <code>anim</code> 就是 <code>elem.animate()</code>的返回值</li><li><code>anim.play() / anim.pause()</code>: 执行 / 暂停动画. 注意,动画在 <code>animate()</code> 的时候回自动执行, 如需手动控制需要立刻<code>pause</code> 一下</li><li><code>anim.playbackRate</code>: 动画执行速率(可以为负数),可写属性</li><li><code>anim.currentTime</code>: 动画执行时间, 可写属性</li><li><code>anim.effect.timing.duration</code>: 动画持续时间, 类似属性见<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYl9BbmltYXRpb25zX0FQSS9Vc2luZ190aGVfV2ViX0FuaW1hdGlvbnNfQVBJ">MDN<i class="fa fa-external-link-alt"></i></span></li><li><code>anim.finish()</code>: 动画结束</li><li><code>anim.cancel()</code>: 终止动画</li><li><code>Animation.reverse()</code>: 反向播放动画</li><li><code>document.getAnimations()</code>: 获取全部 Web Animation注册动画</li><li><code>anim.onfinish(callback)</code>: 动画结束回调</li><li><code>anim.oncancel(callback)</code>: 动画取消回调</li></ul></li></ul><h2 id="flip-技术">FLIP 技术</h2><p>当我们需要对 DOM 的位置做调整但是又不知道目标位置的具体时可以用 FLIP实现带有过渡动画的位置调整.</p><p>例如, 有 <code>a b c d</code> 元素, 我们希望将元素变为<code>d c b a</code>. 可以直接通过 DOM API 调整位置, 但是无法实现动画.FLIP 的做法是先将元素的起始位置记下来, 再调整到目标位置, 再通过 CSS将元素调到原为止, 最后通过动画完成过渡</p><ul><li><strong>First</strong>：在任何事情发生之前，记录将要转换的元素的当前（即第一）位置和尺寸。您可以使用<code>element.getBoundingClientRect()</code>它，如下所示。</li><li><strong>Last</strong>：执行使过渡瞬间发生的代码，并记录元素的最终（即last）位置和尺寸。</li><li><strong>Invert</strong>：由于元素位于最后一个位置，我们想通过<code>transform</code>修改其位置和尺寸来创建它位于第一个位置的错觉。这需要一点数学运算，但并不难。</li><li><strong>Play</strong>：元素反转（并假装在第一个位置），我们可以通过将其设置为<code>transform</code>来将其移回到最后一个位置<code>none</code>。</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly92Mi52dWVqcy5vcmcvdjIvZ3VpZGUvdHJhbnNpdGlvbnMuaHRtbCNMaXN0LU1vdmUtVHJhbnNpdGlvbnM=">vue2 文档<i class="fa fa-external-link-alt"></i></span>中提到的效果</p><iframe src="https://codesandbox.io/embed/github/vuejs/v2.vuejs.org/tree/master/src/v2/examples/vue-20-list-move-transitions?fontsize=14&amp;hidenavigation=1" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="vue-20-list-move-transitions" allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking" sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"></iframe><h2 id="动画实现的比较">动画实现的比较</h2><p>动画的实现方法:</p><ul><li>纯 CSS (animation / transition) with GPU</li><li>纯 JS (requestAnimationFrame &amp; style)</li><li>WebAnimation API</li></ul><p>其中</p><ul><li><p>JS 实现的动画会被同步代码阻塞. 但是更加灵活</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;- request 卡死</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>不使用 GPU 渲染的 CSS 动画会被同步代码阻塞, 采用 GPU 的不阻塞.只要动画涉及的属性不引起 reflow 动画的采样就会交给 GPU 处理.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#alice_css</span> <span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> cssRound infinite 3s linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> cssRound</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token comment">/* &lt;- left 会引发重绘, 此时动画的渲染是由 CPU 完成的, 如果执行 while(true); 动画就会卡死*/</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#alice_css</span> <span class="token punctuation">&#123;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> cssRound infinite 3s linear<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> cssRound</span> <span class="token punctuation">&#123;</span>  <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* &lt;- rotateZ 不会引发重绘, 此时动画的渲染是由 GPU 完成的, 如果执行 while(true); 动画不会卡死*/</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此, 能使用 CSS 动画的就不要用 JS 动画</p></li><li><p>WebAnimation API: 通过 JS 的方式定义动画, 最终会将动画效果通过CSS 动画完成, 其对同步 JS 代码阻塞的表现与 CSS 动画一致</p><p>这个 API 既保留了 JS 的灵活性(控制动画执行, 动画执行观测, 与JS交互),同时使用类似 CSS 的方式执行动画, 减少了同步代码对动画的影响</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> aliceJs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'alice_js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> aliceRoundJs <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">'rotateZ(0deg)'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 同步代码阻塞也卡死</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token string">'rotateZ(360deg)'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> aliceTimeJs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    <span class="token literal-property property">iterations</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  aliceJs<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>aliceRoundJs<span class="token punctuation">,</span> aliceTimeJs<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> aliceJs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'alice_js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> aliceRoundJs <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'0'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// &lt;- 同步代码阻塞也不卡死</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token string">'300px'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> aliceTimeJs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>  <span class="token literal-property property">iterations</span><span class="token operator">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>aliceJs<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>aliceRoundJs<span class="token punctuation">,</span> aliceTimeJs<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">一些动画相关的魔法</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="动画" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%8A%A8%E7%94%BB/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="性能" scheme="https://blog.liukairui.me/tags/%E6%80%A7%E8%83%BD/"/>
    
    <category term="动画" scheme="https://blog.liukairui.me/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>Chrome DevTool Console APIs</title>
    <link href="https://blog.liukairui.me/article/ChromeDevToolConsoleAPIs/"/>
    <id>https://blog.liukairui.me/article/ChromeDevToolConsoleAPIs/</id>
    <published>2023-02-02T16:00:01.000Z</published>
    <updated>2023-02-02T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="console-apis">Console APIs</h2><blockquote><p>来自: https://developer.chrome.com/docs/devtools/console/api</p><p>以下插件可在 JavaScript 代码中使用, 非 DevTools 专有 API</p></blockquote><ul><li><p><code>console.assert(assertion, obj1[, obj2...])</code>: 传入一个boolean 若为假则抛出异常</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>number <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">number</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> errorMsg<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>console.count([label])</code>: 输出 label 被放入 count执行的次数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// default: 1 (不写 label 就是 default)</span>console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">'coffee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// coffee: 1</span>console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token string">'coffee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// coffee: 2</span>console<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// default: 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>console.countReset([label])</code>: 重置一个 count</p></li><li><p><code>console.debug / info / error / warn</code>: 与<code>console.log</code> 用法相同, 但等级不同</p></li><li><p><code>console.dir()</code>: 打印对象</p></li><li><p><code>console.dirxml(xml)</code>: 打印 XML 对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">dirxml</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>console.table</code>: 打印表格</p></li><li><p><code>console.group*</code>: 一系列打印可折叠日志的方法</p></li><li><p><code>console.time([label]) / console.timeEnd([label])</code>:计时</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> square <span class="token operator">=</span> i <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>console.trace()</code>: 打印当前调用栈</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">first</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">second</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">third</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">third</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">fourth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">fourth</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="console-实用-apis">Console 实用 APIs</h2><blockquote><p>内容来自:https://developer.chrome.com/docs/devtools/console/utilities</p><p>以下 API 在 JS 中不可用, 仅限 DevTool 下使用</p></blockquote><ul><li><p><code>$_</code>: 返回最近计算的表达式值</p></li><li><p><code>$0-$4</code>: 返回最近 1 - 5 个 Element面板选中的元素</p></li><li><p><code>$(selector, startNode)</code>: 选中一个元素, 相当于<code>document.querySelector(selector)</code>, 其中<code>startNode</code> 为检索的根节点. 注意<strong>这不是jQuery</strong></p></li><li><p><code>$$(selector, startNode)</code>: 选中元素, 相当于<code>document.querySelectorAll(selector)</code>, 其中<code>startNode</code> 为检索的根节点. 注意<strong>这不是jQuery</strong></p></li><li><p><code>$x(selector)</code>: 通过 <code>xpath</code> 选中元素, 例如<code>$x("//p")</code></p></li><li><p><code>copy(object)</code>将指定对象的字符串表示形式复制到剪贴板</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">copy</span><span class="token punctuation">(</span>$0<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>debug(fn) / undebug(fn)</code>: 调试函数,当函数被调用时中断执行并跳转源代码面板</p></li><li><p><code>dir / dirxml / key / value</code>: 和<code>console.*</code> 一样, 只不过是做了 preclude</p></li><li><p><code>inspect(object / function)</code>: 若为 Element 则在Element 面板选中元素. 若为 function 则在源代码中显示函数</p></li><li><p><code>getEventListeners(element)</code>: 获取 Element的所有事件监听.</p></li><li><p><code>keys(object) / values(object)</code>: 获取对象的 key /value</p></li><li><p><code>monitor(fn) / unmonitor(fn)</code>:当函数被调用时输出函数名与调用参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">monitor</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// function sum called with arguments: 1, 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>monitorEvents(element, stirng[] | string) / unmonitorEvents(object[, events])</code>:监听对象的事件被触发, 触发后输出事件与 <code>event</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">monitorEvents</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"resize"</span><span class="token punctuation">,</span> <span class="token string">"scroll"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// resize Event &#123;isTrusted: true, type: 'resize', target: Window, currentTarget: Window, eventPhase: 2, …&#125;</span><span class="token function">monitorEvents</span><span class="token punctuation">(</span>$0<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>profile([label]) / profileEnd([label])</code>: 开启 /关闭一个 JavaScript 性能分析. 关闭后可在 DevTool 的 JavaScript性能剖析器查看分析内容. <strong>支持同时开多个分析器</strong></p></li><li><p><code>queryObjects(Constructor)</code>:返回一个构造函数的所有实例的<strong>类数组</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">queryObjects</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token comment">//Array(20)</span><span class="token comment">//0: Promise &#123;&lt;pending>&#125;</span><span class="token comment">//1: Promise &#123;&lt;pending>&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">一些 Concole API 以及一些只有在 Chrome DevTool Console 下可用的魔法</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="DevTool" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/DevTool/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="DevTool" scheme="https://blog.liukairui.me/tags/DevTool/"/>
    
    <category term="调试" scheme="https://blog.liukairui.me/tags/%E8%B0%83%E8%AF%95/"/>
    
    <category term="chrome" scheme="https://blog.liukairui.me/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>奇怪的 DOM API</title>
    <link href="https://blog.liukairui.me/article/%E5%A5%87%E6%80%AA%E7%9A%84DOMAPI/"/>
    <id>https://blog.liukairui.me/article/%E5%A5%87%E6%80%AA%E7%9A%84DOMAPI/</id>
    <published>2023-01-18T16:00:01.000Z</published>
    <updated>2023-01-18T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="node-element">Node &amp; Element</h2><ul><li><p><strong>两者关系</strong>: Element 是 Node 的子类</p></li><li><p><strong>区分方法</strong>: 一个简易的区分 Node 和 Element的方法是: <strong>所有按照标签语法书写的元素都是 Element</strong>.依照这个规则,</p><ul><li><p>以下节点都是不是 Element 而是 Node</p><ul><li><p>Text Node: <code>"I am a text node"</code></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0NEQVRBU2VjdGlvbg==">CDataSection Node<i class="fa fa-external-link-alt"></i></span>:<code>&lt;![CDATA[  &lt; &gt; &amp; ]]&gt;</code></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Byb2Nlc3NpbmdJbnN0cnVjdGlvbg==">ProcessingInstruction Node<i class="fa fa-external-link-alt"></i></span>:<code>&lt;?xml-stylesheet type="text/css" href="rule.css"?&gt;</code></p></li><li><p>Comment Node: <code>&lt;!-- I am comment--&gt;</code></p></li><li><p>Document Type Node: <code>&lt;!doctype html&gt;</code></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0RvY3VtZW50RnJhZ21lbnQ=">DocumentFragment Node<i class="fa fa-external-link-alt"></i></span>: <code>#document</code></p></li><li><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0F0dHI=">AttributeNode<i class="fa fa-external-link-alt"></i></span>: <code>class="dmeo"</code></p></li></ul></li><li><p>以下节点是 Element</p><ul><li>Element Node</li><li>Document Node</li></ul></li></ul><p>可以采用 <code>node instanceof Node</code>,<code>node instanceof Element</code> 判断节点类型</p><p>也可以采用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL05vZGUvbm9kZVR5cGU=">nodeType<i class="fa fa-external-link-alt"></i></span>判断</p></li><li><p><strong>property 区别</strong></p><ul><li><p><strong><code>childNodes</code> &amp;<code>children</code></strong></p><p>后者只能获取子 <code>Element</code> 不能获取非 Element 的 Node.前者返回的是 <code>NodeList</code> 后者返回的是<code>HTMLCollection</code>. <code>HTMLCollection</code>没有任何数组方法, 例如 <code>map()</code>, <code>find()</code>,<code>forEach()</code> 等等. 但是NodeList确实有 <code>forEach()</code>方法. 这是它唯一拥有的数组方法. <code>HTMLCollection</code>总是实时更新.</p></li><li><p><strong><code>firstChild</code> &amp;<code>lastChild</code></strong> 返回的 <code>NodeList</code></p></li><li><p><strong><code>getElement*</code></strong> 返回的是<code>HTMLCollection</code></p><p><strong><code>query*</code></strong> 返回的是<code>NodeList</code></p></li><li><p><strong><code>tagName</code> &amp;<code>nodeName</code></strong></p><p><code>nodeName</code> 为 <code>Node</code> 的方法,<code>tagName</code> 为 <code>Element</code> 的方法</p><p><code>nodeName</code> 结果全大写, <code>tagName</code>全小写</p></li><li><p><strong><code>innerText</code> &amp;<code>textContent</code>:</strong> <code>innerText</code> 是<code>Element</code> 的方法, <code>textContent</code> 是<code>Node</code> 的方法</p></li><li><p><strong><code>setAttribute</code></strong> 是一个<code>Element</code> 方法</p></li><li><p>CSS 选择器只能选中 Element./img</p></li></ul></li></ul><h2 id="innertext-textcontent"><code>innerText</code> &amp;<code>textContent</code></h2><ul><li><code>innerText</code> 是 <code>Element</code> 的方法,<code>textContent</code> 是 <code>Node</code> 的方法</li><li><code>textContent</code> 会把所有子元素的文本连接起来并返回, 但是<code>innerText</code> 会返回一个"人类可见&amp;可读"的文本,它不会返回不可见元素的文本(例如<code>&lt;style&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;span style="display:none"&gt;</code>).就好像你用鼠标选中这段文本后再 Ctrl+C 得到的文本.</li><li>也正因为上面这一点, 所以在读取(或修改)一个元素的<code>innerText</code> 属性时会为了计算 CSS 而造成一次重绘(reflow),所以它的性能比 <code>textContent</code> 低.</li></ul><h2 id="样式与属性">样式与属性</h2><ul><li><p>增加样式:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>增加 class</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span>className<span class="token operator">=</span><span class="token string">'aaa'</span>  <span class="token comment">// 设置元素的class为aaa ，如果元素上原本有class则会覆盖</span>Ele<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span> <span class="token comment">// 给Ele新增aaa</span>Ele<span class="token punctuation">.</span>className <span class="token operator">+=</span> <span class="token string">" aaa"</span>  <span class="token comment">// 给Ele新增aaa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>包含 class</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>增加属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"data-id"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"data-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取属性值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"data-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p>以下内容来自: https://juejin.cn/post/6966062224892756005</p></blockquote><h2 id="尺寸相关">尺寸相关</h2><ul><li><p>尺寸示意图</p><figure><img src="./img08.jpg" alt="img01" /><figcaption aria-hidden="true">img01</figcaption></figure></li><li><p>获取实际屏幕宽高</p><figure><img src="./img01.png" alt="img01" /><figcaption aria-hidden="true">img01</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">W</span>  <span class="token operator">=</span>  window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>width<span class="token keyword">const</span> <span class="token constant">H</span>  <span class="token operator">=</span>  window<span class="token punctuation">.</span>screen<span class="token punctuation">.</span>height<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取浏览器宽高</p><figure><img src="./img02.png" alt="img02" /><figcaption aria-hidden="true">img02</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>outerWidth<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>outerHeight<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取当前窗口宽高（浏览器视口宽高）</p><figure><img src="./img03.png" alt="img03" /><figcaption aria-hidden="true">img03</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取元素布局宽高</p><figure><img src="./img04.png" alt="img04" /><figcaption aria-hidden="true">img04</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取元素内容宽高</p><figure><img src="./img05.png" alt="img05" /><figcaption aria-hidden="true">img05</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> element<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取滚动后被隐藏页面的宽高</p><figure><img src="./img06.png" alt="img06" /><figcaption aria-hidden="true">img06</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">H</span> <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token constant">W</span> <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取元素距离顶部和左边距离</p><figure><img src="./img07.png" alt="img07" /><figcaption aria-hidden="true">img07</figcaption></figure><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> top <span class="token operator">=</span> Ele<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span><span class="token keyword">const</span> left <span class="token operator">=</span> Ele<span class="token punctuation">.</span>offsetLeft<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="事件相关">事件相关</h2><h3 id="鼠标事件">鼠标事件</h3><ul><li><p>单击事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>双击事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">ondblclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ondblclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>右击事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">oncontextmenu</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"oncontextmenu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标按下事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmousedown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标移动事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmousemove"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标抬起事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Ele<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmouseup"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标进来事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 鼠标移动到自身时候会触发事件，同时移动到其子元素身上也会触发事件</span>Ele<span class="token punctuation">.</span><span class="token function-variable function">onmouseover</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmouseover"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 鼠标移动到自身是会触发事件，但是移动到其子元素身上不会触发事件</span>Ele<span class="token punctuation">.</span><span class="token function-variable function">onmouseenter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmouseenter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>鼠标离开事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 鼠标移动到自身时候会触发事件，同时移动到其子元素身上也会触发事件</span>Ele<span class="token punctuation">.</span><span class="token function-variable function">onmouseout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmouseout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 鼠标移动到自身是会触发事件，但是移动到其子元素身上不会触发事件</span>Ele<span class="token punctuation">.</span><span class="token function-variable function">onmouseleave</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onmouseleave"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="键盘事件">键盘事件</h3><ul><li><code>keydown</code>：当用户按下键盘上的任意键时触发，而且如果按住按住不放的话，会重复触发此事件。</li><li><code>keypress</code>：当用户按下键盘上的字符键时触发（就是说用户按了一个能在屏幕上输出字符的按键keypress事件才会触发），而且如果按住不放的，会重复触发此事件（按下Esc键也会触发这个事件）。</li><li><code>keyup</code>：当用户释放键盘上的键时触发。</li></ul><h3 id="表单事件">表单事件</h3><ul><li><code>submit</code>：表单提交</li><li><code>reset</code>：表单重置</li><li><code>change</code>：值发生改变</li><li><code>blur</code>：离焦（不会冒泡）</li><li><code>focus</code>：聚焦（不会冒泡）</li></ul><h3 id="window">window</h3><p><code>window</code>事件指的是浏览器窗口本身而不是窗口内的文档对象。</p><ul><li><code>onload</code>：当文档和资源加载完成后调用</li><li><code>unload</code>：当用户离开当前文档转而其他文档时调用</li><li><code>resize</code>：浏览器窗口改变</li></ul><h3 id="其他事件">其他事件</h3><ul><li><p><code>beforeunload</code>：关闭浏览器窗口之前触发的事件</p></li><li><p><code>DOMContentLoaded</code>：文档对象加载完成之后就触发的事件，无需等待样式、图片等资源</p></li><li><p><code>readystatechange</code>：document有 readyState 属性来描述document 的 loading状态，readyState 的改变会触发 readystatechange事件</p><ul><li><p><code>document.readyState === 'complete'</code>页面已加载完毕</p></li><li><p><code>document.readyState === 'loading'</code>页面正在加载</p></li></ul></li><li><p><code>pageShow</code> 和<code>pagehide</code>：每次用户浏览关闭页面时触发</p></li></ul>]]></content>
    
    
    <summary type="html">易混 &amp; 易忘的 API 们</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>一些@&lt;svg width=&quot;32&quot; height=&quot;32&quot; viewBox=&quot;0 0 24 29&quot; style=&quot;vertical-align:bottom&quot;&gt;&lt;path fill=&quot;currentColor&quot; d=&quot;M19.877 1.468L24 2.534v18.942l-4.123 1.056V1.468zM6.53 10.898l4.115 1.064v8.978L6.53 22.003V10.896zM0 2.572l4.115 1.064v16.736L0 21.428V2.572zm17.455 5.62V19.3l-4.122-1.064V9.257l4.122-1.064z&quot;/&gt;&lt;/svg&gt;的东西</title>
    <link href="https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BByteD%E7%9A%84%E4%B8%9C%E8%A5%BF/"/>
    <id>https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BByteD%E7%9A%84%E4%B8%9C%E8%A5%BF/</id>
    <published>2023-01-17T16:00:01.000Z</published>
    <updated>2023-01-17T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="38bffcf0e251c45491f5560fa738f4cf6454928abedbfc142e66ac9da16be770">34e85ffb0b6d2d12b6c2e177fdc7251e7292bae7e81645cf9a3bcb831b55e8cc88bdb9fee83aaedf03f728c5eae46c29a9c8995b7a2cce5ac17cad16f25e8ba844b4de052198c04f952f42f020fac630225c4be6b68123b5e693ff50e8ff3adbbf11fb5ac5d7e44a46b0b472269efaac6b8afa19c5b49b58b79050b28bfabb03149f3ba01cfecee10ed700e0f52254a8b85d210f072b4d7890e5f2a99fdb826e2f4defb0b4d46a209e3acfa1ebdb30c5e61cb76b296f21f67cca71eb7fd9c0d21da779ccc4bbf5b668289672afa38a49f7954dba6bf5984f973e4056309b2f4e658bfd0ac15031fbfd595462d9e2566224bb88b0c840b7d87f222010313806424573a9a95f939075c5755911f85bb0cc55b4af2b49ef1645b4830d549a7ab9ee0f1ab09512f64db9f226d4a7ca0a9c833083df74522cb2ac29fe909f4024bdec848fda0d16b68002f5f1c7bc761cc77e747a803299c59d28828e025b09060ac6ddde3259f42d69f202a5e87864065effc2170222eb877655cbbc75808d34bffda5394ec6cbc704782b30e5e61eefe5d10a2b277479b01f26e5d9c5a4be4e7ae4fa082ccb17a691c4efb7d6e61c6025d410969bbdb89601e5226d65f9004b689bfb46e237a349ea297be3ea925d308f5ecd6a1ac5245e52221d15eb20c3041d6557061f086c1aa1c6c0a97848dba731071267b72e712ff3e3e93cec8b1fb39a73e4984477d74fea6f678f7859b448f8bc8746ace908f79f924d7dec3127ff6c54b7c4acc8d645bc5199b468b8698ddb926238e349d5e8e742e341bfc16381be93fe02a0ab204c9135a243d6ae405806890da171987ecce426a4fea13b7979bc8bf17c2442f6d2a56375cc45a2a611e5d5c1ba140b205a6e301cbe1630c88c36d0c1462e831e64ec6fb018db6b6c9708e7c339e36cc79c623eebdd5f29b938be0c2811f87967178f27ac69ef6e1e6ef582440ed2eb617edabec1c98d30e06e9f650931d63991e5752de806dadf6cc81eec5f6fc8953108c605c8a8883dae79d5584bc7c3d1333ff497286b5103a8109b5c27872ba9c6f4573c1614a3b4414706592403f597e1e8bc38eeb74163f62da0a3690d3b40f5c1079484b4ee44a038d96e0c25db317e459f24dfd86552c49ac50fdef70b16686e68eb6490399fc2ec7a9e3a71099b477476bee3c4c2829e828006843d91accb3b558e2c8ae41ffd40092fae7a909dc5d5d3bcc24924d9c91f5d34e2e0b8be21e2333d082518a504f583d06e137d04778d6eb98024fde689edd0c60a3bd56ca29a24bbce7f25d9a47c3d73a647aae9666a7228853810f1b1dfed42003f7552f7b997e7d072e3a857090700ed369226fbee4e42eb67956db757dd28c8e34ecbafd23f382e5064951e74cfb8f165646e186ded8f07538015c8ede4e43aeff148a1786d037e58408dfb05a6f23a2a9bfa68db60e3123af5e9a18258ef2a1c9113417acc241535e40e42575d8358629eda5df4cc00d6e33c884a38d7d179aae2bb5c1b10e29d925ca2498e55af814d87f062dc4baf9ed04dd8025ee7e1fe014caebd1615f64dbbd1ff1fb6496054e45f43b5ee08b981773e9ab83c6209a7e4177e2613c6b2e314494e2032218a5226c14ddeb9b2becffccba70a4bf69ed68186e616fa52a12d53829b872ebea585aeb849581be1c51cae3f241a0991854c7f02bdfdd73994d1071f53fc5f7c6224365d1bbb2ba98a69b7a65f417b990ebe167572561c7d8557963f3bdcb1081f991247ff0c633f256794a9f0845f66a0879154b61290182d6e32573ae5dd781556d25fbfe355b1b8fca0de8e0bd211204c4d17d89a3fa79c9b0a426735b6b9bc0e322f9a040d9f0e8eb4ffc647493c2dffe748c789dee2f8270fd1d0e86637ab0cf403230a5698198918d75f91b1b0ef4dbd73ac54e109ef7ff4d68e0ce93d11a15a86189fb6a0d660bc6c97a5464bc5e757eb54c4fab68db7b04cc5c4c208c8ffa4e0da947ce7f4e84ea45fc21bec2f154745948bde90dccfef1d9709e350b7ef62007617e0e31fa5514f497420fc622f01db4eee57f15220bae6e3040ab41821faa2017a3a0b2610b1a1f322e488ce058bdd96cff2401c7a009ac825eb336d65d31d201e4453992adc7f66edaf7d6ebf5d7464c0decef042bf882b591d424c1c5d2f40886456cfdf12abab453026757ea339ea83d5bc6251220fbcd32f836b198987b31a2d39331e851d2cc89a1cc62c30ac312eced4f0e9d1c2fd84b36ae621f3bc4be42b69f7fb689665a9722dfa88e5a1bd87e598f188879fac896d86e830bda20f158bd33777034375a243293194c31558f885d39b64325af321154984b5ffaf4d2f5e83f485e7ca342dac5c4b34b3a81197d18e9282cdc29651b598b8110bc147478faae7963dbaf0c750d26a2cc75c71da533750f46761c7bacf6776a0232815f681a4ee82c5ee39f01df5d5b850ec8acb5f10d5aadb949844d6d06907a7cc38c7889703f045bac299146270e143096c703aab23cca0679f49552cbac3efc8eabd2fe777d2bcf4941eadfd3c09090ff0ee4b7165f1f57f1587b0180b18a783eb5b6a53c0af281296cd42a429858110d62d8fefdd26120255b4fe4487b47f99b0db7e7d523b4d0a22a05d45c36d8f85e94c94557679f2ec24ed506fb2d8b855ae19e51e30ec68aa7d3d60ef088c36610624ea44409f48cceab8a7451988d751153be79dfec13574c57763fd5305fd20e0b74303b14831ca9e9374b5a0b67950fc4bd14307b2afa66cc03699bfbdf3e7ea19f377abf89e9916e9c0d1bbef50ccafd15c1c9d13765923af81fbd1594d3660d741ed27b5559b70cd4412e630e27766aa3d226588fa63067fc38a4e1e68bd15191a1c482f27256532717db96d7bb6364a3d414ec8c7c6373b4bcc184b99ce0120c9cae8786dbba90a7a9aa7381385909a06f3304c6e63637f80fe094b85b331088665d11bf59324ecdd085c5c8a287c6c2d7b02c6f220e10736cf9b12eeb80528078c58745e26349e50134c0b513c5e8178f71160968e29b94f506f214be60c1fa5c8afc80b4f1005ac14d77605c673e8ce17bb507ceabccb5d83137838491e1fe8f7a719fe80a339e5c93876f7ee0400a7f061aaac9db5c3c06686812b1659f34c7949c9e2e0fcd63fda8988860fd9930b8c909490c33594d8e984db31986090e308e8a35ae581265cfaa10cbe027d3219cfccbcf80176c25f317c18c24deac83b7f1242c08d582fb14311653f03d67a8de5836938bdbde7fa252026d1961baa98bd063f60c530a231c565b0b74e826dcdb1fb127ad0e568035e9daaec2ad1425cbe9eabdbc8db879cda00fe8e1f6dd33140d207ad9630564f4f0f62195907f6aab52790fd7e1fa6b19ad6d9a2e519874ba023af523d7f99b4b70843b11e72950a92d4704e3d2e5242cf61ba26e1e1481c0c6579a369aa70b4d272dfe4656801a6087d7525d7cb4ae601c76348fbc403ca89f7dccc0f51af614bcadb7470e3cef4375454ca3f23068f58f8de5a5eef6e3cbd75cf0a30cbf2096a5827b93a95b3b027fdb1de02467b9e12c6f8be3e7c4273c2215766d38f0ec2ef6980df5d10233f8b726f450fadc27464af63cd1eee46bb52592d93dcf303e0c9ece31b0efad6208386eccacbc4a95f3eab7a359d20d8e4f377d93f11bb0b69ba0f8b2844acb58b9d21be4666f8c9166e6d3a10e17b01093dfa589f67b44ff5e9db55bfd3bf7ef3d25195b58237d436dfe6d1bf79c2a1aa516e061130746aa11d9b75149ba708e96d19b7a5444dcdc29b763f37988252f72883359b0bbd84a91738902e1968c3697e1acdf105869e896a709359edd9695573807bdc172dd2369e97e6e5c93b6d76cbbfd12e297a2cce927d34c8bcbeff7b47cb319c84a120b68a98bee74c02e7f7878a4f2a7e1dabfbbcfbbc53316a7ecd7763798255e23540254b84a4426d692a0ce5b8f8eff571154a5b1092083214f755412a9160e413002ee3d64c8bbf5d9c04cf6548c5801e3a7186ec402b3cbf5257c04e502d4a9d9a602e0abe94e64a3695ca6b49a32e81baa0d1db7d54e08985da9847ba1ec4590773f35fc4a34afcdac8c1f86f7193545e970d4e3ed08979490ca8263bd1b22a102a4601bb7e76c9b67b8d45197e2bb9a907318e90a650d48979ba9273e3652ebffac208f0cb8ec19c652928b9761e2f24b5b732a1422516c6ea543e1d16b91f5399456c0b1e070e22d3784769713e9e618c4fcb88c49ec348ec8fc15c60d0d8f6860976427e392b8cb8e9ce07e765c97fcc1af8f2ddbd45576a16fab5ce46ecfcec2b7029df345d59cdf9835349c6084b9dcef9098bed66c2ca5afb600d7bc7a778adae89019371105f029d5f3a16f838a0095f71bbd8c2a2fbb4382080775da2c8d949c4b0f24f490e859467797eebe329bfeebc56da6d312981c4678847d570361a9b82e50f35a8f6110e2866d4f2d18c027ac5cb2fe21df5ec7489fda5f5dde3c273e03dc0338d9ecc7b3aa5620b3d6c5b71f6477f2fc9ad4ac0e2ea1c05fa96f2c426d17bbb4065ef16c7fa916f7f9c77d30c0f03b56f0b0e2cf8968f1b745d9191c8ded64f1bc6dc35d416fa99743ea397191c91b10efd62c687fde55af01e55808d1a5b4f4ff5df547c1b35b623fee5497c3d2a058f3b5699ca82f881c1c2ff87a746c70bcbf82c0cb227775da03362f2a905732c561ce4c7703bcb662e33b0901e683fe5a532fb1f30c7702984274f311ef9167c5221ac196636ede016ed183f5df3576a424c55af56c411f6baf69d76e675f757c80a3c6f10eaf28cc12b2084203d6388b07966c27d59f28f090d692ba1d80dd448b58952b89f9285500f7d639bee8a223a2c91cfd9f044b6377e6785a2fefb34052aa3e2365d6a40b756bde00ae0817602696a274233052eea2025ec74fb8451758e5ff047c9f3960c029ccdcdf3c5afe14e4420be53d6076c0e08c90c9dd54e3ce5c8ebabc78a28608c2de0f28fddf835b874e28f27e84cb7be71fb3f7f800b8af9bfb52343fa369253368395db2fdebb83227ea27b113d2708e2978887c64392fb9a8cf824cb7c7730e58cbea27065f15b487c3e19f8a789b96e32766b7988605fbd6f6c92f6d93caa00bcd76c267be835c32d3f427c569d226644b3f09a4a0d1bfd762c1adad4d6d8b3ebab643ee4368107760fbf4c46c7d02e374020b429ee9eb303738feaec642d607a54aa9a493b2738ef036fcd6cb5782affb035b51201cd822a78b9249e282a1250015eefe02ba9179b4d1ad2879e14dce732d2cb7e608695036d80dbe833f86240d2a954546d0f745494b925cf36e4c7fc5664887c736ac734087f95a86d1bdd820b5620530dfbc933a2d7a992621a257454bef8db450b5df26c6508721da3d45ad9348957859e7b3ad9cc95199060b1e3cc1205459ba51c8e11c696bb84e7a100f427750555fcc176f240c70881216326e31e37c0365eb01f608594642406f44dfcc0a0e331cc34db2eebc7628fa4b5647e533aa3e21819454a05ce104f4344d858daf15bc34c7cab8e4d076977055a20401f46957b797efa6a8d64fa9a02816bf6431ca9d2d8bc9d8f672053a457fd8f7010dfd13ca9881b3bb358e57c2da8268715c390208ec1f3308be4718301e0b263621418e33fde922f7ad7f246c245f01c95440935e445003ea27c6060300719c024f3935c68b4fff4c228594829e9b0b116cf0eab71e156eab66825a60bdf20f83213b5057b24f7d93cb9e2ad479633c4f69f54f99522fc3001a87840e9c65311022b6adf4e4a7ec206744c287dc80403bd3cbc9ae0eef4f19e3d60701878b7d3e9fce9eb726f534efab068d85db6050c5015b1eb862df5392b026fe548d1d4cbf4a0f2d38f49d586b4db3331cd65624a7110ce48c317ff5db764394fb30d2a3e53a0e48f9b983f879c35b8676207e0d67d71b9a8388f8cf9db7b258a255dd481d7419c21312c3d6db4b4dd62b03f0b9ac6d78e03a43fca2890e82f9cd1b3881cff6d6e3f129621ba33166a84020ec8193f52bd99aaa93ab548cd300fd13c90c195e16d4e3b52e204db330ea7666c9fed559caf411edb1f1e488c73246f5e22fb8af5f42b8319bff80e298045e7dca805b9c7346ea859ff17e333744d5363d71a86f8db22f0454e12ad7dca3f6423e0ce9fb9e312c5992e1122f23dda8b43bc7b9eb0b5b0c79d11c82fcaacf88c1fe50b7b5c5c757bc1a012d274210c4e47e8d7159be84e40c32d830cdc10ac8116c20d9e1497c73c69849a25913975c01a4a4cbc4a4cc531703cc6f41f2b902b5240eccedfe49f1eda24df107b65297aa51b29c2fb59a9e422812446f2f5de33c3246730c9c0b82f59480acc6f9052541ebb3d234356acf80cc960d9b896d023adcd544f613737c99875d2bc7f49214e2c08ef907cf5697b3e0912de0883719ab6f5b306bbe15515d10c194c8e624804ab7980f2c9b4b4a6e3ff6311c018c9f11020a2067a2a1a7a74ccb382d300c0353a853d8380f122c06d7307e9f98ef5e8f5717c05e3f06dab23963539bdbaa39ada6bb05c32a711b3514faa1064bb63628fc2723873f2550efc78231cd1738dbc414f0792af2af5b1a1086f4ecb2f768e7a75f133fa59e0cd67ed9a085218047b1fb89f74643ca32381735a3fa0736008a22529496529bcdd95751d430930ed2f67c0b2c6cbc8b0f9bc904d5c1edd36d34e2af67c404b4925e973415b95d5c4d9150305d3180de0eaffd776b6cf07d5135cdb02a421a0eb11f0878567927d001dfc8b2ca466b930dae0a8d083a9949da7a156783510f8e442e52d0387dd5f79974b7185fcffda4d763101f89411e7baf80377c5f95a6a2701a66cd7d3ad5ceab34b8b4a620286f741ba1be478b3082da8b1d8f0319f3bb30a7dfc17a9d0db277b59445fc0a1ab68a39307467ab0c2ac1aa75ec77a66fe9fc6ad7d8df930c20c060e4377cf0a100251c2f328c83bdccbddfd9a6afa31cb88fb61f7824467fa7b60598c5002817bad238b86ee7b547bae69788a54dcd046d4c71c652d09cc6aac2e4acd01d0eb7d83fcc8c5acab807b993e0a9b2e01624923376fb7069aa63dfcba033b44133c98f9d0c9c5cde5c393c40a970c49e781377c25d5332ba0923e40acd95ddaae0e96dea70cc24b5e0fe65f51f25be38b7916939a17c26e631f0d28b0cf3c34c13c25354eb20d218dcf0e74e22918a8cb8c5d75bc7bb3b6214f7e2ef61f1a561c9ba4922343dc2d39ace3d275fe281aed38df98074a25ea17c9e0b8aacd73cccc540d6314bb94101bf7621f77ee648422fe93dce8d0cebf91fae13f2d6868933911992a3168819a8555ca96c7bfcdffd6343fe3e73393dd798f22a8d1c51adbb399dae7451541cd77cd86c4b96c8baaf3bf3a50bd6c4c20edf01b659ac3f805efb156e1e3743297e669c1e65870540085eb1e52e7e6d8dc6ad4cc46f37fd7575f67813778341dbbb94c2efd83a1d0b6ed08bbe1e6251e82c8d070ee7967924bafa2b786bb510d500a22f9a8a03cb6a7ecad94ff47e5b666a56ae3be9c2de724cb9bd14d16f9972a83d5e5cff3b98cac468f3c8f0d8fcfde56879977b345e85c8411aaba34bba4fdf22fe3ce4d7ead4fc2860936bc23d84815a9454fdbd28ca6dc4c887bebbd86344ec22126c3689371738eb421247f5283e6bcd0bb3a618aa5c4083e1ac46fc45babe5d1afa666de7f7dc314c09c0f50a767c81d5c9838cdf2c84571f166222162946e76adbda93c0f915bf454ea000f396b72aa0db6b83f36fc45560ab880c4bd084815d85ed36f2e1986f718353218c515be5206f18da059930b89f758ca6bb77ca2e5ad6c6ea1fed51b606312d83f9f1a5537d95d9846cb8b81d32bc386bd9bc954e904f275a462f2b29b4fd4c3396cec25665b0fd6ef29eb168efd33b2cd7b46c07887a269b60b3598d639e7229402bd9a3a46f5fdb04b1cf0a3fda2ab6db995b6e7efc4bb487bf09d4967834cc1fd1ea2977d2a3922c6d05c6e9a9ec4cddd4905ee171564281d81e80edc4ed531e546804999403adb7d1076b30973b6a7830c896dddfd2aebd7aa363711d1e9d46c83a1cb67bf1f0ceacd1aabef8cad5beec4036bb7449bd5ea7a8da4328843dd041c8671a62239f8a877c71f98099fe31023b8d9ac992169e31558eaf2d01d060a76bd23ae3a97f8c8b4e5163120143de62860b439045fca65fbccaee8d8aebed141de1c143dffcaceac9bfbee407288c3c707f065a747882dc4ea539ba1f7b7a01ca1723c0d12bca575d14481e6430c4a1ab775cfd54201ca4c6a3ee0a4e8260bb6d04c1f888da96f68b1c68d312d2e8cf24cc85024494be42c760fd5951091ea35a24048f50f0849d9aecbd49d205704e4b8b671e936f89d94a5020659c1f9f9354ddced64d0e1deb88739657381e5782ff28c3083ac9866b7a90c952b11c9ac9c2d330b4b6eb41b34c270b3a64f5d0a6a8a98426c12ae96b00e0844262e9ff2b6c7afd4e8398e99b3fb9bd957ee166ae1dc637c27f1d8be534a2313640ab19fe3003b65fd84ed70ed1b6d9fc01e54909bd4400985501d67c4a7a253cf139cc4ee1664d97b671d2f70fc46cfb5f6c1a126d1f850c790f8da8135e9a60bbcf82c91a58ae8f90919b3216c096001364c82852079e44ce933b9b809da0b08282644ab49f132992d68e3c4929491c4295c119366d4b39ea4525489ba4b3f3605ecfd8b7610e6ed24fd9e25274ec75a2183d29cfc2a2621ea26144336e38e5c5509df18bb03a3e971237a3ea19bdb2a0e639296f289e925485912e911c1111ec06227785f5e898f08229c3d28a2e4b1ab830853cd1c0ad644cf66b3d374e33bc0093c8bbde6312983addc37ec0ce8be80ed46deec641bb889fed5bed462bf90be2e6b1382d82be41eb795b85fbc19f0d0ec44a77a123871bd4ae03da980f2d1dbca584fdb19edcfc54f31b0a7b5fbd6875be6bbf7819ed795f0eff1b94b1b6f3c629136bdbc0fbae92106e7f29052e7cb191c01fcbb76683e7518e621145807670112faedd7856803e70d25d273234346d0da4c5af4f94b806fbb3d43ae6bcabf0376c401d969b38491fca03b1114339d3a72c34a805509b398d6a845f6f8eb0b1189c86c7f72954e2a0084221394e5b6e7877609ed301cdc63e54c79c1a98813467af2474a717e1f2403de1e857b6a16dd38e4a032c7557b042850e140f9b5f21620a1ea5a4add8c4725cf22182668e00b68885ed5d2977106391a1abe027d54b0520b6284d5d7606669028d68585158de5e97e21f366378546645806588a075faad57050dadc64b585f0f506525e8ad6d73d19b8a810b3ac72aaf0f9bdbef9259f744cb3708da7070eb21d141b844e6acbb64bef831192b9388b4bdf059957687e189c6e9f9dd6fc44e0d59067605c878ff1b8db0f1db300829c4446d150d410189e7f4c0015296b2c21272eb6f7bf66ae5997e6555b8696ce1d85cac94531c1fd85d013826c1b55bd653918ab3dc76830d59ae0c0ba19c13d4f7426188ea5305c266413b70c7953d4ec38c02e8d2356f42367fb6cc836bbeaf1b326c687e79feb3a615c7e9aef6fae626340a22a13ca451b7e7e31b2684ba5dca55aea4c08dea92da584a2d1afb7de72c0223d76b6643ff705ba7eca10f68183bc8ff1ad1f0c3eb6854758fd7279a1188fd934ff08e4e5487fdfce2f540e8984441fcf3513d83b050d3040d323b830811259b71cebbcfe3ca4e761cc080f8576b0d209ca46cbfe9faf1427ae4d69696a6b90bc0aa23d8e353a82d9714705d89723cb858df677be38d5f9602d05f3d68a2130bb9d2a9bc426e09a48f27348fcbc85772829cd2cf7ba28520c69ac73d73cee2ffc1f5c27d9abe3e20e1d6c52c227dff039a51de9baf52edd67fdd3c076f7a03f982523a99b292fa620c5151538ed3aa76692b51ec47dbb8ddfeda1089a9f0ed615c50cba9ecbffb163e6a56f3d67a0689962d8ed5fc47cb0dbad99a96f7def44896aa248c606a2ee51600bee4d93ab5b7c0c4297e2a47cb52ea1cb4dfd3cda5daa4a7ba8277566731b51459fe45e2849385c8df6dc5dd7faca2fd7a123aa52cfe331e0c730130681b342518faa74b20cf49aff7b1c07ae6bae495b5fb454de1eec22cc7a0e45b1816e69a369351c160ab27d02df806a275c1fc2e0bcd2092e0c16e1587f360e0a1685ed8fd5889fe307ef0d4961e3f7dba05c2ebc32a3eff4df9ed6bb3be2460f79cc84b711887222878dd4b41155a40be8095ace3200810fd730b8100ef19913826d08a7da8c4e745c4b4d0c647fd9b0f234c07d6f3059f71fb89992fcf3693188b2bddcee9e7ccdff001162ea3a655b27b79295d8014eec1ec5508e700b5bb1ddc6da3cfad13c3aedb54f24e82f91e1036b830cec58c26221f07028290cef0fae67c9c84af959d10a5ce648f36bfdfcd7853eb2017025426098e6caa8d94c21ec8ccc8a347b6d5c1deecf400db922202eea119dbda69b6755ad4e46705a3e651ddddd9a8e19b1e3c3ee7e885ab8518f51be3af259b24230c9ce023aa3d844cdba34a612e202ccbc097a2b07164d34acac8cbef184b565cdff3f634dd4d94375ef579e42dffaa25050d1dddbdce8060e4fcf7fe177f2a8f33ae29e81bd8d173586063453e8fe5abecc5e0abcbe39fb369e6144677f231584f792c737350518a3e039f3f21f86bf2dd172f55f749c8b721d2c1ffc8b4e8adb5068d1935b0874b489e718ec1c1674db0013da94ebd9ea5c4949eb4e81df3e6d3e5b510a1b91159b36aa5c4eef24013f14b64717fd2a72b3f76acf057ffdf0c83846b0fbca83a0b6194f72eec17b79589f237ccb06214ad0877b7f2998249d3506aa3bef4d5a1823a28df651c4c736fbd8700e7ef05187b2e780c5efa926739b4fc60723964bfaec75f3c70a07ea032f343e3c9d772cd45f2bb119e0f5124de5aa2a64c4d1c364a458b0bd5bb86694106aa0d3c7f8929b44124c01e7c5d9b912a9e034f19a4b02f28d13a417a0257b06cf12209b7a6e49aeb278304fd8855a4a554f2479f13cc578261f5d21737f0269ad9b334d08151e5861d100a594fa325aead93ce5ec4d52e57a99a259d23d5bf73c6ec9f5fbd1b0b087de1b2049d2f91ed6480600efd176d681e0fac5bf9fe67c120cf2cfb601732c60faa95323322a5b1ee48fb6aff67ae8c13da331ec95d03d2ec61d5065775d4bced8f88664aa7256cc9b7f983881c5b16d6501152f20181cf29f4032755a33ec43c31042a16f187fb6b2ac111d7d190b38c3128b7e74c80d1a6af7eb57a2d7bd18199431148a4f10d607f2c53a8b2cc9fe9598789535fef461ee69b1c9516edcb01afd2d05cde11e1b620f83080a4decea96d5f58d2d8c70f6840874c3b06443596eca43725f8f04a940606094b956070b4ab3321724017f0b9e46a9e0d1b24ebd50bd6ec23c117ee2e1fb768cc89d067dafda0b7113ed18c49152d2fbc0d37546051c85de1db9306b5c8b0e7719021a26df7878e5af2142faa682ce0e6b2a3abdbe785794a97c420b6e5338029ffb791ca5c88fbb8a446bf3c30464095d7db7e14999106ef8ef1c7188de2a4f2368f2e7c21c471ebb1a06935d1eeef3eb6379e0f2fd47acac385ed62abf085bb6dda69af9b1888137e7aa6e64e07f9bef5a67d53de96b2663de90a49f255ddf537e7d776622c885e94097a50b3651b6c5abe804c5aa3ad4d8637a292ab68953da098579ae08477703a72a3dee7a7c404bbe94d4db7fb4a7a850038ca0dc18e87c18a6724847eda17ebcf2ebc7026a374438fe52ebaaaf96ac84c536bb016a0359303363927651873182e5d1c3c6f7c30bcc7de794cae3aee5ab32d12930c338e7909061708e4a3db06085b19d5949a7719131d581e5dac74172c2d1dca468ab2a17e897b3c611e57f5a988eea50b3db8bbf24618a2114fb18e533576d246bbedd3e4217e5702e64f1f8117b8be59beb1df4ba4c7b1f132fc955f97616ea321a07e6bce02173d1f0aa60d214120a3d6dee903feada7b4416207196d9842976c763825caf76e259813469fbe993a74a5dadb5a77788964e842d2559a6c8a7ddd71549aacb3e91fb19b97ed3395b9a4ee1f6f38d4038b1c4956742f2c803df81f5197ab9cf1bf426a76370ce17f61d984691be7fe28a4a909ed8bf9d578698f031be77066b650e60b22d107acd2a2b7cb60c95700102d566126b64f19f2d79b8968d73df5b6ef1878c4d3291bf8cd6305dd43b6bb7027f925516a21ed8c738461eee5c6bdd7c66c18bc0bb6bc3b2c83eb7d6811d5f818cead2b90edc014a778688087059974276f843c9d8ab615cea56932896cc2220f45011762602216060a46cacb5a98fc6dbe2f916a43916812c805a2db921f67a73d938e77a212ec66ef78e32c6612d1e256030b0c8a5b61525b3980edf0281f25efa6bbb8304adb3423f4e60c8065d55bf3a39c7211c98733edb7a12d424592b97a5f5f0ffb85be0a29e40baa398dc284d22eaff12b990b161c395b5e892cacc3013f17531b0d5ab7901b181221cd8dec05fd9818d734edd55e8b235e7fa871e45c9c65fde1ef590f22645e3d73fd2d36722f9c6786e627bc1326f6dbe4ec1f1eed358c37058f5ee8bb53065a0eb8b24618b83fe66fd885ab8face9197aa728111fe9a64f01f21096101ac6ecdf7c8af0a990f0c2a3106112c5210ea88f8a23ac62a692f39d5ae95282cebb1a00381f5d2ded2be888b1b6cf579a62c49cbdaed96c5cdcdf56724ca7521a6c0bfd1c692f89e2753073f0015a247ebc19893c26c0abb758480865c654f247e2853edf7300d6d22eaec374bfe2f3b477f914f49cd3db6bb3b3919785a269368f9ad29761b28ebaed57c4466171ded28f9bcebb4dc6e349da5c43d7592703ab41c130a4aab8732ad472f90c723783ddcad219ac2afefa9e0a7731eb14e380d9e15aaeeae763bfb4c31ccea64280d01440a58bfb0f4210e58ebad96fbcbfae137c5e9c581ba13b7fd46d474f00698aafa5d7fbdeea72e09c30f350e2a25e5adbe393fd8e032d3178b231fb4db65563c742fc88309b882e16baab7a70b3ce0cf49f9ba920d446164b5aa43b738be482dec04b4ddcd61485000dcbdd54dce63096dd9ab7f598b50d93f27823ddad708c8fca175d542742b98864294224091529b96493d3a8f0a51ad8803694328ee0b18b2ec60c136cecc075abf21322bfe15ee21e74e41195a26006fac6f4322136e9c8a34551b78c1bcce5647ae106cf19e12d41bd325b16b5b74e44938acde04c7ab60da653964a03eb02c520ecb409ef3d7448a24ecce2d5e5374bba55ed275c134b65891405513e4039f402843bfe89b09bdee47d2b7841062076e3ad57c5c3a72f80d6908ca4884ccb3110f61cb0476fc58efcdb6d1ab328cf747c7e7a95b4f735611c2d188562ed910e3cb985f49be807a68ffa7a2f42501c7adeaaa6ff06134125ff79083cc980e09c99cd453d55e15a756a424bcf7bb173fcade6c4e6315a7928c44c64c0c49fd7d442e83bea3ae7421e3d07e24280e16b81aaaaadca5cf1809b5b9d63ef9c830a17c820f1f1dba4fe93de5a9d581dff6054e86a13b344ac912df5abca58b8c78d55c6a514f47e8964f20ef7b0f8292bcb8f394f0fb00ce63b781694d8dc505074334720032f0dc37d2a695ec340b92cf987b7aee5273aa059238b10a843ea00dfdefb97fc91927feedcb7cdfbed4ea39b2593ce77c8e1677ee89806eed1cfc3b837ab06df2b5f9d9dbdd1d9847ab33f80e5b9f8c1e3e511573b7025f8972bba57907545fd30ff08fe517927186e551a516352af97088eb249ce7f4ebed007c014dc1b6a4e6b3a9b2f005d091bf653230deaf4bfe2b2d6fe7a41bae3c883ff47892323d1a48bff5bb69c41030a4a12f7863cbfd5aae8517980c73548b18c7c8fef33e7a4a3ba5f4b1fde3cd729d7017085c32845bb8cee1ee018325d9c12a1bcd4ff2958e4444ca23f2ac0b75888f4c920e0ffad00e15cf8734c2c39fb3fb6d6ce4332e53451d160fad78c46d19109ad6793c9a36074fdf82fcf1b0ea662e2244a3d70d2da77a59950aec50d330cd5acfd7407d8d3a4fc626a86e9b95530a5fb35f0871dd5d426698210a8123e522ca1b1d6f5041f403a04a3fb1906ce1f7510ec8b49508734dbb216fb72054e68e9f9f164295e3303f6dbad583e9d241a3f3ed6f45c4f5046ebd8a80c77c3f628f124d160020631218daef99dc68423bfe13b18ce05a7000ccb68a9665c45593fadab6c5a73733db4f7326d6a7b211fe3564cb55811e6f3b90fa38f7102123842e7f348570d162d1ff9ee67207d342ab77bdd36586418bda603d2fea365b3f6e9f4a25713fd89bcc9992de4c3e239a939c624726a9253608c88f90c49a8eb9274e89702f47cd781534a578fb24f953d4a32b9e84dd64da7de438805172157e40459d2b81d9cf27a352dcc41eadceccd8c9bd85a42a50ad5a748c39196ef7472b4580293aaa5822c9c2b76e8ddff6be4b112346e47b8cb1b24a35fd8bd00f704c33f1abb5c8ae40ca8d01eea3423d10574023b32bcc7350987645f36a075f4772fb4fcb3937d8ea4a462b41b177da90e27188fabfcdb3414a7057d13af59406d6aec1611beb4a312edec0d53ba7528d5e407a5d6a0c610ddafd9d1f73868cce5aa518a4e657244d9cdeb5c9088a03d7e1f7865a456a1e7abb1ea26ad56c32beff43ad04ed52d657686a358da84011449bfd41b25978481f7e147be635782ea7cc254348c8d84f41340923ffdac90c1c0c7440eb5a459cffb5dcc43595017fd881077b8e9835987d85ec4f816f16053c7a3912a66d9365d76bba60a402850d541fb3af2fe5f9fcc9a1097edac69f597500bb0909bffc972c84291bb3f8de591545ff573e4cfb6a1df68bc37765ecf329757b47bebed67a55ad6b264ea7bbbb976d68a259efbdf54f4dbc9e52726a3d5ce6342730417283607899be292e484001576d5a177ce49e7f523866ffd21b7d252e5e32489c1a0c67bb1e348418934a602c60cb3cb33544deba36325bdfcd79c9630711a82a06cb4524d7f7b837357c6ef610e24617e8be2d8c2234a18dcbe0c851582ae49c5ba992133a7d81b3742e6dbada382d22fabcdfdbb1b09bc56580b0eaec9d80f7377450b1d918410342159996910ce12f8d529f37734f4404d5e4236d4946486c85655a91c953aa6dc2455e315df32f2ecb7958919d7f49bfda431f370b43520ffce221b6b0cdb029c53825b2c201d8784c32fb705f776ca768b3807edfdc390683f494f1889c4d7d5b3803bd9fd7a6e69d4bd6b0cef8e4431dde6d4e6c7a933252d1d45991c1ccf3b653a54f12ef59e359de3eaddb5eb8a61718d40050b9f42e508caa0efde4b8a59fa5e0d41a8a7205f44a80384c9fb8e19ed92e00e1d6f9a72310bb2064b649e5b7e768217517f1bffea51792038661fdfe4b09656499a5ebb2ab1c607363ac85993cfd5e1457a732697f30a9c47baa5745a03adecbcea3d49a21cf029ce93e381762fa2c0850fe9e41ea664492c27a84effa7fa35035fb889cae14f1dab65e3b06b6bfb1f1a609f7c40a8ff4ca760c590e5f86b45e9ad88bd8bd7bcaf84159c90fb8dd3cae716bb060cc117f7faa5da6bb4423d30ecfef5a8ee882326ea36e4c4ea3ed2ce133fbbc09268def8abad79e1b0b099843f69aa093638be790bb1c112e9224b2561aa87c61459968787801e3c33f2a66c397fda03723aba6f7f6ccf7de0c0ce9bd977fea87e6dbce8bdbfe316acdfce6454ac13e6dbda8452130749948d706edb5f3d9e64779acbc315e3da9a4b20cc101976cf0011903f55f71f48c741004f6f46d2e6867d72a0767d3cb62dba5fd90cefdc169aa51d6deb8d15f09c8e0f3dc9ce70a227c0d83a3a0b8c687d0d6611b167922806055f9c49d8a447007045bcfdda646447c4e31d99ce10034b35d6ebb9fbcbf1b37f151502671fe8f7ce8ff68ac1adcdcea4a6a805ecf26eaf97c83d9fce23c8788ad225628c09435b24374f40b58d5b751c4a2c2ca9b9d7ded2a578767eb75972f489573da9c83cecf0ada7cff45de23107fa21087c3a8b59a4ae2ae4b3007604165ee2fe4f2e4d34083d6a745b6a75b6a0ec6b7cd74d47e4b26f0fad12c88655cb05f689dfb736520be5efb140c6aadecff7058740390f4ea8c6992d2ee653b092b208473ce12b15a7019b0e8c6605201925e380494b4a3db2db540d4b537352a26b9ed1adfc81a974f9e6eded5d5781f73cb1ecded619c4153ba3278da473d2d1474cd142b007a6f0d7ec6695c5f5e45bcdc61e9180fe6228a460a0831d7e28a90e6341a195482fe185e1d07f8708d5076101f561551ae0ed0954187af47e6c8eb56a838f045070f768133fe217a76615f50ae897828242551b89ac1865b99fe68bcff5b88086fe8e1a37719440575f3b51125023ed7334358221d734aea902f4356a1172abcba57b5701c4ee30acba4590c6533e78b0534641cc30ca2f15eaefd9b43e2b7cd49d726229420b9e81353103aec5c219d108d719e093c5d88b6c06c5f04f5861c3cb5f23a727fa9f7d2cb261041314f775968e583cb432a7ecb891629c05fd4030e920ffef31c44a4ac486051bd8b7c85179f11979e832daa2944c5c4d5eafaae48db590b5acb0527f04d72037a620dc5050420fe8477c1406cf6d2a1e62e01ea7d395eb02ddf6541fc73ea9781365eb27e28abb20ad0bef5c5f9262064988a035f7e407711efb0d55c440aff1a3205e0c50821f3a9e3b74a899f6eecbd12f37773823db98e902d44c75bc9c00632235c36a3efbf0c416c91cb023f1876744bea4b86f00998820c916e1a48b2bab9b275ac3ffacb4b356bc4bb0cfbe98df8d06ab4fa8628d80b85ceadb3580c38b820acb026120117d8ed2a9e9d73e2110ae27971a010f69319609198ef49902560270be47d262184241ca98dd3a7f20e6b677ee9aa28055c8f8b5e5ef067b05c8e9383a6feccf5cfb3d73b567a6eba71730586d4391bd122bb8f95ac6220d03e7f882a812e7012a5758bfafbe37bba11be042d2decc430e0de68c44965f2882afbff156870596a2f9bb0358d2788b29cf5e7f858c786d850f14465734c9bae14e06cd88b4e2ef6d86b6117d11438ce5d7adf5ce70691c2061abb0e4ad95e4c695ad5aab9cce5df9ff3536577b69f994638d7df0ef06bd3e9e45ccaee866841f72b61c2d3ea265d8201ca10b75d5cf8b4bcec291d41f3b1e03da893afd4a1ec1823f03f25707ab28b9e6aa5810ace4ad2cd372f543248cf38cb272ad2f7dc36a71e0ec3ebc3ed88931c818a28d7b7764255c2b840fa6a9bfa94a8bb447aa4c43896e3f9a8a4491992cd2d77548184bead970556c3872dcf4bb924d92f0f16605040f701d368a4cdcfb1bc9f53a496512f4ec36c95a40f2d23b8c93402eecc754b64fc84a9516b310330f9687cf029c04dd37e9980988eb7dadc7020358606ec3e9be219850ef2d0c8165684c07aba3fa90f53289ebefbb0969686063f56ce65e78bd6d9a74d0997bc25bf15ae6c41f13fefc4e002e7a5694df7eeaf10f5ff8a53e030eb153f9d5f27664069009553c6f8eb36ac8478f7aa59c7e16fa6e1500b4b2a3940f49bb9f3d045e15a48e53f8a56752cc9fffbe12b16e7c4b95b8964a5c48f5187b9921d8f1bfe4366bd2e0bf448c8aba8eb5489f06114fec7c233925030e68a9b5b022050b72fff20802d2d083e5d15288d7f86219deb650c955d95c9d8aa91107e780494d12580ace5503b731a91cf67cfd8cad90f70a25787a827a8b847a8c3a2b01cfc1745b69c3c2c761fb856fa4ca601d0cd1bcb1cf33fdc60fedd6b34c8aac90f45e2266ab0381b76b68ef601aac16f4a0623e0c18d1327741ddf0fc5743d99c5ee2f5998da124dbb09606b733a5972eadd85c1c934ac3d8c01f39618e1319dd81c62b4bc66be262e84becfa577eb4446090b576aa250825e0e464feaa9f0a03d3285cec8d52ec38e3b6f045f1d2b7de4f1e43a4acaa0ce7600aee3cbe1c88765367a0b71f31b3154d364aa816cfa582ed6e006e98d1f301dcb4fc433a12881fa83717a9e5a9e03e6bcb80b99f033c3e2c2df440b962840d32f19487944781bc3c8960d4500f7e2cfa647aad0ebe7dea2d579ee7c89365366f429f8491125c8ccb9933300a6d3aa32c9ac27f8c6a51345736e8b2b0ede5f9ce982fc6f5aaad95b99af2857889732eb4ebd73437380ab89020434c2f56a359efdafd31e92a73458d3bb9312787b04db3bf0c6cae4d1c5f2bcc4d36fc8a39155f1729a9aa4fbb5b45119da54ce17a8a67186f7791698998cc65a4c4d4de445ad21f085d9dbbcff21119279e1bfb0b30bd96d22eed00ee464bc0e910d1f68c90889edd2273db5b599e552cdfa2c80ab8c3f8628157e75a56c820b6a658cde3bbaa5efe56330aea903a0a3ac2c8f18c0169a4c6ce1ab78994e11026829cf9dd5235dc63b5eb97a12b3e014558f4ac618ecc93f861571cebfcce6114084d54c3fc46783f9b8de1f55721be61376a5971460856a35fa98ecb240c9194e41915fa9052c0713ac538751cbd54ea67180f2f3bfda3e41fa3e077ab6e7d19c6cf31512db0c08349208aedf9e531ba7919970e542423720d4c0fbc7e0e42970592f1d58c891905a0875760e852a4d7a00ffd5d851e809ed3d2aeb7cbb8565091f7c93cd2528b80b66b1fd3714d33d02cd8465772032e58845dae63c5626dc1774aa256e5ce57b456a75a446dad1f194f27f681e3674f77be868a9e6f2822bf69544ba6e0b0f6404c740cea9c3443376dafc3b29d2248adf3e1ca84a11e01cffc0797f5d3c87012d03b6e8ab8bdbc41671448a373ca2abd5208a099e1876f4e94379bb49e6144c44b110713d883662a8a9c8e9a727bc5538b5dfb404507db3c0f230dfb034269975a8d87b6a6f697be8f27f4f529fdcc7d63859a2c381d9d49c06567ed5ef6b3bc5842bb0b10ec839b15283a5d90398f66072ec1811eea12fb64cf42e94118739fb918bf403d9ba70949248d347d4e5be95b11fc2fabbed54bec4b5db7c877028bc3b1dab839cbdf2e061b1966a61352880c25b009fe94a74c40352b18f520dd5f8f2a7523005034f41a6951c63b496698c66b5372d7462f3ea5b1d8c28618cbb4fde50008a530ebb13b44869b7bfe16cf71bc76a36cd9e8cab50524d3ad651f0bc8b7afc9e4d43ff89d9885cfd6fb40d0acdfd3f4e8dac8d6eab4d8e608c21b3e90b261dec0fd0791846bbdd300a6871db49da517ef81cb07c665cf26f90347cc12f23a503e5204c665b60e4c00fc7ba0b3817209befe4047dd7409dc183b554c6990d13e63bc611b84a702c6cbf047ac80fff34d85b08e26e6d0f250262c011e9e99feb0cafafad1b66a74473c7d47668d835e53e14407c4e4e01fada9b57d8388ac9cbf8ceaa3b6fd0058157adf8418c14b49dcc2d70f6b25d83bebb8668f147a345c93456d283a7f1690354e64b7d285adea303820818a2f39aa531c2fba3b3f825d71ba7ce251b16662debf6326800a10e9bfc9f6f4c10df7a13732bd04a881c0f319b6617ea22d9792319b3cc6309bb9e91cce989e296873275432dd6c39ae5451e750deae86f2d3e4f8229508130bbc62a5b1f1b915ad2eee9b938e7e66f0ac35220572a1691c0204347f9e09373f96e53e5df5b3365bd07d341c57c731f08658740659497b6b22b6c01835b14fffb724566b76e1b4aec46949b3adc693c41c41fab39ddc93991c59e7e45b74ca2f12108add2cb68847405481f6b4f407ca49c4aec7021895597198c5c0520f3d4e14865a07f0a743f282c03940ccc6be1a48ba5a8e46fe23436964444ec43df35aad2e81756ef0d8ed1b1931a2f1fe81d4d7c7c2b473155ebf5928c6a8be7cfd0c8e2bc54e1281b1c500867cb76cf37e9a771fc3d8f811cde1ff9bd1ee750491da9db6d0d66a4b1bdadd268cb8e56143d896877201901ead94c1744ef508723c7ed3c306ddf9a70f73d2fd560daa5dbf1e0de72a403a5093f55d3811733b63bea92b5b828537ca9ec3bd23736aea93c1ebb6296119eccc29df8ce93ba4027a98cd91a72fc8f8c7d930ceffc26b12b39f3cbde599ba1f93544e8bd0dadb94ab92619bea1727a98319a276bc49fc3f2ba05ff8cc28bace90885868c218769203f82b24894656dde32e1a267d77ae2c3a5172fb980a1d642ff0512956e180b1fab652a43491095b46c11c11ecbced614c804b6cdbc1bf0e866fc582a1343d355aabc39725b6a44c162eaff9ca1bc8e5c3237195dc91b1d9d9aebeea0e8d7e2d3c3d6a6f095e90ccf1cfb87eca0beceef05b974ebf7ef0ea9f27a4ae79f2128a7e379e4c25cd7f0c199d44201e4ff58f40910eb879df1170f499b96c63f6f3a9bf6629203ec672b5a498010a5e46d076f386c0300a5470eee7bd8e98c9b6124f8ee0eadad803aff25dce03fb711ae126131be30cbbde14d4bcf7b11edb6a1ea8e1ec6584b0471b79c10f2beae51d7693cefc7a8f7beacb845f19b0800477529962f78296d915a7246ec81ac43ff0cfefa02f5e1dcb8e86874c9bec9277fc4f7df52c2d5c71d50690739198487d83a10d40a2d3eab54756f59b7cc1ec2c0ee64e9caab810006c521068d13ee8408c1005abdae7fd0d1c36c83aaf9feac5bb425cda44a3bf482916b0fd836110b6b984d01aba72d16c5822a6184eba413b5fd7ea6e91a9fd69d59dc01e62e09a75e6f8924086b3471070bc34ccc36d68a05774d79d823e2c0d9e9f781f858fb39ff805758ccc6a3e5f7fd1cc62adcb03a9ad4f2b912be3c1ddb03cdcbebb0e39209dd4dcf492dd4a357432c1af50e1288f5ae1fc2916cd5ccf696cb9299af9854f0e30305e051c379d2784947efec4b079ff5fa47cd0451417844be549b67fafb671f31361ad87c685afb7c84ab0e1e34bd4511c3f85c08e823ae13007e80d9fea491c8c090006168bb27b1c629922f4d7f9c728c01d5df2172bdb28796baad30d77a92aa1845b82826ee07087f1368a862faf11e0525416a86410400c035ee07f7e1cec2419fbedff1573ef8d62fbdd7bc1d23158c6f5062fa5137f24635fab6f10a9345d5485e99c44d0a8968843deb4702e0558891dfd1b64e37c7af8a734f8798740e534eddd0eacbee82a748305acf114f2f024363adb0caa0e0335fd5ac2a2de917bde498a50677db2c686c4ab0bf8e7d14ba266dc982d374fc3a9f49fb651f03c09821820140f539ad5900c2d3cb974518dd5eaeee95fddd0d634db71cc40bdc2d32c8ef6968ef674a85a6851a14282f43314bca7c53920e92c545d9f5517616fcd94ec26aa08e68b51bae0e72f531067ca61e1fb3813c5860769b77012be5b837e184c6d24487ae0b9f5f7f3622b39904d5f922d47bec5dbccbf35882328fc91738791b24d616960e7e8dfbb7e5bf48ac22d67c0fe577582c6fdf8339849e102c72e734038a96cc78925cb6c90e5f352066cf035cf06731b0cee93f79ce35631a6907cee6a8fe4dd91760c60061728398e2f5ea2cc53d0232a677a34aa8a8a2ca674da9c560a1dd248a6fc7eccdb14cd6076a8949c798c7b0ce14c9768a67cbf0ecd922237b4eecc092031878a30f79d2fb023ed4a5f6042c7f0fbec5a7e2f7440820daa5143b385bfa9371b0aa14a0211e580aa07c43ef08c9fec564a5986efd298bdef203972d385285d38dcdfa6accaf9d93a7a0fa75fead4e42a0b34d083fb8caabbc639fd56e5e975f0dbff95d091bc008be642dc9f1b77ac9ca303ba7b14e5f37c8ef632de4df6170db9c3d3be978219c709ef6a88638c87a6e3fe6f9a586661643463dd5038221de01a88078350274f2f9369799b2d3497e002f086d9004a8c0b86f957192e05863eef91a3bb02920eeb46817122093894fffd6de0b71f186cfe8f9094791065d586fe1885b6c78ada2b05cf33df361aee2733803d7bf188dab3913bcd20de93adebb4abe88ce705dcb3ddd59921d917283374c4b20ba486b949356bd4a984ce71a588c9d1d7672d7d6406e2b96a8f60b4345ac769df9d801ad13e8bada04d19ebcf9f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">文章被加密了, 请输入密码查看.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">🔒这可是好东西啊~</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="加密文章" scheme="https://blog.liukairui.me/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>VueConf 2022 - Vue 的进化历程</title>
    <link href="https://blog.liukairui.me/article/VueConf2022-Vue%E7%9A%84%E8%BF%9B%E5%8C%96%E5%8E%86%E7%A8%8B/"/>
    <id>https://blog.liukairui.me/article/VueConf2022-Vue%E7%9A%84%E8%BF%9B%E5%8C%96%E5%8E%86%E7%A8%8B/</id>
    <published>2022-12-12T16:00:01.000Z</published>
    <updated>2022-12-12T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="库阶段library-2013-2015">库阶段(Library) 2013-2015</h2><p><strong>库与框架</strong>: 库更像是一个小模块嵌入于在大项目中,而框架则定义了一套自己的工程实践与配套工具</p><p>库阶段实现了基于 ES5 getter/setter 的响应式系统, MVVM, 模板数据绑定.并没有对构建工具等做出限制</p><p>此时 Vue 的组件与响应式系统强耦合, 没有编译过程, 直接将模板实例为 DOM并遍历实现数据绑定</p><h2 id="框架阶段framework-phase-2015-2016">框架阶段(Framework Phase)2015-2016</h2><p>实现 Vue 1.0</p><ul><li>引入了 Vue Router(SPA), vue-cli, Vuex(状态管理) 此时 Vue更像是一个框架了</li><li>引入了 <code>v-bind</code>, <code>v-on</code>, <code>v-for</code>及其缩写</li><li>实现了热更新与 Scoped CSS</li></ul><h2id="通用框架阶段universal-framework-phase-2016-2019">通用框架阶段(UniversalFramework Phase) 2016-2019</h2><p>完全重写, 实现 Vue 2.0.</p><ul><li>引入了模板编译 Virtual DOM</li><li>引入了基于 Virtual DOM 的服务端渲染</li><li>引入了基于 Virtual DOM 的跨端渲染</li><li>手动实现了 TS 定义</li><li>扩展了 vue-cli, 完成了工具链与 vue 的解绑</li><li>2.1 引入了作用域插槽</li><li>2.2 引入了基于路由的代码分割(SSR)</li><li>2.3 引入了基于路由的资源预加载(SSR, 基于 webpack 生成的 manifest文件分析资源引用关系)</li><li>2.4 引入了异步组件支持与编译输出(SSR)</li></ul><h2id="编译运行时混合阶compilerruntime-hybrid-phase-2019-now">编译/运行时混合阶(Compiler/RuntimeHybrid Phase) 2019-now</h2><p>Vue 2 的编译与运行模块是完全解耦的, 两者互不通信息,这导致编译器与运行时无法协作优化.</p><p>Vue 3</p><ul><li>实现了基于编译优化的 Virtual DOM 性能策略(Block Tree,PatchFlags)</li><li>提出了 Composition API(当时也提出了基于 class 的 API, 但是因为 class的装饰器语法不稳定, 最后选择了 Composition API). 切换 Composition API 后<ul><li>可扩展性得到了显著提升, 逻辑易于重组, 抽取, 复用</li><li>TS 更加友好</li></ul></li><li>实现了完全优化的 SSR 编译输出</li><li>开发了 Vite, 将 vue-cli 功能部分剥离到 Vite.</li><li>实现了同一份模版,不同的编译输出<ul><li>浏览器: 高度优化的 Virtual DOM 渲染函数</li><li>SSR: buffer + 字符串拼接</li><li>将来: Vapor mode (无 Virtual DOM 的渲染代码)</li></ul></li><li>单文件组件语法糖<ul><li><code>&lt;script setup&gt;</code></li><li>CSS v-bind()</li><li>Reactivity Transform</li></ul></li><li>3.1 引入了 Migration Build</li><li>3.2 引入了 <code>&lt;script setup&gt;</code></li></ul><p>现在的 Vue3</p><ul><li>core: 运行时, 编译器</li><li>文档</li><li>工具链 (create-vue)</li><li>SPA 路由 (Vue Router)</li><li>状态管理 (Pinia)</li><li>浏览器开发工具 (vue-devtools)</li><li>IDE 支持 (Volar)</li><li>TypeScript 支持 (将 tsc 扩展为 vue-tsc 以支持 sfc 检查)</li><li>静态分析 (eslint-plugin-vue)</li><li>单元测试 (<span class="citation"data-cites="vue/test-utils">@vue/test-utils</span>)</li></ul><h2 id="未来">未来</h2><ul><li>短期<ul><li>Reactivity Transform / Suspense 稳定化</li><li>SSR 水合改进 (lazy / on-demand / server-only)</li></ul></li><li>中到长期<ul><li>Vapor mode (受 Solid 启发的模版编译策略)</li></ul></li></ul>]]></content>
    
    
    <summary type="html">尤雨溪</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Vue" scheme="https://blog.liukairui.me/tags/Vue/"/>
    
    <category term="VueConf" scheme="https://blog.liukairui.me/tags/VueConf/"/>
    
  </entry>
  
  <entry>
    <title>一些字符编码规则</title>
    <link href="https://blog.liukairui.me/article/Unicode%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>https://blog.liukairui.me/article/Unicode%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</id>
    <published>2022-12-11T16:00:01.000Z</published>
    <updated>2022-12-11T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="unicode-编码规则">Unicode 编码规则</h1><blockquote><p>以下部分转自: <span class="exturl" data-url="aHR0cHM6Ly93YW5nd2wubmV0L3N0YXRpYy9wYWdlcy91bmljb2RlLmh0bWw=">一文彻底搞懂Unicode编码问题<i class="fa fa-external-link-alt"></i></span></p></blockquote><h2 id="ascii">ASCII</h2><p>最基础的编码格式，打字机时代的产物，共128个字符，其包含键盘上每一个可显字符，可应对只有英文字母场景下的编码需求。</p><p>ASCII编码，共128个字符，编码范围为0~127，每个字符占用一个字节(8位)，但ASCII实际7位就够用了，所以第8位可用于保存额外的信息，早期多用来做奇偶校验，目前都是填充0。</p><p>其中第32到126的字符( - 7E)，共95个，为可显字符(printablecharacter)，为空格、数字、字母、标点符号、和几个特殊符号(例如脱字符^)。其中：</p><ul><li>32()，为空格</li><li>48-57(-)，数字0-9</li><li>65-90(-5A)，字母A-Z</li><li>97-122(-7A)，字母a-z</li></ul><p>前32个字符和最后1个字符(0到32和127)，共33个字符，称之为控制字符(Controlcharacter)。</p><p>每个控制字符除了通过ASCII编码表示，还有另外的「脱字符表示法」(Caretnotation)，第0个为<code>^0</code>，后续26个为<code>^A</code>~<code>^Z</code>，剩余的为<code>^[</code>，<code>^\</code>，<code>^]</code>，<code>^^</code>，<code>^_</code>，最后一个为<code>^?</code>。在JS中的正则表达式中，用<code>\c</code>来替代脱字符匹配控制字符，例如<code>\cJ</code>代表<code>^J</code>。另外，有几个特殊的在现在编码中仍然有用的控制字符，还有「转义符表示法」(escapesequence)。如下表所示：</p><table><colgroup><col style="width: 10%" /><col style="width: 17%" /><col style="width: 17%" /><col style="width: 26%" /><col style="width: 14%" /><col style="width: 14%" /></colgroup><thead><tr class="header"><th style="text-align: center;">十进制</th><th style="text-align: center;">脱字符表示</th><th style="text-align: center;">转义符表示</th><th style="text-align: center;">名称</th><th style="text-align: center;">名称简写</th><th style="text-align: center;">作用</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">^@</td><td style="text-align: center;">\0</td><td style="text-align: center;">Null</td><td style="text-align: center;">NUL</td><td style="text-align: center;">空</td></tr><tr class="even"><td style="text-align: center;">7</td><td style="text-align: center;">^G</td><td style="text-align: center;"></td><td style="text-align: center;">Bell</td><td style="text-align: center;">Bel</td><td style="text-align: center;">振铃</td></tr><tr class="odd"><td style="text-align: center;">8</td><td style="text-align: center;">^H</td><td style="text-align: center;"> Backspace</td><td style="text-align: center;">BS</td><td style="text-align: center;">退格</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">9</td><td style="text-align: center;">^I</td><td style="text-align: center;"> Horizontal Tab</td><td style="text-align: center;">HT</td><td style="text-align: center;">水平制表</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">10</td><td style="text-align: center;">^J</td><td style="text-align: center;"></td><td style="text-align: center;">Line Feed</td><td style="text-align: center;">LF</td><td style="text-align: center;">换行</td></tr><tr class="even"><td style="text-align: center;">11</td><td style="text-align: center;">^K</td><td style="text-align: center;"> Vertical Tab</td><td style="text-align: center;">VT</td><td style="text-align: center;">垂直制表</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">12</td><td style="text-align: center;">^L</td><td style="text-align: center;"> Form feed</td><td style="text-align: center;">FF</td><td style="text-align: center;">换页</td><td style="text-align: center;"></td></tr><tr class="even"><td style="text-align: center;">13</td><td style="text-align: center;">^M</td><td style="text-align: center;"> Carriage Return</td><td style="text-align: center;">CR</td><td style="text-align: center;">回车</td><td style="text-align: center;"></td></tr><tr class="odd"><td style="text-align: center;">27</td><td style="text-align: center;">^[</td><td style="text-align: center;"></td><td style="text-align: center;">Escape</td><td style="text-align: center;">ESC</td><td style="text-align: center;">换码</td></tr></tbody></table><p>显然128个字符对于英文表达足够了，但是明显不适用中文，以及其他非英文表达的语言，所以中国后来有了GBK编码。ASCII编码在早期遇到编码不够用的时候，也有一些扩展和变体，例如「扩展ASCII」可表示256个字符。不过由于后来有了Unicode编码格式，这些都没用了，所以就没必要去了解了。</p><h2 id="unicode">Unicode</h2><p>Unicode编码标准，可表示目前全世界所有语言的所有字符。同时兼容ASCII编码。</p><p>Unicode的前128个字符编码和ASCII是一致的，即向后兼容ASCII，对于使用ASCII编码的程序可以直接使用Unicode规范。在Unicode中，对于每一个字符编码的值，叫做<code>code point</code>。例如小写字母a的<code>code point</code>为97，对应十六进制为<code>\x61</code>。下文为了方便对<code>code point</code>称作「码位」。</p><p>在Unicode中，码位的总范围为<code>\x0</code>到<code>\x10FFFF</code>，共1,114,112个码位。2048个用于编码代理(UTF-16)，66个非字符码位(例如BOM)，137,468个预留给私人使用，最终剩余974,530用于普通字符分配。</p><p>码位的最大值为<code>\x10FFFF</code>，对应二进制有21位，我们将2<sup>16个值分为一组，则Unicode总共可以分为17份，每一份称之为平面(Plane)，每一个平面有65,536(2</sup>16)个码位。</p><p>为什么Unicode的最大值为<code>\x10FFFF</code>？因为对于<code>UTF16</code>编码，双字节最多可编码2<sup>20个字符，单字节可编码2</sup>16个字符，加起来共17个平面的字符数。</p><p>下表为每个平面详情：</p><table><colgroup><col style="width: 12%" /><col style="width: 18%" /><col style="width: 10%" /><col style="width: 58%" /></colgroup><thead><tr class="header"><th style="text-align: center;">平面编号</th><th style="text-align: center;">码位范围(十六进制)</th><th style="text-align: center;">名称简写</th><th style="text-align: center;">名称</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Plane 0</td><td style="text-align: center;">0000–FFFF</td><td style="text-align: center;">BMP</td><td style="text-align: center;">基础多语言平面(Basic MultilingualPlane)</td></tr><tr class="even"><td style="text-align: center;">Plane 1</td><td style="text-align: center;">10000–1FFFF</td><td style="text-align: center;">SMP</td><td style="text-align: center;">补充多语言平面(SupplementaryMultilingual Plane)</td></tr><tr class="odd"><td style="text-align: center;">Plane 2</td><td style="text-align: center;">20000–2FFFF</td><td style="text-align: center;">SIP</td><td style="text-align: center;">补充表意语言平面(SupplementaryIdeographic Plane)</td></tr><tr class="even"><td style="text-align: center;">Plane 3</td><td style="text-align: center;">30000–3FFFF</td><td style="text-align: center;">TIP</td><td style="text-align: center;">第三表意语言平面(Tertiary IdeographicPlane)</td></tr><tr class="odd"><td style="text-align: center;">Planes 4–13</td><td style="text-align: center;">40000–DFFFF</td><td style="text-align: center;">- (未分配)</td><td style="text-align: center;">- (未分配)</td></tr><tr class="even"><td style="text-align: center;">Plane 14</td><td style="text-align: center;">E0000–EFFFF</td><td style="text-align: center;">SSP</td><td style="text-align: center;">补充特殊用途平面(SupplementarySpecial-purpose Plane)</td></tr><tr class="odd"><td style="text-align: center;">Planes 15–16</td><td style="text-align: center;">F0000–10FFFF</td><td style="text-align: center;">SPUA-A/B</td><td style="text-align: center;">补充私有使用区平面(Supplementary PrivateUse Area planes)</td></tr></tbody></table><p>BMP为基础平面，目前收录了全球范围内大部分的字符。剩余的16个平面均为补充平面，用于进行新的字符的补充。其中私有平面，用于给个人做编码扩展，Unicode不指定字符编码。比如我编写了一个英雄联盟相关的程序，然后定义某一个字符代表一种游戏里的操作，就可以使用私有平面。</p><p>Unicode中还有一个概念：对于逻辑上属于一类的字符，称之为块(block)。例如:</p><ul><li><code>C0 Controls and Basic Latin</code>块，<code>\x0000</code>-<code>\x007F</code>，就是从ASCII继承来的前128个字符。</li><li><code>CJK Unified Ideographs</code>块，<code>\x4E00</code>-<code>\x9FFC</code>，包含大部分的中日韩文字，</li><li><code>Halfwidth and Fullwidth Forms</code>，<code>\xFF00</code>-<code>\xFFEF</code>，用于英文字母/数字/日文/个别符号等一些字符的全角-半角相互转换。</li><li><code>Miscellaneous Symbols and Pictographs</code>，<code>\x1F300</code>-<code>\x1F5FF</code>，<code>Supplemental Symbols and Pictographs</code>，<code>\1F900</code>-<code>\1F9FF</code>，包含大部分emoji表情</li></ul><p>另外还有一个比较重要的块<code>General Punctuation</code>，码位在<code>[2000,206F]</code>，包含一些符号以及一些特殊的分隔符、连接符、空格符等，这些符号不一定是可显字符，而是告诉解释器该如何操作当前字符。对于所有块，<span class="exturl" data-url="aHR0cHM6Ly91bmljb2RlLm9yZy9jaGFydHMvbmFtZXNsaXN0Lw==">可通过该链接查阅<i class="fa fa-external-link-alt"></i></span>。</p><h2 id="半角全角">半角/全角</h2><p>对于全角字符，在展示上占用的宽度是半角字符的两倍。每个字符都在Unicode标准里定义了是全角还是半角，对于不需要精确计算的简单业务场景，也可以简单的认为码位大于128的都是全角字符。</p><p>半角和全角，对应英文为halfwidth，fullwidth。半角全角对应的是UI显示的概念，对于定宽的字体，全角字符占用的宽度是半角字符的两倍。Unicode中每个字符都有一个<code>East_Asian_Width</code>属性，用于指示当前是全角字符还是半角字符，<span class="exturl" data-url="aHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjQ0L3RyNDQtMjYuaHRtbCNWYWxpZGF0aW9uX29mX0VudW1lcmF0ZWQ=">具有以下值<i class="fa fa-external-link-alt"></i></span>：</p><ul><li>A， Ambiguous，根据上下文决定</li><li>F， Fullwidth，全角</li><li>H， Halfwidth，半角</li><li>N， Neutral，中立，作为半角</li><li>Na， Narrow，半角</li><li>W， Wide，全角</li></ul><p>在<span class="exturl" data-url="aHR0cHM6Ly93d3cudW5pY29kZS5vcmcvUHVibGljL1VDRC9sYXRlc3QvdWNkL0Vhc3RBc2lhbldpZHRoLnR4dA==">EastAsianWidth.txt文件<i class="fa fa-external-link-alt"></i></span>中列举了已显示声明<code>East_Asian_Width</code>属性的字符。对于不在该文件内的字符，符合下列规则的为<code>W</code>(全角)：</p><ul><li>the CJK Unified Ideographs Extension A block， 对应区间：<code>\x3400</code>..<code>\x4DBF</code></li><li>the CJK Unified Ideographs block， 对应区间：<code>\x4E00</code>..<code>\x9FFF</code></li><li>the CJK Compatibility Ideographs block， 对应区间：<code>\xF900</code>..<code>\xFAFF</code></li><li>the Supplementary Ideographic Plane， 对应区间：<code>\x20000</code>..<code>\x2FFFF</code></li><li>the Tertiary Ideographic Plane， 对应区间：<code>\x30000</code>..<code>\x3FFFF</code></li></ul><p>其余未列出的，默认为<code>N</code>(半角)。</p><p>在一些编码集中，有的字符既有全角形式也有半角形式，Unicode为了实现与这些编码集之间的无损转换，在第一平面的最后，<code>\xFF00</code>到<code>\xFFEF</code>区段，定义了用于半角全角转换的字符，如下所示：</p><ul><li><code>\xFF01</code>–<code>\xFF5E</code>为ASCII的<code>\x21</code>到<code>\x7E</code>的全角形式。其中空格没有纳入进来，因为全角空格已通过<code>\x3000</code>定义。</li><li><code>\xFF65</code>–<code>\xFF9F</code> 为半角的日语字符。</li><li><code>\xFFA0</code>–<code>\xFFDC</code> 为半角的汉语字符。</li><li><code>\xFFE0</code>–<code>\xFFEE</code>包含了一些符号，有半角有全角。</li></ul><p>对于在JS中判断字符是全角还是半角，目前下载量比较多的一个npm包：<code>is-fullwidth-code-point</code>。<code>string-width</code>依赖<code>is-fullwidth-code-point</code>计算字符长度。不过实际测试，<code>is-fullwidth-code-point</code>没有完全覆盖所有全角字符(<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9pcy1mdWxsd2lkdGgtY29kZS1wb2ludC9pc3N1ZXMvMTI=">issue<i class="fa fa-external-link-alt"></i></span>)，不过对于日常中文场景的开发够用了。</p><p>在日常开发中，对于UI展示的场景中，会比较关心字符宽度的问题。但是在涉及存储的时候，更关心的其实是存储该字符占用了几个字节。所以在涉及存储的场景下，关注点就不应该是全角/半角的概念，而是字符编码所占用的字节数。对于<code>UTF8</code>编码，码位小于等于128的使用1字节存储，大于128的会根据需要，使用双字节，三字节或四字节存储。所以多数场景下，为了简便，前后端都可以通过码位是否大于128来判断全角/半角。</p><h2 id="htmlxml实体转义">HTML/XML实体转义</h2><p>我们常说的HTML转义，实际正式应该称之为HTML实体引用。对应有两种引用方式：数字字符引用(numericcharacter reference) 和 字符实体引用(character entity reference)。</p><p>先说常见的字符实体引用，语法为：<code>&amp;name;</code>，name必须小写。例如：<code>&lt;</code>表示小于号<code>&lt;</code>。</p><p>可以进行引用的实体，称之为命名实体。命名实体有两种，一种是语法中内置的，另一种是在DTD中显示声明的：<code>&lt;!ENTITY name "value"&gt;</code>。</p><p>数字字符引用方式：</p><ul><li>十进制：<code>&amp;#nnnn;</code></li><li>十六进制：<code>&amp;#xhhhh;</code>，x必须小写。hhhh大小写可以混用。</li></ul><p>还是同样的例子，小于号<code>&lt;</code>如果使用数字字符引用的方式，为：<code>&lt;</code>。</p><h3 id="html">HTML</h3><p><span class="exturl" data-url="aHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvbmFtZWQtY2hhcmFjdGVycy5odG1sI25hbWVkLWNoYXJhY3Rlci1yZWZlcmVuY2Vz">通过该链接查看目前HTML5中支持的命名实体<i class="fa fa-external-link-alt"></i></span>。</p><h3 id="xml">XML</h3><p>XML规范中，有5个预定义的实体，如下所示，如果需要使用更多的实体转义，需要在DTD中声明。</p><table><colgroup><col style="width: 5%" /><col style="width: 5%" /><col style="width: 16%" /><col style="width: 14%" /><col style="width: 9%" /><col style="width: 47%" /></colgroup><thead><tr class="header"><th style="text-align: center;">名称</th><th style="text-align: center;">字符</th><th style="text-align: center;">码位十六进制</th><th style="text-align: center;">码位十进制</th><th style="text-align: center;">标准</th><th style="text-align: center;">名称全称</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">quot</td><td style="text-align: center;">"</td><td style="text-align: center;"></td><td style="text-align: center;">34</td><td style="text-align: center;">XML 1.0</td><td style="text-align: center;">quotation mark</td></tr><tr class="even"><td style="text-align: center;">amp</td><td style="text-align: center;">&amp;</td><td style="text-align: center;"></td><td style="text-align: center;">38</td><td style="text-align: center;">XML 1.0</td><td style="text-align: center;">ampersand</td></tr><tr class="odd"><td style="text-align: center;">apos</td><td style="text-align: center;">'</td><td style="text-align: center;"></td><td style="text-align: center;">39</td><td style="text-align: center;">XML 1.0</td><td style="text-align: center;">apostrophe (1.0: apostrophe-quote)</td></tr><tr class="even"><td style="text-align: center;">lt</td><td style="text-align: center;">&lt;</td><td style="text-align: center;">003C</td><td style="text-align: center;">60</td><td style="text-align: center;">XML 1.0</td><td style="text-align: center;">less-than sign</td></tr><tr class="odd"><td style="text-align: center;">gt</td><td style="text-align: center;">&gt;</td><td style="text-align: center;">003E</td><td style="text-align: center;">62</td><td style="text-align: center;">XML 1.0</td><td style="text-align: center;">greater-than sign</td></tr></tbody></table><h2 id="unicode-encoding-forms">Unicode Encoding Forms</h2><p>Unicode字符编码格式(Unicode EncodingForms)，简写为:UTF，即：将一个Unicode字符保存为字节序列的格式规范，用于文件存储、数据传输等。Unicode标准支持3种编码格式，如下：</p><ul><li>UTF-32: 使用4字节表示一个Unicode字符。</li><li>UTF-16:变长的编码格式，码位大于<code>\xFFFF</code>的字符，使用4字节存储，小于等于<code>\xFFFF</code>的字符，使用2字节存储。</li><li>UTF-8:变长的编码格式，码位大于<code>\xFFFF</code>的字符，使用4字节存储，小于等于<code>\xFFFF</code>大于<code>\x07FF</code>的使用3字节，小于等于<code>\x07FF</code>大于<code>\x007F</code>的使用2字节，小于等于<code>\x007F</code>使用1字节。</li></ul><p>Unicode标准支持3种编码格式，<code>UTF32</code>/<code>UTF16</code>/<code>UTF8</code>，用于映射码位为<code>\x0000</code>到<code>\xD7FF</code> 和<code>\xE000</code>到<code>\x10FFFF</code>的字符，即除去高位代理和低位代理的所有字符。至于什么是高位代理和低位代理后面会讲到。</p><h3 id="utf32">UTF32</h3><p>是一种定长编码格式，使用32位(4字节)表示Unicode中的一个码位。由于Unicode的码位实际只用了21位，所以多余部分前导0。例如字符小写字母a，对应码位为<code>\x61</code>，存储的字节序列为：<code>\x00000061</code>。</p><h3 id="utf16">UTF16</h3><p>变长编码格式，按平面区分，位于第一平面中的字符(<code>\x0000..\xD7FF</code>和<code>\xE000..\xFFFF</code>)，使用16位(2字节)存储，使用和码位相同的值。位于其他平面的字符(<code>\x10000..\x10FFFF</code>)，通过高位和低位代理使用32位(4字节)表示。</p><p>对于位于第一平面的值，即小于等于<code>\xFFFF</code>的值，使用2个字节就足够表示，所以直接使用两个字节表示其码位的值，如下所示：</p><table><thead><tr class="header"><th style="text-align: center;">code point</th><th style="text-align: center;">UTF16编码后实际存储的值</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">xxxx xxxx xxxx xxxx</td><td style="text-align: center;">xxxx xxxx xxxx xxxx</td></tr></tbody></table><p>位于其他平面平面的值，即大于<code>\xFFFF</code>的值，使用4个字节表示，如下所示：</p><table><colgroup><col style="width: 41%" /><col style="width: 58%" /></colgroup><thead><tr class="header"><th style="text-align: center;">code point</th><th style="text-align: center;">UTF16编码后实际存储的值(wwww = uuuuu -1)</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">000u uuuu hhhh hhxx xxxx xxxx</td><td style="text-align: center;">1101 10ww wwhh hhhh 1101 11xx xxxxxxxx</td></tr></tbody></table><p>位于其他平面的值，即<code>\x10000</code>到<code>\x10FFFF</code>的值，二进制最高使用21位。将其拆分为两部分，即前11位和后10位，前11为用<code>hhhhhh hhhh</code>表示，后10位用<code>xxxxx xxxxx</code>表示。其中，前11位中，前5位是用来表示位于第几个平面，所以这里也特殊标注出来，用u表示，即前11位为：<code>uuuuuh hhhhh</code>。</p><p>由于这里前五位的有效值为<code>\x1</code>到<code>\x10</code>，所以可以减1，让有效值从0开始，则有效值变成了<code>\x00</code>到<code>\x0F</code>，即4位，减1后的值用w表示，从而前11位可以表示为：wwwwh hhhhh。</p><p>将前10位前导<code>110110</code>，后10位前导<code>110111</code>，即<code>UTF16</code>对于大于<code>\xFFFF</code>字符的表示如上述表格所示。</p><p>这里,二进制<code>1101 1000 0000 0000</code>为<code>\xD800</code>，二进制<code>1101 1100 0000 0000</code>为<code>\xDC00</code>，从而，该规则简单描述如下：</p><ul><li>假设某个字符x位于<code>\x10000</code>到<code>\x10FFFF</code>之间，将其减去<code>\x10000</code>，得到x'，x'的范围为：<code>\x00000</code>–<code>\xFFFFF</code>。</li><li>将x'分成两部分，前10位和后10位，用w1和w2表示，其范围为<code>\x0000</code>–<code>\x03FF</code>。</li><li>将w1加上<code>\xD800</code>，得到w1'，范围为：<code>\xD800</code>–<code>\xDBFF</code>.</li><li>将w2加上<code>\xDC00</code>，得到w2'，范围为：<code>\xDC00</code>–<code>\xDFFF</code>.</li></ul><p>将w1'和w'2转换为二进制，即<code>UTF16</code>下x存储的字节序列。</p><pre class="line-numbers language-none"><code class="language-none">x&#39; &#x3D; yyyyyyyyyyxxxxxxxxxx   &#x2F;&#x2F; x - 0x10000x1&#39; &#x3D; 110110yyyyyyyyyy      &#x2F;&#x2F; 0xD800 + yyyyyyyyyyx2&#39; &#x3D; 110111xxxxxxxxxx      &#x2F;&#x2F; 0xDC00 + xxxxxxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="utf8">UTF8</h3><p>变长编码格式，是直接兼容ASCII的编码格式，对于能在1字节内保存的，直接保存为1字节。否则进行类似<code>UTF16</code>高低位代理的方式，最高位使用4字节。</p><p><code>UTF8</code>中没有减1的逻辑，只是简单的增加前缀，具体规则如下:</p><table style="width:100%;"><colgroup><col style="width: 26%" /><col style="width: 30%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /><col style="width: 10%" /></colgroup><thead><tr class="header"><th style="text-align: center;">范围</th><th style="text-align: center;">码位(二进制)</th><th style="text-align: center;">第1个字节</th><th style="text-align: center;">第2个字节</th><th style="text-align: center;">第3个字节</th><th style="text-align: center;">第4个字节</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;"> .. 007F(7位)</td><td style="text-align: center;">00000000 0xxxxxxx</td><td style="text-align: center;">0xxxxxxx</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td></tr><tr class="even"><td style="text-align: center;"> .. 07FF(11位)</td><td style="text-align: center;">00000yyy yyxxxxxx</td><td style="text-align: center;">110yyyyy</td><td style="text-align: center;">10xxxxxx</td><td style="text-align: center;">-</td><td style="text-align: center;">-</td></tr><tr class="odd"><td style="text-align: center;"> .. </td><td style="text-align: center;">zzzzyyyy yyxxxxxx</td><td style="text-align: center;">1110zzzz</td><td style="text-align: center;">10yyyyyy</td><td style="text-align: center;">10xxxxxx</td><td style="text-align: center;">-</td></tr><tr class="even"><td style="text-align: center;"> .. 10FFFF</td><td style="text-align: center;">000uuuuu zzzzyyyy yyxxxxxx</td><td style="text-align: center;">11110uuu</td><td style="text-align: center;">10uuzzzz</td><td style="text-align: center;">10yyyyyy</td><td style="text-align: center;">10xxxxxx</td></tr></tbody></table><p>在<code>UTF8</code>中，</p><ul><li>如果字节序列以<code>0</code>开头，代表当前字节本身表示了一个字符。</li><li>如果为<code>10</code>开头，则代表当前字节为多字节字符中的一个字节。</li><li>如果当前字符以<code>11</code>开头，则前面<code>1</code>的个数，代表当前字符所使用的字节数，2个<code>1</code>代表使用两个字节表示一个字符，3个<code>1</code>代表使用3个字节表示一个字符。</li></ul><h2 id="byte-order-mark">Byte order mark</h2><p>字节顺序标记(Byte ordermark)，指预定义的，放置在文本流开头的，一段特殊的字节序列，用于标记当前文本使用的哪种编码格式(<code>UTF32</code>/<code>UTF16</code>/<code>UTF8</code>)。具体规则如下：</p><table><thead><tr class="header"><th style="text-align: center;">编码格式</th><th style="text-align: center;">文本流开头的字节序列</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">UTF-8</td><td style="text-align: center;">EF BB BF</td></tr><tr class="even"><td style="text-align: center;">UTF-16 (BE)</td><td style="text-align: center;">FE FF</td></tr><tr class="odd"><td style="text-align: center;">UTF-16 (LE)</td><td style="text-align: center;">FF FE</td></tr><tr class="even"><td style="text-align: center;">UTF-32 (BE)</td><td style="text-align: center;">00 00 FE FF</td></tr><tr class="odd"><td style="text-align: center;">UTF-32 (LE)</td><td style="text-align: center;">FF FE 00 00</td></tr></tbody></table><p>例如Windows的记事本应用，将文本保存为<code>UTF8</code>格式时，会在文本内容的开头添加<code>\xEF</code>,<code>\xBB</code>,<code>\BF</code>3个字节。记事本应用在读取一个文本文件的时候，发现前三个字节为<code>\xEF</code>,<code>\xBB</code>,<code>\BF</code>，则认为接下来的字节流通过<code>UTF8</code>形式解析。</p><h3 id="endianness">endianness</h3><p>字节顺序(endianness)，这里特指当保存一个数字类型数据时，存储的字节序列的顺序。分为大端序(big-endian，简写BE)和小端序(little-endian，简写LE)。</p><p>假设当前要将一个16位的整型数字<code>\x0A0B</code>指向内存地址。</p><p>对于大端序的CPU，随着内存地址的增加，认为其存储的值的重要性是递减的，所以大端序的CPU会在100的位置上存储<code>\x0A</code>，在101的位置上存储<code>\x0B</code>。</p><p>对于小端序的CPU，随着内存地址的增加，认为其存储的值的重要性是递增的，所以小端序的CPU会在100的位置上存储<code>\x0B</code>，在101的位置上存储<code>\x0A</code>。</p><p>所以反过来，假设现在在内存中，地址100的地方存储了<code>\xAA</code>，在101的地方存储了<code>\xBB</code>，假设有一个<code>int16</code>变量指向，对于大端序CPU会认为该变量的值为<code>\xAABB</code>，对于小端序CPU会认为该变量的值为<code>\xBBAA</code>。</p><h3 id="byte-order-mark-1">Byte order mark</h3><p>因为各个系统之间的字节顺序不同，所以在传输和交换Unicode文本时，要告诉对方当前是以什么顺序保存的，从而接收方才能有效的进行解析。</p><p>字节序列标记(Byte ordermark，简写BOM)，特指<code>\xFEFF</code>字符。在文本的开头，添加<code>\xFEFF</code>字符，用于标识当前文本的字节顺序。</p><ul><li>对于<code>UTF8</code>编码格式，该字符会被保存为<code>\xEFBBBF</code></li><li>对于<code>UTF16 BE</code>编码格式，该字符会被保存为<code>\xFEFF</code></li><li>对于<code>UTF16 LE</code>编码格式，该字符会被保存为<code>\xFFFE</code></li><li>对于<code>UTF32 BE</code>编码格式，该字符会被保存为<code>\x0000FEFF</code></li><li>对于<code>UTF32 LE</code>编码格式，该字符会被保存为<code>\xFFFE0000</code></li></ul><p>所以，解析程序通过判断BOM即可确定接下来的文本所使用的编码格式以及字节顺序。在Unicode中，<code>\xFEFF</code>是专门用作BOM的，如果该字符出现在文本中间，会被当做「零宽非换行空格」(zero-widthnon-breakingspace)，其实就是跳过的意思。同样的，对于它的一个镜像字符<code>\xFFFE</code>，如果出现也会被跳过。</p><p>BOM可以省略，不是必须的，因为：</p><ol type="1"><li>在某些场景下已经预设了编码格式或字节顺序，例如W3C的HTML5规范中，如果指定charset为utf-8，则会默认按照utf-8解析，而如果文件流指定了BOM，则会优先使用BOM指定的编码格式和字节顺序。</li><li>当BOM被省略时，大部分解析器都会对文本流进行推算，推算出编码格式和字节顺序，但是这个推算并不是绝对可靠的。</li></ol><p>当使用<code>UTF8</code>格式保存文本时，Unicode标准建议，如果原文本没有BOM，则不要添加BOM。因为：</p><ol type="1"><li><code>UTF8</code>是单字节存储的，不存在字节顺序问题。</li><li>解析器会默认使用<code>UTF8</code>解析文本。</li><li>因为ASCII和<code>UTF8</code>是一一对应的，如果不添加BOM，则ASCII和Unicode可以相互兼容，如果加上了BOM，就打破了相互兼容。</li></ol><p>不过当前很多系统或平台并没有按照规范来，在解析文本的时候会要求<code>UTF8</code>要有BOM，以及在保存文本的时候会加上BOM，例如windows系统的记事本。</p><p>而对于<code>UTF16</code>和<code>UTF32</code>，要添加BOM，不然在解析的出的文本可能就是乱码，因为解析器在对字节顺序的推算上，并不能保证完全可靠。</p><h1 id="组合字符">组合字符</h1><p>Unicode有一类字符称为组合字符，它可以附加在前一个非组合字符上，从而使整体看起来像是一个字符。Unicode组合字符设计上，并没有加组合数量限制，这样使我们可以无限加这类组合字符,例如汉语拼音字母「ü」上面的两个小点，或「á」、「à」字母上面的音标。</p><p><strong>组合字符有两种</strong></p><ul><li>组合字符:将组合字符置于需要修饰的目标字符后边，使目标字符被渲染（或打印）成相应结果。</li><li>预组合字符:事先将字符组好并赋予码位。字符串中有可能同时使用组合字符和预组字符。这导致了若要比较两个unicode字符串时，需要先运行unicode字符的等价性。</li></ul><p><strong>组合字符在 Unicode统一码中存在多个区块，编码范围主要有：</strong></p><ul><li><p>组合用附加符号（<span class="exturl" data-url="aHR0cHM6Ly91bmljb2RlLm9yZy9jaGFydHMvUERGL1UwMzAwLnBkZg==">Combining DiacriticalMarks<i class="fa fa-external-link-alt"></i></span>）：区间从 <code>U+0300</code> 到 <code>U+036F</code> 共 80字。</p><p>它常与字母组合，修饰字母的读音。但其实它的定义比较宽泛，不但包括了拉丁、希腊及西里尔系文字中的变音记号，也包括那些不是变音但不占据宽度的附加标记。例如<code>&amp;#x61;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3662;&amp;#3662;&amp;#3662;&amp;#3662;&amp;#3657;&amp;#3657;&amp;#3657;&amp;#3657;</code>为 a็็็็๎๎๎๎้้้้</p></li><li><p>组合用附加符号补集（<span class="exturl" data-url="aHR0cHM6Ly91bmljb2RlLm9yZy9jaGFydHMvUERGL1UxREMwLnBkZg==">Combining DiacriticalMarks Supplement<i class="fa fa-external-link-alt"></i></span>）：区间从 <code>U+1DC0</code> 到<code>U+1DFF</code> 共 64 字。</p><p>它常与一些符号组合，用于渲染和修饰符号. 例如:<code>&amp;#x1DD0;&amp;#x1DD0;&amp;#x61;&amp;#x1DC4;&amp;#x1DC4;</code>为 ᷐᷐a᷄᷄</p></li><li><p>组合用记号（<span class="exturl" data-url="aHR0cHM6Ly91bmljb2RlLm9yZy9jaGFydHMvUERGL1UyMEQwLnBkZg==">Combining DiacriticalMarks for Symbols<i class="fa fa-external-link-alt"></i></span>）：区间从 <code>U+20D0</code> 到<code>U+20FF</code> 共 48 字。例如:<code>&amp;#x6587;&amp;#x20dd;</code> 为 文⃝</p></li><li><p>组合用半形符号（<span class="exturl" data-url="aHR0cHM6Ly91bmljb2RlLm9yZy9jaGFydHMvUERGL1VGRTIwLnBkZg==">Combining HalfMarks<i class="fa fa-external-link-alt"></i></span>）：区间从 <code>U+FE20</code> 到 <code>U+FE2F</code> 共 16字。</p><p>多个附加字符可以叠加到一个基础字符上. 例如<code>&amp;#xFE20;&amp;#xFE2D;&amp;#x61;</code> 为 ︭︠a</p></li></ul><p>组合字符也可以用于 Emoji, 例如 <code>&amp;#x270B;</code> 为✋, <code>&amp;#x270B;&amp;#x1F3FB;</code> 为 ✋🏻</p><h1 id="零宽字符">零宽字符</h1><p>零宽字符不可见，不可打印，主要作用于调整字符的显示格式.</p><p><strong>零宽字符主要有以下几类：</strong></p><ul><li>零宽度空格符 (zero-width space) U+200B : 用于较长单词的换行分隔</li><li>零宽度非断空格符 (zero width no-break space) U+FEFF :用于阻止特定位置的换行分隔</li><li>零宽度连字符 (zero-width joiner) U+200D :用于阿拉伯文与印度语系等文字中，使不会发生连字的字符间产生连字效果</li><li>零宽度断字符 (zero-width non-joiner) U+200C :用于阿拉伯文，德文，印度语系等文字中，阻止会发生连字的字符间的连字效果</li><li>左至右符 (left-to-right mark) U+200E :用于在混合文字方向的多种语言文本中（例：混合左至右书写的英语与右至左书写的希伯来语），规定排版文字书写方向为左至右</li><li>右至左符 (right-to-left mark) U+200F :用于在混合文字方向的多种语言文本中，规定排版文字书写方向为右至左</li></ul><p><strong>零宽字符可以用于:</strong></p><ul><li>数据防爬:将零宽度字符插入文本中，干扰关键字匹配。爬虫得到的带有零宽度字符的数据会影响他们的分析，但不会影响用户的阅读数据。</li><li>信息传递:将自定义组合的零宽度字符插入文本中，用户复制后会携带不可见信息，达到传递作用。</li><li>传递隐密信息:利用零宽度字符不可见的特性，我们可以用零宽度字符在任何未对零宽度字符做过滤的网页内插入不可见的隐形文本。下面是一个简单的利用零宽度字符对文本进行加密/解密的</li><li>隐形水印:通过零宽度字符我们可以对内部文件添加隐形水印。在浏览者登录页面对内部文件进行浏览时，我们可以在文件的各处插入使用零宽度字符加密的浏览者信息，如果浏览者又恰好使用复制粘贴的方式在公共媒体上匿名分享了这个文件，我们就能通过嵌入在文件中的隐形水印轻松找到分享者了。</li><li>加密信息分享:通过零宽度字符我们可以在任何网站上分享任何信息。敏感信息的审核与过滤在当今的互联网社区中扮演着至关重要的角色，但是零宽度字符却能如入无人之境一般轻松地穿透这两层信息分享的屏障。对比明文哈希表加密信息的方式，零宽度字符加密在网上的隐蔽性可以说是达到了一个新的高度。仅仅需要一个简单的识别/解密零宽度字符的浏览器插件，任何网站都可以成为信息分享的游乐场。</li><li>逃脱敏感词过滤:通过零宽度字符我们可以轻松逃脱敏感词过滤。敏感词自动过滤是维持互联网社区秩序的一项重要工具，只需倒入敏感词库和匹配相应敏感词，即可将大量的非法词汇拒之门外。使用谐音与拼音来逃脱敏感词过滤会让语言传递信息的效率降低，而使用零宽度字符可以在逃脱敏感词过滤的同时将词义原封不动地传达给接受者，大大提高信息传播者与接受者之间交流的效率。<strong>开发时只过滤<code>\u200b</code></strong> 就够了</li></ul><h2 id="emoji-中的零宽字符">Emoji 中的零宽字符</h2><p>零宽字符可以用于 Emoji 的组合, 例如</p><ul><li><p>在构建 👨🏻‍🦳 时</p><ul><li>👨🏻‍🦳 为<code>&amp;#x1F468;&amp;#x1F3FB;&amp;#x200D;&amp;#x1F9B3;</code></li><li>👨🏻‍ 为 <code>&amp;#x1F468;&amp;#x1F3FB;&amp;#x200D;</code></li><li>👨🏻 为 <code>&amp;#x1F468;&amp;#x1F3FB;</code></li><li>👨 为 <code>&amp;#x1F468;</code></li></ul><p>其中</p><ul><li>👨 - U+1F468 - 基础字符</li><li>🏻 - U+1F3FB - 组合字符，表示肤色</li><li><ul><li>U+200D - <strong>零宽度连字符</strong>，表示上下相连</li></ul></li><li>🦳 - U+1F9B3 - 基础字符，表示发型</li></ul><p>零字宽字符连接了发型与颜色</p></li><li><p>👩‍❤‍👨 为<code>&amp;#x1F469;&amp;#x200D;&amp;#x2764;&amp;#x200D;&amp;#x1F468;</code>,其中</p><ul><li>👩 - U+1F469 - 基础字符</li><li><ul><li>U+200D - 零宽度连字符，表示上下相连</li></ul></li><li>❤ - U+2764 - 基础字符</li><li><ul><li>U+200D - 零宽度连字符，表示上下相连</li></ul></li><li>👨 - U+1F468 - 基础字符</li></ul></li><li><p>👩‍👩‍👦‍👦 为<code>&amp;#x1F469;&amp;#x200D;&amp;#x1F469;&amp;#x200D;&amp;#x1F466;&amp;#x200D;&amp;#x1F466;</code>,其中</p><ul><li>👩 - U+1F469 - 基础字符</li><li><ul><li>U+200D - 零宽度连字符，表示上下相连</li></ul></li><li>👩 - U+1F469 - 基础字符</li><li><ul><li>U+200D - 零宽度连字符，表示上下相连</li></ul></li><li>👦 - U+1F466 - 基础字符</li><li><ul><li>U+200D - 零宽度连字符，表示上下相连</li></ul></li><li>👦 - U+1F466 - 基础字符</li></ul></li></ul>]]></content>
    
    
    <summary type="html">闲来无事仔细了解一下 Unicode 编码规则, 并尝试实现一些 &amp;#x6709;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3662;&amp;#3662;&amp;#3662;&amp;#3662;&amp;#3657;&amp;#3657;&amp;#3657;&amp;#3657;&amp;#x8da3;&amp;#3657;&amp;#3657;&amp;#3657;&amp;#3657;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3655;&amp;#3662;&amp;#3662;&amp;#3662;&amp;#3662;的&amp;#x7279;&amp;#x20dd; &amp;#x0333;&amp;#x0333;&amp;#x308;&amp;#x303;&amp;#x6548;&amp;#x200b;&amp;#x0333;&amp;#x0333;&amp;#x308;&amp;#x303;</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.liukairui.me/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    <category term="编码规范" scheme="https://blog.liukairui.me/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    
    <category term="编码规范" scheme="https://blog.liukairui.me/tags/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    <category term="Unicode" scheme="https://blog.liukairui.me/tags/Unicode/"/>
    
  </entry>
  
  <entry>
    <title>WebRTC基础</title>
    <link href="https://blog.liukairui.me/article/WebRTC%E5%9F%BA%E7%A1%80/"/>
    <id>https://blog.liukairui.me/article/WebRTC%E5%9F%BA%E7%A1%80/</id>
    <published>2022-12-03T16:00:01.000Z</published>
    <updated>2022-12-03T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webrtc-是什么">WebRTC 是什么</h2><p><strong>WebRTC 是什么</strong></p><ul><li>WebRTC(Web Real-Time Communication)是一套旨在实现互联网浏览器之间实时通讯的免费开放API.</li><li>WebRTC 主要包含了两种不同的技术: 媒体捕获设备和点对点连接</li></ul><p><strong>WebRTC 不是什么</strong></p><ul><li><p>WebRTC 用于实现实时数据双向通讯,但不适用于直播等大规模单向数据分发.</p><p>由于需要做到双向数据传播, 所有用户需要连接到同一个服务器,即使像声网这样的企业级 SDK 也只能做到 32 人实时连麦,百万同时在线(单向数据分发).</p><p>直播(RTMP, Real Time Messaging Protocol)只需要做到单向数据传输,我们可以部署大量服务器与 CDN 实现大规模数据分发.</p></li><li><p>WebRTC 不是 Web 应用专有的, 其可以运行在浏览器, 桌面应用,移动设备与 IoT 设备上</p></li></ul><p><strong>WebRTC 组成</strong></p><figure><img src="./img/1-1.png" alt="WebRTC Architecture" /><figcaption aria-hidden="true">WebRTC Architecture</figcaption></figure><p>WebRTC 是一套 API, 可以根据 API 的使用对象分为</p><ul><li>Web 开发者需要使用的: W3C 定义的 WebAPI</li><li>浏览器厂商需要实现的: WebRTC 的 C++ 层, 实现了 W3C 定义的WebAPI</li><li>浏览器厂商可以自定义重写的: 音视频捕获播放与网络IO</li><li>WebRTC 实现核心模块<ul><li>会话管理: 用来管理音视频, 非音视频数据传输, 处理相关逻辑.</li><li>音频引擎: 编解码功能, 音频缓冲 buffer, 回音消除.</li><li>视频引擎: 视频编解码器, 视频缓冲 buffer, 图像增强.</li><li>数据传输: SRTP传输协议, 多流复用, P2P.</li></ul></li></ul><p>## WebRTC 通话原理</p><ul><li><p>媒体协商: 在通信前需要先使用会话描述协议(SDP, session descriptionprotocol)通报通信终端支持的编解码格式,并确定出一个共有的编解码格式用于通信.</p></li><li><p>网络协商: 在通信前要找到一条可以相互通讯的链路.将网络协商所需的信息称为 candidate</p><ul><li><p>在没有 NAT 时, 可以直接通过公网 IP 实现 P2P 连接</p></li><li><p>在存在 NAT 时, 可以通过端口映射连接则使用端口映射实现 P2P.</p><p>由于通信终端不知道自己在 NAT 转换后映射的端口, 通信终端将请求 STUN服务器, STUN 返回该终端的外网 IP 与端口.</p></li><li><p>若端口映射(打洞)失败, 中断将连接到 TURN 服务器, TURN服务器作为中继服务器负责之后通信</p></li></ul><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvdHVybi9jb3R1cm4=">coturn<i class="fa fa-external-link-alt"></i></span> 是一个开源的STUN 与 TURN 服务器实现</p></li><li><p>信令服务器: 一套包含媒体协商与网络协商的服务器实现,在实现两种协商的基础上还应该实现其他管理功能(如: 房间管理, 用户管理,用户校验...). <strong>信令服务器并非需要实现一套固定的标准 /API</strong>, 只需要按需开发即可. 以一对一通信为例</p><p><img src="./img/1-2.png" /></p><p><strong>连接</strong></p><ul><li>连接双方与信令服务器建立连接(不指定连接协议),先连接设备作为房主</li><li>双方获取自己的媒体流</li><li>双方加入房间, 先加入者为房主, 后进入者加入后信令服务器通知房主,同时将房主信息返回给加入者</li></ul><p><strong>媒体协商</strong></p><ul><li>房主创建 RTCPeerConnection, 绑定 onXX 回调</li><li>房主创建 Track (相当于本地媒体流的句柄以供对方将来使用)</li><li>房主创建 offer, 生成浏览器的 SDP</li><li>房主发送 SDP(offer) 到信令服务器, 信令服务器将 offer 转发给对方</li><li>对方创建 RTCPeerConnection, 绑定 onXX 回调</li><li>对方创建 Track, 通过对方 track 获取房主码流句柄</li><li>对方记录房主的 SDP, 生成自己的 answer, 生成自己的 SDP</li><li>对方发送 answer 到信令服务器, 信令服务器将 answer 转发给房主</li><li>房主记录对方的 SDP</li></ul><p><strong>网络协商</strong></p><ul><li>房主与对方同时发起网络协商, 发起 ICE 请求到 coturn 服务器, coturn服务器返回 Candidate.</li><li>双方将 Candidate 通过信令服务器发送给另一方</li><li>另一方记录 Candidate 并尝试发起连接</li><li>由于打洞地址可能变化, 所以某一方可能会收到多个 Candidate,其应该逐个尝试直到成功连接</li></ul><p><strong>离开房间</strong></p><ul><li>离开者发起离开房间命令, 信令服务器删除用户并通知对方</li></ul><p>从这个过程中我们也可以看到, WebRTC 只是提供了一套 API并没有提供实时通信的详细实现,详细通信逻辑还需要信令服务器设计者实现</p></li></ul><h2 id="webrtc-相关协议">WebRTC 相关协议</h2><h3 id="rtp-协议">RTP 协议</h3><p>我们一般不直接将音视频数据流通过 UDP 传输,这是因为音视频数据中一帧数据量远大于 UDP 的MTU, 在发送时需要拆成多个包.若直接通过 UDP 传输, 我们需要手动维护 UDP 包的顺序并重建帧. RTP协议实现了音视频传输对帧的维护.</p><p>RTP(Real-time <strong>Transport</strong> Protocol)实时<strong>传输</strong>协议为端到端的实时传输提供时间信息和流同步,RTP并不保证服务质量, 服务质量由RTCP来提供.</p><p>RTP协议格式:</p><pre class="line-numbers language-none"><code class="language-none"> 0                   1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|V&#x3D;2|P|X|  CC   |M|     PT      |       sequence number         |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                           timestamp                           |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|           synchronization source (SSRC) identifier            |+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+|            contributing source (CSRC) identifiers             ||                             ....                              |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol type="1"><li><p>V: RTP协议的版本号, 占2位, 当前协议版本号为2.</p></li><li><p>P: 填充标志, 占1位, 如果P=1,则在该报文的尾部填充一个或多个额外的八位组,它们不是有效载荷的一部分.</p></li><li><p>X: 扩展标志, 占1位, 如果X=1,则在RTP报头后跟有一个扩展报头.</p></li><li><p>CC: CSRC 计数器, 占4位, 指示 CSRC 标识符的个数.</p></li><li><p>M: 标记, 占1位, 不同的有效载荷有不同的含义, 对于视频,标记一帧的结束；对于音频, 标记会话的开始.</p></li><li><p>PT: 有效载荷类型, 占7位, 用于说明RTP报文中有效载荷的类型,如GSM音频、JPEM图像等,在流媒体中大部分是用来区分音频流和视频流的,这样便于客户端进行解析. 可以通过payload值知道音频的类型, 视频的类型,有些公司可能会使用PT值扩展自己的类型；譬如附加类型(字幕, 贴的小图片,画的框框)</p></li><li><p>序列号: 占16位, 用于标识发送者所发送的RTP报文的序列号,每发送一个报文, 序列号增1. 这个字段当下层的承载协议用UDP的时候,网络状况不好的时候可以用来检查丢包.同时出现网络抖动的情况可以用来对数据进行重新排序,在helix服务器中这个字段是从0开始的,同时音频包和视频包的sequence是分别记数的.</p></li><li><p>时戳(Timestamp): 占32位,时戳反映了该RTP报文的第一个八位组的采样时刻.接收者使用时戳来计算延迟和延迟抖动, 并进行同步控制.</p></li><li><p>同步信源(SSRC)标识符: 占32位, 用于标识同步信源.该标识符是随机选择的,参加同一视频会议的两个同步信源不能有相同的SSRC.</p></li><li><p>特约信源(CSRC)标识符: 每个CSRC标识符占32位, 可以有0～15个.每个CSRC标识了包含在该RTP报文有效载荷中的所有特约信源.</p><p>如果扩展标志被置位则说明紧跟在报头后面是一个头扩展, 其格式如下:</p><pre class="line-numbers language-none"><code class="language-none">0                   1                   2                   30 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|      defined by profile       |           length              |+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+|                        header extension                       ||                             ....                              |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="rtcp-协议">RTCP 协议</h3><p>RTCP(RTP <strong>Control</strong>Protocol)实时传输<strong>控制</strong>协议, 同RTP一起用于数据传输的监视,控制功能.</p><p>当应用程序启动一个 RTP 会话时将同时占用两个端口, 分别供 RTP 和 RTCP使用. RTP 本身并不能为按序传输数据包提供可靠的保证,也不提供流量控制和拥塞控制, 这些都由 RTCP 来负责完成. 通常 RTCP 会采用与RTP 相同的分发机制, 向会话中的所有成员周期性地发送控制信息,应用程序通过接收这些数据, 从中获取会话参与者的相关资料,以及网络状况、分组丢失概率等反馈信息,从而能够对服务质量进行控制或者对网络状况进行诊断.</p><p>RTCP协议的功能是通过不同的RTCP数据报来实现的, 主要有如下几种类型:</p><ol type="1"><li><strong>SR</strong>: 发送端报告,所谓发送端是指发出RTP数据报的应用程序或者终端, 发送端同时也可以是接收端.(SERVER定时间发送给CLIENT).</li><li><strong>RR</strong>: 接收端报告,所谓接收端是指仅接收但不发送RTP数据报的应用程序.</li><li>SDES: 源描述, 主要功能是作为会话成员有关标识信息的载体,如用户名、邮件地址、电话号码等,此外还具有向会话成员传达会话控制信息的功能.</li><li>BYE: 通知离开, 主要功能是指示某一个或者几个源不再有效,即通知会话中的其他成员自己将退出会话.</li><li>APP: 由应用程序自己定义, 解决了RTCP的扩展性问题,并且为协议的实现者提供了很大的灵活性.</li></ol><p>RTCP 协议通过 RR 和 SR 报文交换来获取自己的网络质量, 结构为</p><pre class="line-numbers language-none"><code class="language-none">        0                   1                   2                   3        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+header |V&#x3D;2|P|    RC   |   PT&#x3D;SR&#x3D;200   |             length            |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |                         SSRC of sender                        |       +&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+sender |              NTP timestamp, most significant word             |info   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |             NTP timestamp, least significant word             |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |                         RTP timestamp                         |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |                     sender&#39;s packet count                     |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |                      sender&#39;s octet count                     |       +&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+report |                 SSRC_1 (SSRC of first source)                 |block  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  1    | fraction lost |       cumulative number of packets lost       |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |           extended highest sequence number received           |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |                      interarrival jitter                      |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |                         last SR (LSR)                         |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       |                   delay since last SR (DLSR)                  |       +&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+report |                 SSRC_2 (SSRC of second source)                |block  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+  2    :                               ...                             :       +&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+&#x3D;+       |                  profile-specific extensions                  |       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SR 包使用了</p><ul><li>版本(V): 同RTP包头域.</li><li>填充(P): 同RTP包头域.</li><li>接收报告计数器(RC): 5比特, 该SR包中的接收报告块的数目,可以为零.</li><li>包类型(PT): 8比特, SR包是200.</li><li>长度域(Length): 16比特,其中存放的是该SR包以32比特为单位的总长度减一.</li><li>同步源(SSRC of sender): SR包发送者的同步源标识符.与对应RTP包中的SSRC一样.</li><li>NTP Timestamp(Network time protocol) SR包发送时的绝对时间值.NTP的作用是同步不同的RTP媒体流.</li><li>RTP Timestamp: 与NTP时间戳对应,与RTP数据包中的RTP时间戳具有相同的单位和随机初始值.</li><li>Sender’s packet count: 从开始发送包到产生这个SR包这段时间里,发送者发送的RTP数据包的总数. SSRC改变时, 这个域清零.</li><li>Sender`s octet count: 从开始发送包到产生这个SR包这段时间里,发送者发送的净荷数据的总字节数(不包括头部和填充) . 发送者改变其SSRC时,这个域要清零.</li><li>同步源n的SSRC标识符:该报告块中包含的是从该源接收到的包的统计信息.</li><li>丢失率(Fraction Lost):表明从上一个SR或RR包发出以来从同步源n(SSRC_n)来的RTP数据包的丢失率.</li><li>累计的包丢失数目:从开始接收到SSRC_n的包到发送SR,从SSRC_n传过来的RTP数据包的丢失总数.</li><li>收到的扩展最大序列号: 从SSRC_n收到的RTP数据包中最大的序列号,</li><li>接收抖动(Interarrival jitter): RTP数据包接受时间的统计方差估计</li><li>上次SR时间戳(Last SR,LSR):取最近从SSRC_n收到的SR包中的NTP时间戳的中间32比特. 如果目前还没收到SR包,则该域清零.</li><li>上次SR以来的延时(Delay since last SR,DLSR):上次从SSRC_n收到SR包到发送本报告的延时.</li></ul><h3 id="标准-sdp-协议">标准 SDP 协议</h3><p>SDP 描述了</p><ol type="1"><li>音频编解码器是什么,这些编解码器设定的参数是什么</li><li>使用的传输协议是什么</li><li>以及包括的音视频媒体是什么</li></ol><p>标准 SDP 规范主要包括 <strong>SDP 描述格式和 SDP 结构</strong>, 而SDP 结构由<strong>会话描述和媒体信息描述</strong>两个部分组成.其中,媒体信息描述包括了:</p><ul><li>媒体类型</li><li>媒体格式</li><li>传输协议</li><li>传输的 IP 和端口</li></ul><p><strong>SDP 由一个会话级描述(session leveldescription)和多个媒体级描述(media level description)组成</strong></p><ul><li>会话级(session level)的作用域是整个会话,其位置是从 v=行开始到第一个媒体描述为止。<ul><li><code>v=</code> (protocol version): SDP 的版本号</li><li><code>o=&lt;username&gt; &lt;session id&gt; &lt;version&gt; &lt;network type&gt; &lt;address type&gt; &lt;address&gt;</code>表示的是对会话发起者的描述, 格式为<ul><li><code>&lt;username&gt;</code>:用户名,当不关心用户名时,可以用 “-”代替</li><li><code>&lt;session id&gt;</code>:数字串,在整个会话中,必须是唯一的,建议使用NTP 时间戳</li><li><code>&lt;version&gt;</code>:版本号,每次会话数据修改后,该版本值会递增</li><li><code>&lt;network type&gt;</code>:网络类型,一般为“IN”,表示“internet”</li><li><code>&lt;address type&gt;</code>: 地址类型,一般为 IP4</li><li><code>&lt;address&gt;</code>:IP 地址</li></ul></li><li><code>s=&lt;session name&gt;</code>, 表示一个会话, 在整个 SDP中有且只有一个会话</li><li><code>t=&lt;start time&gt; &lt;stop time&gt;</code> (time thesession is active)。描述了会话的开始时间和结束时间。其中,<code>&lt;start time&gt;</code> 和 <code>&lt;stop time&gt;</code> 为 NTP时间,单位是秒;当 <code>&lt;start time&gt;</code> 和<code>&lt;stop time&gt;</code> 均为零时,表示持久会话。</li></ul></li><li>媒体级(media level)是对单个的媒体流进行描述,其位置是从 m=行开始到下一个媒体描述(即下一个 m=)为止。<ul><li><code>m=&lt;media&gt; &lt;port&gt; &lt;transport&gt; &lt;fmt list&gt;</code>(media name and transport address): 表示一个会话<ul><li><code>&lt;media&gt;</code>: 媒体类型,比如 audio/video 等;</li><li><code>&lt;port&gt;</code>: 端口;</li><li><code>&lt;transport&gt;</code>: 传输协议,有两种——RTP/AVP 和UDP;</li><li><code>&lt;fmt list&gt;</code>: 媒体格式,即数据负载类型 (PayloadType) 列表。</li></ul></li><li><code>a=&lt;TYPE&gt;[:&lt;VALUES&gt;]</code>(zero or more mediaattribute lines): 用于进一步描述媒体信息, 常见的有 <code>rtpmap</code>与 <code>fmtp</code><ul><li><code>a=rtpmap:&lt;payload type&gt; &lt;encoding name&gt;/&lt;clock rate&gt; [/&lt;encodingparameters&gt;]</code>:RTP 参数映射表<ul><li><code>&lt;payload type&gt;</code> : 负载类型,对应 RTP包中的音视频数据负载类型。</li><li><code>&lt;encoding name&gt;</code>: 编码器名称,如 VP8、VP9、OPUS等。</li><li><code>&lt;sample rate&gt;</code>: 采样率,如音频的采样率频率32000、48000 等。</li><li><code>&lt;encodingparameters&gt;</code>:编码参数,如音频是否是双声道,默认为单声道。</li></ul></li><li><code>a=fmtp:&lt;payload type&gt; &lt;format specific parameters&gt;</code>:表示格式参数<ul><li><code>&lt;payload type&gt;</code>: 负载类型,同样对应 RTP包中的音视频数据负载类型</li><li><code>&lt;format specific parameters&gt;</code>: 指具体参数。</li></ul></li></ul></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 会话级v&#x3D;0o&#x3D;‐ 7017624586836067756 2 IN IP4 127.0.0.1s&#x3D;‐t&#x3D;0 0&#x2F;&#x2F; 媒体级: 一个音频,一个视频。m&#x3D;audio 9 UDP&#x2F;TLS&#x2F;RTP&#x2F;SAVPF 111 103 104 9 0 8 106 105 13 126...m&#x3D;video 9 UDP&#x2F;TLS&#x2F;RTP&#x2F;SAVPF 96 97 98 99 100 101 102 122 127 121 125 107 108 109 124 120 123119 114 115 116...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="webrtc-的-sdp">WebRTC 的 SDP</h3><p>WebRTC 对 SDP 标准做了调整, 可以将 SDP 按功能分成几大块:</p><ul><li>Session Metadata,会话元数据</li><li>Network Description,网络描述</li><li>Stream Description,流描述</li><li>Security Descriptions,安全描述</li><li>Qos Grouping Descriptions, 服务质量描述</li></ul><pre class="line-numbers language-none"><code class="language-none">                                                +---------------------+                                                |        v&#x3D;           |                                                +---------------------+                +---------------------+         +---------------------+        &#x3D;&#x3D;&#x3D;&#x3D;    |   Session Metadata  |  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;  |        o&#x3D;           |        |       +---------------------+         +----------------------        |                                       +---------------------+        |                                       |        t&#x3D;           |        |                                       +---------------------+        |        |        |                                       +---------------------+        |                                       |        c&#x3D;           |        |                                       +---------------------+        |       +---------------------+        &#x3D;&#x3D;&#x3D;&#x3D;    | Network Description |   &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;        |       +---------------------+        |                                       +---------------------+        |                                       |    a&#x3D;candidate      |        |                                       +---------------------+        |        |        |                                       +---------------------+        |                                       |        m&#x3D;           |        |                                       +---------------------+        |        +---------------------+        +---------------------+        &#x3D;&#x3D;&#x3D;&#x3D;     | Stream Description  |  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D; |      a&#x3D;rtpmap       |        |        +---------------------+        +----------------------        |                                       +---------------------+        |                                       |      a&#x3D;fmtp         |        |                                       +---------------------+        |                                       +---------------------+        |                                       |      a&#x3D;sendrecv..   |        |                                       +---------------------++---------------+|    SEMANTIC   || COMPONENTS OF ||     SDP       |+---------------+        |                                       +---------------------+        |                                       |      a&#x3D;crypto       |        |                                       +---------------------+        |         +---------------------+       +---------------------+        &#x3D;&#x3D;&#x3D;&#x3D;      |Security Descriptions|  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|      a&#x3D;ice-frag     |        |         +---------------------+       +----------------------        |                                       +---------------------+        |                                       |      a&#x3D;ice-pwd      |        |                                       +---------------------+        |                                       +---------------------+        |                                       |     a&#x3D;fingerprint   |        |                                       +---------------------+        |        |        |        |                                       +---------------------+        |                                       |      a&#x3D;rtcp-fb      |        |                                       +---------------------+        |         +---------------------+       +---------------------+        &#x3D;&#x3D;&#x3D;&#x3D;      |   Qos,Grouping      |       |                     |                  |   Descriptions      |  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;|       a&#x3D;group       |                  +---------------------+       +----------------------                                                +---------------------+                                                |       a&#x3D;rtcpmux     |                                                +---------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安全描述与服务质量描述是新增的属性描述, 例如</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 安全描述 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x2F;&#x2F; 进入连通性检测的用户名a&#x3D;ice‐ufrag:1uEe &#x2F;&#x2F; 密码,这两个是用于连通性检测的凭证a&#x3D;ice‐pwd:RQe+y7SOLQJET+duNJ+Qbk7z&#x2F;&#x2F;DTLS 指纹认证,以识别是否是合法用户a&#x3D;fingerprint:sha‐256 35:6F:40:3D:F6:9B:BA:5B:F6:2A:7F:65:59:60:6D:6B:F9:C7:AE:46:44:B4:E4:73:F8:60:67:4D:58:E2:EB:9C ...&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 服务质量描述 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;a&#x3D;rtcp‐muxa&#x3D;rtcp‐rsizea&#x3D;rtpmap:96 VP8&#x2F;90000a&#x3D;rtcp‐fb:96 goog‐remb &#x2F;&#x2F; 使用 google 的带宽评估算法a&#x3D;rtcp‐fb:96 transport‐cc &#x2F;&#x2F; 启动防拥塞a&#x3D;rtcp‐fb:96 ccm fir &#x2F;&#x2F; 解码出错,请求关键帧a&#x3D;rtcp‐fb:96 nack&#x2F;&#x2F; 启用丢包重传功能a&#x3D;rtcp‐fb:96 nack pli &#x2F;&#x2F; 与 fir 类似<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="candidate">Candidate</h3><p>在网络协商中 Candidate(候选人) 用于传递网络信息, Candidate 并不唯一(例如: 一个 peer 可能因为有多张网卡对外提供多个 Candidate). 面对多个Candidate 其他 peer 会优先尝试本地地址(内网地址), 再尝试映射地址,最后尝试使用中继服务连接.</p><p>在进行 P2P 连接时, WebRTC 将尝试 <strong>NAT打洞(P2P穿越)</strong>在打洞前, WebRTC 会先判断 NAT 类型, 然后再打洞. NAT 类型有</p><ul><li><p>Full Cone NAT（完全锥型NAT）</p><p>所有从同一个私网IP地址和端口（IP1:Port1）发送过来的请求都会被映射成同一个公网IP地址和端口（IP:Port）.并且, 任何外部主机通过向映射的公网IP地址和端口发送报文,都可以实现和内部主机进行通信.</p><p>这是一种比较宽松的策略,只要建立了私网IP地址和端口与公网IP地址和端口的映射关系,所有的Internet上的主机都可以访问该NAT之后的主机.</p></li><li><p>Restricted Cone NAT（限制锥型NAT）</p><p>所有从同一个私网IP地址和端口（IP1:Port1）发送过来的请求都会被映射成同一个公网IP和端口号（IP:Port）.与完全锥型NAT不同的是, 当且仅当内部主机之前已经向公网主机发送过报文,此时公网主机才能向私网主机发送报文.</p></li><li><p>Port Restricted Cone NAT（端口限制锥型NAT）</p><p>与限制锥型NAT很相似, 只不过它包括端口号. 也就是说,一台公网主机（IP2:Port2）想给私网主机发送报文,必须是这台私网主机先前已经给这个IP地址和端口发送过报文.</p></li><li><p>Symmetric NAT（对称NAT）</p><p>所有从同一个私网IP地址和端口发送到一个特定的目的IP地址和端口的请求,都会被映射到同一个IP地址和端口.如果同一台主机使用相同的源地址和端口号发送报文, 但是发往不同的目的地,NAT将会使用不同的映射. 此外,只有收到数据的公网主机才可以反过来向私网主机发送报文.</p><p>这和端口限制锥型NAT不同,端口限制锥型NAT是所有请求映射到相同的公网IP地址和端口,而对称NAT是不同的请求有不同的映射.</p></li></ul><h2 id="调用本地媒体设备">调用本地媒体设备</h2><p>可以通过<code>navigator.mediaDevices.getUserMedia(constraints)</code>获取本地媒体信息 (<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL01lZGlhRGV2aWNlcy9nZXRVc2VyTWVkaWE=">MDN<i class="fa fa-external-link-alt"></i></span>),其中</p><ul><li><p><code>constraints = &#123; audio: true, video: true &#125;</code>,分别控制是否获取视频与音频.</p></li><li><p>更多用法</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">constraints <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">video</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">1280</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">720</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>constraints <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">video</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token literal-property property">ideal</span><span class="token operator">:</span> <span class="token number">1280</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">1920</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">min</span><span class="token operator">:</span> <span class="token number">776</span><span class="token punctuation">,</span> <span class="token literal-property property">ideal</span><span class="token operator">:</span> <span class="token number">720</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">1080</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>constraints <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">video</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">ideal</span><span class="token operator">:</span> <span class="token number">1280</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 理想值</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">ideal</span><span class="token operator">:</span> <span class="token number">720</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>可以指定视频大小, 但是对浏览器版本要求高</p></li><li><p>该方法的返回值是 promise, 成功后传入媒体流, 失败传入错误信息,常见的失败有 <code>NotReadableError</code> 该错误会发生在 video源被占用时</p></li></ul><p><strong>在浏览器显示本地声音与视频</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span> <span class="token attr-name">autoplay</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>开始捕获<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">getLocalVideo</span><span class="token punctuation">(</span><span class="token parameter">videoElem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      navigator<span class="token punctuation">.</span>mediaDevices        <span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token comment">// 开启音视频</span>          <span class="token literal-property property">video</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">stream</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>videoElem<span class="token punctuation">.</span>srcObject <span class="token operator">=</span> stream<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 成功后将返回流写入 video</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 失败输出原因</span>    <span class="token punctuation">&#125;</span>    document      <span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>        <span class="token string">'click'</span><span class="token punctuation">,</span>        <span class="token function">getLocalVideo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'video'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
    <summary type="html">因为疑似要被转岗到 WebRTC 相关岗位, 简单学一下相关知识(面向 JD 的编程了属于是)</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="WebRTC" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/WebRTC/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="WebRTC" scheme="https://blog.liukairui.me/tags/WebRTC/"/>
    
    <category term="WebSocket" scheme="https://blog.liukairui.me/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>一点设计原则</title>
    <link href="https://blog.liukairui.me/article/%E4%B8%80%E7%82%B9%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>https://blog.liukairui.me/article/%E4%B8%80%E7%82%B9%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</id>
    <published>2022-11-06T16:00:00.000Z</published>
    <updated>2022-11-06T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单一职责原则">单一职责原则</h2><blockquote><p>一个对象 / 方法只做一件事(只有一个引起他变化的原因)</p></blockquote><p>一件事是逻辑上的一件事, 不是一个函数(比如创建 xhr 与发送 xhr完全可以放一起)</p><p><strong>应用</strong></p><ul><li><p>代理模式的单一功能</p></li><li><p>迭代器模式迭代与执行分离</p></li><li><p>单例模式中工厂方法与传入方法分离</p></li><li><p>装饰者模式动态添加单一职责</p></li><li><p>优点: 降低对象粒度, 降低单个类 / 对象复杂度,提升对象可复用性</p></li><li><p>缺点: 增加代码复杂度</p></li></ul><h2 id="最少知识原则狄米特法则">最少知识原则(狄米特法则)</h2><blockquote><p>尽量提供简单的接口, 减少对象之间的交互, 从而减小类之间的耦合</p></blockquote><p><strong>应用</strong></p><ul><li>中介者模式</li><li>封装</li></ul><h2 id="开放-封闭原则">开放-封闭原则</h2><blockquote><p>软件实体(类, 模块, 函数)应该是可扩展的,但<strong>不可修改</strong></p></blockquote><p><strong>应用</strong></p><ul><li>发布订阅模式</li><li>模板方法模式</li><li>策略模式</li><li>代理模式</li><li>职责链模式</li></ul><p><strong>如何开放</strong></p><ul><li>通过回调</li><li>通过钩子控制宏观流程</li><li>找到容易变化的地方, 通过多态将变化的部分封装入多态</li></ul><h2 id="里氏替换原则">里氏替换原则</h2><blockquote><p>如果对每一个类型为 S 的对象 o1, 都有类型为 T 的对象 o2, 使得以 T定义的所有程序 P 在所有的对象 o1 都代替 o2 时, 程序 P的行为没有发生变化, 那么类型 S 是类型 T 的子类型.</p></blockquote><blockquote><p>通俗点讲, 就是只要父类能出现的地方, 子类就可以出现,而且替换为子类也不会产生任何错误或异常.</p></blockquote><ul><li>子类必须完全实现父类的方法</li><li>子类可以有自己的个性</li><li>覆盖或实现父类的方法时, 输入参数可以被放大</li><li>覆盖或实现父类的方法时, 输出结果可以被缩小</li></ul><h2 id="依赖倒置原则面向接口编程">依赖倒置原则(面向接口编程)</h2><blockquote><p>高层模块不应该依赖于低层模块, 而应该依赖于抽象. 抽象不应依赖于细节,细节应依赖于抽象</p></blockquote><ol type="1"><li>模块间的依赖通过抽象发生, 实现类之间不直接发生依赖关系,其依赖关系是通过接口或抽象类产生的</li><li>接口或抽象类不依赖于实现类</li><li>实现类依赖接口或抽象类</li></ol><p>即</p><ul><li>每个类尽量都有接口或抽象类，或者接口和抽象类两者都具备。</li><li>变量的表面类型尽量是接口或抽象类。</li><li>任何类都不应该从具体类派生。</li><li>尽量不要重写基类的方法。如果基类是一个抽象类，而且这个方法已经实现了，子类尽量不要重写。</li></ul><h2 id="接口隔离原则">接口隔离原则</h2><blockquote><p>不要对外暴露没有实际意义的接口</p></blockquote><h2 id="重构原则">重构原则</h2><ul><li><strong>抽离函数原则</strong><ul><li>当函数过于臃肿时</li><li>独立部分可以被复用</li><li>独立出的函数拥有更好的命名(语义)</li><li>独立出的函数可以被重载(重写)</li></ul></li><li>对于条件分支<ul><li>尝试将条件抽离为函数以提高语义</li><li>提取重复部分而不是在每个分支都执行</li></ul></li><li>对于较长的硬编码<ul><li>使用循环完成硬编码</li></ul></li><li>对于函数参数<ul><li>尽量减少参数数目</li><li>参数数目过多可以采用对象传入而不是传入参数列表</li></ul></li><li>链式调用不利于调试, 应该将其应用于逻辑稳定的场景</li><li>使用函数代替冗长的 <code>if-else</code></li></ul>]]></content>
    
    
    <summary type="html">随手记一些设计原则吧~</summary>
    
    
    
    <category term="计算机理论" scheme="https://blog.liukairui.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/"/>
    
    <category term="设计模式" scheme="https://blog.liukairui.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="计算机理论" scheme="https://blog.liukairui.me/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/"/>
    
    <category term="设计模式" scheme="https://blog.liukairui.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="设计原则" scheme="https://blog.liukairui.me/tags/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>一些JavaScript高阶函数</title>
    <link href="https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BJavaScript%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BJavaScript%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</id>
    <published>2022-11-04T16:00:00.000Z</published>
    <updated>2022-11-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>函数柯里化</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">currying</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 收集传入的参数</span>  <span class="token keyword">const</span> <span class="token function-variable function">curred</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有参数再指向</span>    <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> curred<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> curred<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">plus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> plusCurred <span class="token operator">=</span> <span class="token function">currying</span><span class="token punctuation">(</span>plus<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plusCurred</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plusCurred</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">plusCurred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将函数附加在 Function 上, 实现一步转为柯里化(骚操作)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">currying</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 收集传入的参数</span>  <span class="token keyword">const</span> <span class="token function-variable function">curred</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有参数再指向</span>    <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> curred<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> curred<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">plus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> plusCurred <span class="token operator">=</span> plus<span class="token punctuation">.</span><span class="token function">currying</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plusCurred</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plusCurred</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">plusCurred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>反柯里化 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">unCurrying</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> push <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">unCurrying</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> t1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">push</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1, 2, 3, 4 ]</span><span class="token comment">// 定义 length 的对象都可以用 Array.prototype.push</span><span class="token keyword">const</span> t2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>t2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; '2': 4, length: 3 &#125;</span><span class="token comment">// unCurrying 简化了调用</span><span class="token keyword">const</span> t3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">push</span><span class="token punctuation">(</span>t3<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>节流</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> interval <span class="token operator">=</span> <span class="token number">500</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    first <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 首次不卡</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 在 interval 内还有其他函数在执行</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>防抖 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>      args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// test</span><span class="token keyword">var</span> debounceRun <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> debounceRun<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>装饰器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">before</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">after</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">f1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">f2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> f <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
    <summary type="html">柯里化, 反柯里化 ... 再和原型链结合起来~</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://blog.liukairui.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>一些JavaScript设计模式</title>
    <link href="https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BJavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://blog.liukairui.me/article/%E4%B8%80%E4%BA%9BJavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-10-25T16:00:00.000Z</published>
    <updated>2022-10-25T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式: 对特定问题简单且优雅的解决方案.</p><p>设计模式的应用场景并不是相互对立的,同一个问题运用不同的设计模式解决时代码上可能有较大的重复,我们应该关注的是某个模式可以应用于什么场景, 解决什么问题.</p><p>设计模式并不一定需要手动实现, 很多语言自带了一些设计模式实现的特性.可以说学习设计模式实际上体现了编程语言在某些方向的设计缺陷与不足</p><h2 id="设计模式之于-javascript">设计模式之于 JavaScript</h2><ul><li>JavaScript 是动态类型语言,我们可以直接调用某个对象上的方法与属性而不需要提前检测对象的类型.</li><li>JavaScript 的类型是鸭子类型,即不关注对象是不是某个类型的(IS-A)而关注对象有没有某些特征(HAS-A)</li></ul><h3 id="多态">多态</h3><p>JavaScript 鸭子类型意味着无需向上转型即可直接实现多态,我们可以在函数实现上实现多态, 也可以在传入对象上实现多态</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在函数实现上实现多态</span><span class="token keyword">function</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token parameter">bar</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'duck'</span><span class="token punctuation">)</span><span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'GaGaGa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'chicken'</span><span class="token punctuation">)</span><span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'GuGuGu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// GaGaGa</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// GuGuGu</span><span class="token comment">// 在传入对象上实现多态</span><span class="token keyword">function</span> <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token parameter">bar</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> bar<span class="token punctuation">.</span>sound <span class="token operator">&amp;&amp;</span> bar<span class="token punctuation">.</span><span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// GaGaGa</span><span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// GuGuGu</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>多态背后的思想是将 "做什么" 与 "谁去做, 如何做"分开</strong>, 显然第二份代码更优雅, 更有弹性.</p><p>在实现多态时我们也要注意如何将 <strong>"做什么"(不变的,<code>makeSound</code>)</strong> 与 <strong>"谁去做, 如何做"(变化的,动物发出什么)</strong> 两者分开</p><h3 id="封装">封装</h3><p>可以借助作用域隐藏私有变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> language <span class="token operator">=</span> <span class="token string">'GuGuGu'</span><span class="token punctuation">;</span> <span class="token comment">// 私有</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sound</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 公有</span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Chicken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> duck <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> language <span class="token operator">=</span> <span class="token string">'GaGaGa'</span><span class="token punctuation">;</span> <span class="token comment">// 私有</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">sound</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>duck<span class="token punctuation">.</span><span class="token function">sound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原型模式">原型模式</h2><p>JavaScript 选择了基于原型的面向对象系统, JavaScript 并没有类的概念.在创建对象时, JavaScript 不会找对象属于什么类, 而是会寻找对象对应的原型,然后克隆这个原型对象得到目标对象.</p><p>可以这样对比, 假设我们需要制造一支红色的笔</p><ul><li>基于类的面向对象系统: 找到 <code>Pen</code> 类型, 为构造函数传入<code>color = 'red'</code>, <strong>构造</strong>对象.(类更像是一个模子, 对象就是这个模子浇铸出来的铸件)</li><li>基于原型的面向对象系统: 找到 <code>Pen</code> 对应的原型对象,<strong>克隆</strong>这个对象, 得到一根笔, 将颜色改为红色.(原型对象就像一个没有分化的细胞 (基础的, 默认的对象),创建对象就是让细胞分裂一次, 分裂出的细胞可能不符合要求,我们可以让新细胞继续分化, 使得其符合要求)</li></ul><p>JavaScript 利用原型链实现了方法的继承与委托</p><h3 id="javascript-创建对象的原理">JavaScript 创建对象的原理</h3><p>JavaScript 中的函数既可以当作函数也可以当作构造器使用, 通过<code>new</code> 创建对象时, 函数会作为构造器参与构造.如果构造器返回的对象, 那么该对象会作为 <code>new</code>的结果取代克隆的对象</p><p>JavaScript 会先克隆构造器对应的原型对象(绑定 <code>__proto__</code>),然后对对象执行构造器函数,最后检查构造器函数的返回值决定返回哪个对象作为构造结果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">newOperator</span><span class="token punctuation">(</span><span class="token parameter">ctor<span class="token punctuation">,</span> <span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 校验构造函数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ctor <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> ctor <span class="token operator">+</span> <span class="token string">'is not a constructor'</span><span class="token punctuation">;</span>  <span class="token comment">// 设置 new.target</span>  newOperator<span class="token punctuation">.</span>target <span class="token operator">=</span> ctor<span class="token punctuation">;</span>  <span class="token comment">// 克隆原型</span>  <span class="token keyword">var</span> rtn_obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>ctor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 传入参数、绑定this、获取构造函数返回的结果</span>  <span class="token keyword">var</span> instance <span class="token operator">=</span> <span class="token function">ctor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>rtn_obj<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断构造函数返回的类型</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token keyword">typeof</span> instance <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> instance <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span>    <span class="token keyword">typeof</span> instance <span class="token operator">===</span> <span class="token string">'function'</span>  <span class="token punctuation">)</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token keyword">return</span> rtn_obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单例模式">单例模式</h2><blockquote><p>保证类只有一个实例, 这个实例全局可见</p></blockquote><p>在 JavaScript 中实现单例的简单方法就是将对象附着在<code>global</code>, 但是这会污染全局作用域.虽然可以采用诸如命名空间的方法规避污染问题, 但是这种单例模式过于简易</p><h3 id="javascript-的通用惰性单例">JavaScript 的通用惰性单例</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getSingleFn</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> instance<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> instance <span class="token operator">||</span> <span class="token punctuation">(</span>instance <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只有调用时才执行函数</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">getData <span class="token operator">=</span> <span class="token function">getSingleFn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="其他应用">其他应用</h3><p>惰性单例不仅保证了全局唯一, 还保证了传入函数只运行一次, 可以实现类似<code>once</code> 功能</p><h2 id="策略模式">策略模式</h2><blockquote><p>当待解决的问题需要通过大量 "可替代" 的 "算法"实现时可以考虑策略模式</p></blockquote><h3 id="应用场景">应用场景</h3><p>假设某个插值函数 <code>lerp(time, st, ed, during, method)</code>提供了很多插值选项 (line / ease-in / ease-out...)如果要在一个函数中实现所有功能, 那函数就变为了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">lerp</span><span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during<span class="token punctuation">,</span> method</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'line'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">/* ... */</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'ease-in'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">/* ... */</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">'ease-out'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">/* ... */</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的函数缺乏弹性且违反了开闭原则: 当我们需要新增一个插值模式时,我们需要再增加一个 <code>if-else</code></p><p>可以发现, 这个函数的代码中涉及了<strong>很多平行的<code>if-else</code>,每个分支内部的算法很类似且目标相同(可替代)</strong> 可以考虑策略模式</p><h3 id="静态类型的策略模式">静态类型的策略模式</h3><p>定义一个策略类与环境类 (Context), 将每个算法封装为一个策略类,将数据配置到环境类, 在需要计算时调用环境类请求配置时指定的策略类</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 策略类</span><span class="token keyword">class</span> <span class="token class-name">LineLerp</span> <span class="token punctuation">&#123;</span>  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">EaseinLerp</span> <span class="token punctuation">&#123;</span>  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">EaseoutLerp</span> <span class="token punctuation">&#123;</span>  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 环境类</span><span class="token keyword">class</span> <span class="token class-name">Lerp</span> <span class="token punctuation">&#123;</span>  <span class="token function">setEnvs</span><span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during<span class="token punctuation">,</span> method</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>st <span class="token operator">=</span> st<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ed <span class="token operator">=</span> ed<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>during <span class="token operator">=</span> during<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span> <span class="token comment">// 策略类, 这里需要向上转型一下</span>  <span class="token punctuation">&#125;</span>  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>time<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>st<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ed<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>during<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 环境类调用策略类</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试</span><span class="token keyword">const</span> lerp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lerp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建环境类</span>lerp1<span class="token punctuation">.</span><span class="token function">setEnvs</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LineLerp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 配置环境类</span>lerp1<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="javascript-的策略模式">JavaScript 的策略模式</h3><p>可以定义一个对象存储所有策略</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 策略类</span><span class="token keyword">const</span> lerps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">line</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">easein</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">easeout</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 环境类</span><span class="token keyword">class</span> <span class="token class-name">Lerp</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> st<span class="token punctuation">,</span> ed<span class="token punctuation">,</span> during<span class="token punctuation">,</span> method</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>st <span class="token operator">=</span> st<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>ed <span class="token operator">=</span> ed<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>during <span class="token operator">=</span> during<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>method <span class="token operator">=</span> method<span class="token punctuation">;</span> <span class="token comment">// 策略</span>  <span class="token punctuation">&#125;</span>  <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> lerps<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>time<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>st<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ed<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>during<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 环境类调用策略类</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 测试</span><span class="token keyword">const</span> lerp1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lerp</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'line'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建环境类</span>lerp1<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他应用场景">其他应用场景</h3><p>实际上只要我们的<strong>算法业务目标一致,具有可替代性</strong>就可以利用策略模式</p><p>例如: 表单验证</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义策略</span><span class="token keyword">const</span> strategies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">isNotEmpty</span><span class="token operator">:</span> <span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token operator">=></span> value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">,</span>  <span class="token literal-property property">minLength</span><span class="token operator">:</span> <span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> minLen<span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token operator">=></span> value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> minLen <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">,</span>  <span class="token literal-property property">isMobile</span><span class="token operator">:</span> <span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1\d&#123;10&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 定义环境类</span><span class="token keyword">class</span> <span class="token class-name">Validator</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> rules</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 添加策略, rule = 策略:参数...</span>    rules<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> strategy<span class="token punctuation">,</span> errorMsg <span class="token punctuation">&#125;</span> <span class="token operator">=</span> d<span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token punctuation">[</span>rule<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">]</span> <span class="token operator">=</span> strategy<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>strategies<span class="token punctuation">[</span>rule<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token operator">...</span>params<span class="token punctuation">,</span> errorMsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> userInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">userName</span><span class="token operator">:</span> <span class="token string">'hihi'</span><span class="token punctuation">,</span>  <span class="token literal-property property">passWord</span><span class="token operator">:</span> <span class="token string">'hi'</span><span class="token punctuation">,</span>  <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">' '</span><span class="token punctuation">,</span>  <span class="token literal-property property">tel</span><span class="token operator">:</span> <span class="token string">'222'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>userName<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'minLength:2'</span><span class="token punctuation">,</span> <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'Username >2!'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>passWord<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'minLength:4'</span><span class="token punctuation">,</span> <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'pwd >4!'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>address<span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'isNotEmpty'</span><span class="token punctuation">,</span> <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'add nn!'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>validator<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span>tel<span class="token punctuation">,</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'isNotEmpty'</span><span class="token punctuation">,</span> <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'tel nn!'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">'isMobile'</span><span class="token punctuation">,</span> <span class="token literal-property property">errorMsg</span><span class="token operator">:</span> <span class="token string">'NOT A TEL!'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>validator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代理模式">代理模式</h2><blockquote><p>提供一个代用品以控制外部的访问</p></blockquote><p>实现代理的原则</p><ul><li>透明代理: 代理 API 设计的与原 API 一样,当我们不需要代理的时候可以直接移除代理代码而不需要大改 API</li></ul><h3 id="保护代理">保护代理</h3><p>相当于一个防火墙, 每次触发时有选择的执行或阻止触发事件</p><h3 id="虚拟代理">虚拟代理</h3><p>将性能开销大的事务延迟到可用时执行</p><ul><li><p>图片预加载 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyImage</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>imageNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>imageNode<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setSrc</span><span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>imageNode<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">setImageProxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> src<span class="token punctuation">,</span> srcLoad <span class="token operator">=</span> <span class="token string">'http://预加载图片地址'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 临时图像对象</span>  img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> target<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当临时图像加载完成后为目标赋值</span>  img<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span> <span class="token comment">// 要求临时图像加载</span>  target<span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span>srcLoad<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 目标图像先放 loading 图</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> imgNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setImageProxy</span><span class="token punctuation">(</span>imgNode<span class="token punctuation">,</span> <span class="token string">'http://大图地址'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>合并请求</p><p>对于少量多次的请求可以做请求合并</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getFetchProxy</span><span class="token punctuation">(</span><span class="token parameter">interval</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> timer<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://example.com/'</span> <span class="token operator">+</span> cache<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cache<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> urlProxy <span class="token operator">=</span> <span class="token function">getFetchProxy</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">urlProxy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">urlProxy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>惰性加载</p><p>类似单例模式的惰性加载</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getFetchProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://example.com/'</span> <span class="token operator">+</span> cache<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cache<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> urlProxy <span class="token operator">=</span> <span class="token function">getFetchProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">urlProxy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">urlProxy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">urlProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="缓存代理">缓存代理</h3><p>缓存请求参数即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getMultiProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 计算乘法的代理</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> k <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>      cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>        k<span class="token punctuation">,</span>        args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">*</span> cur<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他代理">其他代理</h3><ul><li>防火墙代理</li><li>远程代理: 代理其他内存区域中的数据</li><li>保护代理: 实现权限控制</li><li>智能引用代理: 在指针基础上提供了一些回调方法</li><li>写时复制代理: 惰性复制, 只有要修改原对象时才赋值</li></ul><h2 id="迭代器模式">迭代器模式</h2><ul><li>内部迭代器: 迭代器位于函数内部, 只需要传入对每个对象的调用方法</li><li>外部迭代器: 需要显式操作迭代器(<code>next</code>,<code>isDone</code>)</li></ul><h2 id="发布订阅模式">发布订阅模式</h2><blockquote><p>又称观察者模式, 用于维护对象之间的<strong>一对多</strong>关系,一旦对象状态发生改变, 所有依赖(订阅)于这个对象的对象都会得到消息</p></blockquote><p>当某个对象需要在其他对象发生变化后变化, 最简单的实现方式是 RR,但这势必会造成硬编码与强耦合. 我们希望采用类似 DOM 中<code>addEventListener</code> 的方法实现事件注册并在触发后自动执行.模仿这个过程就可以得到发布订阅模式与观察者模式.</p><h3 id="javascript-的观察者模式">JavaScript 的观察者模式</h3><p>观察者模式中存在观察者与被观察者, 观察者发生变化后通知被观察者</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//观察者类</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">//观测到变化后的处理</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">ob</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Observed</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//添加观察者</span>  <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//删除观察者</span>  <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> o <span class="token operator">!=</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//通知所有的观察者</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Observer</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">st</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">提交了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">作业</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Observed</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">submitHomeWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>teacher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>students<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2提交了t作业</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="javascript-发布订阅模式">JavaScript 发布订阅模式</h3><p>在订阅者模式中, 当被观察者发生变化时被观察者会直接通知所有观察者.在消息订阅模式中, 消息发布者(被观察者)可以自定义发布消息类型,只有订阅了此类消息的人才会收到消息.</p><h4 id="非全局消息中心">非全局消息中心</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">installEvent</span><span class="token punctuation">(</span><span class="token parameter">sender</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  sender<span class="token punctuation">.</span>eventType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sender<span class="token punctuation">.</span><span class="token function-variable function">listen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sender<span class="token punctuation">.</span>eventType<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> sender<span class="token punctuation">.</span>eventType<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不能用 set 万一有重复就寄了</span>    <span class="token keyword">const</span> fns <span class="token operator">=</span> sender<span class="token punctuation">.</span>eventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    fns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  sender<span class="token punctuation">.</span><span class="token function-variable function">trigger</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sender<span class="token punctuation">.</span>eventType<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> fns <span class="token operator">=</span> sender<span class="token punctuation">.</span>eventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    fns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  sender<span class="token punctuation">.</span><span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sender<span class="token punctuation">.</span>eventType<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> fns <span class="token operator">=</span> sender<span class="token punctuation">.</span>eventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> idx <span class="token operator">=</span> fns<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d <span class="token operator">===</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span>idx <span class="token operator">&amp;&amp;</span> fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sender <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">installEvent</span><span class="token punctuation">(</span>sender<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ev1 #1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sender<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>sender<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ev1 #2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sender<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'ev2'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ev2 #1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sender<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ev1 #1 ev1 #2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sender<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'ev2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ev2 #1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sender<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>sender<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ev1 #2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="有消息缓存的全局消息中心">有消息缓存的全局消息中心</h4><p>我们发现订阅者者要在注册事件时需要显式的指定发布者,这也造成了一定程度的耦合, 我们可以定义一个全局消息中心,订阅者向消息中心请求订阅消息, 消息发布者发布消息到消息中心,由消息中心通知订阅者.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Event <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> eventType <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>eventType<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> eventType<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不能用 set 万一有重复就寄了</span>    <span class="token keyword">const</span> fns <span class="token operator">=</span> eventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    fns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">retrieveCache</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>eventType<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">addCache</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> fns <span class="token operator">=</span> eventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fns<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">addCache</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    fns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>eventType<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> fns <span class="token operator">=</span> eventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> idx <span class="token operator">=</span> fns<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d <span class="token operator">===</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span>idx <span class="token operator">&amp;&amp;</span> fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">addCache</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cachedArgs <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    cachedArgs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">retrieveCache</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    cachedArgs <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    cachedArgs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">trigger</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token operator">...</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> listen<span class="token punctuation">,</span> trigger<span class="token punctuation">,</span> cancel <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> sender <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ev1 #1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ev1 #2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'ev2'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ev2 #1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ev1 #1 ev1 #2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'ev2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ev2 #1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'ev1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ev1 #2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'ev3'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Event<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'ev3'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ev3 #1, ans = '</span> <span class="token operator">+</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=></span> pre <span class="token operator">+</span> cur<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ev3 #1, ans = 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应用场景-1">应用场景</h3><p>某个对象改变, 使依赖于它的多个对象得到通知, 且希望解耦两者.发布-订阅模式适合更复杂的场景(发布者的某次更新只想通知它的部分订阅者)</p><h2 id="命令模式">命令模式</h2><blockquote><p>当我们不清楚请求的接受者是谁也不知道请求的具体操作是什么.我们可以将命令封装为对象, 让命令对象在程序中被四处传递</p></blockquote><p>命令模式的三个组成部分: 发起者(不知道自己触发的命令有啥用,也不知道谁最终接收命令) 命令(一个被拿来拿去的对象)传递/接收者(只管传递/接收命令)</p><p>可以类比餐厅点餐:</p><ul><li>命令: 一个包含了如何做菜的指令对象</li><li>发起者: 客户, 客户发起做饭的命令,但是客户也不知道做饭的命令最终接受者是谁, 他只是发出了一个做菜命令</li><li>传递者: 服务员, 服务员将客户发出的做菜指令传递给大厨</li><li>执行者: 大厨, 大厨只管执行命令, 他也不知道是谁点的餐,他只负责执行</li></ul><p>可以看到, 在这里我们完全做到了发起者, 命令, 接受者的解耦</p><h3 id="静态类型语言的命令模式">静态类型语言的命令模式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 为发起者绑定命令的方法</span><span class="token keyword">function</span> <span class="token function">setCommandDOM</span><span class="token punctuation">(</span><span class="token parameter">dom<span class="token punctuation">,</span> command</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 实际功能的实现</span><span class="token keyword">const</span> showTimes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">showYear</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">showMonth</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token function-variable function">showDay</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 命令类</span><span class="token keyword">function</span> <span class="token function">ShowCurrentYearCommand</span><span class="token punctuation">(</span><span class="token parameter">receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">ShowCurrentYearCommand</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">execute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span>innerText <span class="token operator">=</span> showTimes<span class="token punctuation">.</span><span class="token function">showYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ShowCurrentAllCommand</span><span class="token punctuation">(</span><span class="token parameter">receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">ShowCurrentAllCommand</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">execute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span>innerText <span class="token operator">=</span>    <span class="token string">''</span> <span class="token operator">+</span> showTimes<span class="token punctuation">.</span><span class="token function">showYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> showTimes<span class="token punctuation">.</span><span class="token function">showMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> showTimes<span class="token punctuation">.</span><span class="token function">showDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ClearAllCommand</span><span class="token punctuation">(</span><span class="token parameter">receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token class-name">ClearAllCommand</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">execute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 构造命令(命令 -> 接收者, 接收者不知道是谁发起的)</span><span class="token keyword">const</span> showCurrentYearCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShowCurrentYearCommand</span><span class="token punctuation">(</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> showCurrentAllCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShowCurrentAllCommand</span><span class="token punctuation">(</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> clearAllCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClearAllCommand</span><span class="token punctuation">(</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 发起者发起命令(发起者 -> 命令, 发起者也不知道这命令是干啥的)</span><span class="token function">setCommandDOM</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> showCurrentYearCommand<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setCommandDOM</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> showCurrentAllCommand<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setCommandDOM</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clearAllCommand<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现命令功能</li><li>实现命令类保存 context 实现 execute</li><li>构造实例对象, 完成 命令 -&gt; 执行者的绑定</li><li>将命令绑定给发起者</li></ul><p>撤销执行: 将指令调用保存到栈, 需要撤销时候弹指令即可.同时在指令上定义 undo 方法实现单条指令的撤销(因为每条指令只需要实现execute 的逆, 不用考虑全局变化, 所以不算麻烦), 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ClearAllCommand</span><span class="token punctuation">(</span><span class="token parameter">receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ClearAllCommand</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">execute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span>innerText<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">ClearAllCommand</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">undo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>receiver<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>last<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="宏命令">宏命令</h3><p>可以将多个命令组合起来形成一个宏命令,执行宏命令等于执行宏命令下的每个命令</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">buildMacroCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> commandList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">command</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      commandList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      commandList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">[</span><span class="token operator">...</span>commandList<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>undo <span class="token operator">&amp;&amp;</span> d<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们尽量让宏命令和普通命令 API 保持一致,这样可以保证宏命令对发起者透明</p><h3 id="智能命令与傻瓜命令">智能命令与傻瓜命令</h3><p>命令执行与执行者无关的称为智能命令(例如 <code>alert()</code>),和执行者有关的(例如 <code>receiver.innerText</code>)</p><h3 id="应用场景-2">应用场景</h3><ul><li>不清楚请求的接受者</li><li>不知道请求的具体操作是什么</li><li>命令要被四处传递四处传递</li></ul><p>命令模式与策略模式在形式上有点类似, 但是命令模式的命令传递更加灵活,且实现了命令发起者与命令的解耦. 在 JavaScript 中, 命令可以是一个函数,但是函数在 JavaScript 中是可以随意传递的, 所以 JavaScript天生就直接支持命令模式</p><h2 id="组合模式">组合模式</h2><p>采用尽可能相同的接口定义对象, 并使对象具有嵌套能力.这样我们就可以通过对象的嵌套实现功能的组合.</p><p>应用: 宏命令就采用组合模式的思想, 宏命令与普通命令的 API相同(<strong>形式一致</strong>), 宏命令可以嵌套宏命令与普通命令,也可以通过 <code>execute</code>执行自己包含的子命令(<strong>功能一致</strong>).命令调用者无需区分宏命令和普通命令, 只需要无脑调用 <code>execute</code>即可.</p><p>应用场景:组合模式将对象以<strong>部分-整体的模式组成树形结构</strong>,并要求部分与整体具有<strong>功能与形式的一致性</strong></p><p>特性:称这种模式为组合模式是因为<strong>不同对象之间可以方便组合拆分对象</strong>,快速形成一个树形结构, 而调用者只需要关注树根即可调用整个对象,且不需要关系调用的对象是嵌套对象还是基本对象</p><p>注意: - 嵌套对象与基本对象接口设计不可能完全一致,如果用户对基本对象调用嵌套对象会造成引用错误,可以尝试在基本对象上定义相同 API 并抛出错误 -组合模式的对象应该是严格的树形结构, 如果出现环,就意味着我们可能无法控制环中对象调用次数, 如果产生了环可以考虑采用策略 /责任链模式解决问题</p><h2 id="模板方法模式">模板方法模式</h2><p>在抽象类中定义算法的宏观运行模式与可复用的子算法,由子类实现具体每一步的算法</p><h3 id="静态类型的模板方法模式">静态类型的模板方法模式</h3><p>实现制作饮料算法, 其中</p><ul><li>制作咖啡: 开水 -&gt; 泡咖啡粉 -&gt; 倒入杯子 -&gt; 加糖</li><li>制作奶茶: 开水 -&gt; 泡茶 -&gt; 倒入杯子 -&gt; 加牛奶</li></ul><p>可以抽象制作饮料的算法: 开水 -&gt; 泡水 -&gt; 倒入杯子 -&gt; 加料</p><p>实现制作奶茶 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MakeDrink</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">temp</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">consist</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 公共算法提前实现</span>  <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>temp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 私有算法不实现</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'需要实现算法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">pourCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cup <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'需要实现算法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pourCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cup<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MakeMilkTea</span> <span class="token keyword">extends</span> <span class="token class-name">MakeDrink</span> <span class="token punctuation">&#123;</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'tea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'milk'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> makeMilkTea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeMilkTea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>makeMilkTea<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; temp: 100, consist: [ 'tea', 'milk' ] &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>我们还可以在实现抽象类的时候加入钩子函数, 实现流程控制, 例如:默认加配料, 但是支持使用钩子函数传入是否加料</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MakeDrink</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token function">needCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 默认加料</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pourCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">needCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cup<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MakeCoffee</span> <span class="token keyword">extends</span> <span class="token class-name">MakeDrink</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">need</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>need <span class="token operator">=</span> need<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'coffee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'sugar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">needCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>need<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> makeCoffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeCoffee</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>makeCoffee<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; temp: 100, consist: [ 'coffee' ] &#125;</span><span class="token keyword">const</span> makeCoffeeWithSugar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeCoffee</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>makeCoffeeWithSugar<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; temp: 100, consist: [ 'coffee', 'sugar' ] &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="javascript-的模板方法模式">JavaScript 的模板方法模式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MakeDrink</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">temp</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">consist</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 先尽力去取</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods <span class="token operator">=</span> params<span class="token punctuation">;</span>    <span class="token comment">// 公共算法内部实现, 如果以及提供就不实现</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span>boilWater <span class="token operator">??=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>temp <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 私有算法不实现</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span>brew <span class="token operator">??=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'需要实现算法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span>pourCup <span class="token operator">??=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>cup <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span>addCondiments <span class="token operator">??=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'需要实现算法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span>needCondiments <span class="token operator">??=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">pourCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">needCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>methods<span class="token punctuation">.</span><span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cup<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> makeMilkTea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'tea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'milk'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>makeMilkTea<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; temp: 100, consist: [ 'tea', 'milk' ] &#125;</span><span class="token keyword">const</span> makeCoffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'coffee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'sugar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">needCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>makeCoffee<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; temp: 100, consist: [ 'coffee', 'sugar' ] &#125;</span><span class="token keyword">const</span> makeCoffeeWithSugar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeDrink</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'coffee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>water<span class="token punctuation">.</span>consist<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'sugar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>makeCoffeeWithSugar<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; temp: 100, consist: [ 'coffee', 'sugar' ] &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="享元模式">享元模式</h2><blockquote><p>运用共享技术尽可能的复用对象</p></blockquote><p>将对象上的属性分为内部属性与外部属性</p><ul><li>内部属性属于对象内部, 可以被外部共享</li><li>内部属性独立于场景, 不会随场景变化变化(在共享过程中保持不变)</li><li>外部属性取决于应用场景, 不会随场景变化而变化</li></ul><p>对象剥离外部对象成为共享对象, 在使用时传入外部状态组成对象</p><h3 id="应用场景-3">应用场景</h3><ul><li>相似元素多次调用</li><li>元素体积较大, 多次创建会造成较大开销</li><li>多数状态为外部状态</li><li>同时使用对象量小, 可以用少量对象完成大多数场景</li></ul><h3 id="使用-javascript-实现对象池">使用 JavaScript 实现对象池</h3><p>享元模式只是一种思想, 没有具体的实现, 对象池是享元模式的一种应用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">objPoolFactory</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">createObjFn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> objPool <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>objPool<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> objPool<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token function">createObjFn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">recover</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      objPool<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="职责链模式">职责链模式</h2><p>请求者发起请求, 将请求传递给中间人,中间人一直传递直到遇到一个可处理者</p><p>很类似于拦截器</p><h3 id="javascript-的职责链模式">JavaScript 的职责链模式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">processState400</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">>=</span> <span class="token number">400</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error 400'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processState500</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">>=</span> <span class="token number">500</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">&lt;</span> <span class="token number">600</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server 500'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processState200</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ok 200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processStateUnknown</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'unknown code'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Chain</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> fn<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setNextSuccessor</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> processCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chain</span><span class="token punctuation">(</span>processState200<span class="token punctuation">)</span><span class="token punctuation">;</span>processCode  <span class="token punctuation">.</span><span class="token function">setNextSuccessor</span><span class="token punctuation">(</span>processState400<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">setNextSuccessor</span><span class="token punctuation">(</span>processState500<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">setNextSuccessor</span><span class="token punctuation">(</span>processStateUnknown<span class="token punctuation">)</span><span class="token punctuation">;</span>processCode<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">)</span><span class="token punctuation">;</span>processCode<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token number">310</span><span class="token punctuation">)</span><span class="token punctuation">;</span>processCode<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token number">410</span><span class="token punctuation">)</span><span class="token punctuation">;</span>processCode<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token number">510</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="利用-aop-实现职责链">利用 AOP 实现职责链</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">after</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">===</span> <span class="token string">'nextSuccessor'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">processState400</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">>=</span> <span class="token number">400</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error 400'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token string">'nextSuccessor'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processState500</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">>=</span> <span class="token number">500</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">&lt;</span> <span class="token number">600</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server 500'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token string">'nextSuccessor'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processState200</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> code <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ok 200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token string">'nextSuccessor'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processStateUnknown</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'unknown code'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> processCode <span class="token operator">=</span> processState200  <span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>processState400<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>processState500<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>processStateUnknown<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">processCode</span><span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">processCode</span><span class="token punctuation">(</span><span class="token number">310</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">processCode</span><span class="token punctuation">(</span><span class="token number">410</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">processCode</span><span class="token punctuation">(</span><span class="token number">510</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与组合模式相比, 职责链模式可以手动指定执行的起点, 职责修改更灵活</p><h2 id="中介者模式">中介者模式</h2><p>中介者模式与发布订阅模式类似,都是实现解决内部状态改变引发外部行为改变.</p><ul><li>发布订阅模式只支持发布消息, 消息中心触发订阅者对应事件.消息是单向传递的</li><li>中介者模式的中介者功能更加强大,中介者拥有<strong>智能</strong>处理事件的能力(不仅可以传递消息,还可以在收到消息后做一系列动作). 同时, 中介者模式不区分发布者与订阅者,所有对象都是中介服务的对象, 对象之间平等.</li></ul><p>在中介者模式中, 中心的工作能力大大增强,所以中介者模式也被称为调停者模式</p><h3 id="javascript-的中介者模式">JavaScript 的中介者模式</h3><p>命令定义类似策略模式, 接口定义类似发布订阅模式. 实现一个玩家中介,玩家可以换队伍, 同色队伍全死后对方队伍成员收消息.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 中介者模式</span><span class="token keyword">function</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> teamColor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'live'</span><span class="token punctuation">;</span> <span class="token comment">// 玩家状态</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>teamColor <span class="token operator">=</span> teamColor<span class="token punctuation">;</span> <span class="token comment">//队伍颜色</span><span class="token punctuation">&#125;</span><span class="token class-name">Player</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">win</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">': won'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Player</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">lose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">': lost'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 玩家死亡</span><span class="token class-name">Player</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">die</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">'dead'</span><span class="token punctuation">;</span>  <span class="token comment">//给中介者发消息，玩家死亡</span>  playerDirector<span class="token punctuation">.</span><span class="token function">reciveMessage</span><span class="token punctuation">(</span><span class="token string">'playerDead'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 移除玩家</span><span class="token class-name">Player</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  playerDirector<span class="token punctuation">.</span><span class="token function">reciveMessage</span><span class="token punctuation">(</span><span class="token string">'removePlayer'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 玩家换队</span><span class="token class-name">Player</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">changeTeam</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  playerDirector<span class="token punctuation">.</span><span class="token function">reciveMessage</span><span class="token punctuation">(</span><span class="token string">'changeTeam'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">playerFactory</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> teamColor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> newPlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> teamColor<span class="token punctuation">)</span><span class="token punctuation">;</span>  playerDirector<span class="token punctuation">.</span><span class="token function">reciveMessage</span><span class="token punctuation">(</span><span class="token string">'addPlayer'</span><span class="token punctuation">,</span> newPlayer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> newPlayer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> playerDirector <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> players <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 保存所有玩家</span>    operations <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 中介者可以执行的操作</span>  operations<span class="token punctuation">.</span><span class="token function-variable function">addPlayer</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">player</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> teamColor <span class="token operator">=</span> player<span class="token punctuation">.</span>teamColor<span class="token punctuation">;</span>    players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span> <span class="token operator">=</span> players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 如果还没成立队伍，就新成立一个队伍</span>    players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加入一个玩家</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  operations<span class="token punctuation">.</span><span class="token function-variable function">removePlayer</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">player</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> teamColor <span class="token operator">=</span> player<span class="token punctuation">.</span>teamColor<span class="token punctuation">;</span>    teamPlayers <span class="token operator">=</span> players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//该队伍所有玩家</span>    players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span> <span class="token operator">=</span> teamPlayers<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">!==</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//移除玩家</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  operations<span class="token punctuation">.</span><span class="token function-variable function">changeTeam</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">player<span class="token punctuation">,</span> newTeamColor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    operations<span class="token punctuation">.</span><span class="token function">removePlayer</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从原来队伍移除</span>    player<span class="token punctuation">.</span>teamColor <span class="token operator">=</span> newTeamColor<span class="token punctuation">;</span> <span class="token comment">// 改变自身的队伍颜色</span>    operations<span class="token punctuation">.</span><span class="token function">addPlayer</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加到新队伍</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  operations<span class="token punctuation">.</span><span class="token function-variable function">playerDead</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">player</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> teamColor <span class="token operator">=</span> player<span class="token punctuation">.</span>teamColor<span class="token punctuation">,</span>      teamPlayers <span class="token operator">=</span> players<span class="token punctuation">[</span>teamColor<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//玩家所在队伍</span>    <span class="token keyword">let</span> all_dead <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> player<span class="token punctuation">;</span> <span class="token punctuation">(</span>player <span class="token operator">=</span> teamPlayers<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>player<span class="token punctuation">.</span>state <span class="token operator">!==</span> <span class="token string">'dead'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        all_dead <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>all_dead <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 全部死亡</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> player<span class="token punctuation">;</span> <span class="token punctuation">(</span>player <span class="token operator">=</span> teamPlayers<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        player<span class="token punctuation">.</span><span class="token function">lose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 所有玩家失败</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> color <span class="token keyword">in</span> players<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">!==</span> teamColor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">let</span> teamPlayers <span class="token operator">=</span> players<span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment">// 找出其他队伍玩家</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> player<span class="token punctuation">;</span> <span class="token punctuation">(</span>player <span class="token operator">=</span> teamPlayers<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            player<span class="token punctuation">.</span><span class="token function">win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 其他队伍胜利</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> <span class="token function-variable function">reciveMessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    operations<span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    reciveMessage<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> player1 <span class="token operator">=</span> <span class="token function">playerFactory</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  player2 <span class="token operator">=</span> <span class="token function">playerFactory</span><span class="token punctuation">(</span><span class="token string">'小乖'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  player3 <span class="token operator">=</span> <span class="token function">playerFactory</span><span class="token punctuation">(</span><span class="token string">'小宏'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> player4 <span class="token operator">=</span> <span class="token function">playerFactory</span><span class="token punctuation">(</span><span class="token string">'小白'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  player5 <span class="token operator">=</span> <span class="token function">playerFactory</span><span class="token punctuation">(</span><span class="token string">'小黑'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  player6 <span class="token operator">=</span> <span class="token function">playerFactory</span><span class="token punctuation">(</span><span class="token string">'小牛'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// player1.die();</span><span class="token comment">// player3.die();</span><span class="token comment">// player2.die();</span><span class="token comment">// 小明: lost</span><span class="token comment">// 小乖: lost</span><span class="token comment">// 小宏: lost</span><span class="token comment">// 小白: won</span><span class="token comment">// 小黑: won</span><span class="token comment">// 小牛: won</span><span class="token comment">// player1.remove();</span><span class="token comment">// player3.die();</span><span class="token comment">// player2.die();</span><span class="token comment">// 小乖: lost</span><span class="token comment">// 小宏: lost</span><span class="token comment">// 小白: won</span><span class="token comment">// 小黑: won</span><span class="token comment">// 小牛: won</span>player1<span class="token punctuation">.</span><span class="token function">changeTeam</span><span class="token punctuation">(</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>player2<span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>player3<span class="token punctuation">.</span><span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 小乖: lost</span><span class="token comment">// 小宏: lost</span><span class="token comment">// 小白: won</span><span class="token comment">// 小黑: won</span><span class="token comment">// 小牛: won</span><span class="token comment">// 小明: won</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缺陷">缺陷</h3><p>我们引入消息订阅中心是为了方便实现信息交流,避免硬编码与因实现通信导致的对象臃肿. 但是随着消息中心功能变强,逐渐演化为中介者, 中介者对象也会变得越来越臃肿</p><h2 id="装饰者模式">装饰者模式</h2><p>装饰者模式又称包装器模式, 就是将一个函数包装在另一个函数里面.</p><h3 id="javascript-的装饰者模式">JavaScript 的装饰者模式</h3><p>JavaScript 支持高阶函数, 所以天生支持装饰者模式. 例如, 我们想为<code>window.onload</code> 绑定内容但不知道 <code>window.onload</code>是否以及绑定了函数, 我们可以写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> _load <span class="token operator">=</span> window<span class="token punctuation">.</span>onload<span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  _load <span class="token operator">&amp;&amp;</span> <span class="token function">_load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 我们自己想绑定的</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-aop-实现装饰器模式">使用 AOP 实现装饰器模式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">before</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">after</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">f1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">f2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> f <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="应用场景-4">应用场景</h3><p>装饰器模式可以为函数<strong>动态的</strong>加入新的职责与行为,当一个函数的具体<strong>功能无法在运行前确定</strong>时或需要<strong>为函数加入非主线任务的工作(AOP)</strong>时可以考虑装饰者模式.同时, 考虑到其可以客观将代码分开,当我们想要将不同层级代码从同一个函数中分离时也可以考虑这一模式(例如在表单提交中将合法性检查与提交请求与DOM 刷新分开, 者也可以看作是一种 AOP)</p><h2 id="状态模式">状态模式</h2><blockquote><p>将事务的<strong>每种状态</strong>都封装为类,与当前状态相关的行为被直接封装到状态类中, 而在调用者看来,对象似乎可以根据状态的不同调整行为</p></blockquote><p>假设我们要实现一个支持三档切换的电灯(关-弱光-强光)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义状态类</span><span class="token keyword">class</span> <span class="token class-name">OffLight</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">light</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 不同状态在按开关时行为不同</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">.</span>weakLight<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'变为弱光'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">WeakLight</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">light</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">.</span>strongLight<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'变为强光'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">StrongLight</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">light</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>light<span class="token punctuation">.</span>offLight<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'熄灯了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义上下文类</span><span class="token keyword">class</span> <span class="token class-name">Light</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 手写每一种状态</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>offLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OffLight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new 语句中 this 指向构造对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>weakLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakLight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new 语句中 this 指向构造对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>strongLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrongLight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// new 语句中 this 指向构造对象</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>button <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>curState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offLight<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setButton</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>button <span class="token operator">=</span> dom<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>curState <span class="token operator">=</span> state<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>curState<span class="token punctuation">.</span><span class="token function">switch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setButton</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'switch'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到上下文中包含了所有状态, 关联行为统一定义在状态中,上下文类只负责调用</p><h3 id="使用有限状态机实现状态模式">使用有限状态机实现状态模式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">delegate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">client<span class="token punctuation">,</span> delegation</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">buttonWasPressed</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将客户的操作委托给delegation 对象</span>      <span class="token keyword">return</span> delegation<span class="token punctuation">.</span><span class="token function">buttonWasPressed</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token constant">FSM</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">off</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">buttonWasPressed</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'关灯'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'下一次按我是开灯'</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>currState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onState<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">on</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">buttonWasPressed</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开灯'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'下一次按我是关灯'</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>currState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offState<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">Light</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>offState <span class="token operator">=</span> <span class="token function">delegate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">FSM</span><span class="token punctuation">.</span>off<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>onState <span class="token operator">=</span> <span class="token function">delegate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">FSM</span><span class="token punctuation">.</span>on<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>currState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>offState<span class="token punctuation">;</span> <span class="token comment">// 设置初始状态为关闭状态</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>button <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Light</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  button<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'已关灯'</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>button <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>button<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    self<span class="token punctuation">.</span>currState<span class="token punctuation">.</span><span class="token function">buttonWasPressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> light <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>light<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优缺点">优缺点</h3><ul><li>状态及其对应的行为被封装在状态里,非常方便后期新增状态与状态转换</li><li>通过独立状态类避免了 context 类变臃肿</li><li>使用对象表示状态比用字符串更一目了然</li><li>不同状态之间的行为独立</li></ul><h3 id="优化点">优化点</h3><ul><li>动态创造 / 销毁状态而不是全部定义在上下文类中</li><li>共享状态</li></ul><h2 id="适配器模式">适配器模式</h2><p>当两个部分代码由于接口不同不兼容时可以采用适配器模式将不兼容的接口转为兼容接口</p>]]></content>
    
    
    <summary type="html">随手记一些设计模式吧~</summary>
    
    
    
    <category term="计算机理论" scheme="https://blog.liukairui.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/"/>
    
    <category term="设计模式" scheme="https://blog.liukairui.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://blog.liukairui.me/tags/JavaScript/"/>
    
    <category term="设计模式" scheme="https://blog.liukairui.me/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>理解Vue</title>
    <link href="https://blog.liukairui.me/article/%E7%90%86%E8%A7%A3Vue/"/>
    <id>https://blog.liukairui.me/article/%E7%90%86%E8%A7%A3Vue/</id>
    <published>2022-08-15T16:00:00.000Z</published>
    <updated>2022-11-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总览">总览</h2><h3 id="vue3-的基本结构">Vue3 的基本结构</h3><p>采用 Monorepo 模式(多组件放在一个 Repo 中), 在<code>/packages/</code> 中存储所有的模块.</p><p><strong>模块分为几类:</strong></p><ul><li>编译时(<code>/package/compiler-*</code>)<ul><li><code>compiler-core</code>: 与平台无关的编译器核心</li><li><code>compiler-dom</code>: 基于 <code>compiler-core</code> 解析<code>&lt;template&gt;</code> 标签并编译为 render 函数</li><li><code>compiler-sfc</code>: 基于 <code>compiler-dom</code> 与<code>compiler-core</code> 解析 SFC (单文件组件, 通俗理解就是<code>.vue</code> 文件) 编译为浏览器可执行的 JavaScript</li><li><code>compiler-ssr</code>: 服务端渲染的编译模块</li></ul></li><li>运行时(<code>/package/runtime-*</code>)<ul><li><code>reactivity</code>: 实现响应式</li><li><code>runtime-core</code>: 基于 <code>reactivity</code>实现运行时核心</li><li><code>runtime-dom</code>: 基于 <code>runtime-core</code>实现针对浏览器的运行时. 包括DOM API, 属性, 事件处理等</li></ul></li><li>其他<ul><li><code>template-explorer</code>: 用于调试编译器输出的开发工具</li><li><code>shared</code>: 多个包之间共享的内容</li><li><code>vue</code>: 完整版本,包括运行时和编译器</li></ul></li></ul><p><strong>依赖关系</strong></p><pre class="line-numbers language-none"><code class="language-none">                                 +---------------------+                                 |                     |                                 |  @vue&#x2F;compiler-sfc  |                                 |                     |                                 +-----+--------+------+                                       |        |                                       v        v                   +---------------------+    +----------------------+                   |                     |    |                      |     +------------&gt;|  @vue&#x2F;compiler-dom  +---&gt;|  @vue&#x2F;compiler-core  |     |             |                     |    |                      |+----+----+        +---------------------+    +----------------------+|         ||   vue   ||         |+----+----+        +---------------------+    +----------------------+    +-------------------+     |             |                     |    |                      |    |                   |     +------------&gt;|  @vue&#x2F;runtime-dom   +---&gt;|  @vue&#x2F;runtime-core   +---&gt;|  @vue&#x2F;reactivity  |                   |                     |    |                      |    |                   |                   +---------------------+    +----------------------+    +-------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>学习路线</strong></p><p>根据模块依赖关系, 路线为: <code>reactivity</code> -&gt;<code>runtime-core</code> -&gt; <code>runtime-dom</code> -&gt;<code>compiler</code>. 重点是 <code>runtime-*</code></p><p><strong>代码分析步骤</strong>:</p><ol type="1"><li>查看单元测试(位于<code>packages/**/__tests__/</code>)</li><li>根据单元测试了解模块实现的功能</li><li>跟着单元测试的了解模块功能, 了解模块功能时: 先看导出(模块是什么),再看模块被谁导入(为什么被需要),最后看导出部分对应的实现(怎么样实现)</li></ol><p><strong>参考 repo</strong></p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2N1aXhpYW9ydWkvbWluaS12dWU=">cuixiaorui/mini-vue<i class="fa fa-external-link-alt"></i></span>:用来学习</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL2NvcmU=">vuejs/core<i class="fa fa-external-link-alt"></i></span>:用来验证</li></ul><h3 id="reactivity-的基本流程">Reactivity 的基本流程</h3><p><code>Reactivity</code> 模块是运行时的最底层, 负责实现响应式, 位于:<code>mini-vue/packages/reactivity</code></p><p><strong><code>reactive</code> 的基本流程</strong></p><p><code>reactive</code> 是 <code>Reactivity</code> 的基础.负责实现对象的响应式, 并向上提供调用时方法. 基本思想就是借助 ES6 的<code>Proxy</code> 自定义 <code>get &amp; set</code></p><ol type="1"><li><p>转到 <code>mini-vue/../__tests__/reactive.spec.ts</code>,发现测试的主要目的是看 <code>reactive</code> 构造方法.</p></li><li><p>转到 <code>mini-vue/../src/reactive.ts</code>, 发现定义了<code>reactive</code>, <code>readonly</code> 等方法, 这些方法都交由<code>createReactiveObject</code> 处理.</p><p>观察 <code>createReactiveObject</code>, 可以得到三个调用参数意义:</p><ul><li><p><code>target</code>: 要被代理的值</p></li><li><p><code>proxyMap</code>: 不同类型的工厂函数有不同的全局<code>proxyMap</code>, 这意味着该变量可能会存储所有代理的某类型变量.根据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> existingProxy <span class="token operator">=</span> proxyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>existingProxy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> existingProxy<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以验证想法, 其在 <code>createReactiveObject</code> 的目的就是持久化<code>Proxy</code> 防止重复创建代理</p></li><li><p><code>baseHandlers</code>: 根据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> baseHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得出该方法就是 Proxy(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHk=">MDN<i class="fa fa-external-link-alt"></i></span>)的 <code>get &amp; set</code> 对象. 不同类型的 Proxy 有不同的<code>baseHandlers</code></p></li></ul></li><li><p>转到 <code>mini-vue/../src/baseHandlers.ts</code>发现模块主要是提供不同的 <code>get &amp; set</code> 而这些都是由两个<code>create</code> 函数实现的, 尝试理解</p><ul><li><p><code>createGetter</code> 应该返回一个<code>handler.get</code>(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHkvUHJveHkvZ2V0">MDN<i class="fa fa-external-link-alt"></i></span>)实现. 可以看到这个函数上有一堆类型判断的方法, 然后做了两步</p><ul><li>通过 <code>Reflect.get</code>(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUmVmbGVjdC9nZXQ=">MDN<i class="fa fa-external-link-alt"></i></span>)获取属性</li><li>通过 <code>track</code> 进行<strong>依赖收集</strong>,这部分后面再看</li></ul><p>最后返回获取结果. 整个 <code>get</code>感觉和原生方法相比就是多了个类型判断和 <code>track</code>,大部分的响应式都是依赖这个 <code>track</code> 实现的</p></li><li><p><code>createSetter</code> 更加简单, 看起来就是在实现<code>handler.set</code>(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHkvUHJveHkvc2V0">MDN<i class="fa fa-external-link-alt"></i></span>)的基础上多了个 <code>trigger</code></p></li></ul><p>到目前位置这个只有 <code>track</code> 和 <code>trigger</code>是不清楚的, 这两个函数在 <code>effect</code> 等部分做依赖收集的,可以先不管. 其他部分就是原生功能调用与权限管理</p></li></ol><p><strong><code>effect</code> 的基本流程</strong></p><p>如果让我实现 <code>effect</code> 我会怎么实现呢?我先想到的是利用编译原理等魔法对代码做静态分析, 找到所用响应式对象,在响应式对象的 <code>set</code> 上挂上函数. 但是, JavaScript是个动态语言, 这完全没法挂啊! 只能在运行时动态解析.</p><p>Vue 的实现就比较流畅. 既然我 <code>effect</code> 要立即执行一遍函数,那为啥不在执行前后做下 Flag, 一旦 Proxy 的 <code>get</code> 被调用, 让<code>get</code> 检查一下是不是在 <code>effect</code> 执行阶段,若是就把函数注册到这个响应式对象上😎</p><ol type="1"><li><p>转到 <code>mini-vue/../__tests__/reactive.spec.ts</code> 看到<code>effect</code> 的主要功能是立即执行函数并在响应式数据发生改变时,去执行 <code>effect</code> 注册的函数</p></li><li><p>转到 <code>mini-vue/../src/effect.ts</code> 看<code>effect</code> 函数的实现. 看到这里有熟悉的 <code>effect</code>,<code>track</code>, <code>trigger</code></p><ol type="1"><li><p><code>effect</code> 函数将传入函数包装为<code>ReactiveEffect</code> 对象, 合并配置, 执行 <code>run</code> 函数,构造 <code>runner</code> 并返回(用于后期调用)</p></li><li><p><code>ReactiveEffect</code> 类</p><ul><li><code>active</code>: 根据 <code>run</code>, <code>stop</code>函数和测试文件中的 <code>it("stop")</code> 断言可以推出其是用来开关<code>effect</code> 功能的</li><li><code>deps</code>: 根据 <code>track</code> 与 <code>trigger</code>对其调用可以判断其是用来记录函数对应依赖的</li><li><code>run</code>: 对 <code>effect</code> 注册函数的包装,在执行函数前后打入 <code>shouldTrack</code> 标记, 并将<code>activeEffect</code> 标记为要执行的 <code>ReactiveEffect</code>好让 <code>get</code> 知道哪个 <code>effect</code> 在跑</li></ul></li><li><p><code>track</code> 函数: 在 <code>reactive</code> 的<code>get</code> 中调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">"get"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>track</code> 发现自己处于 <code>effect</code>阶段时会先检查自己所在对象有没有创建 <code>attribute</code> -<code>effect</code> 函数heap 的 <code>map</code>, 如果每就创建, 然后看<code>map</code> 上有没有记录当前属性, 如果没有, 就建立依赖的<code>set</code> 并交由 <code>trackEffects</code> 加入并在<code>ReactiveEffect</code> 上也做记录.</p></li><li><p><code>trigger</code> 函数: 在 <code>reactive</code> 的<code>set</code> 中调用</p><p>先找到对应 <code>attribute</code> 的 <code>effect</code> 依赖, 去重,根据配置延迟或立即支持 <code>effect</code></p></li></ol></li></ol><p><strong>总结</strong></p><ul><li><code>reactive</code> 的流程: 传入对象, 持久化, 绑定<code>baseHandlers</code> 做权限管理与依赖收集</li><li><code>effect</code> 的流程: 将传入函数包装为对象,立即执行函数并做好标记, 在执行时收集依赖. 每当 <code>reactive</code>被调用时就 <code>tigger</code> 收集的 <code>effect</code>,并二次收集依赖</li></ul><p><strong>问题</strong></p><ul><li><p>所有的依赖收集都是基于 <code>get</code>, 这样的<code>effect</code> 存在问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should observe basic properties'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> dummy<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      dummy <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      dummy <span class="token operator">=</span> counter<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  counter<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Except 2, Received -1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不只是 <code>mini-vue</code>, <code>vue/core</code>的单元测试也存在这个问题. 但是在 <code>Vue</code>代码中并不会出现无法追踪依赖的问题,看来还有一些隐藏的优化没有找到</p></li></ul><h3 id="runtime-core-的基本流程">Runtime-core 的基本流程</h3><p><code>runtime-core</code> 依赖 <code>Reactivity</code> 为 runtime提供服务. 可以通过观察 Vue 文件的运行观察 <code>runtime-core</code>的基本流程</p><p><strong>文件基本结构</strong></p><ol type="1"><li><p>转到 <code>mini-vue/packages/vue/example/helloWorld/</code>的文件夹了解 vue 的基本工作流程</p></li><li><p>转到 <code>mini-vue/../helloWorld/index.html</code>, 只有个<code>div#root</code> 和 <code>script</code></p></li><li><p>转到 <code>mini-vue/.../helloWorld/main.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../dist/mini-vue.esm-bundler.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.js'</span><span class="token punctuation">;</span><span class="token keyword">const</span> rootContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>rootContainer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入了创建根组件的 <code>createApp</code> 与根组件 <code>App</code>,查找了 html 文件中声明的挂载点, 然后通过 <code>createApp(App)</code>打包根组件再将打包后结果挂载</p></li><li><p>转到 <code>mini-vue/../helloWorld/App.js</code> 发现定义了两个vue2 风格的组件对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span> <span class="token comment">// 组件名</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// setup 方法</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 渲染方法</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">tId</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'主页'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>前面有提到: <code>compiler-dom</code> 将<code>&lt;template&gt;</code> 标签解析并编译为 render 函数.在这里为了不追踪 <code>compiler-dom</code> 的行为, 我们直接将<code>render</code> 给出</p></li><li><p><code>h</code> 为渲染函数, 参数分别是: 组件的<code>ElementType</code>, 配置, 子组件数组, 可以看到,这里第一个子组件是一个 <code>&lt;p&gt;</code> 第二个是一个组件</p></li><li><p>可以在对象中使用 <code>render</code>, 也可以让 <code>setup</code>返回 <code>render</code> 方法, 即</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">tId</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'主页'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>createApp</code> 调用关系比较复杂, 直接使用 dev-tools观察执行过程. 打开一个 http 服务器并转到 dev-tools下, 找到<code>createApp.js</code> 并打下断点</p></li><li><p><code>createApp</code> 方法接受根组件配置对象 <code>App</code>直接包了个对象, 有</p><ul><li><code>_componment = App</code></li><li><code>mount</code> 方法, 看语义, 这个方法接收挂载点, 将根组件创建为<code>VNode</code> 并挂载到挂载点(<code>main.js</code> 中的<code>rootContainer</code>), 执行完后 <code>main.js</code> 就结束了</li></ul><p>我们需要继续分析的就是 <code>VNode</code> 的创建过程与<code>render</code> 的挂载过程</p></li></ol><p><strong>组件初始化过程</strong></p><ol type="1"><li><p>单步进入 <code>createVNode</code> 发现其声明了个<code>vnode</code>.</p><p>将传入对象(<code>rootComponent / App</code>) 作为<code>vnode.type</code></p><p>在 <code>vnode</code> 上合并对象并配置 <code>shapeFlag</code>用于标记类型</p><p>之后调用 <code>normalizeChildren</code> 并返回对象</p><ul><li>进入 <code>normalizeChildren</code> 看起来是作了 <code>slot</code>特判</li></ul></li><li><p>单步进入 <code>render</code>, 其接收了处理后的 <code>vnode</code>与挂载点 <code>rootContainer</code> 然后将参数直接交给<code>patch</code>, 可以猜到 <code>patch</code> 会是一个很通用的函数</p><ul><li><p>单步进入 <code>patch</code>, 其接收 <code>n1 = null</code>,<code>n2 = vnode</code>, <code>container</code>.</p><p>解构出了<code>n2</code> 的 <code>type = App</code> 与<code>shapeFlag</code>,</p><p>通过预定义的 <code>Symbol</code> 判断对象类型, 进入<code>default</code>,</p><p>通过位运算判断 <code>shapeFlag</code> 类型, 被识别为组件 (而不是像<code>h('p', &#123;&#125;, '主页')</code> 一样的 Element) 执行<code>processComponent</code></p><ul><li><p>单步进入 <code>processComponent</code>,</p><p>函数做了一个判断: 如果没有 <code>n1</code> 就认为 <code>n2</code>还没有被挂载就挂载 <code>n2</code> 否则更新 <code>n2</code></p><ul><li><p>单步进入 <code>mountComponent</code>, 其接收了 <code>vnode</code>与挂载点</p><p>将 <code>vnode</code> 转换为实例 <code>instance</code>, 执行<code>setupComponent</code> 处理 <code>instance</code></p><ul><li><p>单步进入 <code>setupComponent</code> 发现其只是处理了<code>prop</code> 与 <code>slot</code> 然后交给<code>setupStatefulComponent</code> 继续配置</p><ul><li><p>单步进入 <code>setupStatefulComponent</code>, 其接收<code>instance</code></p><p>将 <code>instance.ctx</code> 配置了<code>PublicInstanceProxyHandlers</code> 代理(后面分析)</p><p>提取 <code>Component = APP</code>, <code>setup = APP.setup</code></p><p>如果 <code>setup</code> 不存在就直接<code>finishComponentSetup</code></p><p>否则用 <code>setCurrentInstance</code> 打标记, 为 <code>setup</code>传入参数并获取执行结果, 执行 <code>handleSetupResult</code> 处理结果</p><ul><li><p>单步进入 <code>handleSetupResult</code> 该函数对<code>setup</code> 结果执行判断</p><p>如果是 <code>function</code> 说明是导出了 <code>render</code> 函数,将 <code>render</code> 赋值到 <code>instance.render</code> 上</p><p>否则导出的对象存入 <code>isntance.setupState</code></p><p>最后执行 <code>finishComponentSetup</code> 与无 <code>setup</code>的情况汇合</p></li><li><p>单步进入 <code>finishComponentSetup</code> 其接收<code>instance</code></p><p>若 <code>instance</code> 上没有 <code>render</code> 就尝试从<code>template</code> 编译结果上获取并存入<code>instrance.render</code></p></li></ul></li></ul></li><li><p>单步进入 <code>setupRenderEffect</code> 发现其定义绑定了一个<code>componentUpdateFn</code> 函数</p><ul><li><p>打断点并进入 <code>componentUpdateFn</code> 函数</p><p>如果组件没有被挂载, 获取子节点, 获取 <code>instance</code> 的 Proxy,构建子节点 <code>subTree</code> 并递归 <code>patch</code>, 当<code>patch</code> 到 Element 时调用 <code>processElement</code>挂载节点</p><p>否则更新节点(后面分析)</p></li></ul></li></ul></li></ul></li></ul></li></ul></li></ol><p><strong>组件更新过程</strong></p><p>为组件创建响应式并将 <code>reavtive</code> 导出到全局</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>count <span class="token operator">=</span> count<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> count <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">tId</span><span class="token operator">:</span> <span class="token string">'helloWorld'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello world: count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 dev-tools 中修改 <code>count.value</code> 根据输出来自<code>effect.ts</code> 进入文件并为 <code>run</code> 函数打上断点,再次修改值, 发现 <code>run</code> 函数实际上就是执行了当时的<code>componentUpdateFn</code>, 为 <code>componentUpdateFn</code>中已挂载的判断部分打上断点</p><ol type="1"><li><p>在断点处查看调用栈, 确定函数就是因为 <code>ref</code>修改而引发的</p></li><li><p>在执行修改前先判断有没有 <code>nextTrick</code> 需要执行</p></li><li><p>获取新节点的 <code>vnode</code></p></li><li><p>将老节点子树复制到新节点</p></li><li><p>触发生命周期函数</p></li><li><p><code>patch</code> 新节点</p><p>单步进入 <code>patch</code>, 接受老节点 <code>n1</code> 新节点<code>n2</code> 这次更新的是一个 Element 于是进入<code>ShapeFlags.ELEMENT</code>, 进入 <code>processElement</code></p><ul><li>单步进入 <code>processElement</code>, 这次老节点已经挂载,直接走更新程序<ul><li>单步进入 <code>updateElement</code> 该函数分别对比了<code>props</code> 与 子节点并更新</li></ul></li></ul></li><li><p>触发生命周期函数</p></li></ol><p><strong>总结</strong></p><pre class="mermaid">graph TBinit((初始化组件)) --> createAPp[将App交给createApp, 将App包装为vnode] --- norm1[将vnode应用normalizeChildren配置, 交给render渲染]  --> renderdispatch[render直接交给patch] --> check[patch检查类型] --为组件--> processComponent[交给processComponent判断状态] --为新节点--> mountComponent[执行mountComponent挂载vnode: 构造instance, 运行 setup, 获取 render] --> effect[注册render的effect] --> run[执行effect, 检测是否挂载]  --没有--> patch2(递归patch子节点)update((reactive更新)) -.-> run[执行effect, 检测是否挂载] -.-挂载了-.-> newvnode[构造新vnode, diff检查, 复制属性] -.-> patch2 ==> checkcheck ==为Element==> mountDir(直接修改DOM)</pre><h2 id="实现-reactivity">实现 Reactivity</h2><h3 id="环境搭建">环境搭建</h3><ul><li><p>目录结构</p><p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.├── jest.config.js├── package.json├── packages│   └── reactivity│       ├── index.ts # 入口文件│       └── __tests__ # 测试文件│           └── index.spec.ts├── README-EN.md├── README.md└── tsconfig.json # tsc --init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>依赖: <code>typescript</code> / <code>@types/node</code> /<code>jest</code> / <code>ts-jest</code> /<code>@types/jest</code></p></li></ul><h3 id="实现基本-effect-与-reactive">实现基本 <code>effect</code> 与<code>reactive</code></h3><p><strong>TDD</strong></p><p>TDD(Test-Driven Development), 是敏捷开发中的一项核心实践和技术,也是一种设计方法论. TDD的原理是在开发功能代码之前,先编写单元测试用例代码, 测试代码确定需要编写什么产品代码.TDD虽是敏捷方法的核心实践.</p><p><strong>实现基本的 <code>reactive</code></strong></p><p><strong>需求</strong>: 最简单的 <code>reactive</code>,输入对象并输出对象的代理. 代理对象修改时原对象同步修改</p><ol type="1"><li>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Should different'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输入对象并返回代理对象</span>  <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// observed 和原来的不是一个对象</span>  observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 两者同步修改</span>  <span class="token function">expect</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 只需要为对象配置一个普通代理 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 就是给一个对象, 返回一个 new Proxy</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 语法见 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get</span>    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 语法见 https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set</span>    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 唯一的难点就是<code>Proxy</code> 语法</li><li>重构: 无</li></ol><p><strong>实现基本的 <code>effect</code></strong></p><p><strong>需求</strong>: 1. 输入函数, 执行函数, 当函数中被<code>[GET]</code> 的响应式对象发生变化时重新执行函数 2. 返回一个函数<code>runner</code>, 当执行 <code>runner</code> 时执行<code>effect</code> 传入的函数</p><p><strong>需求分析</strong>: 1. 为什么是函数中被 <code>[GET]</code>的响应式对象变化时重新执行函数, <code>[SET]</code> 不行吗? 不行,响应式对象被 <code>[SET]</code> 后如果执行了函数, 响应式对象会被重新<code>[SET]</code>, 那么上一次 <code>[SET]</code> 就没用了.同时如果函数中其他变量不变只有响应式对象被 <code>[SET]</code>此时执行函数并不会使得函数中变量值发生变化(毕竟变化的响应式变量没有被<code>[GET]</code>), 不会产生 sideEffect. 2. 执行流程: 开始执行函数-&gt; <code>[GET]</code> 响应式对象 -&gt; 结束执行函数 -&gt;当响应式对象被 <code>[SET]</code> -&gt; 执行函数可以发现只需要让响应式对象知道当自己变化时哪些 <code>effect</code>需要执行就可以了, 至于 <code>effect</code>知不知道响应式对象是谁那无所谓. 可以在函数执行期间执行依赖收集, 为<code>[GET]</code> 的响应式对象注册 Effect Function,在响应式对象修改时执行其注册的 Effect Function.</p><p> </p><ol type="1"><li>测试: <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Effect test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Should sync'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> bar<span class="token punctuation">;</span>    <span class="token keyword">const</span> runner <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      bar <span class="token operator">=</span> observed<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// origin -> observed</span>    <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 立即执行 fn</span>    observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 修改有 [GET] 的响应式对象</span>    <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 响应式对象变化</span>    <span class="token function">expect</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 原对象变化</span>    <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行函数</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Should return runner'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span>info <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 劫持 console.info</span>    <span class="token keyword">let</span> bar<span class="token punctuation">;</span>    <span class="token keyword">const</span> runner <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">'I RUN'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bar <span class="token operator">=</span> observed<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 立即执行 fn, console.info 被调用 1 次</span>    observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 响应式对象发生变化执行 fn, console.info 被调用 2 次</span>    <span class="token function">runner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 手动调用 runner, console.info 被调用 3 次</span>    <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 利用 <code>targetMap</code> 实现响应式对象 -&gt; Key -&gt;Effective Function 的映射. 导出 <code>track</code> 与<code>trigger</code> 用于收集与触发依赖 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// target: Object => keyMap:(string=>Set)</span><span class="token comment">// keyMap: string => Set</span><span class="token keyword">const</span> <span class="token literal-property property">targetMap</span><span class="token operator">:</span> Map<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>EffectReactive<span class="token operator">>>></span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token literal-property property">activeEffectFn</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EffectReactive</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">runner</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>runner <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    activeEffectFn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// 全局注册当前正在收集依赖的 Effect</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行函数</span>    activeEffectFn <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 取消注册</span>  <span class="token punctuation">&#125;</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 考虑到 effect 上动作很多, 我们将其抽离为 EffectFunction 函数</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EffectReactive</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span>runner<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 依赖收集函数, 由 `[GET]` 触发, 该函数检查是否有 active 的 Effect, 有就收集依赖</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>targetMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> keyMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> keyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> dependenceEffect <span class="token operator">=</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>  dependenceEffect<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 触发函数, 当响应式对象被 `[SET]` 时尝试触发其收集的所有 Effect</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> keyMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyMap<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> depSet <span class="token operator">=</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depSet<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span><span class="token operator">...</span>depSet<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 在<code>Proxy</code> 上同步修改 <pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">export function reactive(origin) &#123;  return new Proxy(origin, &#123;    get(target, key, receiver) &#123;+     track(target, key);      return Reflect.get(target, key, receiver);    &#125;,    set(target, key, value, receiver) &#123;+     &#x2F;&#x2F; 这两行顺序反了就寄了      const res &#x3D; Reflect.set(target, key, value, receiver);+     trigger(target, key);      return res;    &#125;,  &#125;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>重构: 上面这个代码有点问题, 我们只在构造 EffectFunction时收集了依赖, 但是并不能收集全 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'dym track'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observe1 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> origin2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observe2 <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    ob <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ob <span class="token operator">=</span> observe1<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      ob <span class="token operator">=</span> observe2<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cnt<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observe1<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observe2<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 这个测试就无法通过, 因为<code>observe2</code> 理论上应该在 <code>observe1.set</code> 调用<code>run</code> 的时候收集依赖, 所以应该修改构造函数和 <code>run</code>为 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> fn<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  activeEffect <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  activeEffect <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 我们知道, 所有的依赖收集都是通过 fn 中对 reactive 的<code>[GET]</code> 实现的, 我可以保证只要执行 <code>fn</code>在其前后都加入了依赖收集的 flag 就可以. 调用 <code>fn</code>只可能发生在</li><li>构造函数</li><li>手动执行 <code>runner</code></li><li>reactive 执行 <code>[SET]</code> 触发 trigger</li></ol><p>这三部分要执行的都是 <code>run</code> 我们可以保证只要执行<code>run</code> 就触发依赖收集</p><h3 id="实现-effect-的-scheduler-选项-watch">实现 <code>effect</code> 的<code>scheduler</code> 选项 (<code>watch</code>)</h3><p><strong>需求</strong>: 为 <code>effect</code> 传入第二个参数,参数是一个对象, 其中包含 <code>scheduler</code> 函数, 当构造 Effect时执行传入的第一个函数参数, 当响应式函数变化时执行<code>scheduler</code> 函数. 这与 Vue 3 的 <code>watch</code> 类似</p><p><strong>需求分析</strong>: 在构造 Effect的时候传入配置并在触发的时候判断是否有 <code>scheduler</code> 函数</p><ol type="1"><li>测试</li></ol><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Shound run scheduler'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> bar<span class="token punctuation">;</span>  <span class="token function">effect</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      bar <span class="token operator">=</span> observed<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span> <span class="token comment">// 传入配置</span>      <span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        bar <span class="token operator">=</span> <span class="token operator">-</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次运行 fn 函数</span>  observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第二次运行 scheduler 函数</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><ol start="2" type="1"><li>实现</li></ol><ul><li>修改 effect 函数, 加入配置项 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EffectReactive</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">.</span>runner<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>修改 EffectReactive 的构造函数加载配置项 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">EffectReactive</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">runner</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any<span class="token punctuation">;</span>  <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> fn<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>scheduler <span class="token operator">=</span> options<span class="token punctuation">.</span>scheduler<span class="token punctuation">;</span>    <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>修改触发函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token punctuation">[</span><span class="token operator">...</span>depSet<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>scheduler <span class="token operator">?</span> d<span class="token punctuation">.</span><span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> d<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>重构: 无</li></ul><p><strong>什么时候尝试抽离函数 / 对象</strong></p><ol type="1"><li>函数上有很多动作</li><li>函数作用范围广, 语义差</li></ol><h3 id="实现-effect-的-stop-与-onstop-选项">实现 <code>effect</code> 的<code>stop</code> 与 <code>onStop</code> 选项</h3><p><strong>需求</strong>: 1. 定义一个外部函数 <code>stop</code>. 传入<code>runner</code> 让 <code>runner</code> 不再被响应式对象 trigger 2.<code>effect</code> 中加入 <code>onStop</code> 配置, 在<code>stop</code> 时调用</p><p><strong>需求分析</strong>: 只需要将 EffectFunction从响应式对象的依赖表中删除即可. 但是我们之前就没记录有哪些响应式对象将EffectFunction 作为依赖..., 所以需要开一个 Set 记录这些响应式对象. 同时,我们不需要记录依赖的对象是什么, 只需要记录 KeyMap 对应的 Set.</p><ol type="1"><li>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Should stop trigger'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> bar<span class="token punctuation">;</span>  <span class="token keyword">const</span> runner <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      bar <span class="token operator">=</span> observed<span class="token punctuation">.</span>foo<span class="token punctuation">;</span> <span class="token comment">// 立即执行</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bar <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> bar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 如果首次调用置 0</span>        bar<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 立即执行</span>  <span class="token function">stop</span><span class="token punctuation">(</span>runner<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 停止后第一次执行为 -1</span>  observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// reactive 变化也不调用 fn</span>  <span class="token function">stop</span><span class="token punctuation">(</span>runner<span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 反复 stop 不反复执行 onStop</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 修正 EffectReactive <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">EffectReactive</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">runner</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// effect 只返回 runner, stop 函数需要根据 runner 找到 EffectReactive, 所以要在函数上加一个属性记录一下</span>    <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> any<span class="token punctuation">;</span>    effect<span class="token operator">?</span><span class="token operator">:</span> EffectReactive<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function-variable function">onStop</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// stop 回调</span>  <span class="token literal-property property">deps</span><span class="token operator">:</span> Set<span class="token operator">&lt;</span>Set<span class="token operator">&lt;</span>EffectReactive<span class="token operator">>></span><span class="token punctuation">;</span> <span class="token comment">// 收集了这个函数依赖的变量的依赖表集合</span>  <span class="token literal-property property">active</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span> <span class="token comment">// EffectReactive 是否运行 (stop 时置 0)</span>  <span class="token comment">// ...</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> fn<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>runner <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>runner<span class="token punctuation">.</span>effect <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>onStop <span class="token operator">=</span> options<span class="token punctuation">.</span>onStop<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果用户手动执行 runner 那么只执行 fn, 不追踪依赖, 放置依赖追踪给已经解除依赖的元素再绑定上依赖</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    activeEffect <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    activeEffect <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 修正依赖收集函数<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//</span>  dependenceEffect<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 为当前正在依赖收集的 effect 的依赖上加入这个 key 的依赖表</span>  activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dependenceEffect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 实现 <code>stop</code> 函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token parameter">runner</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 不反复执行</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>runner<span class="token punctuation">.</span>effect<span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  runner<span class="token punctuation">.</span>effect<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 找到所有收集过 effect 的变量, 将 effect 从依赖表中删除</span>  <span class="token punctuation">[</span><span class="token operator">...</span>runner<span class="token punctuation">.</span>effect<span class="token punctuation">.</span>deps<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>runner<span class="token punctuation">.</span>effect<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 执行 onStop</span>  runner<span class="token punctuation">.</span>effect<span class="token punctuation">.</span>onStop <span class="token operator">&amp;&amp;</span> runner<span class="token punctuation">.</span>effect<span class="token punctuation">.</span><span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>重构: 无</li></ol><h3 id="实现-proxy-的-readonly">实现 <code>Proxy</code> 的<code>Readonly</code></h3><p><strong>需求</strong>: <code>readonly</code> 与 <code>reactive</code>类似, 不过不支持 <code>set</code></p><p><strong>需求分析</strong>: 一个元素不支持 <code>set</code>也就不可能触发依赖, 所以也没有必要做依赖收集. 所以只需要精简一下<code>reactive</code>. 可以发现,不同权限的变量只是在构造的时候采用不同的 <code>[GET]</code> 与<code>[SET]</code> 策略. 可以将 <code>[GET]</code> 与 <code>[SET]</code>抽离出来</p><ol type="1"><li>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Happy path'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span>warn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将原始对象包装为只读对象</span>  <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最开始不报错</span>  observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 修改, 静默失效, 报 warning</span>  <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// warning 被调用一次</span>  <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// readOnly 静默失效</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 抽离 <code>[GET]</code> 与 <code>[SET]</code> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// reactive 的 [GET]</span><span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// reactive 的 [SET]</span><span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getReadonly</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">setReadonly</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Can not set readonly'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 要返回一下设置结果, 如果返回 false 会抛出异常, 而我们只希望静默失效</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> proxyConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  get<span class="token punctuation">,</span>  set<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> proxyReadonlyConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">get</span><span class="token operator">:</span> getReadonly<span class="token punctuation">,</span>  <span class="token literal-property property">set</span><span class="token operator">:</span> setReadonly<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>抽离对象创建函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span><span class="token parameter">origin<span class="token punctuation">,</span> readonly <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>readonly<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> proxyReadonlyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> proxyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre> 重写 <code>reactive</code> 实现<code>readonly</code> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">readonly</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>重构: 上面的就是重构后的代码</li></ol><h3 id="实现工具函数-isreadonly-isreactive-isproxy">实现工具函数<code>isReadonly</code>, <code>isReactive</code>,<code>isProxy</code></h3><p><strong>需求</strong>: 实现工具函数, <code>isReadonly</code>,<code>isReactive</code>, <code>isProxy</code>(前两个函数二选一).</p><p><strong>需求分析</strong>: 只需要在 <code>[GET]</code> 上特判即可</p><ol type="1"><li>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'isReadonly test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReadonly</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'isReactive test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReadonly</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'isProxy test'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">readonly</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isProxy</span><span class="token punctuation">(</span>observed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 构造个枚举 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> ReactiveFlag <span class="token punctuation">&#123;</span>  <span class="token constant">IS_REACTIVE</span> <span class="token operator">=</span> <span class="token string">'__v_isReactive'</span><span class="token punctuation">,</span>  <span class="token constant">IS_READONLY</span> <span class="token operator">=</span> <span class="token string">'__v_isReadonly'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre> 实现函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isReactive</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 要转一下 Boolean 因为非 reactive 对象会返回 undefined</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>value<span class="token punctuation">[</span>ReactiveFlag<span class="token punctuation">.</span><span class="token constant">IS_REACTIVE</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isReadonly</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>value<span class="token punctuation">[</span>ReactiveFlag<span class="token punctuation">.</span><span class="token constant">IS_READONLY</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isProxy</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">isReactive</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isReadonly</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 修改<code>[GET]</code> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reactiveFlags <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>ReactiveFlag<span class="token punctuation">.</span><span class="token constant">IS_REACTIVE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>ReactiveFlag<span class="token punctuation">.</span><span class="token constant">IS_READONLY</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> readonlyFlags <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>ReactiveFlag<span class="token punctuation">.</span><span class="token constant">IS_REACTIVE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>ReactiveFlag<span class="token punctuation">.</span><span class="token constant">IS_READONLY</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>reactiveFlags<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token operator">=></span>d<span class="token operator">===</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> reactiveFlags<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getReadonly</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>readonlyFlags<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token operator">=></span>d<span class="token operator">===</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> readonlyFlags<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>重构: 无</li></ol><h3 id="实现-reactive-readonly-嵌套">实现 <code>reactive</code> /<code>readonly</code> 嵌套</h3><p><strong>需求:</strong> 若 <code>reactive</code> /<code>readonly</code> 内部 value 为对象, 那么该对象也应该是<code>reactive</code> / <code>readonly</code></p><p><strong>需求分析:</strong> 我最开始的想法是在构造<code>reactive</code> 的时候遍历所有属性, 然后为这些属性配置<code>reactive</code>. 然而, 这无法将动态添加的对象转为<code>reactive</code>. 考虑需求, 我们希望让内层对象支持 reactive,实际上是希望让内层对象也支持依赖收集等 <code>reactive</code> 功能,而这些功能都是在对象被 <code>[GET]</code> 的时候被激活的.也就是说我们最晚可以在首次访问属性的将内层对象转换为<code>reactive</code>.</p><ol type="1"><li>测试(只写了 <code>reactive</code> 的) <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Should nested track'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observe <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>observe<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>observe<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>observe<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>observe<span class="token punctuation">.</span>bar<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 只需要在 <code>[GET]</code> 的时候判断属性是否是对象,如果是对象那么返回包装后的 <code>reactive</code></li></ol><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>reactiveFlags<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d <span class="token operator">===</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> reactiveFlags<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取结果</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">reactive</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果结果是对象, 将其包装为 reactive</span>  <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getReadonly</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>readonlyFlags<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d <span class="token operator">===</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> readonlyFlags<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取结果</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">readonly</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果结果是对象, 将其包装为 readonly</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 在 <code>packages/share/index.ts</code>中构造工具函数判断输入是否是对象 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> v <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> v <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre> 3. 改进:我们并没有实现内层 reactive 的持久化, 也就是说每次 reactive的结果是不同的... 实现内层对象持久化 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> reactiveMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> readonlyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reactiveMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span>    reactiveMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> reactiveMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">readonly</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>readonlyMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span>    readonlyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> readonlyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p><strong>注意</strong></p><ol type="1"><li><strong>JS是动态语言, 不要尝试做静态代码分析</strong>:我们在实现功能的时候应该考虑什么时候完成工作不晚,不遗漏而不是相静态语言一样想什么时候可以操作数据</li><li><strong>实现功能时想想这个功能希望我们对外表现为什么样子</strong>:思考是什么而不是怎么做, 比如内层 reactive的第一版代码并没有实现将对象转为 reactive 并附着在对象上,而是考虑如果一个内层对象是 reactive, 那么我们应该在 <code>[GET]</code>的时候表现的与原始对象不同. 这就启发我们只需要在 <code>[GET]</code>的时候处理数据就可以而不需要在构造对象的时候实现这一功能.</li></ol><h3 id="实现-shadowreadonly">实现 <code>shadowReadonly</code></h3><p><strong>需求:</strong> <code>shadowReadonly</code>就是只对对象外层实现 readonly, 内部对象不管, 不 Proxy</p><p><strong>需求分析:</strong> 实际上就是不支持嵌套的 readonly</p><ol type="1"><li>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'Happy path'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">shadowReadonly</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span>warn <span class="token operator">=</span> jest<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toHaveBeenCalled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 外层禁止修改</span>  <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observed<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 内部不管</span>  <span class="token function">expect</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>warn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeCalledTimes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isProxy</span><span class="token punctuation">(</span>observed<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getShadowReadonly</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>readonlyFlags<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d <span class="token operator">===</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> readonlyFlags<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 其实就是不支持嵌套追踪的 readonly. shadowReadonly 的元素一定是非 reactive 对象, 所以直接返回</span>  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> proxyShadowReadonlyConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">get</span><span class="token operator">:</span> getShadowReadonly<span class="token punctuation">,</span>  <span class="token literal-property property">set</span><span class="token operator">:</span> setReadonly<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 实现 shadowReadonly <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> shadowReadonlyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span><span class="token parameter">origin<span class="token punctuation">,</span> readonly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> shadow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>shadow <span class="token operator">&amp;&amp;</span> readonly<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> proxyShadowReadonlyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>readonly<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> proxyReadonlyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> proxyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">shadowReadonly</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shadowReadonlyMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span>    shadowReadonlyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> shadowReadonlyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>重构</li></ol><h3 id="实现-ref">实现 <code>ref</code></h3><p><strong>需求</strong>: 实现 <code>ref</code> - 如果<code>ref(value)</code> 输入的是不是对象, 那么可以 - 通过<code>.value</code> 访问值 - 通过 <code>.value</code> 更新值,如果赋值时新值与旧值一样则什么都不做 - 支持类似 <code>reactive</code>的依赖收集与触发 - 如果 <code>ref(value)</code> 输入的是对象, 那么可以 -在上面的基础上对要求对象支持 <code>reactive</code></p><p><strong>需求分析</strong>:</p><ul><li>我最开始想到的是 <code>ref = (value) =&gt; reactive(&#123;value&#125;)</code>但是如果只是这么简单实现, 那么 <code>ref</code> 的非 <code>value</code>属性也将变为 <code>reactive</code>. 同时可以预见这样实现的<code>ref</code> 性能不及标准 <code>ref</code>.</li><li><code>ref</code> 的特点是<strong>外层有且只有</strong><code>value</code> 一个 <code>key</code>, 这意味我们在实现时<ul><li>不用使用全局 <code>targetMap</code> (只有一个depSet)</li><li>不用像 <code>reactive</code> 一样实现一个 Proxy, 可以只实现一个<code>[GET]</code> &amp; <code>[SET]</code>.</li></ul></li><li>考虑到 <code>ref</code> 的<strong>输入可能是对象或非对象</strong><ul><li>我们能不使用全局的 <code>targetMap</code>, 否则两个值相同的<code>ref</code> 会被判定为同一个 <code>keyMap</code></li><li>若输入为对象, 在对比赋值时新值与旧值一样不能简单的比较<code>_value === newValue</code>. 若输入为对象, 那么<code>reactive(obj) !== obj</code>. 我们还需要保存输入的原始值</li></ul></li></ul><ol type="1"><li><p>测试 <code>ref</code> 非对象时 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should be reactive'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> dummy<span class="token punctuation">;</span>  <span class="token keyword">let</span> calls <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    calls<span class="token operator">++</span><span class="token punctuation">;</span>    dummy <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造 EffectFunction 执行一次</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// ref 也支持依赖收集与触发</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 同值不触发</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <code>ref</code>对象时要把内层对象变为 <code>reactive</code>, 对象也可以变为非对象<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should convert to reactive'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> dummy<span class="token punctuation">;</span>  <span class="token keyword">let</span> calls <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    calls<span class="token operator">++</span><span class="token punctuation">;</span>    dummy <span class="token operator">=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">.</span>foo <span class="token operator">?</span> a<span class="token punctuation">.</span>value<span class="token punctuation">.</span>foo <span class="token operator">:</span> a<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构造 EffectFunction 执行一次</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span>value<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// ref 也支持依赖收集与触发</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> origin<span class="token punctuation">;</span> <span class="token comment">// 同值不触发</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 同值不触发</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 变为非对象</span>  <span class="token function">expect</span><span class="token punctuation">(</span>calls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>实现</p></li></ol><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 与 reactive 直接返回一个 Proxy 不同, 我们只有 value 一个属性, 所以要手动实现一个对象</span><span class="token keyword">class</span> <span class="token class-name">RefImpl</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这里我们不使用全局的 targetMap 原因是</span>  <span class="token comment">//   - 我们这里的 Key 可以不是对象, 两个值相同的 ref 会被判定为同一个 key</span>  <span class="token comment">//   - 只存在一个 Key: value, 所以没有必要使用两个 Map, 只需要一个 Set 就可以存储所有的 EffectReactive</span>  <span class="token keyword">private</span> <span class="token literal-property property">deps</span><span class="token operator">:</span> Set<span class="token operator">&lt;</span>EffectReactive<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token keyword">private</span> _value<span class="token punctuation">;</span>  <span class="token keyword">private</span> rawValue<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">reactive</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">:</span> value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rawValue <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 只需要 value 的 [SET] [GET] 就可以实现</span>  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">trackEffect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 依赖追踪</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 重复赋值不触发, 考虑两种情况</span>    <span class="token comment">//   - this._value 不是 Object, 直接比较</span>    <span class="token comment">//   - this._value 是 Object, 此时 this._value 是一个 reactive, reactive(obj) !== obj, 必须使用原始值比较</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rawValue <span class="token operator">===</span> newValue<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rawValue <span class="token operator">=</span> newValue<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token function">isObject</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">reactive</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">:</span> newValue<span class="token punctuation">;</span>    <span class="token function">triggerEffect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发依赖</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RefImpl</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 在这里, <code>trackEffect</code> 与<code>triggerEffect</code> 相当于不需要查 <code>Set</code> 的<code>track</code> 与 <code>trigger</code>(因为只有一个<code>Set</code>). 我们可以将原来的 <code>track</code> 与<code>trigger</code> 拆开</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>targetMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> keyMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> keyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 抽成一个函数</span>  <span class="token function">trackEffect</span><span class="token punctuation">(</span>keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trackEffect</span><span class="token punctuation">(</span><span class="token parameter">dependenceEffect</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 本来只需要在 track 上判断 activeEffect 但是这个函数可能被 track 或者 RefImpl 调用, 所以还需要在判断一次</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>activeEffect<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  dependenceEffect<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>  activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dependenceEffect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> keyMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keyMap<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> depSet <span class="token operator">=</span> keyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depSet<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 抽成一个函数</span>  <span class="token function">triggerEffect</span><span class="token punctuation">(</span>depSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">triggerEffect</span><span class="token punctuation">(</span><span class="token parameter">depSet</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token operator">...</span>depSet<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>d<span class="token punctuation">.</span>scheduler <span class="token operator">?</span> d<span class="token punctuation">.</span><span class="token function">scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> d<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="实现工具函数-isref-unref-proxyrefs">实现工具函数<code>isRef</code> &amp; <code>unRef</code> &amp;<code>proxyRefs</code></h3><p><strong>需求</strong>: - <code>isRef</code>: 判断输入是不是<code>ref</code> - <code>unRef</code>: 返回 <code>ref</code> 的<code>value</code> - <code>proxyRefs</code>: 模拟 Vue3 的 setup 函数,通过该函数返回的对象中的 <code>ref</code> 在模板字符串中无需<code>.value</code> 即可访问与赋值. 简单来说就是输入对象,在访问对象中浅层 <code>ref</code> 的 <code>Key</code> 时无需<code>.value</code> 即可访问</p><p><strong>需求分析</strong>: - <code>isRef</code>: 加一个 flag 即可 -<code>unRef</code>: 判断是不是 <code>ref</code>, 是就返回<code>ref.value</code> - <code>proxyRefs</code>: 构造一个代理,在读写是判断读写目标是不是 <code>ref</code> 如果是就返回<code>ref.value</code>. 同时, 在 <code>[SET]</code> 时, 如果新旧值都是<code>ref</code> 那么直接替换掉旧 <code>ref</code></p><ol type="1"><li><p>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'isRef'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> origin2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>origin1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed2 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>origin2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>origin1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>origin2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>observed1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>observed2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'unRef'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> origin1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> origin2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed1 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>origin1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed2 <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>origin2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">unRef</span><span class="token punctuation">(</span>observed1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>origin1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">unRef</span><span class="token punctuation">(</span>observed2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>not<span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span>origin2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">unRef</span><span class="token punctuation">(</span>observed2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toStrictEqual</span><span class="token punctuation">(</span>origin2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">unRef</span><span class="token punctuation">(</span>observed2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token function">reactive</span><span class="token punctuation">(</span>origin2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'proxyRefs'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">sampleRef</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token literal-property property">sampleStr</span><span class="token operator">:</span> <span class="token string">'demo'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> proxyUser <span class="token operator">=</span> <span class="token function">proxyRefs</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>sampleRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>proxyUser<span class="token punctuation">.</span>sampleRef<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>proxyUser<span class="token punctuation">.</span>sampleStr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'demo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span>proxyUser <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span>sampleRef <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>proxyUser<span class="token punctuation">.</span>sampleRef<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>sampleRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  proxyUser<span class="token punctuation">.</span>sampleRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>proxyUser<span class="token punctuation">.</span>sampleRef<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>sampleRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>实现</p></li></ol><p>打flag <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">RefImpl</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> __v_isRef <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre> 实现 <code>isRef</code> 与 <code>unRef</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">unRef</span><span class="token punctuation">(</span><span class="token parameter">ref</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">isRef</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token operator">?</span> ref<span class="token punctuation">.</span>value <span class="token operator">:</span> ref<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isRef</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>value<span class="token operator">?.</span>__v_isRef<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 实现 <code>proxyRef</code> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">proxyRefs</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> proxyProxyRefConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getProxyRef</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 不用这么麻烦</span>  <span class="token comment">// if (isRef(target[key])) return target[key].value;</span>  <span class="token comment">// return target[key];</span>  <span class="token keyword">return</span> <span class="token function">unRef</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">setProxyRef</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 只特判 ref &lt;- 普通值</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRef</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isRef</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> proxyProxyRefConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">get</span><span class="token operator">:</span> getProxyRef<span class="token punctuation">,</span>  <span class="token literal-property property">set</span><span class="token operator">:</span> setProxyRef<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 3. 重构: 无</p><h3 id="实现-computed">实现 <code>computed</code></h3><p><strong>需求:</strong> 1. 输入一个函数, 返回一个对象, 可以通过<code>.value</code> 获取函数返回值, 当函数内部 <code>reactive</code>变化时, 返回值也要变化. 2. 支持 Lazy, 即: 1. 在 <code>computed</code>内部 <code>reactive</code> 变化时不触发 <code>computed</code> 传入函数2. 在 <code>[GET]</code> 时才触发 <code>computed</code> 传入函数 3.若内部 <code>reactive</code> 不变, 重复触发 <code>[GET]</code>不重复触发传入函数 3. 返回值也是一个 <code>reactive</code> 对象, 即<code>.value</code> 变化时要触发依赖</p><p><strong>需求分析:</strong></p><ol type="1"><li>测试 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should reactive'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> observed <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> observed<span class="token punctuation">.</span>foo <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Lazy</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observed<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Lazy</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Lazy</span>  <span class="token function">expect</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回值也可以收集依赖</span><span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'should trigger effect'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> cValue <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> value<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> dummy<span class="token punctuation">;</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    dummy <span class="token operator">=</span> cValue<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  value<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现</li></ol><ul><li>构造一个 <code>old</code>, 当内部 reactive 变化时修改,如果内部不变就直接使用原 <code>_value</code></li><li>类似构造 <code>ref</code> 的 <code>dep</code> 收集<code>.value</code> 的依赖</li><li>我们希望在第一次 <code>[GET]</code> 的时候收集依赖, 这可以使用<code>EffectReactive</code> 实现, 但是为了实现 Lazy 我们又不希望每次内部<code>reactive</code> 变化都触发依赖. 我们可以采用<code>scheduler</code> 解决, 每次内部 <code>reactive</code>变化时候打下标记(<code>old</code>), 并通知 <code>computed</code>要触发依赖了. 如果 <code>computed</code> 没有依赖那这次就 Lazy 过去了,如果有那在触发依赖时其他函数会调用计算属性的 <code>[GET]</code>此时完成刷新</li></ul><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>  effect<span class="token punctuation">,</span>  EffectReactive<span class="token punctuation">,</span>  trackEffect<span class="token punctuation">,</span>  triggerEffect<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./effect'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ComputedImpl</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">old</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>  <span class="token literal-property property">fst</span><span class="token operator">:</span> boolean<span class="token punctuation">;</span>  <span class="token literal-property property">_value</span><span class="token operator">:</span> any<span class="token punctuation">;</span>  <span class="token literal-property property">dep</span><span class="token operator">:</span> Set<span class="token operator">&lt;</span>EffectReactive<span class="token operator">></span><span class="token punctuation">;</span>  effect<span class="token operator">!</span><span class="token operator">:</span> EffectReactive<span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>old <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fst <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">trackEffect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 为啥人家的代码没 fst 呢? 因为人家的 EffectReactive 每在构造函数的时候 run. 人家可以在构造函数里面注册这个 effect</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fst<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>fst <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EffectReactive</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>old <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token function">triggerEffect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>old<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>old <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>effect<span class="token punctuation">.</span><span class="token function">runner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">triggerEffect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">_</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">'Can not set computed value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ComputedImpl</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> - 重构: 考虑修改 <code>EffectReactive</code>构造函数</p><h3 id="小结">小结</h3><ul><li>实现 <code>Reactivity</code> 的核心就是一个 <code>Proxy</code>.通过修改 <code>[GET]</code> &amp; <code>[SET]</code> 实现不同权限</li><li>时刻谨记 JavaScript 是动态语言, 对象上的属性随时在变化,不要想在某一个对对象上的属性做特殊处理, 很容易遗漏,我们可以想想什么时候外部需要我们特殊处理的特性, 在出口处"围追堵截"</li><li>注意我们应该在什么时候抽象函数<ul><li>语义上可以抽象时候</li><li>功能重复时</li></ul></li><li>当函数功能部分重叠时要敢于拆分函数</li><li><code>ref</code> 相当于是一个整体功能弱化的 <code>reactive</code>,所以我们没有使用全局 <code>targetMap</code></li><li><code>computed</code> 的实现比较巧妙, 运用了一个 effect 的配置项,我们在实现工具函数的时候也可以想想是否可以通过配置项将两个功能类似的类合并成一个类.</li></ul><h2 id="实现-runtime-core-的-mount-部分">实现 runtime-core 的 mount部分</h2><h3 id="搭建环境">搭建环境</h3><p>runtime-core 直接参与页面实现, 我们需要利用打包工具打包代码.在打包网页时一般使用 webpack, 而在打包模块时一般使用 rollup.js. 安装rollup 及其 TypeScript 依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pnpm i -D rollup @rollup&#x2F;plugin-typescript tslib rollup-plugin-sourcemaps#         ^ 本体  ^ typescript 支持          ^ TS 支持依赖<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置 rollup</p><ul><li>创建 <code>/package/index.ts</code> 作为整个项目的出口</li><li>创建 rollup 配置文件 <code>/package/rollup.config.js</code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> typescript <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-typescript'</span><span class="token punctuation">;</span><span class="token keyword">import</span> sourceMaps <span class="token keyword">from</span> <span class="token string">'rollup-plugin-sourcemaps'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token string">'./packages/index.ts'</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">// 2种输出格式</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">'cjs'</span><span class="token punctuation">,</span> <span class="token comment">// 输出格式</span>      <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">'./lib/micro-vue.cjs.js'</span><span class="token punctuation">,</span> <span class="token comment">// 输出路径</span>      <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span>      <span class="token literal-property property">file</span><span class="token operator">:</span> <span class="token string">'./lib/micro-vue.esm.js'</span><span class="token punctuation">,</span>      <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">typescript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sourceMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>执行 <code>rollup -c ./rollup.config.js</code> 打包</li><li>根据提示将 <code>tsconfig.json</code> 中<code>"module": "commonjs"</code> 改为<code>"module": "ESNext"</code></li><li>在 <code>package.json</code> 中注册包的入口文件, <code>main</code>对应 commonjs 包, <code>module</code> 对应 ESM 包 <pre class="line-numbers language-json" data-language="json"><code class="language-json">&quot;main&quot;: &quot;lib&#x2F;micro-vue.cjs.js&quot;,&quot;module&quot;: &quot;lib&#x2F;micro-vue.esm.js&quot;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="构造测试用例">构造测试用例</h3><p>我们构造一个简单的 Vue demo 并尝试实现 vue-runtime主流程使其可以将我们的 demo 渲染出来, Vue 项目一般包含如下文件</p><ul><li><code>index.html</code>: 至少包含一个挂载点</li><li><code>index.js</code>: 引入根组件, 将根组件挂载到挂载点</li><li><code>App.vue</code>: 定义根组件</li></ul><p>SFC 需要 vue-loader 编译才能实现. 而 vue-loader 的作用是将 SFC 处理为<code>render</code> 函数, 在此我们只能先将 <code>App.vue</code> 处理为vue-loader 编译后函数. 定义</p><ul><li><code>index.html</code>: 只构造一个挂载点并引入 JS<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>micro-vue runtime-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./index.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>model<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>index.js</code>: 先不管有没有这些函数, 平时咋写就咋写<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../lib/micro-vue.esm'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>App.js</code>: <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> h <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../lib/micro-vue.esm.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><code>App.js</code> 默认导出了一个配置对象, 该对象应该包含 SFC中导出的 <code>setup</code> 与 vue-loader 编译得到的 <code>render</code>函数. 其中</p><ul><li><code>setup</code> 函数的返回值可以是对象, 也可以是渲染函数</li><li>在解析 SFC 文件时, 如果用户手动通过 <code>setup</code>返回了渲染函数那么 vue-loader 就不编译模板,如果没有返回则编译模板并构造渲染函数 <code>render</code>.<code>render</code>函数描述了<strong>这个组件里面</strong>应该如何渲染</li><li><code>render</code> 中的 <code>h</code> 用于表述一个组件/元素,语法为: <code>h(type, attr, children)</code>.<ul><li><code>type</code>: 描述元素或组件类型, 如果希望将目标渲染为 Element那么 <code>type</code> 为标签名, 如果希望渲染为组件那么<code>type</code> 为 组件配置对象</li><li><code>attr</code>: 描述元素或组件上的属性(例如:<code>class</code>)</li><li><code>children</code>:<ul><li>如果待渲染的是一个元素, 如果这个元素下面没有子元素或者子组件, 那么<code>children</code> 为元素的 <code>innerText</code>,如果下面还有子组件或子元素, 那么 <code>children</code> 应该是一个<code>h</code> 函数返回值数组</li><li><strong>如果待渲染的是一个组件, <code>children</code>属性将传入插槽而不是子元素, 这一点与模板设计是类似的</strong><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 的 <code>h</code> 函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'222'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 对于组件<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Comp</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 的 <code>h</code> 函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">h</span><span class="token punctuation">(</span>Comp<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'222'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>设计上是统一的.</li></ul></li></ul></li></ul><p>上面这个例子描述了这样一个组件:</p><ul><li><p>首先默认导出的是一个组件配置对象</p></li><li><p>这个组件被编译为了 <code>render</code> 函数, <code>render</code>函数返回了一个 <code>h</code>.</p><ul><li><p><strong>诶, 我要渲染一个组件, 为啥 <code>h</code> 的<code>type</code> 是 <code>div</code> 而不是配置对象呢?</strong>一定注意, <code>render</code>描述的是组件<strong>里面</strong>应该如何渲染, 这里的 <code>h</code>是说, App 组件里面有一个 <code>div</code>, 如果我们这里写的是<code>h(demoObj, &#123;&#125;, '111')</code> 这个意思是 App 组件里面有一个 demo组件, 这个 demo 组件里面啥也没有, 他的 innerText 是 '111'</p></li><li><p><strong>诶, 那我们在哪里定义了 App 的 h 函数呢?</strong>我们没有用 <code>h</code> 函数定义 App (是利用 createApp 定义的)至于这俩函数有什么联系后面再说</p></li><li><p><strong>诶, 那难道组件内部只能有一个一级子元素?</strong> 是的, 在Vue2 中我们就规定 <code>template</code> 下最多只能有一个一级子元素, 在Vue3 中我们用语法糖解除了这个限制. 你可能会想到对于 App 下的某个组件(如demo), 我们通过这样的方式让这个组件有多个子元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// App.js 的 render</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>demoConfig<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是错的, 数组将作为插槽传入 demo 组件, 组件的子元素是在组件自己的<code>render</code> 中定义的.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">demoConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// App.js 的 render</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>demoConfig<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实我们的疑问就是到底是他妈的谁构造了根组件 <code>App</code> 的<code>h</code> 函数</p></li></ul></li><li><p>App 是一个组件, 这个组件内部有一个 <code>div</code> 这个<code>div</code> 又有两个子<code>span</code>, 内容分别是<code>111</code> 和 <code>222</code></p></li></ul><h3 id="构造主流程">构造主流程</h3><ul><li><p><code>vue-runtime</code> 的主流程</p><pre class="mermaid">  graph TB根组件配置对象 --createApp--> 一种特殊的vNode --挂载根组件--> 根组件特殊使命结束,成为普通的组件 --渲染--> 进入patch函数 --目标是Element--> Element处理函数 --新Element--> 挂载Element --没有子Element --> 写入innerText挂载Element --有子Element--> 每个子Element --渲染--> 进入patch函数Element处理函数 --老Element--> 更新Element进入patch函数 --目标是组件--> 组件处理函数 --新组件--> 新建组件 --> 应用配置 --> 运行render --> 每个子组件 --渲染--> 进入patch函数组件处理函数 --老组件--> 更新组件</pre></li><li><p>可以看到 <code>createApp</code> 输入配置对象, <code>h</code>函数输入 <code>type</code>(可以是string可以是配置对象),<code>props</code>, <code>children</code>. 虽然两者输入不同,但是他们都返回了 vNode. <code>createApp</code> 的输入可以看作是没有<code>props</code>, <code>children</code> 的 <code>h</code>函数的组件输入, 而 <code>createApp</code> 的输出可以看作是具有特殊功能的<code>h</code> 输出. 实际上 <code>createApp</code> 与 <code>h</code>在底层都依赖了 <code>createVNode</code> 函数.</p></li><li><p>vue 渲染中对象发生了如下变化:</p><pre class="mermaid">  graph LR组件/元素配置对象 --> 虚拟节点vNode --> 实例对象 --> DOM</pre><ul><li>组件配置对象包含了 <code>render</code>, <code>setup</code></li><li><code>vNode</code> 在配置对象的基础上加入了部分属性</li><li>实例对象又在 <code>vNode</code> 的基础上加入了属性</li><li>最后挂载为 DOM</li></ul></li></ul><p><code>vue-runtime</code> 对外暴露函数只有 <code>createApp</code>我们从这个函数入手</p><ul><li><p><code>createApp</code> 创建了 app 组件 <code>vNode</code>,同时这个的 <code>vNode</code> 还应该有 <code>mount</code>函数(唯一特殊的地方)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/createApp.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createVNode <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./vnode'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> render <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./render'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token parameter">rootComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">_component</span><span class="token operator">:</span> rootComponent<span class="token punctuation">,</span>    <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> vNode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>rootComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">render</span><span class="token punctuation">(</span>vNode<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>createVnode</code>: 收到配置对象, <code>props</code>,<code>children</code> 将他们作为一个对象存起来(API 与 <code>h</code>函数一样)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/vnode.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> props <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> component<span class="token punctuation">,</span>    props<span class="token punctuation">,</span>    children<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>render</code> 负责渲染 <code>vNode</code>, 但是<code>render</code> 什么都没做, 只是调用了 <code>patch</code>.这里多此一举是为了方便之后部署子元素时递归方便</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> vNode<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 第一次创建没有老元素</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>patch</code>函数收入更新前后节点与挂载点(新节点的挂载前节点为 <code>null</code>),针对不同节点类型调用不同处理函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">processComponent</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token function">processElement</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>processComponent</code> 处理组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">function</span> <span class="token function">processComponent</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">updateComponent</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 老元素就 update</span>  <span class="token keyword">return</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span>vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//  新元素就挂载</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>updateComponent</code> 暂时没有必要实现</p></li><li><p><code>mountComponent</code> 挂载组件. 首先明确组件自己是没有 HTML标签的, 挂载组件实际上是挂载组件中的子元素. 而组件存在的必要是其导出的setup 函数中存在子元素需要的变量与函数.</p><p>我们实现组件实例在上面记录组件需要的上下文</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">createComponent</span><span class="token punctuation">(</span>vNode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建实例</span>  <span class="token function">setupComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 配置实例</span>  <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>render<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 部署实例</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>createComponent</code> 用于创建组件实例,为了方便我们将组件的 type 提到实例上</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componment.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token parameter">vNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    vNode<span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> vNode<span class="token punctuation">.</span>type<span class="token punctuation">,</span> <span class="token comment">// 图方便</span>    <span class="token literal-property property">render</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>setupComponent</code> 用于创建实例, 配置实例, 包括初始化props, slots, 处理 setup 导出的变量等. 这里我们先不处理 props, slot,忽略 setup 导出的变量后的归属问题, 只解决</p><ul><li>如果有 <code>setup</code> 就执行 <code>setup</code>,如果执行结果是对象就将导出对象绑定到 instance 上, 如果是函数就把他当成<code>render</code> 函数</li><li>如果没 <code>render</code> 就从 <code>vNode</code> 的<code>type</code> 上读取 <code>render</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componment.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupComponent</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// initProp</span>  <span class="token comment">// initSlot</span>  <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果有 setup 就处理 setup 函数运行结果</span><span class="token keyword">function</span> <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span>setup<span class="token punctuation">)</span>    <span class="token function">handleSetupResult</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  finishComponentSetup<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 处理 setup 函数运行结果</span><span class="token keyword">function</span> <span class="token function">handleSetupResult</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> instance<span class="token punctuation">.</span>render <span class="token operator">=</span> res<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    instance<span class="token punctuation">.</span>setupResult <span class="token operator">=</span> res<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 最后兜底获取 render</span><span class="token keyword">function</span> <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  instance<span class="token punctuation">.</span>render <span class="token operator">=</span> instance<span class="token punctuation">.</span>render <span class="token operator">||</span> instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span>render<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现 <code>instance</code> 之后需要将中的子元素挂载出去, 递归<code>patch</code> 即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componment.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span><span class="token parameter">render<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// render 只能返回 h 函数的结果, 所以一定是一个 vNode, 直接 patch 就行</span>  <span class="token comment">// !</span>  <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>类似的实现 Element 处理功能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">function</span> <span class="token function">processElement</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">updateElement</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">mountElement</span><span class="token punctuation">(</span>vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现挂载 Element</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">function</span> <span class="token function">mountElement</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span> <span class="token comment">// 构造 DOM 元素</span>  <span class="token comment">// 添加属性</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> vNode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 有子元素</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 递归挂载</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vNode<span class="token punctuation">.</span>children<span class="token punctuation">;</span> <span class="token comment">// 没子元素</span>  container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最后写下 <code>h</code> 函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/h.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createVNode <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./vnode"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> h <span class="token operator">=</span> createVNode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现组件实例-proxy">实现组件实例 <code>Proxy</code></h3><p>我们想要让组件可以引用自己导出的变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'micro-vue'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'hi '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是因为我们直接调用了 <code>render</code> 函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/component.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span><span class="token parameter">render<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以 <code>render</code> 的 <code>this</code> 是 <code>global</code>,我们希望 <code>render</code> 的 <code>this</code> 包括<code>setup</code> 导出的对象与 Vue 3 文档中的<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvYXBpL2NvbXBvbmVudC1pbnN0YW5jZS5odG1s">组件实例<i class="fa fa-external-link-alt"></i></span>,所以我们需要构造一个 Proxy 同时实现访问 setup 结果与组件对象</p><ol type="1"><li>处理 setup 导出</li></ol><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/component.ts</span><span class="token keyword">function</span> <span class="token function">handleSetupResult</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  instance<span class="token punctuation">.</span>setupResult <span class="token operator">=</span> <span class="token function">proxyRefs</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><ol start="2" type="1"><li>在结束组件初始化时构造代理对象, 将代理对象作为一个属性插入实例<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/component.ts</span><span class="token keyword">function</span> <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 声明代理对象</span>  instance<span class="token punctuation">.</span>proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> instance <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> publicInstanceProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>  instance<span class="token punctuation">.</span>render <span class="token operator">=</span> instance<span class="token punctuation">.</span>render <span class="token operator">||</span> instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span>render<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 将 <code>target</code> 定义为 <code>&#123; instance &#125;</code>看起来很怪, 为啥不直接用 <code>instance</code> 呢? 因为在 DEV模式下这个对象内部应该还有很多属性, 只不过我们没有考虑</li><li>定义代理 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/publicInstanceProxy.ts</span><span class="token keyword">const</span> specialInstanceKeyMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">$el</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> publicInstanceProxy <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果 setup 导出的对象上有就返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>setupResult<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>setupResult<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 从组件属性上导出属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> specialInstanceKeyMap<span class="token punctuation">)</span>      <span class="token keyword">return</span> specialInstanceKeyMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> target<span class="token punctuation">.</span>instance<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现 <code>$el</code></li></ol><p>有很多组件实例, 我们暂时只实现 <code>$el</code>. 挂载点应该是<code>vNode</code> 的属性, 所以我们将挂载点记录在 <code>vNode</code>上</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/vnode.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> props <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <code>el</code> 作为组件实例在组件挂载后在 vNode上更新即可</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/publicInstanceProxy.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>el <span class="token operator">=</span> container<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="实现-shapeflags">实现 <code>shapeFlags</code></h3><p>可以将组件类型判断抽出为一个变量, 通过位运算判断组件类型.我们目前需要判断的有:</p><ul><li>是否是 <code>Element</code></li><li>是否是有 <code>setup</code> 的组件(也叫 stateful component)</li><li>子节点是 string 还是数组</li></ul><p>实现</p><ul><li>修改 <code>vNode</code> 定义 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token parameter">component<span class="token punctuation">,</span> props <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">shapeFlags</span><span class="token operator">:</span> <span class="token function">getShapeFlags</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>判断函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isObject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../share/index'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> ShapeFlags <span class="token punctuation">&#123;</span>  <span class="token constant">ELEMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token constant">STATEFUL_COMPONENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token constant">TEXT_CHILDREN</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token constant">ARRAY_CHILDREN</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getShapeFlags</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 注意, 这俩不是互斥的...</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">|=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span>setup<span class="token punctuation">)</span> res <span class="token operator">|=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">|=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> res <span class="token operator">|=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>同步判断 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span><span class="token punctuation">)</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mountElement</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> vNode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span>    <span class="token function">processElement</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现事件注册">实现事件注册</h3><p>我们可以为 Element 传入 attribute, 但是无法传入绑定事件, 例如传入<code>&#123; onClick: ()=&gt;&#123;&#125; &#125;</code> 在渲染到 DOM时可以发现渲染结果为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div onclick<span class="token operator">=</span><span class="token string">"()=>&#123;&#125;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>onClick</code> 的小驼峰命名没了</li><li>value 应该是一个函数调用, 而这里只写了一个函数,这样点击时候并不会执行函数只会右查询一下这个函数</li></ul><p>所以我们要手动实现这样的功能: 在挂载 Element 时, 若传入的是事件,手动绑定这个事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mountElement</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 通过正则判断是否为事件绑定</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>      el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>        k<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on([A-Z].*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        vNode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>k<span class="token punctuation">]</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> vNode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现-props">实现 <code>props</code></h3><p><strong>需求:</strong></p><ol type="1"><li>将 props 输入 <code>setup</code>, 使得可以在 <code>setup</code>中通过 <code>props.属性名</code> 调用, 同时 <code>props</code> 为shadowReadonly</li><li>在 <code>render</code> 可以通过 <code>this.属性名</code> 调用</li></ol><p><strong>实现:</strong></p><ul><li><p>在 setup 时构造</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupComponent</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span>  <span class="token function">initProps</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过第二点我们就知道我们需要将 props 加入componentPublicProxy</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> publicInstanceProxy <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> target<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token keyword">return</span> target<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>参考 Vue 的API, 对于第一点需求我们只需要修改<code>handleSetupResult</code> 的调用, 传入时加入 shadowReadonly</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">handleSetupResult</span><span class="token punctuation">(</span> instance<span class="token punctuation">,</span>      instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token function">shadowReadonly</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为 setup 传入参数即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> emit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    props<span class="token punctuation">.</span>foo<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// warn: readonly value</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>我们为啥不把 shadowReadonly 写入 componentPublicProxy 呢?这样岂不是可以保护 <code>render</code> 中调用不会修改原值? 没有必要,我们只需要保证浅层 readOnly, 而 render 是直接拿属性名的, 不会修改 props上的属性定义.</p></li></ul><h3 id="实现-emits">实现 <code>emits</code></h3><p><strong>需求:</strong></p><p>通过 props 传入一堆 <code>onXxxXxx</code> 函数在 <code>setup</code>中可以通过 <code>emit(xxxXxx)</code> 调用函数. 其中<code>emit</code>通过 <code>setup(props, &#123;emit&#125;)</code> 的方式传入.</p><p><strong>注意, 这里就是差一个 <code>on</code></strong>.你说为啥他妈的你要差个 <code>on</code> 啊, 我写 Vue 的时候也没有差异啊,这个应该是 vue-loader 为传入的 <code>emit</code> 名加上的 (如:<code>&lt;comp v-on:doSth='xxx'&gt;</code>, 可能会被 vue-loader 转为<code>&#123; onDoSth: xxx &#125;</code>)</p><p><strong>那么, 难道 <code>props</code> 上的 <code>onDoSth</code>不会被注册成事件监听吗?</strong> 怎么会, 我们的事件监听是为 Element绑定的!</p><p><strong>实现:</strong></p><ul><li><p>实现 emit 函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> event<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> eventName <span class="token operator">=</span> event<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-([a-z])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 如果是 xxx-xxx 命名法, 将其转换为小驼峰</span>    eventName <span class="token operator">=</span> eventName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-([a-z])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> lc</span><span class="token punctuation">)</span> <span class="token operator">=></span> lc<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z].*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>eventName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 如果是小驼峰命名法, 将其转换为大驼峰</span>    eventName <span class="token operator">=</span> eventName<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> eventName<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  eventName <span class="token operator">=</span> <span class="token string">'on'</span> <span class="token operator">+</span> eventName<span class="token punctuation">;</span> <span class="token comment">// 加入 on</span>  instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将函数加入实例对象 <code>$emit</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> specialInstanceKeyMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">$el</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span>  <span class="token function-variable function">$emit</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">emit</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> publicInstanceProxy <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有个比较绕的点, Vue 要求 <code>emit</code> 调用方法为<code>emit(名字, 函数调用参数)</code>, 我们这边多了一个<code>instance</code>, 所以我们在定义 <code>$emit</code> 时为函数 bind第一个参数</p></li><li><p>传入 <code>setup</code> 的调用参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">handleSetupResult</span><span class="token punctuation">(</span>    instance<span class="token punctuation">,</span>    instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> <span class="token function">shadowReadonly</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">emit</span><span class="token operator">:</span> instance<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>$emit<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现-slot">实现 <code>slot</code></h3><p>之前已经梳理过组件的 children 存储的是 slot. Vue 有三种 slot</p><ul><li>默认 slot: 直接作为子元素写入, 在子组件中会按顺序写入</li><li>具名 slot: 指定元素插入什么地方</li><li>作用域 slot: 为具名 slot 传入参数</li></ul><p>先考虑组件的 children 应该传入什么样的数据类型(<code>h(comp, &#123;&#125;, children)</code>)</p><ul><li><p>如果只支持默认 slot, 我们大可将数组传入 children 并将 render函数写成下面这样</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> HelloWorld <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 假设 $slot 表示父组件传入的插槽数组, 让子组件在渲染时直接解构上去</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>$slot<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'APP'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">'hi'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM LEFT'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM RIGHT'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>如果需要支持具名插槽, 我们可以传入数组, 并在每个元素上打上<code>name</code>. 但是这样每次放入元素都需要 <spanclass="math inline">\(O(n)\)</span> 查找. 可以考虑将传入的<code>children</code> 做成对象, Key 为具名插槽名字, Value 可以是 vNode数组也可以是 vNode.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> h<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> renderSlots <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../lib/micro-vue.esm.js'</span><span class="token punctuation">;</span><span class="token keyword">const</span> HelloWorld <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token comment">// 由于 this.$slots[key] 不知道是数组还是对象, 我们用一个函数辅助处理</span>      <span class="token function">renderSlots</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">,</span> <span class="token string">'left'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">renderSlots</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">renderSlots</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 调用默认插槽</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'APP'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">'hi'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM LEFT'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// left 插槽</span>        <span class="token literal-property property">right</span><span class="token operator">:</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM RIGHT'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// right 插槽</span>        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM D1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM D2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">// 默认插槽</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里 Vue 引入了 <code>renderSlots</code> 函数,我以为其作用就是找到插槽并转换为数组, 就像下面这样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">renderSlots</span><span class="token punctuation">(</span>slots<span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> rSlots <span class="token operator">=</span> slots<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">?</span> slots<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">isObject</span><span class="token punctuation">(</span>slots<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span>rSlots<span class="token punctuation">]</span> <span class="token operator">:</span> rSlots<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是实际上这个函数的返回值是一个 vNode, Vue 会直接将一个或多个 vNode打包成一个 vNode 返回从而规避数组解构</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componentSlots.ts</span><span class="token keyword">function</span> <span class="token function">renderSlots</span><span class="token punctuation">(</span>slots<span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> rSlots <span class="token operator">=</span> name <span class="token keyword">in</span> slots <span class="token operator">?</span> slots<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    rSlots <span class="token operator">=</span> <span class="token function">testAndTransArray</span><span class="token punctuation">(</span>rSlots<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> rSlots<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不知道为什么要这么做😟</p></li><li><p>继续考虑作用域插槽, 为了实现作用域变量传递,我们需要将插槽定义为函数, 并在调用 <code>renderSolts</code>时传入参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> HelloWorld <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token function">renderSlots</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">,</span> <span class="token string">'left'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">renderSlots</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">,</span> <span class="token string">'wuhu'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 作用域 slot 传入参数</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">renderSlots</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">,</span> <span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token string">'wula'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'APP'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">h</span><span class="token punctuation">(</span>        HelloWorld<span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">'hi'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>          <span class="token function-variable function">left</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM LEFT'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function-variable function">right</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> foo<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM '</span> <span class="token operator">+</span> foo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'IM D2'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需要在 <code>renderSlots</code> 中判断 value是对象还是函数并分类讨论即可.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componentSlots.ts</span><span class="token keyword">function</span> <span class="token function">renderSlots</span><span class="token punctuation">(</span>slots<span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> rSlots <span class="token operator">=</span> name <span class="token keyword">in</span> slots <span class="token operator">?</span> slots<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 防止给无效 Key</span>    <span class="token comment">// 如果是对象 / 数组就不管, 函数就调用</span>    rSlots <span class="token operator">=</span> <span class="token function">isObject</span><span class="token punctuation">(</span>rSlots<span class="token punctuation">)</span> <span class="token operator">?</span> rSlots <span class="token operator">:</span> <span class="token function">rSlots</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 尝试转为数组</span>    rSlots <span class="token operator">=</span> <span class="token function">testAndTransArray</span><span class="token punctuation">(</span>rSlots<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>typeSymbol<span class="token punctuation">.</span>FragmentNode<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> rSlots<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// @packages/share/index.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">testAndTransArray</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">?</span> v <span class="token operator">:</span> <span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>至此, 我们实现了插槽的渲染, 再实现一些外围方法</p><ul><li><p>实现 <code>initSlot</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componentSlots.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initSlot</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  instance<span class="token punctuation">.</span>slots <span class="token operator">=</span> instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加 <code>$slot</code> 定义</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componentPublicInstance.ts</span><span class="token keyword">const</span> specialInstanceKeyMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">$el</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>el<span class="token punctuation">,</span>  <span class="token function-variable function">$emit</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">emit</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">$slots</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token operator">=></span> instance<span class="token punctuation">.</span>slots<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现-fragmentnode">实现 <code>FragmentNode</code></h3><p>在实现 <code>renderSolts</code> 时我们为将多个 vNode 打包成一个 vNode采用 <code>h('div', &#123;&#125;, rSlots)</code> 将多个插槽放入了一个<code>div</code> 下. 然而我们希望在 HTML 中不现实这个多余的<code>div</code>, 此时就需要 <code>Fragment</code> 标签, 它相当于 Vue插槽中的 <code>&lt;template&gt;&lt;/template&gt;</code> 标签,永不会被渲染. 其实现的原理就是在 mount 时不挂载父节点,直接将子节点挂载到 container 上</p><ul><li><p>先用 Symbol 定义标签名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/vnode.ts</span><span class="token keyword">export</span> <span class="token keyword">const</span> typeSymbol <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">FragmentNode</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'FragmentNode'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>patch</code> 时特判 <code>Fragment</code> (因为<code>Fragment</code> 与 component, Element 判断条件不同,我们没法把他们放入用三个 <code>case</code> 中)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> typeSymbol<span class="token punctuation">.</span>FragmentNode<span class="token operator">:</span>      <span class="token function">processFragmentNode</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 特判 Fragment</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span>        <span class="token function">processElement</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token function">processComponent</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processFragmentNode</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">mountFragmentNode</span><span class="token punctuation">(</span>vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mountFragmentNode</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 不挂载父节点直接将子节点挂载到 container 上</span>  vNode<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改 <code>renderSlots</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/componentSlots.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">renderSlots</span><span class="token punctuation">(</span>slots<span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> rSlots <span class="token operator">=</span> name <span class="token keyword">in</span> slots <span class="token operator">?</span> slots<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  rSlots <span class="token operator">=</span> <span class="token function">testAndTransArray</span><span class="token punctuation">(</span>rSlots<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>typeSymbol<span class="token punctuation">.</span>FragmentNode<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> rSlots<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//       ^ 小改一下</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现-textnode">实现 <code>TextNode</code></h3><p>我们还希望在 HTML 中不使用 <code>span</code> 就写入文字, 就像</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>我想写 span 就写 span<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  想直接写就直接写<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>除非使用 <code>FragmentNode</code> 我们无法不渲染一段内容的标签, 但是<code>FragmentNode</code> 标签的 <code>children</code> 也必须是 vNode,所以我们还需要定义一个特殊标签, 它本身会渲染为 TextNode</p><ul><li><p>定义类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/vnode.ts</span><span class="token keyword">export</span> <span class="token keyword">const</span> typeSymbol <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">FragmentNode</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'FragmentNode'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">TextNode</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'TextNode'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>特判类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> typeSymbol<span class="token punctuation">.</span>FragmentNode<span class="token operator">:</span>      <span class="token function">processFragmentNode</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> typeSymbol<span class="token punctuation">.</span>TextNode<span class="token operator">:</span> <span class="token comment">// 特判 TextNode</span>      <span class="token function">processTextNode</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span>        <span class="token function">processElement</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token function">processComponent</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processTextNode</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">mountTextNode</span><span class="token punctuation">(</span>vNode2<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mountTextNode</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>vNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通过 createTextNode 创建</span>  container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>向外部暴露接口</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/vnode.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createTextVNode</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>typeSymbol<span class="token punctuation">.</span>TextNode<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'title'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token function">createTextVNode</span><span class="token punctuation">(</span><span class="token string">'im text'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现工具函数-getcurrentinstance">实现工具函数<code>getCurrentInstance</code></h3><p>该函数用于在 setup 中获取当前 setup 所在的 instance.只须在全局变量上打个标记就可以实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/component.ts</span><span class="token keyword">let</span> currentInstance <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">setupStatefulComponent</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    currentInstance <span class="token operator">=</span> instance<span class="token punctuation">;</span> <span class="token comment">// 打个标记再执行</span>    <span class="token function">handleSetupResult</span><span class="token punctuation">(</span>      instance<span class="token punctuation">,</span>      instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token function">shadowReadonly</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">emit</span><span class="token operator">:</span> instance<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>$emit<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    currentInstance <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 删除标记</span>  <span class="token punctuation">&#125;</span>  <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> currentInstance<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现-provide-inject">实现 <code>provide-inject</code></h3><p><code>provide-inject</code> 机制允许组件在 <code>setup</code>函数中调用 <code>provide(key, value)</code> 设置一个变量.在若干级儿组件中通过 <code>inject(key)</code> 获取值的信息传递机制.同时该机制遵守类似内外层作用域同名时的内层变量保护机制, 例如有如下provide 关系</p><pre class="mermaid">graph TBA:provide-a=1  -->  B:provide-a=2  --> C:inject-a=2A:provide-a=1  -->  D:provide-b=1A:provide-a=1  -->  E:inject-a=1 -->  F:inject-b=undefined</pre><p>也就是说当组件在父组件上无法 inject 属性时会向更上层 inject 属性.</p><p>我们可以在组件实例上定义组件的 provide与该组件的父组件然后实现递归查找的 inject 函数. 但是 JavaScript的原型链本身就支持递归查找, 我们可以指定通过指定某个组件 provide 的<code>__proto__</code> 为父组件的 provide 实现.</p><ul><li><p>在 instance 上加入 provide 属性记录该组件所 provide的所有键值对并设置 <code>provide.__proto__ = parent.provide</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    parent<span class="token punctuation">,</span> <span class="token comment">// 父组件</span>    <span class="token literal-property property">provides</span><span class="token operator">:</span> parent <span class="token operator">?</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>provides<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 组件的 provide</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们要求在 <code>createComponent</code> 的时候提供<code>parent</code> 属性, 那么我们也要在调用该函数时加入该参数,该函数依赖关系如下</p><pre class="mermaid">  graph TBrender -.-> patch --> processComponent --> mountComponent --> createComponent((createComponent)) -.-> renderEffect -.-> patchpatch --> processElement --> mountElement --> patch</pre><p>为了让 <code>createComponent</code> 有参数我们需要让其前置函数都带parent 参数, 所有可能调用其前置函数的函数也要带参数.其中存在两个特殊函数.</p><ul><li><code>render</code>: 该函数用来渲染根节点, 根节点的父节点是<code>null</code></li><li><code>renderEffect</code>: 该函数是用来渲染组件<code>instance</code> 的子组件 <code>subTree</code> 所以 parent 参数就是<code>instance</code></li></ul></li><li><p>实现 API</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/apiInject.ts</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getCurrentInstance <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./component'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">provide</span><span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> currentInstance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> any<span class="token punctuation">;</span>  currentInstance<span class="token punctuation">.</span>provides<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> defaultValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> currentInstance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> any<span class="token punctuation">;</span>  <span class="token keyword">return</span> currentInstance <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> currentInstance<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>provides    <span class="token operator">?</span> currentInstance<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>provides<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token operator">:</span> defaultValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>测试外层屏蔽与跨组件传递</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @App.js</span><span class="token keyword">const</span> ProviderOne <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'F1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token string">'B1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>ProviderTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> ProviderTwo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'F2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'baz'</span><span class="token punctuation">,</span> <span class="token string">'Z2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> i_foo <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> i_bar <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'@ provide 2:'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'foo: '</span> <span class="token operator">+</span> i_foo<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'bar: '</span> <span class="token operator">+</span> i_bar<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span>Consumer<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> Consumer <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> i_foo <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> i_bar <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> i_baz <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'baz'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'@ consumer:'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'foo: '</span> <span class="token operator">+</span> i_foo<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'bar: '</span> <span class="token operator">+</span> i_bar<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'baz: '</span> <span class="token operator">+</span> i_baz<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'apiInject'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span>ProviderOne<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-none"><code class="language-none">apiInject@ provide 2:foo: F1bar: B1@ consumer:foo: F2bar: B1baz: Z2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结-1">小结</h3><p>到目前为止我们完成了组件挂载部分. 那我们折腾了点什么呢?我们就是实现了 <code>h</code> 函数的不同功能. 在实现 API的时候我们也要牢记 API 是为谁实现的.</p><table><thead><tr class="header"><th>参数</th><th>对于组件</th><th>对于Element</th></tr></thead><tbody><tr class="odd"><td><code>type</code></td><td>包含 <code>render</code> 与 <code>setup</code> 的对象</td><td>标签名</td></tr><tr class="even"><td><code>props</code></td><td>组件实例的 <code>props</code></td><td>包含属性与事件的对象</td></tr><tr class="odd"><td><code>children</code></td><td>slots</td><td>子元素 / 子组件</td></tr></tbody></table><p>可以发现, 这个 API 设计的非常对仗工整.</p><ul><li><p>对于 <code>type</code>: 分别传入对象与标签名, 无话可说</p></li><li><p>对于 <code>props</code>:</p><ul><li>对于 Element: 传入一堆 attribute. Element 是会被直接渲染的,我们直接将 Key-Value 写入标签即可. 在实践中我们发现做事件绑定时, 由于value 是函数名, 我们无法直接将 <code>onXxx</code> 写入标签.所以需要手动处理事件调用</li><li>对于组件: 传入一堆 props 与 emits. <strong>难道就没有类似<code>onClick</code> 的事件监听或者类似 <code>style</code> 的属性吗?没有! 组件本身是不会被渲染的! 不可能向组件标签上绑定什么东西.组件能传入的只有用于 setup / render 的属性与 emits 事件</strong></li></ul></li><li><p>对于 <code>children</code>:</p><ul><li><p>对于 Element: 传入一堆子元素 / 子组件, 挨个 patch 就行</p></li><li><p>对于组件: 传入 slots, 将 slots 在添加到元素上</p></li><li><p><strong>为啥不让组件的子元素也写入 children 呢?这样看的多工整!</strong></p><p>组件的子元素在组件的 render 里面, 不在 <code>children</code></p></li><li><p><strong>为啥不让Element的子元素也写入 render 呢? </strong></p><p>人家 Element 压根就没对象存子元素的</p></li><li><p><strong>这尤雨溪懂个锤子 Vue, 设计的 API咋还要分类讨论啊!</strong></p><p>实际上这个 API 设计的很有趣, 看看我们在 template中是怎么书写的(从前面再抄一遍)</p><p>对于 Element</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>h</code> 函数写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'222'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于组件 <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Comp</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Comp</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <code>h</code> 函数写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">h</span><span class="token punctuation">(</span>Comp<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'222'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在结构上是对仗的. 这 API 设计的太伟大了</p></li></ul></li></ul><p>此外我们还实现了特殊的 <code>Fragment</code> 与 <code>TextNode</code>这俩都是魔改 patch 实现的. 我们还实现了 <code>provide-inject</code> API,这里借助原型链实现功能也很有趣</p><h2 id="实现-runtime-core-的-update-部分">实现 runtime-core 的 update部分</h2><p>在实现更新逻辑时我们也要对组件与 Element分类讨论并谨记当前实现的是组件还是 Element</p><h3 id="基本思想">基本思想</h3><ul><li><p>update 事件的触发者是<strong>组件</strong>.响应式对象修改后会触发函数, 这个函数一定是组件上的函数, Element上存不了函数</p></li><li><p>响应式对象变化后最后应该触发的是依赖组件的 <code>render</code>函数, <code>render</code> 函数重新执行并生成新的 subTree.</p></li><li><p>我们不能直接将老的 subTree 删除掉替换为新的 subTree,这样性能损耗太大, <strong>我们希望尽可能对比新老 subTree, 根据两个subTree 之间的变化刷新 DOM</strong></p></li><li><p>我们对比的是 vNode, 存在 Element 与组件两种 vNode,我们要分别对不同类型 vNode 讨论更新方法</p></li><li><p><strong>如何判断两个 vNode 是 "同类型" 的</strong></p><p>这里的 "同类型" 是指两个 vNode 可以通过修改对应 DOM 的子元素, 修改props 实现更新, 而不需要卸载DOM.</p><ul><li><p><code>type</code> 不同的 vNode 一定不是同类型的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">oldVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'呀哈哈'</span><span class="token punctuation">)</span>newVnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'克洛洛'</span><span class="token punctuation">)</span>newVnode2 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>HelloWorld<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>三个 vNode 的 <code>type</code> 不同这导致 DOM 标签名不同,铁定无法不卸载元素更新</p></li><li><p><code>props.key</code> 不同一定不是同类型的</p><p>在 Vue 中我们可以指定元素的 key 作为元素的 id, 不同 id的元素一定是不同型的</p></li></ul><p>综上我们可以通过<code>vNode1.type === vNode2.type &amp;&amp; vNode1.props.key === vNode2.props.key</code>判断两个 vNode 是不是同类型的</p></li><li><p><strong>如果两个 vNode 是 "同类型" 的如何更新</strong></p><ul><li><p><strong>vNode 是 Element 型的</strong></p><p>Element 型 vNode 被实实在在的渲染到了 DOM 树上,我们希望尽量不卸载挂载 DOM 元素, 而希望在原 Element 上做更新.我们需要更新 DOM 的属性与 children</p><ul><li><p>更新 props</p></li><li><p>更新 children</p><p>children 可以是字符串也可以是 vNode 数组, 我们需要分类讨论</p><ul><li><p>Text 型到 Text 型:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">oldVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'呀哈哈'</span><span class="token punctuation">)</span>newVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'克洛洛'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>直接更新 textCont</p></li><li><p>Text 型到 Array 型:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">oldVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'呀哈哈'</span><span class="token punctuation">)</span>newVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'克洛洛'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'卓'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删掉 DOM 的 textCont, patch 新 vNode 进去</p></li><li><p>Array 型到 Text 型:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">oldVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'克洛洛'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'卓'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>newVnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'呀哈哈'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删掉 DOM 的所有 children, 写入 textContent</p></li><li><p>Array 型到 Array 型: 最麻烦的, 采用双端对比法,找到节点发生变化的区间, 删除新 vNode 中不存在的节点, 加入新 vNode中独有节点, 调整节点顺序</p></li></ul></li></ul></li><li><p><strong>新 vNode 是组件型的</strong></p><p>??</p></li></ul></li><li><p><strong>如果两个 vNode 不是 "同类型" 的如何更新</strong></p><p>如果是这种情况我们就束手无策了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">oldVnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'呀哈哈'</span><span class="token punctuation">)</span>newVnode1 <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'克洛洛'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是这种情况是不存在的. 若两个不同类型 vNode 要求更新,那么前面一定调用过 <code>patch(vNode1, vNode2, ...)</code>,在更新时哪些情况会调用 <code>vNode1 !== null</code> 的 patch 呢?组件更新, 同类型 Element 的 Array to Array.不同类型的节点会被双端对比算法视为不同节点而被删除 / 增加掉.所以不可能让不同类型节点 <code>patch</code> 在一起.</p></li></ul><h3 id="更新-pipeline">更新 pipeline</h3><p>让响应式对象支持依赖收集与触发依赖. 将整个 renderEffect 装入 effect,这意味着每次响应式对象发生变化都会重复调用 renderEffect.同时我们要区分是 mount 还是 update, 我们可以让 instance 记录更新前的subTree 并默认为 null 实现这一功能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/component.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> subTree <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">patch</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree<span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//    ^ 第一次是 null</span>    instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>el <span class="token operator">=</span> container<span class="token punctuation">;</span>    instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> subTree<span class="token punctuation">;</span> <span class="token comment">// 记录当前 subTree</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同步修正一下 <code>createComponent</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createComponent</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token literal-property property">subTree</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后需要实现:</p><ul><li>Element:<ul><li>更新 props</li><li>更新 children</li></ul></li><li>组件<ul><li>更新??</li></ul></li></ul><h3 id="element-更新-props">Element 更新 props</h3><p>给定更新前后的 vNode 与目标 DOM 对象, 实现 props 更新.</p><ul><li><p>实现测试用例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> attrValue <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attrValue</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cnt<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      attrValue<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">attrValue</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token operator">++</span>cnt<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> attrValue<span class="token punctuation">,</span> htmlValue <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">attrValue</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attrValue<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>先实现 <code>updateElement</code> 函数</p><p>由于 <code>vNode2</code> 没有被 mount 所以 <code>vNode2.el</code>不存在, 但是两个 vNode 对应的是同一个 DOM 对象, 我们可以将<code>vNode1.el</code> 直接给到 <code>vNode2.el</code>. 同时我们定义<code>patchProps</code> 用于实现功能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateElement</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> elem <span class="token operator">=</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>el <span class="token operator">=</span> vNode1<span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">patchProps</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> vNode1<span class="token operator">?.</span>props<span class="token punctuation">,</span> vNode2<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现 <code>patchProps</code></p><p>首先要明确我们需要 patch 什么样的 props.</p><ul><li>空值当不存在: 如果 props 是 <code>&#123;key: undefined / null&#125;</code>我们就不 patch 这个 key</li><li>value 可能是事件监听: 我们可以借助 mountElement 中的 props 实现</li></ul><p>先实现辅助函数判断 key 是否在 props 上. 如果 value 是 null /undefined / NaN 也当 key 不存在</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/share/index.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isUNKey</span><span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> k <span class="token keyword">in</span> obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>实现 <code>patchProps</code> 函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patchProps</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">elem</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> oldProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> newProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取所有 props</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>oldProps<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>newProps<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  props<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 假设 key 是事件监听, 尝试将其转化为小驼峰</span>    <span class="token keyword">let</span> ek <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>      <span class="token operator">?</span> k<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on([A-Z].*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token comment">// 如果 key 在老 vNode 中存在, 在新 vNode 中不存在: removeAttribute</span>    <span class="token comment">// 如果 key 在老 vNode 中存在, 是事件监听: 解除 防止监听函数变化</span>    <span class="token comment">// 如果 key 在老 vNode 中存在, 不是事件监听, 在新 vNode 也有: 不管</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUNKey</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> oldProps<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isUNKey</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span> <span class="token operator">||</span> ek<span class="token punctuation">)</span><span class="token punctuation">)</span>      ek <span class="token operator">?</span> elem<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>ek<span class="token punctuation">,</span> oldProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> elem<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 不管老节点有没有, 新节点有: setAttribute / addEventListener</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUNKey</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span><span class="token punctuation">)</span>      ek        <span class="token operator">?</span> elem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>ek<span class="token punctuation">,</span> newProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">:</span> elem<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> newProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为什么叫 <code>patchProps</code> 不叫<code>updateProps</code>?</p><p>实际上这个函数也可以用于 <code>mountElement</code> 中 props 处理(令<code>oldProps = &#123;&#125;</code>), 并不是 <code>updateElement</code> 专用的.修改</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">function mountElement(vNode, container, parent) &#123;  const el &#x3D; (vNode.el &#x3D; document.createElement(vNode.type) as HTMLElement);- Object.keys(vNode.props).forEach((k) &#x3D;&gt; &#123;-   if (&#x2F;^on[A-Z]&#x2F;.test(k))-     el.addEventListener(-       k.replace(&#x2F;^on([A-Z].*)&#x2F;, (_, e) &#x3D;&gt; e[0].toLowerCase() + e.slice(1)),-       vNode.props[k]-     );-   else el.setAttribute(k, vNode.props[k]);- &#125;);+ patchProps(el, &#123;&#125;, vNode.props);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="element-更新-children-前三种情况">Element 更新 children前三种情况</h3><ul><li><p>Text to Text</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">T2T</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> ot <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      ot<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> ot <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ot <span class="token operator">?</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'after'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'before'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token constant">T2T</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需修改 DOM 内部 textContent, 如果内容不变就不修改</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>children <span class="token operator">!==</span> vNode1<span class="token punctuation">.</span>children<span class="token punctuation">)</span>     container<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vNode2<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Array to Text</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">A2T</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> ot <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      ot<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> ot <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ot      <span class="token operator">?</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'after'</span><span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'before'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'before'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将 DOM 中所有 Element 都删除, 写入 conteneText</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span>      <span class="token punctuation">[</span><span class="token operator">...</span>container<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里合并了下代码, 如果是 Array to Text, 那么 Array !== string 一定成立</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>children <span class="token operator">!==</span> vNode1<span class="token punctuation">.</span>children<span class="token punctuation">)</span>      container<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vNode2<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Text to Array</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">T2A</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> ot <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      ot<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> ot <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ot      <span class="token operator">?</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'after'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'after'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'before'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除内部 textContent 插入 vNode 数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span>      <span class="token punctuation">[</span><span class="token operator">...</span>container<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>children <span class="token operator">!==</span> vNode1<span class="token punctuation">.</span>children<span class="token punctuation">)</span>      container<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vNode2<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      container<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>      vNode2<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> element<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为 Array to Array 预留函数调用<code>patchKeyedChildren</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">updateChildren</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ARRAY_CHILDREN</span><span class="token punctuation">)</span>      <span class="token punctuation">[</span><span class="token operator">...</span>container<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode2<span class="token punctuation">.</span>children <span class="token operator">!==</span> vNode1<span class="token punctuation">.</span>children<span class="token punctuation">)</span>      container<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vNode2<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>shapeFlags <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">TEXT_CHILDREN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      container<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>      vNode2<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> element<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">patchKeyedChildren</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>children<span class="token punctuation">,</span> vNode2<span class="token punctuation">.</span>children<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="element-更新-children-的双端对比法">Element 更新 children的双端对比法</h3><p><strong>基本思想</strong></p><p>分别从左边右边对比元素, 找到发生变化的区间, 例如前后两个 Array分别为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span> a b c d e f g h <span class="token punctuation">]</span><span class="token punctuation">[</span> a b e d i g h <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从左边找找到只有 <code>a b</code> 是相同的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span> a b <span class="token operator">|</span> c d e f g h <span class="token punctuation">]</span><span class="token punctuation">[</span> a b <span class="token operator">|</span> e d i g h <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从右边找找到只有 <code>g h</code> 是相同的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span> a b <span class="token operator">|</span> c d e f <span class="token operator">|</span> g h <span class="token punctuation">]</span><span class="token punctuation">[</span> a b <span class="token operator">|</span> e d i <span class="token operator">|</span> g h <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后我们找到变化区间(<code>[c d e f] -&gt; [e d i]</code>)</p><p>将老 vNode 独有的子 vNode 移除(<code>[c f]</code>), 将新 vNode独有的子 vNode patch上(<code>[i]</code>), 调整子 vNode 的顺序. 可以使用<code>insertBefore</code> 调整顺序.</p><ul><li><p>删除老 vNode 独有子元素</p><p>为新 vNode 变化区间上的元素编号, 建立 <code>key -&gt; index</code>的映射. 遍历老节点, 如果没有查到 key 就删除节点</p></li><li><p>创建新 vNode 独有的子元素: 在调整位置时一并处理</p></li><li><p>调整位置</p><p>可以通过之前建立的 <code>key -&gt; index</code> 映射一股脑的将 DOM调整到正常位置, 但是调整 DOM 的代价太高了, 我们希望尽可能少的减少<code>insertBefore</code> 操作.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>l1 l2 <span class="token function">l3</span> <span class="token punctuation">(</span> a b c d e f g h i <span class="token punctuation">)</span> r1 r2 r3<span class="token punctuation">]</span><span class="token punctuation">[</span>l1 l2 <span class="token function">l3</span> <span class="token punctuation">(</span> i a b c d e f g h <span class="token punctuation">)</span> r1 r2 r3<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果采用一般方法, 我们需要分别将 <code>a - h</code> 移动到<code>r1</code> 前面. 这明显不如将 <code>i</code> 移动到 <code>a</code>前面划算.</p><p>我们可以在原 vNode 的子 vNode 数组中定义一个稳定串,保证稳定串中的元素相对位置符合新 vNode 设定, 我们只需要遍历新 vNode的子元素, 如果该元素没有在老 vNode 中出现就创建并将其 patch 到指定位置,如果在非稳定串中出现我们就将其 <code>insetBefore</code> 到指定位置.考虑到我们只有 <code>insertBefore</code> 没有 <code>insertAfter</code>函数, 我们还需要保证一个元素在 <code>insertBefore</code>前他后一个的元素已经就位了. 所以我们需要倒着遍历新 vNode.</p><p>在上面的例子中, 可以将 <code>a b c d e f g h</code> 视作稳定串, 调整<code>i</code> 到 <code>a</code> 前即可</p></li><li><p>将 vNode patch 到指定位置</p><p>想要将 Element 调整到指定 Element 前面, 我们可以采用<code>container.insertBefore(elem, target)</code>, 如果<code>target == null</code> 就将元素调整到 container 尾部.</p><p>但是如果想将新 vNode 调整到指定 Element 前面就需要调用 patch 了,我们需要为 patch 加入一个锚点参数指定将 vNode patch 到哪里:<code>patch(vNode1, vNode2, container, parent = null, anchor = null)</code></p></li><li><p>寻找稳定串</p><p>寻找稳定串其实就是寻找相对位置正确的尽可能长的子串,我们又已知道老节点对应的新节点有一个 <code>key -&gt; index</code>的映射, 在新节点中, index 严格递增, 所以可以获取每个老节点对应的 index并查找 LIS. 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">oldIndex</span><span class="token operator">:</span>  <span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">2</span>    <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">3</span>   <span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span><span class="token literal-property property">oldVNode</span><span class="token operator">:</span> <span class="token punctuation">[</span>l1 l2 <span class="token function">l3</span> <span class="token punctuation">(</span> a b c d e f g  h  i <span class="token punctuation">)</span> r1 r2 r3<span class="token punctuation">]</span><span class="token literal-property property">newVNode</span><span class="token operator">:</span> <span class="token punctuation">[</span>l1 l2 <span class="token function">l3</span> <span class="token punctuation">(</span> i a b c d e f  g  h <span class="token punctuation">)</span> r1 r2 r3<span class="token punctuation">]</span><span class="token literal-property property">newIndex</span><span class="token operator">:</span>  <span class="token number">0</span>  <span class="token number">1</span>  <span class="token number">2</span>    <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span>  <span class="token number">10</span> <span class="token number">11</span>  <span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以得到 <code>lis = [a b c d e f g h]</code></p></li></ul><p><strong>特殊情况</strong></p><p>可以针对部分特殊情况特殊处理避免计算 LIS</p><ul><li><p>新 vNode 只在最右边加了一堆元素: 只需要 patch 多出来的部分</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">old</span><span class="token operator">:</span> <span class="token punctuation">[</span>a b c<span class="token punctuation">]</span><span class="token keyword">new</span><span class="token operator">:</span> <span class="token punctuation">[</span>a b c d e f<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>新 vNode 只在最左边加了一堆元素: 只需要 patch 多出来的部分</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">old</span><span class="token operator">:</span> <span class="token punctuation">[</span>      d e f<span class="token punctuation">]</span><span class="token keyword">new</span><span class="token operator">:</span> <span class="token punctuation">[</span>a b c d e f<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>新 vNode 只最右边少了一堆元素: remove 多余 vNode 的 DOM 元素.注意这里 remove 的不能是 vNode, 这样不管子 vNode 是 Element还是组件类型的都可以一键卸载(因为 ELement 或 组件类型的 vNode 对应的 DOM树都一定只有一个根 Element)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">old</span><span class="token operator">:</span> <span class="token punctuation">[</span>a b c d e f<span class="token punctuation">]</span><span class="token keyword">new</span><span class="token operator">:</span> <span class="token punctuation">[</span>a b c<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>新 vNode 只最左边少了一堆元素: remove 多余 vNode 的 DOM 元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">old</span><span class="token operator">:</span> <span class="token punctuation">[</span>a b c d e f<span class="token punctuation">]</span><span class="token keyword">new</span><span class="token operator">:</span> <span class="token punctuation">[</span>      d e f<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p><strong>我的部分实现</strong></p><p>定义</p><ul><li><code>c1, c2</code>: 更新前后 vNode 的 children 数组</li><li><code>anchor</code>: 锚点</li><li><code>i</code>: 变化区间的左边界(包括)</li><li><code>e1, e2</code>: 变化区间对应 <code>c1, c2</code>的右边界(包括)</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patchKeyedChildren</span><span class="token punctuation">(</span><span class="token parameter">c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    e1 <span class="token operator">=</span> c1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>    e2 <span class="token operator">=</span> c2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 从左往右看, 如果类型不同或者 key 不同就退出, 否则递归更新子节点</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!==</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">||</span> c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>key <span class="token operator">!==</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">patch</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 从右往左看, 如果类型不同或者 key 不同就退出, 否则递归更新子节点</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> e1 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> e2 <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> e1 <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">,</span> e2 <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c1<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!==</span> c2<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">||</span> c1<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>key <span class="token operator">!==</span> c2<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">patch</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 右侧有新节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> c1<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    c2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> i <span class="token operator">>=</span> c2<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 右侧有老节点</span>  <span class="token comment">//     传入的是 vNode 要加上 el 找到 DOM 对象</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> c2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 左侧有新节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e1 <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> e2 <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    c2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> e2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> c1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 左侧有老节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e2 <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> e1 <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> e1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 中间</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> newRange <span class="token operator">=</span> c2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> oldRange <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> k2iNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>newRange<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">,</span> i <span class="token operator">+</span> idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> k2iOld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>oldRange<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oldRange<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 新的有, 老的有 直接更新</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>k2iNew<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">patch</span><span class="token punctuation">(</span>          d<span class="token punctuation">,</span>          c2<span class="token punctuation">[</span>k2iNew<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token keyword">as</span> number<span class="token punctuation">]</span><span class="token punctuation">,</span>          container<span class="token punctuation">,</span>          parent<span class="token punctuation">,</span>          anchor        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 新的没有, 老的有 直接删除</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k2iNew<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        d<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        k2iOld<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 新的有老的没有 新建到问题区间的尾部</span>    newRange<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k2iOld<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">patch</span><span class="token punctuation">(</span>          <span class="token keyword">null</span><span class="token punctuation">,</span>          c2<span class="token punctuation">[</span>k2iNew<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token keyword">as</span> number<span class="token punctuation">]</span><span class="token punctuation">,</span>          container<span class="token punctuation">,</span>          parent<span class="token punctuation">,</span>          e2 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> c2<span class="token punctuation">.</span>length <span class="token operator">?</span> c2<span class="token punctuation">[</span>e2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el <span class="token operator">:</span> <span class="token keyword">null</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        k2iOld<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ... 调整位置</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>存在的问题</strong></p><ul><li><p>在中间对比时: 新的有老的没有的情况可以合并到调整位置上</p></li><li><p>为只用四个 if 考虑了特殊情况, 没有考虑特殊情况的的扩展</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">old <span class="token operator">=</span> <span class="token punctuation">[</span>a b c d e f<span class="token punctuation">]</span><span class="token keyword">new</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a b     e f<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>既然从左往右看 <code>[a b]</code> 一样, 我们可以假装消掉<code>[a b]</code> 把 <code>[c d]</code>看成只有左侧有多于元素的情况此时直接消除 <code>[c d]</code> 即可,类似的还有</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">old <span class="token operator">=</span> <span class="token punctuation">[</span>a b     e f<span class="token punctuation">]</span><span class="token keyword">new</span> <span class="token operator">=</span> <span class="token punctuation">[</span>a b c d e f<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果可以特判这种情况就爽死了</p></li></ul><p><strong>别个的实现</strong></p><p>mini-vue 的实现和原版的差不多</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">patchKeyedChildren</span><span class="token punctuation">(</span> <span class="token parameter">c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parentAnchor<span class="token punctuation">,</span> parentComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> l2 <span class="token operator">=</span> c2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> e1 <span class="token operator">=</span> c1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> e2 <span class="token operator">=</span> l2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">isSameVNodeType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> n1<span class="token punctuation">.</span>type <span class="token operator">===</span> n2<span class="token punctuation">.</span>type <span class="token operator">&amp;&amp;</span> n1<span class="token punctuation">.</span>key <span class="token operator">===</span> n2<span class="token punctuation">.</span>key<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// ... 求 i e1 e2</span>  <span class="token comment">// 人家在这里是比较了 e1 e2 i 的关系, 这样变相的 "消除" 掉了前后置元素</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> e1 <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> nextPos <span class="token operator">=</span> e2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> anchor <span class="token operator">=</span> nextPos <span class="token operator">&lt;</span> l2 <span class="token operator">?</span> c2<span class="token punctuation">[</span>nextPos<span class="token punctuation">]</span><span class="token punctuation">.</span>el <span class="token operator">:</span> parentAnchor<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> parentComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> e2 <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> e1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> e1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">hostRemove</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>      i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ... 中间对比</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个明显不如四个 if 来的直观, 但是顺道处理了特殊情况的扩展情况.有一说一 vuejs/core 在这一段中代码的注释中也没有提起这种情况,但是通过这个泛泛的判断条件我们确实捕获到了这种情况.看起来这是一个无意为之的优化?</p><p><strong>最终实现</strong></p><ul><li><p>实现 diff</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">function</span> <span class="token function">patchKeyedChildren</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">c1</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">c2</span><span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    e1 <span class="token operator">=</span> c1<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>    e2 <span class="token operator">=</span> c2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">isSameType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v1<span class="token punctuation">,</span> v2</span><span class="token punctuation">)</span> <span class="token operator">=></span>    v1<span class="token punctuation">.</span>type <span class="token operator">===</span> v2<span class="token punctuation">.</span>type <span class="token operator">&amp;&amp;</span> v1<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key <span class="token operator">===</span> v2<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">;</span>  <span class="token comment">// 找到区间</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSameType</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">patch</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> e1 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> e2 <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> e1 <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">,</span> e2 <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSameType</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">patch</span><span class="token punctuation">(</span>c1<span class="token punctuation">[</span>e1<span class="token punctuation">]</span><span class="token punctuation">,</span> c2<span class="token punctuation">[</span>e2<span class="token punctuation">]</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 特判</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e2 <span class="token operator">&lt;</span> i <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> e1<span class="token punctuation">)</span> c1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> d<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e1 <span class="token operator">&lt;</span> i <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> e2<span class="token punctuation">)</span>    c2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">patch</span><span class="token punctuation">(</span>        <span class="token keyword">null</span><span class="token punctuation">,</span>        d<span class="token punctuation">,</span>        container<span class="token punctuation">,</span>        parent<span class="token punctuation">,</span>        e1 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>=</span> c1<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> c1<span class="token punctuation">[</span>e1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>el      <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 中间</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> newRange <span class="token operator">=</span> c2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> oldRange <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> e1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> new2oldIndex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 新节点 index -> 老节点 index</span>    <span class="token keyword">const</span> key2indexNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span> <span class="token comment">// 新节点 key -> 新节点 index</span>      newRange<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>d<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">,</span> i <span class="token operator">+</span> idx<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果老节点在新节点中存在 构造 新节点 index -> 老节点 index</span>    <span class="token comment">//                     不存在 删除老节点</span>    oldRange<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>key2indexNew<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        new2oldIndex<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key2indexNew<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>props<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> lis <span class="token operator">=</span> <span class="token constant">LIS</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>new2oldIndex<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 构建稳定序列</span>    newRange<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> curIndex</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> oldVnode <span class="token operator">=</span> oldRange<span class="token punctuation">[</span>new2oldIndex<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>curIndex <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 对应老节点(如果存在)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lis<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>curIndex <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 处于稳定序列就只更新</span>          <span class="token keyword">return</span> <span class="token function">patch</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> prev<span class="token operator">?.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>new2oldIndex<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>curIndex <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 不在就移动节点</span>          container<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> prev<span class="token operator">?.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">patch</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> prev<span class="token operator">?.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> cur<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> prev<span class="token operator">?.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 没有老节点就加入</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      e2 <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>=</span> c2<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> c2<span class="token punctuation">[</span>e2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>实现 LIS</p><p>定义 <code>low</code> 数组, <code>low[i]</code> 表示长度为<code>i</code> 的LIS结尾元素的最小值.对于一个上升子序列，显然其结尾元素越小, 越有利于在后面接其他的元素,也就越可能变得更长. 因此, 我们只需要维护 <code>low</code>数组，对于每一个 <code>s[i]</code>，如果<code>s[i] &gt; low[当前最长的LIS长度]</code>，就把 <code>a[i]</code>接到当前最长的 LIS 后面，即 <code>low[++当前最长的LIS长度] = a[i]</code>对于每一个 <code>s[i]</code> ，如果 <code>s[i]</code> 能接到 LIS后面，就接上去. 否则，就用 <code>s[i]</code> 取更新 <code>low</code>数组。具体方法是, 在 <code>low</code> 数组中找到第一个大于等于<code>s[i]</code> 的元素 <code>low[j]</code>, 用 <code>s[i]</code>去更新 <code>low[j]</code>. 如果从头到尾扫一遍 <code>low</code>数组的话，时间复杂度仍是 <span class="math inline">\(O(n^2)\)</span>.我们注意到 <code>low</code> 数组内部一定是单调不降的. 所有我们可以二分<code>low</code> 数组，找出第一个大于等于 <code>s[i]</code> 的元素.总时间复杂度为 <span class="math inline">\(O(n \log n)\)</span></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/share/index.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token constant">LIS</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> low <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>s<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> cur <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      j <span class="token operator">=</span> res<span class="token punctuation">[</span>res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        low<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">let</span> u <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> v <span class="token operator">=</span> res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>u <span class="token operator">&lt;</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>u <span class="token operator">+</span> v<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>res<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> cur<span class="token punctuation">)</span> u <span class="token operator">=</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> v <span class="token operator">=</span> c<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>res<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> low<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>u <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> u <span class="token operator">=</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> v <span class="token operator">=</span> res<span class="token punctuation">[</span>u <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>u<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>    v <span class="token operator">=</span> low<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>为什么要用双端对比法</strong></p><ul><li>双端对比法的理论性能可能并不是最优秀的, 但是其用于前端 vNode list的对比很优秀, 因为前端 DOM 的修改很少涉及全局修改,一般都是一两个元素的增减调换, 双端对比法可以快速锁定修改区间,忽略不变部分, LIS 可以保证在较少插入次数下实现位置调整</li><li>为什么要讨论特殊情况, 明明可以直接利用最后的通用算法求解.首先这个特判会让单次 update 快很多, 同时考虑前端应用场景, update单个头尾 / 中部元素比较频繁, 这个特判会被特别多次调用</li></ul><h3 id="组件更新">组件更新</h3><p>组件 vNode 更新时 <code>setupRenderEffect</code> 会触发<code>patch(组件vNode, ...)</code> 最后 <code>updateComponent</code></p><p>不管组件有多复杂我们更新的都是组件挂载的 DOM, 组件的 render返回的是一个 <code>h</code> 也就是说组件最多有一个根 DOM,我们可以直接更新这个 DOM.</p><p>我们更新的时候拿到的是 vNode, 但是为组件传入的 props 还在 instance上, 我们需要为 vNode 绑定 instance (使用 <code>.component</code>属性)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/render.ts</span><span class="token keyword">function</span> <span class="token function">updateComponent</span><span class="token punctuation">(</span><span class="token parameter">vNode1<span class="token punctuation">,</span> vNode2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  vNode2<span class="token punctuation">.</span>el <span class="token operator">=</span> vNode1<span class="token punctuation">.</span>el<span class="token punctuation">;</span> <span class="token comment">// 绑定 DOM</span>  vNode2<span class="token punctuation">.</span>component <span class="token operator">=</span> vNode1<span class="token punctuation">.</span>component<span class="token punctuation">;</span> <span class="token comment">// 绑定 instance</span>  <span class="token comment">// 判断 props 一不一样: 一样就不更新 (说明是父节点触发了, 递归到子节点)</span>  <span class="token comment">//                      不一样就重新渲染这个组件下的 vNode</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSameProps</span><span class="token punctuation">(</span>vNode1<span class="token punctuation">.</span>props<span class="token punctuation">,</span> vNode2<span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vNode1<span class="token punctuation">.</span>component<span class="token punctuation">.</span>vNode <span class="token operator">=</span> vNode2<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 我们要手动触发这个唯一的子 vNode 的render, 所以还需要保存每个 vNode 的 render 函数</span>    <span class="token comment">// 保存在 `.runner`</span>    <span class="token comment">// 同时记录 .next 为新 vNode</span>    vNode1<span class="token punctuation">.</span>component<span class="token punctuation">.</span>next <span class="token operator">=</span> vNode2<span class="token punctuation">;</span>    <span class="token comment">// 调用老 vNode 的渲染函数</span>    vNode1<span class="token punctuation">.</span>component<span class="token operator">?.</span>runner <span class="token operator">&amp;&amp;</span> vNode1<span class="token punctuation">.</span>component<span class="token punctuation">.</span><span class="token function">runner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断组件是否有必要更新(<code>props</code> 一不一样)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/runtime-core/src/component.ts</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isSameProps</span><span class="token punctuation">(</span><span class="token parameter">props1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> props2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>props1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>props2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  props<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> props1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!==</span> props2<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>res <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在挂载组件时同步记录 instance</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">&#x2F;&#x2F; @packages&#x2F;runtime-core&#x2F;src&#x2F;render.tsfunction mountComponent(vNode, container, parent, anchor) &#123;  const instance &#x3D; createComponent(vNode, parent);+ vNode.component &#x3D; instance;  setupComponent(instance);  setupRenderEffect(instance, container, anchor);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在重新渲染组件时迁移 props</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">&#x2F;&#x2F; @packages&#x2F;runtime-core&#x2F;src&#x2F;component.tsexport function setupRenderEffect(instance, container, anchor) &#123;+ instance.runner &#x3D; effect(() &#x3D;&gt; &#123;    const subTree &#x3D; instance.render.call(instance.proxy);+   if (instance.next) &#123;+     instance.vNode &#x3D; instance.next;+     instance.props &#x3D; instance.next.props;+     instance.next &#x3D; null;+   &#125;    patch(instance.subTree, subTree, container, instance, anchor);    instance.vNode.el &#x3D; container;    instance.subTree &#x3D; subTree;  &#125;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现-nexttrick">实现 <code>nextTrick</code></h3><p>我们希望当 Reactivity 发生变化时组件与 DOM 是同步更新的,这可能会带来不必要的资源消耗, 我们希望组件更新可以变成异步的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> cnt<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> cnt<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里会触发100次组件更新</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> cnt <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'HTML Context:'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何完成异步更新呢?我们可以将更新任务放入微任务这样只有在同步代码执行完成后微任务才会执行.这也是 Vue 中 <code>nextTrick</code> 的实现原理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更新实际上就是执行 renderEffect 的中 effect 的 runner. 可以利用effect-scheduler 实现首次触发执行 runner 之后触发执行 scheduler. 在scheduler 中我们可以将更新事件加入队列. 并注册更新队列的微事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token literal-property property">jobs</span><span class="token operator">:</span> Set<span class="token operator">&lt;</span>any<span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 任务队列</span><span class="token keyword">function</span> <span class="token function">insertJob</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  jobs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不重复添加</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>jobs<span class="token punctuation">.</span>size <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 确保之注册一个微任务, 防止创建不必要的 Promise.resolve()</span>    <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span>jobs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> jobs<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setupRenderEffect</span><span class="token punctuation">(</span><span class="token parameter">instance<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  instance<span class="token punctuation">.</span>runner <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">componentUpdateFn</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 将更新内容提出为函数</span>    <span class="token punctuation">&#123;</span>      <span class="token function-variable function">scheduler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token function">insertJob</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>runner<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当 Reactivity 发生变化时, 同步执行 insertJob 同步 add Set,注册一个微任务用于在同步代码都执行完成后执行所有刷新函数</p><p><strong>测试</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> cnt<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> cnt<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时还没修改 还是 1</span>        <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> instance<span class="token punctuation">.</span>vNode<span class="token punctuation">.</span>el<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时变为 100</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> cnt <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这也告诉我们, 如果在 Vue 中触发了组件变化,如果还需要同时获取组件的状态应该使用 <code>nextTrick</code></p><h2 id="实现-runtime-dom">实现 runtime-dom</h2><p>我们的 Vue 默认是渲染在 HTML 上面的, 如果我们向将组件渲染在 canvas上(DOM 标签变为 canvas 上的一个元素)就需要重写所有 DOM API相关的函数调用.</p><p>我们希望将这些 API 抽象出来 (例如 <code>document.createElement</code>抽象为 <code>create</code> 函数). 当我们需要将 Vue 组件渲染在 HTML时只需要为 runtime-core 传入 <code>create</code> 函数即可.</p><p>至此我们的组件依赖关系由<code>vue &gt; runtime-core &gt; reactivity</code> 变为<code>vue &gt; runtime-dom &gt; runtime-core &gt; reactivity</code>,runtime-dom 就是为 Vue 提供 HTML 渲染能力的组件</p><p>实现 runtime-dom API (将 runtime-core 中调用 DOM API的地方全写出来)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRenderer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../runtime-core/src/render'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isUNKey <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../share'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createText</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=></span> el<span class="token punctuation">.</span>parent <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">insert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token operator">=></span> parent<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setText</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>nodeValue <span class="token operator">=</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">setElementText</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>textContent <span class="token operator">=</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchProps</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">elem</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> oldProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> newProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>oldProps<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>newProps<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  props<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> ek <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>      <span class="token operator">?</span> k<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^on([A-Z].*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUNKey</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> oldProps<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isUNKey</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span> <span class="token operator">||</span> ek<span class="token punctuation">)</span><span class="token punctuation">)</span>      ek <span class="token operator">?</span> elem<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>ek<span class="token punctuation">,</span> oldProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> elem<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUNKey</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span><span class="token punctuation">)</span>      ek        <span class="token operator">?</span> elem<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>ek<span class="token punctuation">,</span> newProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">:</span> elem<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> newProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还需要将 runtime-core 接入 runtime-dom, 因为我们要为 runtime-core传入刚刚定义的渲染函数, 调用这些渲染函数的文件只有<code>render.ts</code>. 之前 <code>render.ts</code>是通过导出函数向外暴露 API 的, 但是因为我们也要传入函数, 我们只能将<code>render.ts</code> 外部包裹一个函数, 让该函数传入 runtime-dom定义的渲染函数最后返回原本需要导出的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> renderer<span class="token punctuation">;</span><span class="token comment">// 创建可用 DOM API 的 render</span><span class="token keyword">function</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    renderer <span class="token operator">||</span> <span class="token comment">// 如果创建过了就不重复创建</span>    <span class="token punctuation">(</span>renderer <span class="token operator">=</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      createElement<span class="token punctuation">,</span>      createText<span class="token punctuation">,</span>      setText<span class="token punctuation">,</span>      setElementText<span class="token punctuation">,</span>      patchProps<span class="token punctuation">,</span>      insert<span class="token punctuation">,</span>      remove<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建可用 DOM API 的 createApp</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createApp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'../../runtime-core/src'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 <code>render.ts</code> 的构造方式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>  createElement<span class="token punctuation">,</span>  createText<span class="token punctuation">,</span>  remove<span class="token punctuation">,</span>  insert<span class="token punctuation">,</span>  setText<span class="token punctuation">,</span>  setElementText<span class="token punctuation">,</span>  patchProps<span class="token punctuation">,</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">vNode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ... 将调用 DOM API 的地方改为调用传入的渲染函数</span>  <span class="token comment">// ... 将原本所有 export 的函数改为 return &#123;该函数&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    render<span class="token punctuation">,</span>    <span class="token literal-property property">createApp</span><span class="token operator">:</span> <span class="token function">createApp</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> render<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>createApp</code> 函数需要 render, 但是我们的 render也是动态构建的, 所以我们只能为 createApp 传入 render, 并在<code>render.ts</code> 中先传入这一参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token parameter">render<span class="token punctuation">,</span> rootComponent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">_component</span><span class="token operator">:</span> rootComponent<span class="token punctuation">,</span>    <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">container</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> vNode <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>rootComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">render</span><span class="token punctuation">(</span>        vNode<span class="token punctuation">,</span>        <span class="token function">isObject</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>          <span class="token operator">?</span> container          <span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后修改导出</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">export * from &#39;.&#x2F;reactivity&#x2F;src&#x2F;index&#39;;- export * from &#39;.&#x2F;runtime-core&#x2F;src&#x2F;index&#39;;+ export * from &#39;.&#x2F;runtime-dom&#x2F;src&#x2F;index&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>测试</strong></p><p>实现一个 <code>runtime-PIXI</code>, PIXI.js 是一个基于 canvas的游戏库, 完成了对 canvas 的封装. 我们希望通过对 PIXI.js API的二次封装实现利用 Vue 操作 canvas</p><p>我们希望实现执行 <code>test</code> 修改正方形位置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x1<span class="token punctuation">,</span> y1</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      x<span class="token punctuation">.</span>value <span class="token operator">=</span> x1<span class="token punctuation">;</span>      y<span class="token punctuation">.</span>value <span class="token operator">=</span> y1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了将测试代码写在一起, 我们将 runtime-dom 完全引入了测试用例并重写runtime-dom. 这样做可以免去将重新编译 Vue</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// modify to export createRenderer (cause the export level is different from vue runtime-dom)</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createRenderer <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../lib/micro-vue.esm.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'../../lib/micro-vue.esm.js'</span><span class="token punctuation">;</span><span class="token comment">// 创建元素</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> rect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rect<span class="token punctuation">.</span><span class="token function">beginFill</span><span class="token punctuation">(</span><span class="token number">0xff0000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rect<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  rect<span class="token punctuation">.</span><span class="token function">endFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> rect<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 插入</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">insert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token operator">=></span> parent<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 修改属性</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">patchProps</span><span class="token punctuation">(</span><span class="token parameter">elem<span class="token punctuation">,</span> oldProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> newProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>oldProps<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>newProps<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  props<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    elem<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> newProps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> renderer<span class="token punctuation">;</span><span class="token comment">// 与测试无关的 API 直接给 NULL</span><span class="token keyword">function</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    renderer <span class="token operator">||</span>    <span class="token punctuation">(</span>renderer <span class="token operator">=</span> <span class="token function">createRenderer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      createElement<span class="token punctuation">,</span>      <span class="token literal-property property">createText</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token literal-property property">setText</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      <span class="token literal-property property">setElementText</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>      patchProps<span class="token punctuation">,</span>      insert<span class="token punctuation">,</span>      <span class="token literal-property property">remove</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createApp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">ensureRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 创建 game</span><span class="token keyword">const</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PIXI<span class="token punctuation">.</span>Application</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">360</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 挂载 canvas</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>game<span class="token punctuation">.</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在 PIXI 中 canvas DOM 不用于挂载元素, 新元素是挂载到 game.stage 上的</span><span class="token keyword">export</span> <span class="token keyword">const</span> el <span class="token operator">=</span> game<span class="token punctuation">.</span>stage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现-compiler-core">实现 compiler-core</h2><pre class="mermaid">graph LRstring(输入string) --> parse(parse模块) --> ast1(输出AST树) --> transform(transform模块对树CRUD) --> ast2(输出AST树) --> CodeGen(CodeGen模块) --> render(输出render)</pre><p>构建相关模块</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">@packages<span class="token operator">/</span>compiler<span class="token operator">-</span>core├── src│   └── index<span class="token punctuation">.</span>ts└── __tests__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>并导出模块</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./reactivity/src/index'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./runtime-dom/src/index'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./compiler-core/src/index'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="实现-parse-模块的插值解析">实现 parse 模块的插值解析</h3><p><strong>需求</strong></p><p>我们希望可以解析 <code>&#123;&#123;message&#125;&#125;</code> 为 AST 树,插值语法的 AST 为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span>  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span>    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'message'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现</strong></p><ul><li>定义枚举 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">@packages<span class="token operator">/</span>compiler<span class="token operator">-</span>core<span class="token operator">/</span>src<span class="token operator">/</span>ast<span class="token punctuation">.</span>ts<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> NodeTypes <span class="token punctuation">&#123;</span>  <span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span>  <span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现编译 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">@packages<span class="token operator">/</span>compiler<span class="token operator">-</span>core<span class="token operator">/</span>src<span class="token operator">/</span>parse<span class="token punctuation">.</span>ts<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NodeTypes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./ast'</span><span class="token punctuation">;</span><span class="token comment">// 构造上下文, 之后源码都从 source 里面取</span><span class="token keyword">function</span> <span class="token function">createParserContext</span><span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">source</span><span class="token operator">:</span> content<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 构造 Root 节点, 其只包含子节点属性</span><span class="token keyword">function</span> <span class="token function">createRoot</span><span class="token punctuation">(</span><span class="token parameter">children</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    children<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果代码中包含 '&#123;&#123;' 就执行解析</span><span class="token keyword">function</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token keyword">as</span> any<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'&#123;&#123;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> node <span class="token operator">=</span> <span class="token function">parseInterpolation</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  node <span class="token operator">&amp;&amp;</span> nodes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> nodes<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 找到一对最近的 &#123;&#123; &#125;&#125;, 提取插值, 删除这个插值代码</span><span class="token keyword">function</span> <span class="token function">parseInterpolation</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> closeDelimiter <span class="token operator">=</span> <span class="token string">'&#125;&#125;'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> openDelimiter <span class="token operator">=</span> <span class="token string">'&#123;&#123;'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> closeIndex <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>    closeDelimiter<span class="token punctuation">,</span>    openDelimiter<span class="token punctuation">.</span>length  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">adviceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> openDelimiter<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> content <span class="token operator">=</span> context<span class="token punctuation">.</span>source    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> closeIndex <span class="token operator">-</span> openDelimiter<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">adviceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> closeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span>    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span>      content<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 推进操作(删除已解析代码)</span><span class="token keyword">function</span> <span class="token function">adviceBy</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  context<span class="token punctuation">.</span>source <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 解析器入口</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseParse</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">content</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createParserContext</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">createRoot</span><span class="token punctuation">(</span><span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现-parse-模块的-element-解析">实现 parse 模块的 Element解析</h3><p><strong>需求</strong></p><p>识别 <code>&lt;xx&gt;&lt;/xx&gt;</code> 的代码并解析为 AST 树,其结构为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">,</span>  <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现</strong></p><ul><li>定义枚举 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> NodeTypes <span class="token punctuation">&#123;</span>  <span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span>  <span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span>  <span class="token constant">ELEMENT</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>实现解析函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// @packages/compiler-core/src/parse.ts</span><span class="token comment">// 识别条件 &lt;字母模式, 这个定义看起来很宽松, 但是却是标准定义</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&lt;[a-zA-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> node <span class="token operator">=</span> <span class="token function">parseElement</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">parseElement</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> tagMatch <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&lt;([a-zA-Z]*)>.*&lt;\/\1></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> tag <span class="token operator">=</span> tagMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">adviceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> tagMatch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">,</span>    tag<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现-parse-模块的-text-解析">实现 parse 模块的 Text 解析</h3><p><strong>需求</strong></p><p>将不满足两种规范的代码识别为 Text 并解析为 AST 树, 其结构为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">,</span>  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'bulabula'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现</strong></p><ul><li>定义枚举: 略</li><li>返回 AST <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">parseText</span><span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> content <span class="token operator">=</span> context<span class="token punctuation">.</span>source<span class="token punctuation">;</span>  <span class="token function">adviceBy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> content<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">,</span>    content<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="同时解析三种类型">同时解析三种类型</h3><p><strong>需求</strong></p><p>将 <code>&lt;div&gt;hi, &#123;&#123;message&#125;&#125;&lt;/div&gt;</code>解析为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">,</span>  <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">,</span>      <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'hi, '</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span>      <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span>        <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">'message'</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现</strong></p><ul><li><p>修正 Element 使之可以解析 Element 标签内部文本</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">function parseElement(context) &#123;- const tagMatch &#x3D; context.source.match(&#x2F;^&lt;([a-zA-Z]*)&gt;.*&lt;\&#x2F;\1&gt;&#x2F;);+ const tagMatch &#x3D; context.source.match(&#x2F;^&lt;([a-zA-Z]*)&gt;(.*)&lt;\&#x2F;\1&gt;&#x2F;);  const tag &#x3D; tagMatch[1];  adviceBy(context, tagMatch[0].length);  return &#123;    type: NodeTypes.ELEMENT,    tag,+   children: parseChildren(createParserContext(tagMatch[2])),  &#125;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修正 Text 解析使之可以在遇到插值 / Element 前导时停止解析</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">function parseText(context) &#123;+ let content &#x3D; context.source;+ if (~content.indexOf(&#39;&#123;&#123;&#39;)) &#123;+   content &#x3D; content.slice(0, content.indexOf(&#39;&#123;&#123;&#39;) );+ &#125; else if (&#x2F;&lt;\&#x2F;?[a-zA-Z].+&#x2F;.test(content)) &#123;+   content &#x3D; content.slice(+     0,+     content.length - content.match(&#x2F;&lt;\&#x2F;?[a-zA-Z].+&#x2F;).length+   );+ &#125;  adviceBy(context, content.length);  return &#123;    type: NodeTypes.TEXT,    content,  &#125;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在一次解析并推进完成后继续解析剩余代码 <pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">function parseChildren(context) &#123;  const nodes &#x3D; [] as any[];  let node &#x3D; null as any;+ while (context.source) &#123;    if (context.source.startsWith(&#39;&#123;&#123;&#39;)) node &#x3D; parseInterpolation(context);    else if (&#x2F;^&lt;[a-zA-Z]&#x2F;.test(context.source)) node &#x3D; parseElement(context);    else node &#x3D; parseText(context);    nodes.push(node);+ &#125;  return nodes;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li></ul><h3 id="实现-transform-模块">实现 Transform 模块</h3><p>希望为 transform 传入一个函数组, 对每个节点执行这些函数.我们只需要做一个 DFS 即可</p><ul><li>DFS <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NodeTypes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./ast'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">TO_DISPLAY_STRING</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./runtimeHelpers'</span><span class="token punctuation">;</span><span class="token comment">// 创建上下文并遍历</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createTransformContext</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">traverseNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>context<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建上下文</span><span class="token keyword">function</span> <span class="token function">createTransformContext</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    root<span class="token punctuation">,</span>    <span class="token literal-property property">nodeTransforms</span><span class="token operator">:</span> options<span class="token punctuation">.</span>nodeTransforms <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">helpers</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">helper</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      context<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 遍历节点, 如果是插值节点就调用 helper, ROOT 与 Element 就遍历子节点</span><span class="token keyword">function</span> <span class="token function">traverseNode</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token literal-property property">exitFns</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> context<span class="token punctuation">.</span>nodeTransforms<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> onExit <span class="token operator">=</span> <span class="token function">i</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    onExit <span class="token operator">&amp;&amp;</span> exitFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onExit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token operator">:</span>      context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">TO_DISPLAY_STRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ROOT</span><span class="token operator">:</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token operator">:</span>      <span class="token function">traverseChildren</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> exitFns<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> exitFns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 遍历子节点</span><span class="token keyword">function</span> <span class="token function">traverseChildren</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">context</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> child <span class="token keyword">of</span> node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token function">traverseNode</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>定义枚举 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">TO_DISPLAY_STRING</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">toDisplayString</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">CREATE_ELEMENT_VNODE</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"createElementVNode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> helperNameMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token constant">TO_DISPLAY_STRING</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"toDisplayString"</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token constant">CREATE_ELEMENT_VNODE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"createElementVNode"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>为 ROOT 打上 tag <pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">function createRoot(children) &#123;  return &#123;+   type: NodeTypes.ROOT,    children,  &#125;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="实现-compile-模块">实现 compile 模块</h3><p>需要将 AST 转换为代码字符串. 可以将 AST 分为四类</p><ul><li>Text</li><li>插值</li><li>Element: children 只有一个元素 (e.g.<code>&lt;div&gt;as&lt;/div&gt;</code> =&gt;<code>h('div', &#123;&#125;, 'as')</code>)</li><li>Element: children 有多个元素 (e.g.<code>&lt;div&gt;as &#123;&#123;her&#125;&#125;&lt;/div&gt;</code> =&gt;<code>h('div', &#123;&#125;, 'as' + her)</code>), 称之为复杂类型</li></ul><p>处理最后一种 AST 需要在内容中解析出的每个元素之间用 <code>+</code>连接</p><ul><li><p>加入枚举类型 <pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">export const enum NodeTypes &#123;  INTERPOLATION,  SIMPLE_EXPRESSION,  ELEMENT,  TEXT,  ROOT,+ COMPOUND_EXPRESSION,&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>代码生成 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isString <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../share'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NodeTypes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./ast'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>  <span class="token constant">CREATE_ELEMENT_VNODE</span><span class="token punctuation">,</span>  helperNameMap<span class="token punctuation">,</span>  <span class="token constant">TO_DISPLAY_STRING</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./runtimeHelpers'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token parameter">ast</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createCodegenContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建上下文</span>  <span class="token function">genFunctionPreamble</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建依赖引入</span>  <span class="token keyword">const</span> functionName <span class="token operator">=</span> <span class="token string">'render'</span><span class="token punctuation">;</span> <span class="token comment">// 函数名</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'_ctx'</span><span class="token punctuation">,</span> <span class="token string">'_cache'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 函数参数</span>  <span class="token keyword">const</span> signature <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 函数参数字符串</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">function </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>functionName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>signature<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)&#123;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 连接函数头</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'return '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">genNode</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>codegenNode<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成 AST 对应的内推</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">code</span><span class="token operator">:</span> context<span class="token punctuation">.</span>code<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genFunctionPreamble</span><span class="token punctuation">(</span><span class="token parameter">ast<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> VueBinging <span class="token operator">=</span> <span class="token string">'Vue'</span><span class="token punctuation">;</span> <span class="token comment">// 引用自的变量 `import &#123;...&#125; from Vue`</span>  <span class="token keyword">const</span> <span class="token function-variable function">aliasHelper</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>helperNameMap<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span> <span class="token comment">// 引用代码生成函数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 生成代码</span>    context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">const &#123; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>ast<span class="token punctuation">.</span>helpers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>aliasHelper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> &#125; = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>VueBinging<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'return '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createCodegenContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 将拼接代码功能写入 context</span>      context<span class="token punctuation">.</span>code <span class="token operator">+=</span> source<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">helper</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>helperNameMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genNode</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 分类生成不同 AST 对应的代码</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token operator">:</span>      <span class="token function">genText</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token operator">:</span>      <span class="token function">genInterpolation</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span><span class="token operator">:</span>      <span class="token function">genExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token operator">:</span>      <span class="token function">genElement</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMPOUND_EXPRESSION</span><span class="token operator">:</span>      <span class="token function">genCompoundExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genCompoundExpression</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">context</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> child <span class="token keyword">of</span> node<span class="token punctuation">.</span>children<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">genNode</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genElement</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">context</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">CREATE_ELEMENT_VNODE</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">genNodeList</span><span class="token punctuation">(</span><span class="token function">genNullable</span><span class="token punctuation">(</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> node<span class="token punctuation">.</span>props<span class="token punctuation">,</span> node<span class="token punctuation">.</span>children<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genNodeList</span><span class="token punctuation">(</span><span class="token parameter">nodes<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> node <span class="token operator">=</span> nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">genNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">', '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genNullable</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">args</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> arg <span class="token operator">||</span> <span class="token string">'null'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genExpression</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">context</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genInterpolation</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">context</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>context<span class="token punctuation">.</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">TO_DISPLAY_STRING</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">genNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>content<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">genText</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">context</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>创建根节点的入口节点 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createRootCodegen</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token literal-property property">context</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>  <span class="token keyword">const</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">&amp;&amp;</span> child<span class="token punctuation">.</span>codegenNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> codegenNode <span class="token operator">=</span> child<span class="token punctuation">.</span>codegenNode<span class="token punctuation">;</span>    root<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> codegenNode<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    root<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> child<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>Element 生成函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createVNodeCall<span class="token punctuation">,</span> NodeTypes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../ast"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transformElement</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// tag</span>      <span class="token keyword">const</span> vnodeTag <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">'</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>      <span class="token comment">// props</span>      <span class="token keyword">let</span> vnodeProps<span class="token punctuation">;</span>      <span class="token comment">// children</span>      <span class="token keyword">const</span> children <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">;</span>      <span class="token keyword">let</span> vnodeChildren <span class="token operator">=</span> children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      node<span class="token punctuation">.</span>codegenNode <span class="token operator">=</span> <span class="token function">createVNodeCall</span><span class="token punctuation">(</span>        context<span class="token punctuation">,</span>        vnodeTag<span class="token punctuation">,</span>        vnodeProps<span class="token punctuation">,</span>        vnodeChildren      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>生成表达式 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NodeTypes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../ast"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transformExpression</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token function">processExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">processExpression</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  node<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">_ctx.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>node<span class="token punctuation">.</span>content<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>生成文本节点 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> NodeTypes <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../ast'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isText <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../utils'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">transformText</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> children <span class="token punctuation">&#125;</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>      <span class="token keyword">let</span> currentContainer<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isText</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> next <span class="token operator">=</span> children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isText</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentContainer<span class="token punctuation">)</span>                currentContainer <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                  <span class="token literal-property property">type</span><span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMPOUND_EXPRESSION</span><span class="token punctuation">,</span>                  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>              currentContainer<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">' + '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              currentContainer<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>              children<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>              currentContainer <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>Text 节点与 string 判断函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isText</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span> <span class="token operator">||</span> node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li></ul><h3 id="让-runtime-core-调用-compiler-core">让 runtime-core 调用compiler-core</h3><p>runtime-core 会在确定 instance.render 时调用 compiler-core. 如果setup 不返回函数, 组件没有自带 render 函数, runtime-core 会在有 template时调用 compiler-core. compiler-core 会返回函数代码, 我们需要根据代码获得render 函数</p><p><strong>测试代码</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> h<span class="token punctuation">,</span> ref <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'../../lib/micro-vue.esm.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'micro-vue'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">'hihi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> message <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>hi, &#123;&#123;message&#125;&#125;&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现</strong></p><ul><li><p>构造 compiler-core 向外暴露的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> generate <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./codegen'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> baseParse <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./parse'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> transform <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./transform'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> transformExpression <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./transforms/transformExpression'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> transformElement <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./transforms/transformElement'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> transformText <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./transforms/transformText'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">baseParse</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">transform</span><span class="token punctuation">(</span>    ast<span class="token punctuation">,</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">nodeTransforms</span><span class="token operator">:</span> <span class="token punctuation">[</span>transformElement<span class="token punctuation">,</span> transformText<span class="token punctuation">,</span> transformExpression<span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 runtime-core 中加入编译 template 功能 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">finishComponentSetup</span><span class="token punctuation">(</span><span class="token parameter">instance</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  instance<span class="token punctuation">.</span>render <span class="token operator">=</span> instance<span class="token punctuation">.</span>render <span class="token operator">||</span> instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span>render <span class="token operator">||</span> <span class="token function">compiler</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li><li><p>为 patchProps 加入兜底功能 <pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">export function patchProps(elem: HTMLElement, oldProps &#x3D; &#123;&#125;, newProps &#x3D; &#123;&#125;) &#123;+ oldProps ??&#x3D; &#123;&#125;;+ newProps ??&#x3D; &#123;&#125;;  &#x2F;&#x2F; ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>导出 createElementNode <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> createVNode <span class="token keyword">as</span> createElementVNode <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li><li><p>解决循环依赖问题: runtime-core 需要从 Vue 获取编译函数而 Vue需要引用 runtime-core. 为了解决循环依赖, 可以让 runtime-core 暴露一个SET 函数, 当文件加载完毕后调用祖册函数为 runtime-core 注册来自compiler-core 的编译函数.</p><ul><li>在 runtime-core 中暴露注册函数 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> compiler<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">registerRuntimeCompiler</span><span class="token punctuation">(</span><span class="token parameter">_compiler</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  compiler <span class="token operator">=</span> _compiler<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在最外层引入 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./reactivity/src/index'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./runtime-dom/src/index'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> baseCompile <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./compiler-core/src'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> runtimeDom <span class="token keyword">from</span> <span class="token string">'./runtime-dom/src'</span><span class="token punctuation">;</span><span class="token comment">// 将文本转换为函数的函数</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compileToFunction</span><span class="token punctuation">(</span><span class="token parameter">template</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 代码</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> code <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">baseCompile</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// compiler-core 编译的函数形如</span>  <span class="token comment">//   import &#123; createElementNode as _createElementNode &#125; from Vue</span>  <span class="token comment">//   return _createElementVNode(...)</span>  <span class="token comment">// 我们希望获取 return 结果, 将这个代码段构造为函数</span>  <span class="token comment">//   function ff(Vue)&#123;</span>  <span class="token comment">//     import &#123; createElementNode as _createElementNode &#125; from Vue</span>  <span class="token comment">//     return _createElementVNode(...)</span>  <span class="token comment">//   &#125;</span>  <span class="token comment">// 只需要传入 Vue 作为参数并获取函数运行结果即可</span>  <span class="token comment">// 无需 eval, 用 Function 即可构造函数. 并传入 Vue 即可</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'Vue'</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">(</span>runtimeDom<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 将这个编译函数注入 runtime-core, runtime-core 即可拥有编译函数</span>runtimeDom<span class="token punctuation">.</span><span class="token function">registerRuntimeCompiler</span><span class="token punctuation">(</span>compileToFunction<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>编译后的函数需要两个参数, 传入相同值 <pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">function componentUpdateFn(instance, container, anchor, patch) &#123;- const subTree &#x3D; instance.render.call(instance.proxy);+ const subTree &#x3D; instance.render.call(instance.proxy, instance.proxy);  if (instance.next) &#123;    instance.vNode &#x3D; instance.next;    instance.props &#x3D; instance.next.props;    &#x2F;&#x2F; ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li></ul>]]></content>
    
    
    <summary type="html">尝试理解 Vue 的设计思想与实现, 参考自: mini-vue, Vue.js 设计与实现</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="前端框架" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="笔记" scheme="https://blog.liukairui.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="前端框架" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Vue" scheme="https://blog.liukairui.me/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>《你不知道的JavaScript》学习</title>
    <link href="https://blog.liukairui.me/article/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%E5%AD%A6%E4%B9%A0/"/>
    <id>https://blog.liukairui.me/article/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-07-02T16:00:01.000Z</published>
    <updated>2022-07-02T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="作用域与闭包">作用域与闭包</h2><p>作用域是一套根据名字查找变量的规则,作用域维护了所有声明的变量并确定变量的访问权限.</p><h3 id="作用域在编译中的交互">作用域在编译中的交互</h3><p>JavaScript 是一门解释型语言, 解释器有三部分构成</p><ul><li>引擎: 负责整个解释过程</li><li>编译器: 进行词法语法分析与代码生成</li><li>作用域: 维护了所有声明的变量确定变量的访问权限</li></ul><p><strong>引擎请求</strong></p><p>在解释过程中, 引擎会不断的向作用域发出 <code>LHS</code> 与<code>RHS</code> 查询. 可以认为 <code>LHS</code> 查询是在查询左值,<code>RHS</code> 是在查询右值(或者理解为非左值). 换而言之,当变量要进行赋值操作时, 引擎会执行 <code>LHS</code> 查询,这时引擎不关心变量的值, 而关心变量的位置. 其他情况下引擎执行<code>RHS</code> 查询, 这时引擎只关心变量的值.作用域收到请求后根据请求标识符返回值. 例如,在下面这段代码执行时发生了如下查询:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol type="1"><li>将 <code>function foo(a)&#123;&#125;</code> 看作<code>var foo = function()&#123;&#125;</code>, 引擎执行 <code>var foo</code>时发出 <code>RHS</code> 请求查询 <code>foo</code>, 查询不到, 遂创建<code>foo</code> 变量</li><li>引擎执行 <code>foo = ...</code> 时发出 <code>LHS</code> 请求查询<code>foo</code>, 查询到后分配变量</li><li>引擎执行 <code>var b</code> 时发出 <code>RHS</code> 请求查询<code>b</code>, 查询不到, 遂创建 <code>b</code> 变量</li><li>引擎执行 <code>b = 2</code> 时发出 <code>LHS</code> 请求查询<code>b</code>, 查询到后分配变量</li><li>引擎执行 <code>foo(2)</code> 时发出 <code>RHS</code> 请求查询<code>foo</code></li><li>引擎执行 <code>foo(2)</code> 时发出 <code>LHS</code> 请求查询<code>a</code>, 查询到后隐式分配变量</li><li>引擎执行 <code>console</code> 时发出 <code>RHS</code> 请求查询<code>console</code></li><li>引擎执行 <code>console.log</code> 时发出 <code>RHS</code> 请求查询<code>console</code> 下的 <code>log</code></li><li>引擎执行 <code>console.log(a)</code> 时发出 <code>RHS</code>请求查询 <code>a</code></li></ol><p><strong>作用域回应</strong></p><p>作用域在收到引擎的 <code>LHS/RHS</code>请求后会在本作用域下查找并返回对标识符的引用</p><p><strong>引擎的处理</strong></p><ul><li><p>若作用域没找到标识符:</p><p>引擎会请求上一层作用域直到全局作用域.若在全局作用域中还是没找到标识符</p><ul><li>若发起的是 <code>RHS</code> 请求: 直接抛出<code>ReferenceError</code></li><li>若发起的是 <code>LHS</code> 请求: 在非严格模式下会直接创建变量,在严格模式下会抛出 <code>ReferenceError</code> 异常. <strong>注意,这种情况针对的是诸如 <code>b = a</code> 的情况, 如果是<code>var b = a</code>, 那么引擎会先执行 <code>RHS</code> 创建<code>b</code> 再执行 <code>LHS</code> 赋值</strong>.</li></ul></li><li><p>若作用域找到标识符</p><ul><li>若是 <code>LHS</code> 请求则进行赋值操作</li><li>若是 <code>RHS</code>请求则继续判断是否对右值进行非法操作(如对非函数变量执行函数调用)</li></ul></li></ul><h3 id="词法作用域">词法作用域</h3><p>作用域有两种常见的模式</p><ul><li>词法作用域: 大多数语言(包括JS)采用的</li><li>动态作用域: Bash/Perl语言采用</li></ul><p>简单的说,词法作用域就是在<strong>程序执行之前的词法分析阶段</strong>确定的静态作用域.编译器会在词法分析阶段根据<strong>变量的位置关系</strong>确定直接确定作用域.</p><p>引擎请求作用域查找时, 作用域只会查找一级标识符, 例如: 查询<code>console.log</code> 时, 作用域只查询 <code>console</code>,在下一次查询时候才在 <code>console</code> 中查询 <code>log</code></p><p><strong>遮蔽效应</strong></p><p>对于存在嵌套关系的作用域,引擎在查询时会优先查找内部作用域而忽略外部作用域中的同名标识符.全局作用域中的变量会被自动加入全局对象(<code>window/global</code>),可以直接通过 <code>global</code> 访问全局作用域变量,这也是忽略内层作用域的唯一方法.</p><p><strong>欺骗词法作用域</strong></p><p>词法作用域是在词法分析进行的, 这意味着程序员无法在运行时修改作用域,但是存在几种方法可以动态干预作用域</p><ul><li><code>eval</code> 函数: 动态的为 <code>eval</code>传入参数可以对当前作用域做动态修改</li><li><code>with</code> 函数: 相当于手动创建了一个作用域,<code>with</code> 的参数会被"解构"作为作用域中的变量</li><li><code>apply/call/bind</code>函数.</li></ul><p>动态干预方法存在诸多弊端</p><ul><li><p>性能下降: JavaScript 在执行前会执行静态分析与性能优化,但是无法分析 <code>eval/with</code> 中的动态作用域,亦无法进行性能优化.</p></li><li><p>严格模式不可用:</p><ul><li>在严格模式下 <code>eval</code> 函数内部有自己的作用域, 此时<code>eval</code> 函数无法干预原作用域</li><li>严格模式下 <code>with</code> 不可用</li></ul></li><li><p>污染全局变量: 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">with</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a <span class="token operator">=</span> v<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// &#123; a: 1 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// &#123; b: 2 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 2 发生泄漏</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>动态作用域</strong></p><p>JavaScript 使用的是词法作用域模型, 但是部分语言在采用动态作用域</p><ul><li>词法作用域:词法分析阶段根据<strong>变量的位置关系</strong>确定直接确定作用域.</li><li>动态作用域: 作用域在运行时<strong>动态变化</strong>,动态作用域的作用域链一般是基于调用栈的(这与 <code>JavaScript</code> 的<code>this</code> 特性很像)</li></ul><p>例如, 对于代码:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>静态作用域: 在执行 <code>foo</code> 时, 引擎发起 <code>RHS</code>请求 <code>a</code>, 找不到, 向外直接查找全局<code>a = 2</code></p></li><li><p>动态作用域: 在执行 <code>foo</code> 时, 引擎发起 <code>RHS</code>请求 <code>a</code>, 找不到, 顺着作用域链(调用栈)直接查找<code>bar</code> 中的 <code>a = 3</code>, 看起来很像 JavaScript 的<code>this</code> 机制</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="函数与块作用域">函数与块作用域</h3><p><strong>函数作用域</strong></p><p>函数内部的变量与方法位于函数作用域中, 无法被外部访问.</p><p>利用函数作用域可以隐藏代码的部分内部实现, 从而实现</p><ul><li>最小特权原则</li><li>规避变量冲突(其他实现规避冲突的方法有配置命名空间, 模块化管理)</li></ul><p>在实践中, 实现函数作用域的方法有</p><ul><li><p>直接在代码内部定义函数, 并在定义后调用函数</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">&#x2F;&#x2F; 上文+ function foo()&#123;    &#x2F;&#x2F; 保护起来的部分+ &#125;+ foo()&#x2F;&#x2F; 下文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法必须声明一个具名函数, 然后在调用, 不仅繁琐,具名函数还无形中污染了外层作用域</p></li><li><p>使用函数表达式代替函数</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">&#x2F;&#x2F; 上文+ (function foo()&#123;    &#x2F;&#x2F; 保护起来的部分+ &#125;)()&#x2F;&#x2F; 下文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JavaScript 在解析句子时, 若发现第一个关键字是 <code>function</code>则会将这句话判定为<strong>函数定义</strong>,遇到其他符号(例如这里的<code>(</code>),则会将这句话当作<strong>表达式</strong>. 可以通过<code>(function foo()&#123;&#125;)()</code> 的方法定义函数. 此时,不仅不用显式调用函数, <code>foo</code>标识符也<strong>不能被外部访问</strong>, 不会污染外层作用域</p></li><li><p>匿名函数</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">&#x2F;&#x2F; 上文+ (function()&#123;    &#x2F;&#x2F; 保护起来的部分+ &#125;)()&#x2F;&#x2F; 下文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点: 难以得知函数语义, 调试困难.函数内部无法通过函数名调用函数名上的变量(如:<code>callee</code>)</p></li><li><p>IIFT</p><p>实际上有两种IIFT的写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>两者在功能上完全一致, 任选其一即可</p></li></ul><p><strong>ES6的块作用域</strong></p><p><code>ES6</code> 中的关键字 <code>let</code>, <code>const</code>都支持变量块作用域, 其实现的原理是:在声明变量时<strong>隐式</strong>的将变量劫持在所在的块作用域上.但这两个关键字不支持变量提升, 在实践时最好将变量声明在作用域首部.</p><p><strong>ES6之前的块作用域实现</strong></p><p>在 <code>ES6</code> 前的时代, <code>JavaScript</code>只有全局作用域与函数作用域,伟大的程序员们利用部分特性实现了部分块作用域</p><p>实际上在 <code>ES6</code> 前有部分语法"支持"块作用域</p><ul><li><p><code>with</code> 为内部代码手动创建了一个作用域,内部代码可以认为是包在 <code>with()&#123;&#125;</code> 产生的块作用域中</p></li><li><p><code>try-catch</code> 方法的 <code>catch</code>分句会创造块作用域. 利用这个特性, 部分 JavaScript 的 polyfill转译工具会将 <code>ES6</code> 的块作用域翻译为 <code>try-catch</code>语句, 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>翻译为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>:</p><blockquote><p>早期 JavaScript 要求统一作用域下的不同 <code>try-catch</code> 语句的<code>catch</code> 分句中不能使用相同的标识符声明错误, 即<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>是错的, 需要将 <code>error</code> 改为 <code>error1</code>,<code>error2</code>...</p></blockquote></li></ul><h3 id="函数与变量提升">函数与变量提升</h3><p>对于 <code>var</code> 与 <code>function</code> 声明的标识符,存在变量提升. JavaScript 引擎会在编译阶段进行静态代码分析,获得词法作用域, 完成声明.</p><ul><li><p>对于 <code>var</code> 声明的变量或函数: JavaScript只会提升变量定义, 在正式定义前, 变量是 <code>undefined</code></p></li><li><p>对于 <code>function</code> 声明的函数: JavaScript会提升函数函数声明与定义.</p></li><li><p>若作用域中同时存在 <code>var</code> 与 <code>function</code>声明. <code>function</code> 优先, 例如:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1</span><span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相当于</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// funciton 优先</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> foo<span class="token punctuation">;</span>         <span class="token comment">// var滞后, 于是这个就废掉了</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="闭包">闭包</h3><p>当函数在自己定义作用域以外的部分执行时, 函数会保留对原作用域的引用,这个引用就是闭包. 换而言之, 一旦使用了同步/异步的回调函数,就产生了闭包.</p><p>函数可以保持对闭包的引用, 但是无法保证闭包内的值并不变. 同时,闭包可以阻止所在函数作用域的垃圾回收.</p><p><strong>实现模块化</strong></p><p>JavaScript 的模块化就借用了闭包实现, 以下是一个模块化的基本模式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">onemod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> attr1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// do sth</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        method1    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在函数内部定义变量与方法, 通过 <code>return</code>将需要暴露的变量导出.</p><p>函数每次调用就会导出一个全新模块. 但是, 也因为函数可以传入参数,编译器无法对此类模块做出静态分析与优化. 在 <code>ES6</code> 中,每个模块被定义为文件通过 <code>import/export</code> 导入导出,此时编译器可以在编译阶段对模块进行静态分析.</p><h2 id="this-和对象原型"><code>this</code> 和对象原型</h2><h3 id="关于-this">关于 <code>this</code></h3><p><strong><code>this</code> 不是什么</strong></p><ul><li><p><code>this</code> 不是函数自身</p><p>无法通过 <code>this</code> 获取函数作为对象的属性.若想对函数对象操作还是需要使用<strong>函数标识符</strong>或在函数内使用<strong><code>arguments.callee</code></strong> (已弃用)</p></li><li><p><code>this</code> 不是函数作用域</p><p><code>this</code> 不指向函数作用域, 作用域在编译阶段就生成了, 但<code>this</code> 是在运行时动态变换的. 作用域是存在于 JavaScript引擎中的"对象", 无法在代码中被引用</p></li></ul><p><strong><code>this</code> 是什么</strong></p><p>this是函数调用时被调用函数上下文中的一个属性,其具体的指向取决于函数的调用方式</p><p><strong>为什么需要<code>this</code></strong></p><p><code>this</code> 提供了一种让函数调用隐式传递其对象引用的模式,在函数被调用时, <code>this</code> 作为函数上下文中的一项被传入函数</p><h3 id="this-的指向"><code>this</code> 的指向</h3><p>分析 <code>this</code> 的指向首先要分析函数的调用位置,也就是分析调用栈的第二项</p><p>我们将先从易到难的介绍各种规则, 然后规定规则的优先级</p><p><strong>规则</strong></p><ul><li><p>默认绑定</p><p>当函数被直接调用(如: <code>foo()</code>)时, <code>this</code>会被绑定到 <code>global/window</code> 对象. 在严格模式下,<code>this</code> 无法指向全局对象, 其会指向<code>undefined</code></p></li><li><p>隐式绑定</p><p>若被调用对象被其他对象在<strong>形式上</strong>包含,<code>this</code> 将指向被包含对象.可以从下面几个例子中理解形式上的包围</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// SITUATION 1: 包围</span><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 没问题, 调用时是 foo.demo(), demo被foo包围了</span><span class="token comment">// SITUATION 2: 形式上包围</span><span class="token keyword">function</span> <span class="token function">demoGlobal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">demo</span><span class="token operator">:</span> demoGlobal<span class="token punctuation">,</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>bar<span class="token punctuation">.</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2, 虽然 bar.demo 引用自全局函数, 但是在bar.demo中demo被bar包围了</span><span class="token comment">// SITUATION 3: 形式上包围</span><span class="token keyword">const</span> demoFromFoo <span class="token operator">=</span> foo<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token function">demoFromFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 虽然 demoFromFoo 引用自 foo.demo , 但是在这里并没有被包围</span><span class="token comment">// SITUATION 4: 回调函数</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>demo<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 可以简化调用过程为</span><span class="token comment">// function setTimeout(fn, delay) &#123; // 这里其实进行了一次函数的赋值, 与SITUATION 3 类似, 于是失去了包围对象</span><span class="token comment">//   sleep(delay);</span><span class="token comment">//   fn();</span><span class="token comment">// &#125;</span><span class="token comment">// SITUATION 5: 包围陷阱</span><span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span>baz<span class="token punctuation">.</span>demo <span class="token operator">=</span> foo<span class="token punctuation">.</span>demo<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 赋值语句返回的是目标函数的引用, 相当于就是一个 function()&#123;...&#125; , 但是在这里并没有被包围</span><span class="token comment">// SITUATION 6: 只关注前一层包围</span><span class="token keyword">const</span> outer <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">inner</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token literal-property property">demo</span><span class="token operator">:</span> demoGlobal<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>outer<span class="token punctuation">.</span>inner<span class="token punctuation">.</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3, 只关心包围的第一的外层元素(inner)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也将 SITUATION 3&amp;4 的情况称为<strong>隐式丢失</strong></p></li><li><p>显式绑定</p><p>JavaScript 中改变 <code>this</code> 指向的方法有<code>call / apply / bind</code>, 对于 <code>call / apply</code>,这两个函数可以直接修改 <code>this</code> 的指向. <code>bind</code>函数可以返回一个修改 <code>this</code> 后的函数,可以将其实现<strong>简单的</strong>理解为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> self</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部分 API 自身就支持改变 <code>this</code> 指向, 如<code>Array.prototype.forEach()</code> 支持修改回调的<code>this</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined undefined undefined</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>若传入 <code>this = null</code> 那么 <code>this</code> 将变为<code>global</code></strong></p></li><li><p><code>new</code> 绑定</p><p>使用 <code>new</code> 新建实例时, 构造函数的 <code>this</code>将绑定到创建的实例</p></li><li><p>箭头函数: 直接绑定非外层非箭头函数的 <code>this</code></p></li></ul><p><strong>优先级</strong></p><ol start="0" type="1"><li>箭头函数</li><li><code>new</code> 绑定</li><li>显式绑定: 注意, <code>new</code> 的优先级高于 <code>ES6</code>实现的 <code>bind</code>, 那个 <code>bind</code> 与前面简化的<code>bind</code> 不同</li><li>隐式绑定</li><li>默认绑定</li></ol><p>讨论 <code>new</code> 绑定与 <code>bind</code>绑定的优先级是有意义的, 如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> initAs12X <span class="token operator">=</span> <span class="token function">Foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">initAs123</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">initAs123</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们确定了构造函数的前两项为 <code>1, 2</code>, 希望在<code>new</code> 的时候只指定第三项, 就可以这么写, 先用<code>bind</code> 为函数传入前两个参数, 并绑定 <code>null</code> 作为<code>this</code>, 然后又用 <code>new</code> 覆盖 <code>this</code>.</p><p>在 JavaScript 中, <code>bind</code> 函数可以用来实现函数柯里化.</p><p>最后, 引用来自掘金小册的流程图</p><pre class="mermaid">graph TBwhereisthis(寻找函数中的this) --箭头函数--> outerthis(包裹箭头函数的非箭头函数的this)whereisthis(寻找函数中的this) --普通函数--> ways(函数调用方式)whereisthis(寻找函数中的this) --bind/call/apply--> fstparam(第一个参数)ways --new--> instance(this被固化在实例上)ways --其他方式--> form(函数被调用的方式)form --foo--> window(this为window/严格模式下的undefined)form --bar.foo--> obj(this为bar)</pre><p><strong>陷阱</strong></p><ul><li><p>无用 <code>this</code>:</p><p>有时函数的 <code>this</code> 并不重要, 但是部分回调函数需要指定<code>this</code>(如通过 <code>bind</code> 实现柯里化,<code>forEach</code>函数). 我们可以传入 <code>null</code> 占位,但是若函数的 <code>this</code> 为可选参数且默认值为 <code>global</code>,填入 <code>null</code> 会让 <code>this</code> 指向 <code>global</code>,这可能会污染全局作用域. 解决方法是实现一个人畜无害的对象, 将其称之为<code>DMZ</code>(Demilitarized zone, 非军事区) 对象, 可以使用<code>Object.create(null)</code> 实现, 这个对象比 <code>&#123;&#125;</code>更"空",</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> empty <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>empty<span class="token punctuation">,</span> <span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>隐式丢失问题</p><p>在实现 vue 的 runtime-dom 时我曾写过</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> create <span class="token operator">=</span> document<span class="token punctuation">.</span>createElement<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是在执行 <code>create('div')</code> 时出错了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">VM67</span><span class="token operator">:</span><span class="token number">1</span> Uncaught TypeError<span class="token operator">:</span> Illegal invocation    at <span class="token operator">&lt;</span>anonymous<span class="token operator">></span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是因为 <code>document.createElement('div')</code> 时<code>this</code> 指向 <code>document</code> 但是调用<code>create</code> 时 <code>this</code> 指向 <code>global</code>.解决方案就是</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> create <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="对象">对象</h3><p><strong>构造</strong></p><p>可以通过<strong>字面量</strong>与<strong>构造函数</strong>两种方式构造对象,在字面量构造对象时, <code>Key</code> 有多重写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token string">'C-'</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 一般模式</span>  <span class="token string-property property">'A-1'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// A-1 会被理解为A减1, 放弃简写, 将Key用引号引起来</span>  <span class="token punctuation">[</span>pre <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 可以用[]实现计算属性, 结果相当于 'C-1': 1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 JavaScript 的基本类型中, 只有 Object 是对象.<code>typeof null === 'object'</code>, 这是因为</p><blockquote><p>在 JavaScript 中二进制前三位都为 0 的话会被判断为 <code>object</code>类型, <code>null</code> 的二进制表示全是 <code>0</code>, 自然前三位也是<code>0</code>, 所以执行 <code>typeof</code> 时返回<code>object</code></p></blockquote><p><strong>访问</strong></p><p>可以通过<strong>属性访问</strong>(<code>obj.a</code>)与<strong>值访问</strong><code>obj['a']</code>访问元素,两者效果相同</p><p>当属性访问的 <code>Key</code> 违反 JavaScript语法时(如<code>a.1</code>)可以用值访问替代. 值访问中,<code>[]</code>包裹的表达式可以是非 <code>string</code>,但是在最后都会转换为 <code>string</code>, 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span>obj<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'true'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">'[object Object]'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然后三项都不是同一个 <code>object</code>, 但是他们转换为<code>string</code> 后都是 <code>'[object Object]'</code>,应此映射值一样</p><p><strong>复制</strong></p><ul><li><p>浅拷贝</p><ul><li>对于<code>JSON</code> 安全的对象:<code>JSON.parse(JSON.stringify(obj));</code></li><li><code>ES6</code> 下: <code>Object.assign(obj);</code></li></ul><p>这两个方法会将所有<strong>可枚举对象</strong>拷贝出来, 但是<code>JSON</code> 方法拷来的对象的属性描述符(如: writable)会被抹去,<code>Object.assign</code> 来的对象的属性描述符会保留</p></li><li><p>深拷贝</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 深拷贝</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> copyedObjs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 此数组解决了循环引用和相同引用的问题，它存放已经递归到的目标对象</span>  copyedObjs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">fromTarget</span><span class="token operator">:</span> source<span class="token punctuation">,</span> <span class="token literal-property property">toTarget</span><span class="token operator">:</span> target <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">deepCopyFunction</span><span class="token punctuation">(</span><span class="token parameter">sourceItem<span class="token punctuation">,</span> targetItem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>sourceItem<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token keyword">typeof</span> sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span>        sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>        sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span>      <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        targetItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> copyedObjs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>copyedObjs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fromTarget <span class="token operator">===</span> sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            targetItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> copyedObjs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>toTarget<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        targetItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> targetItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        copyedObjs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">fromTarget</span><span class="token operator">:</span> sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token literal-property property">toTarget</span><span class="token operator">:</span> targetItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">deepCopyFunction</span><span class="token punctuation">(</span>sourceItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> targetItem<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">deepCopyFunction</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>属性描述符</strong></p><p>可以用 <code>Object.defineProperty(obj, attr, config)</code>定义对象的属性与属性标识, <code>config</code> 结构为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    configurable<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token comment">// 是否允许修改属性描述符, 默认 false</span>    enumerable<span class="token operator">?</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> <span class="token comment">// 是否可以枚举, 默认 false</span>    value<span class="token operator">?</span><span class="token operator">:</span> any<span class="token punctuation">,</span> <span class="token comment">// 值, 默认 undefined</span>    writable<span class="token operator">?</span><span class="token operator">:</span>  <span class="token comment">// 值是否可修改, 默认 false</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>显而易见的是: 将 <code>configurable</code> 改为 <code>false</code>后无法改回, 但是, 即使 <code>configurable: false</code>, 仍然可以将<code>writable</code> 从 <code>true</code> 改为 <code>false</code>,且无法改回.</li><li>可以使用 <code>delete</code> 删除属性(但并不意味着会被垃圾回收,因为被删除对象可能会被其他对象引用)</li></ul><p><strong>属性不变性</strong></p><ul><li>配置 <code>&#123;configurable: false, writable: false&#125;</code>即可创建常量属性</li><li>调用 <code>Object.preventExtensions()</code>可以让对象无法再添加新的属性(添加会造成静默失败, 在严格模式下会造成<code>typeError</code> )</li><li>调用 <code>Object.seal()</code> 可以让对象无法再添加/删除属性,无法重写属性描述符</li><li>调用 <code>Object.freeze()</code> 可以让对象在 <code>seal</code>的基础上 <code>writable: false</code>. 如需冻结整个对象,该需要递归冻结每个属性, 同时,引用这个属性的所有对象的该属性都会被冻结</li></ul><p><strong>getter与setter</strong></p><ul><li>访问对象的属性实际上是在对象上的 <code>[[Get]]</code> 方法, 默认的<code>[[Get]]</code> 方法会先查找对象上是否有该属性,若是对象上没有该属性, <code>[[Get]]</code>就会顺着<strong>原型链</strong>向上查找, 都找不到则返回<code>undefined</code>. <strong>这与作用域的查找不同,作用域查找失败后会向外层作用域查找, 都找不到则抛出<code>Reference Error</code></strong></li><li>为对象设置属性等操作会出发 <code>[[put]]</code>,<code>[[put]]</code> 会先检查属性是否存在, 在检查是否定义了属性标识符,若是则直接调用 <code>setter</code>, 再检查属性是否是<code>writebale</code> 的, 如果是则会造成静默失败或<code>TypeError</code>, 若不是则会设置值</li><li>可以在 <code>defineProperty</code> 时指定 <code>getter</code> 与<code>setter</code> 接替默认 <code>[[Get]]</code> 与<code>[[Put]]</code>, <strong>若定义了 <code>getter</code> 没有的定义<code>setter</code>, 在设置属性时 <code>[[Put]]</code> 不会赋值,而是直接忽略赋值且不抛出错误. 所以最高成对定义<code>getter/setter</code></strong></li></ul><p><strong>查找</strong></p><ul><li><code>in</code> 可以判断 <code>key</code>是否在对象或其原型链上(包括不可枚举的属性)</li><li><code>hasOwnProperty</code> 可以判断 <code>key</code> 是否在对象上,但不检查原型链</li><li><code>for-in</code> 可以遍历对象上的可枚举元素的<code>key</code></li><li><code>for-of</code> 可以遍历有迭代器对象上的所有值</li><li><code>Object.keys()</code> 可以返回对象上的可枚举元素</li><li><code>Object.getOwnPropertyNames()</code>可以返回对象上的所有元素</li></ul><h3 id="混入">混入</h3><ul><li><p>显式混入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mixin</span><span class="token punctuation">(</span> <span class="token parameter">sourceObj<span class="token punctuation">,</span> targetObj</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> sourceObj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 仅拷贝非既存内容</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> targetObj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   targetObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> sourceObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> targetObj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>寄生继承</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// “传统的 JS 类” `Vehicle`</span><span class="token keyword">function</span> <span class="token function">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>engines <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Vehicle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">ignition</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Turning on my engine."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Vehicle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">drive</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ignition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Steering and moving forward!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// “寄生类” `Car`</span><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 首先, `car` 是一个 `Vehicle`</span> <span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 现在, 我们修改 `car` 使它特化</span> car<span class="token punctuation">.</span>wheels <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 保存一个 `Vehicle::drive()` 的引用</span> <span class="token keyword">var</span> vehDrive <span class="token operator">=</span> car<span class="token punctuation">.</span>drive<span class="token punctuation">;</span> <span class="token comment">// 覆盖 `Vehicle::drive()`</span> car<span class="token punctuation">.</span><span class="token function-variable function">drive</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">vehDrive</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Rolling on all "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wheels <span class="token operator">+</span> <span class="token string">" wheels!"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">return</span> car<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myCar<span class="token punctuation">.</span><span class="token function">drive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Turning on my engine.</span><span class="token comment">// Steering and moving forward!</span><span class="token comment">// Rolling on all 4 wheels!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>隐式混入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Something <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">cool</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Something<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Something<span class="token punctuation">.</span>greeting<span class="token punctuation">;</span> <span class="token comment">// "Hello World"</span>Something<span class="token punctuation">.</span>count<span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token keyword">var</span> Another <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">cool</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 隐式地将 `Something` 混入 `Another`</span>  Something<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Another<span class="token punctuation">.</span><span class="token function">cool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Another<span class="token punctuation">.</span>greeting<span class="token punctuation">;</span> <span class="token comment">// "Hello World"</span>Another<span class="token punctuation">.</span>count<span class="token punctuation">;</span> <span class="token comment">// 1 (不会和 `Something` 共享状态)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="原型">原型</h3><p><strong>尝试理解原型链</strong></p><p>首先要明确, 虽然人们致力于通过语法糖让程序员像写类一样写 JavaScript的"类"与"继承". 但是, 实际上 JavaScript 的继承是基于原型链的.</p><p>原型是为实现继承而提出的,可以尝试将对象的原型理解成<strong>这个对象是基于什么样子的玩意魔改出来的</strong>.注意, 基于什么<strong>样子的</strong>玩意,不是基于<strong>什么玩意</strong>. 以下面这个继承关系为例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最开始, 我以为, 原型就是告诉实例对象,他是基于<strong>什么玩意</strong>构造出来的.</p><p>如果不考虑继承关系, 可以这么想象 <code>Father</code> 与<code>Son</code></p><p><img src="./你不知道的JavaScript学习/2-2.png" /></p><p>有两个独立的框框, 框中, 左边的圆是构造函数, 中间原型,右边是其构造出的实例. 按照刚刚的理解, 原型是一个神秘的<code>object</code>, 当我们要构造函数的时候, 只需要将执行<code>构造函数.apply(原型)</code>, 然后我们就得到了实例, 看起来不错.要是知道原型是什么就好了.</p><p>那, 如果 <code>Son</code> 的原型是 <code>Father</code>的实例会怎么样呢? 不错诶! <code>Son构造函数.apply(father)</code> 得到<code>son</code> 看起来合情合理!</p><p><img src="./你不知道的JavaScript学习/2-3.png" /></p><p>将原型链扩展完. 还是很棒! <code>Father构造函数.apply(&#123;&#125;)</code> 得到<code>father</code> 看起来也合情合理!<code>Object.apply(一个奇怪的东西)</code> 得到 <code>&#123;&#125;</code>看起来也合情合理! 至于这个奇怪的东西, 我们只知道他的<code>__proto__</code> 是 <code>null</code></p><p><img src="./你不知道的JavaScript学习/2-4.png" /></p><p>世界线收束了? 不对劲, 这么我们在直接操作原型呢? 这么一串搞下来,我们直接魔改了 <code>Object</code> 的原型 :(</p><p>实际上不是这样的, 原型是一个对象,他就像一个指路牌一样描述了构造函数(<code>.constructor</code>)是谁,原型链的上一层是谁<code>.__proto__</code>, 这个类上有什么方法.</p><p>看看 <code>Son.prototype</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">constructor</span><span class="token operator">:</span> <span class="token keyword">class</span> <span class="token class-name">Son</span>         <span class="token comment">// 构造函数</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object          <span class="token comment">// 原型链上一级</span>    <span class="token literal-property property">constructor</span><span class="token operator">:</span> <span class="token keyword">class</span> <span class="token class-name">Father</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./你不知道的JavaScript学习/2-5.png" /></p><p>但是, 对于创建对象来讲, 这足够了! 一旦我拥有了原型对象,我就知道了其构造函数与原型链的前一级, 在创建对象的时候,我递归让上一级帮我创建父类的实例, 然后将哪个实例喂给这一级的构造函数,对象创建成功</p><p><img src="./你不知道的JavaScript学习/2-6.png" /></p><p>这就解释了 <code>Son.prototype.__proto__ === Father.prototyp</code>,原型链即使这条蓝色的链表, 红色的就是其构造的过程:)</p><p>看起来没问题. 但是, 为啥要把类上的方法存储在原型上呢?因为这样所有的子类就访问父类的同一个方法.这与基于类的继承的实现方法不太相同, 但是 JavaScript本身就是基于原型链继承的而不是基于类继承的.</p><p>于是, 这个经典的图就可以理解了. 无非就是加入了<strong>Object&amp;Function 既是函数也是对象</strong> 的想法</p><p><img src="./你不知道的JavaScript学习/2-8.jpg" /></p><p><strong>基于原型链的继承</strong></p><ul><li><p>差异继承</p><p>回想 Java 等基于类继承的语言. 子类在实例化时只会执行父类的构造函数,并不会实例化父类, 父类的属性均会实例化在子类上.</p><p>但是 JavaScript 是基于原型链继承的,构造的过程实际上是一层一层的的调用构造函数并一层一层的构造实例.这意味着在构建子类时父子类实例都会被创建, 继承关系只是在原型上通过<code>__proto__</code> 维护子对象与父对象的关联,子类实例上只维护其与父类的差异. 也称这种继承为差异继承.</p></li><li><p><code>prototype</code> 与屏蔽</p><p>对象的<strong>赋值</strong>会触发 <code>[[Put]]</code> 操作.<code>[[put]]</code> 查找对象失败后会顺着对象的原型链查找标识符,于是产生了一些奇怪的规则.</p><p>假设执行 <code>foo.bar = 1</code>, 且 <code>foo</code> 上没有<code>bar</code></p><ul><li><p>原型链上找到了标识符且标识符 <code>writable: true</code>,<strong>会直接在 <code>foo</code> 上创建 <code>bar</code>, 然后赋值.称其为屏蔽属性</strong>(WTF!!)</p></li><li><p>原型链上找到了标识符且标识符 <code>writable: false</code>,<strong>会静默失效, 在严格模式下会抛出错误</strong></p></li><li><p>原型链上找到了标识符且标识符有 <code>setter</code>, 直接应用<code>setter</code></p></li></ul><p><strong>上面的规则都是针对 <code>=</code> 赋值的, 使用<code>Object.defineProperty()</code>就不会产生这些破玩意</strong></p></li><li><p>什么是所谓的构造函数</p><p>实际上, 构造函数就是普通函数, 构造函数也可以像普通函数一样调用.但是一旦函数前面加上了 <code>new</code>, <code>new</code>会劫持普通函数并将其当作构造函数调用</p></li><li><p>原型上的 <code>constructor</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token constant">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">C2</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">C1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// C1 &#123; v: 2 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>constructor <span class="token operator">===</span> <span class="token constant">C2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>constructor <span class="token operator">===</span> <span class="token constant">C1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对象上的 <code>constructor</code> 并不是对象的构造者, 因为<code>constructor</code> 是在对象的原型上, <code>constructor</code>原型的构造函数</p></li><li><p>手动原型继承</p><p>这是一些继承方案</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">C1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayC1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM C1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token constant">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token constant">C1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将C1的变量定义继承到了C2</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">C2</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">C1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍 将C1的方法继承到C2可行方案1(ES6前)</span><span class="token comment">// Object.setPrototypeOf(C2.prototype, C1.prototype); // 👍 将C1的方法继承到C2可行方案2(ES6)</span><span class="token comment">// C2.prototype = C1.prototype; // 👎错误方案1</span><span class="token comment">// C2.prototype = new C1(); // 👎错误方案2</span><span class="token class-name">C2</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayC2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM C2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// C1 &#123; x: 1, y: 2 &#125;</span>c<span class="token punctuation">.</span><span class="token function">sayC1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IM C1</span>c<span class="token punctuation">.</span><span class="token function">sayC2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IM C2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继承变量没得说, 直接 <code>apply()</code> 就行,但是有四个继承方法的方案</p><ul><li><p><code>C2.prototype = Object.create(C1.prototype);</code>这是在ES6之前的方案</p><p><code>Object.create()</code> 方法用于创建一个新对象,并使用参数对象来作为新创建对象的原型</p><p>一个简易的 <code>create</code> 实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Object.setPrototypeOf(C2.prototype, C1.prototype);</code>:<code>ES6</code> 新增的解决方案</p></li><li><p><code>C2.prototype = C1.prototype;</code> 会造成修改<code>C2.prototype</code> 时直接修改了 <code>C1.prototyoe</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">C1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM C1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token constant">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token constant">C1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将C1的变量定义继承到了C2</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">C2</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">C1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token class-name">C2</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM C2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IM C2</span>c2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IM C2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>C2.prototype = new C1();</code> 不推荐这个方法, 原因是</p><ul><li><code>C2</code> 的原型上会有 <code>C1</code> 的变量</li><li>调用 <code>new C1()</code>构造函数可能产生副作用(如修改全局变量)</li></ul><p>如下是两者对比</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">C1</span> <span class="token punctuation">(</span><span class="token class-name">C2</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">C1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>版<span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object    <span class="token function-variable function">sayC1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM C1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token literal-property property">constructor</span><span class="token operator">:</span> ƒ <span class="token constant">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object<span class="token constant">C1</span> <span class="token punctuation">(</span><span class="token class-name">C2</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>版<span class="token punctuation">)</span>  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object    <span class="token function-variable function">sayC1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM C1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token literal-property property">constructor</span><span class="token operator">:</span> ƒ <span class="token constant">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span>Prototype<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> Object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p><strong>对象关联</strong></p><p>通过继承可以让两个对象关联起来. 如果只是想实现跨对象调用方法,这就显得比较麻烦了(因为要维护 <code>constructor/__proto__</code>),我们可以利用 <code>Object.create()</code> 实现两个对象的关联.实现关联后最好不要使用外部委托的调用模式, 即</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">sayF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> bar <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>bar<span class="token punctuation">.</span><span class="token function">sayF</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 外部委托</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而是采用内部委托</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">sayF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> bar <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>bar<span class="token punctuation">.</span><span class="token function-variable function">doSayF</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sayF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 内部委托</span><span class="token punctuation">&#125;</span>bar<span class="token punctuation">.</span><span class="token function">doSayF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样可以提高代码可读性与安全性</p><h3 id="面向委托与面向对象的设计">面向委托与面向对象的设计</h3><ul><li><p>传统的OOP编程:鼓励在继承时使用方法重写(和多态)覆盖父类更加抽象的方法</p></li><li><p>委托编程: 要求将两个对象当作协作的兄弟,当某个对象上没有方法时会要求另一个对象帮忙实现,此外委托编程还有一些特点</p><ul><li>变量直接存储在委托上: 因为被委托者只是将原型上的属性连接到了委托者,不会带被委托者的属性</li><li>被委托者方法创建的变量会直接存在委托者上: 调用时候一般是<code>委托者.方法()</code>, 此时 <code>this</code>被隐式绑定在了委托者上</li><li>不鼓励重写方法, 鼓励在委托者身上定义更加具有描述性的方法名:JavaScript 的原型链<code>[[put]]</code> 机制让重写很麻烦</li><li>不关注类与类之间的层次关系而是关心对象与对象之间的相互借用关系(拿来吧你🖐)</li><li>不得循环委托</li></ul><p><strong>反类化</strong></p><p>有的时候, 我们不需要类, 只是需要类上的方法,此时我们可以在用委托机制在不实例化父类的情况下使用类上的方法</p><p><strong>内省</strong></p><p>检查一个对象是不是一个构造函数的实例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token operator">...</span><span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token string">"b1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 让Foo和Bar互相关联</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">;</span><span class="token comment">// true</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token comment">// 让b1关联到Foo和Bar</span>b1 <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">;</span><span class="token comment">// true</span>b1 <span class="token keyword">instanceof</span> <span class="token class-name">Bar</span><span class="token punctuation">;</span><span class="token comment">// true</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span> <span class="token comment">//true</span>Foo<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>Bar<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一种更加脆弱的内省模式，但是在开发者上面用的很多</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>something<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> a1<span class="token punctuation">.</span><span class="token function">somethinf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="利用原型链的有趣写法">利用原型链的有趣写法</h3><h3 id="es6-的-class-语法"><code>ES6</code> 的 <code>class</code>语法</h3><p><strong>优点</strong>:</p><ul><li>通过 <code>supper</code> 基本杜绝了 <code>prototype</code>,并实现了多态</li><li>简洁的继承定义</li><li>不能声明属性, 只能声明方法</li></ul><p><strong>缺点</strong></p><ul><li><p>反词法</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> LoginController <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">errors</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 无需function</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>这是个语法糖, 编译后变为</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> AuthController <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">errors</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function-variable function">getUser</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>编译后 <code>getUser</code> 引用了一个匿名函数, 这意味着</p><ol type="1"><li>使调试时的栈追踪变得困难</li><li>使自引用（递归，事件绑定等）变得困难</li><li>使代码（稍稍）变得难于理解</li></ol></li><li><p>存在变量名与方法名之间的屏蔽, <code>supper</code>造成的隐式屏蔽</p></li><li><p>可以通过修改 <code>prototype</code> 的方法在 <code>class</code>定义后修改 <code>class</code> 定义</p></li></ul><h2 id="类型与语法">类型与语法</h2><h3 id="类型">类型</h3><p>JavaScript 是有类的, 但是 JavaScript 是一个动态若类型语言,我们没法说变量属于什么类型, 只能说变量对应的值是什么类型的.</p><p>内置类型有<code>null, undefined, boolean, number, string, object, symbol</code>,可以用 <code>typeof</code> 判断值的类型</p><p><code>typeof</code> 判断类型是存在部分特例</p><ul><li><p><code>typeof null === 'object'</code>, 这是 JavaScript 的一个小bug. 若确实需要检测 <code>null</code> 可以使用<code>!foo &amp;&amp; typeof foo === 'object'</code> 判定</p></li><li><p><code>typeof function () &#123;&#125; === 'function'</code>, 虽然函数是<code>Object</code> 的子类, 但是 <code>typeof</code>会特殊的返回<code>function</code> 而不是 <code>object</code>. 同时,函数的 <code>length</code> 是其形参的数量,形参的数量不包括剩余参数个数，仅包括第一个具有默认值之前的参数个数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// fun1.length = 1</span><span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// fun2.length = 2</span><span class="token keyword">function</span> <span class="token function">fun3</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// fun3.length = 3</span><span class="token keyword">function</span> <span class="token function">fun4</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// fun4.length = 3</span><span class="token keyword">function</span> <span class="token function">fun5</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// fun5.length = 0</span><span class="token keyword">function</span> <span class="token function">fun6</span><span class="token punctuation">(</span><span class="token parameter">a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// fun6.length = 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>typeof 未定义值 === 'undefined'</code></p></li></ul><p><strong><code>undefined</code> 与<code>undeclared</code></strong></p><ul><li>当我们访问一个已定义但是没有赋值的变量时, 会返回<code>undefined</code></li><li>当我们返回一个没有定义的(undeclared) 值时,<ul><li>若在是访问对象上的标识符, 会返回 <code>undefined</code>, (对象上<code>[[Get]]</code> 的保护机制)</li><li>否则抛出 <code>ReferenceError</code></li></ul></li></ul><p>但是 <code>typeof</code> 的保护机制会让 <code>undefined</code> 与<code>undeclared</code> 均返回 <code>undefined</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种保护机制可以让我们轻松的判断全局作用域上是否有某个属性, 方便外部JavaScript 模块加载时检测全局环境, 实现选择性加载</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> foo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong><code>void</code>关键字</strong></p><p><code>void</code> 表达式永远返回 <code>undefined</code> 值, 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>undefined</code> 与 <code>null</code></strong></p><p>一般用 <code>null</code> 表示空值, 用 <code>undefined</code>表示没有值.</p><p>比较特殊的是: <strong><code>null</code> 是一个关键字, 但是<code>undefined</code> 只是一个标识符, 他的值默认为undefined</strong>,所以以下代码是成立的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> demo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>t <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false, 因为 undefined 标识符对应的不是 undefined 值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span>t <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, 因为 void 0 返回的是 undefined 值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="值">值</h3><ul><li><p>数组</p><ul><li><p>删除元素:<code>delete a[1] / a.splice(1,1);</code>伪数组转数组</p><p>常见的伪数组有 <code>DOMList</code>, <code>arguments</code>,伪数组没有数组上的部分方法, 转换方法为(假设<code>foo -&gt; bar</code>)</p><ul><li>遍历伪数组元素</li><li><code>bar = Array.prototype.slice.call(foo);</code></li><li><code>bar = Array.from(foo);</code></li><li><code>bar = [...foo];</code></li></ul></li></ul></li><li><p>字符串</p><p>字符串不是字符数组, 两者身上的方法有差异</p><ul><li><p>字符串不可变</p><ul><li><p>字符串的值不可被外部修改</p><p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '123'</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token string">'123'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['1', '0', '3']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>字符串上的方法不得修改字符串的值(换而言之,调用字符串的方法只会返回新值, 而不会修改字符串原值)</p></li></ul></li><li><p>字符串可以使用部分字符数组的方法:</p><ul><li><p>字符串可以通过 <code>Array</code> 原型方法访问<code>Array.prototype.reverse.call(s)</code></p></li><li><p>若访问的方法会修改原字符串, 那么该方法将无法调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Cannot assign to read only property '0' of object '[object String]'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以先将字符串转换为数组在调用方法最后转回</p></li></ul></li></ul></li><li><p>数字</p><p>JavaScript 只有数字一个类型, 没有所谓整数小数之分. 数字全部使用 IEEE754 的 64 位版本实现</p><ul><li><p>简写规则</p><p>在书写字面量时, 可以省略前导与后继 <code>0</code>, 例如<code>0.12 === .12</code>, <code>12.0 === 12.</code></p><p>受简写规则影响, 部分方法调用是无效的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍 有效</span><span class="token number">0.12</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍 有效, 第二个点不可能是小数点</span><span class="token number">12.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👎 无效, JS会其为 (12.)toFixed</span><span class="token number">12.</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍 有效, 第一个点是简写, 第二个点是链式调用</span><span class="token number">12</span> <span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 👍 有效, 注意数字与点之间有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>格式化方法</p><ul><li><p><code>toFixed</code> 指定小数位数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42.59</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "43"</span>a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.6"</span>a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.59"</span>a<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.590</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>toPrecision</code> 指定有效位数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">42.59</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "4e+1"</span>a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "43"</span>a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.6"</span>a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.59"</span>a<span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "42.590"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>运算误差: JavaScript 自带 <code>Number.EPSILON</code>作为运算误差, 这个值一般为 <spanclass="math inline">\(2^{-52}-1\)</span></p></li><li><p>整数检测: <code>Number.isInteger / Number.isSafeInteger</code>可分别用于整数, 安全整数检测</p></li><li><p>参与位运算: 虽然 IEEE 754 允许最大安全整数为 <spanclass="math inline">\(2^{53}-1\)</span>, 但是, 在执行位运算时, 只有后 32位数会参与运算, 其余位将被忽略. 借助此特性, 可以通过 <code>a | 0</code>将 <code>a</code> 转为 32 位整数</p></li><li><p><code>NaN</code>: <code>NaN</code> 是一个数值类型, 但不是数字.当出现 Number 运算结果无法返回数字时就会返回 <code>NaN</code>. 所以,<code>NaN</code> 可以用来提示数值运算出错</p><p><code>NaN !== NaN</code>, 这是 JavaScript 唯一自己与自己不等的元素.判断 <code>NaN</code> 可以采用以下方法</p><ul><li><code>Number.isNaN(a)</code>: 利用 ES6 的新方法判断 <code>a</code>是不是 <code>NaN</code></li><li><code>a !== a;</code>: 反向利用其反自反的特性判断 <code>a</code>是不是 <code>NaN</code></li><li><code>Object.is(NaN, a)</code>: 利用新方法判断 <code>a</code> 是不是<code>NaN</code> (后面解释实现)</li></ul></li><li><p><code>0 &amp; -0</code></p><p>部分场景需要使用负号表示方向, JavaScript 中有 <code>0</code> 与<code>-0</code>.</p><ul><li><p><code>-0 === 0</code></p></li><li><p>可以通过字面量, 非加减的表达式, 类型转换产生<code>-0</code></p></li><li><p><code>-0</code> 转为字符串后会失去负号</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>'-0'</code> 字符串转为非字符串时会保留负号</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token string">'-0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'-0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'-0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>判定 <code>-0</code></p><ul><li><p>手动实现方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isNegZero</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> v <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">/</span> v <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Object.is(-0, a)</code>: 利用新方法判断 <code>a</code>是不是 <code>-0</code></p><p>这个 <code>is</code> 方法看起来很神奇, 其实就是特判了<code>NaN</code> 与 <code>-0</code> 的 <code>===</code></p></li></ul></li></ul></li><li><p><code>Infinity</code></p><p>设有限正数 <code>a</code></p><ul><li>与有限数加减法: <code>Infinity (+/-) a === Infinity</code></li><li>与 <code>Infinity</code> 加减法:<code>Infinity - Infinity === NaN</code>,<code>Infinity - -Infinity === Infinity</code></li><li>与有限非0数乘除法: <code>Infinity (*//) a === Infinity</code>,<code>Infinity (*//) -a === -Infinity</code></li><li>与0乘除法: <code>a/0 === Infinity</code>,<code>-a/0 === -Infinity</code>, <code>Infinity / 0 === Infinity</code>,<code>Infinity * 0 = NaN</code>,</li><li>与 <code>Infinity</code> 乘除法:<code>Infinity * Infinity === Infinity</code>,<code>Infinity / Infinity === NaN</code></li></ul></li></ul></li></ul><h3 id="原生函数">原生函数</h3><p>在写 TS 时会遇到一个问题, 描述类型的时候应该用小写(如:<code>string</code>), 而不能用大写(如: <code>String</code>),因为大写的是构造函数.</p><p>JavaScript 内建的函数(原生函数)有:<code>String, Number, Boolean, Array, Object, Function, RegExp, Date, Error, Symbol</code>.</p><p><strong>封装</strong></p><ul><li><p>对于基本类型非 <code>Object</code>类型(<code>String, Number, Boolean, Symbol</code>)的值</p><p>基本类型值与通过构造函数创建的值不同.通过构造函数创建的值是一个对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token punctuation">;</span><span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [String: 'aaa']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时对象永远为 <code>true</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> b1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">const</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1 <span class="token operator">===</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1 <span class="token operator">==</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起来基本类型值与对象还是有区别的, 对象中封装了基本类型值.基本类型值本身只是一个基本类型值, 上面没有方法(如:<code>s.length</code>),但是当基本类型值要访问其对应原生函数对象上的方法时, <strong>JavaScript会自动将基本类型值封装为对象</strong>. 封装为对象当然要耗费时间,但是<strong>不要为此故意将字面量声明为对象</strong>, JavaScript引擎会对代码做性能调优并决定在什么时候封装对象.</p></li><li><p>对于基本类型为 <code>Object</code>类型(<code>Array, Object, Function, RegExp, Date, Error</code>)的值</p><p>使用字面量创建(如果可以)与使用函数创建是完全一样的</p><ul><li><p><code>Array</code></p><ul><li><p>创建 <code>Array</code> 时可以不带 <code>new</code></p></li><li><p>通过 <code>Array(n)</code> 可以创建包含 <code>n</code>个空值(<code>empty item</code>)的数组</p></li><li><p>直接改大数组的 <code>length</code> 会导致产生空值</p></li><li><p>空值不是 <code>undefined</code>, 不同函数对空值与<code>undefined</code> 的处理不同 <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &lt;3 empty items> ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 0, 1, 2 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p><code>join</code> 不考虑空值的存在, 直接通过 <code>arr.length</code>遍历每个元素. 而 <code>map</code> 在处理空值时会直接跳过空值</p><p>应此, <code>Array(n)</code> 创建的空值数组是危险的, 可以使用<code>Array.apply(null, &#123; length: n &#125;)</code> 创建长度为 <code>n</code>的 <code>[undefined...]</code> 数组</p></li></ul></li><li><p><code>Object, Function, RegExp</code></p><ul><li>不建议使用构造函数构造这些对象,可以直接使用<code>&#123;&#125;, function, //</code> 构建</li><li>对于需要修改的正则表达式可以使用 <code>RegExp</code> 构建(但是<code>RegExp</code> 的效率不及 <code>//</code>)</li></ul></li><li><p><code>Date, Error</code></p><ul><li>无法用字面量创建这些值</li><li><code>new Date()</code> 不带参数默认使用当前时间</li><li>不带 <code>new</code> 的 <code>Date()</code> 无论参数如何,都返回日期字符串</li><li>若只是想获得当前时间戳可以使用静态方法 <code>Date.now()</code></li><li>创建 <code>Error</code> 时可以不带 <code>new</code></li></ul></li></ul></li><li><p>封装对象的 <code>[[class]]</code>: 所有 <code>typeof</code> 返回<code>object</code> 的变量上面都有一个 <code>[[class]]</code>,表示对象的"子类型"</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//...</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Number]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Boolean]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Array]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>拆封</strong></p><p>可以使用 <code>obj.valueof()</code> 获取对象封装的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aaa</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="强制类型转换">强制类型转换</h3><p>JavaScript 强制类型转换只支持转化为基本类型值</p><p><strong>抽象值操作</strong></p><p>抽象类型函数是类型中内置的一些个怪方法, 在类型转换时 JavaScript会调用这些函数实现对应类型转换</p><ul><li><p><code>ToString</code> 转换为 <code>String</code></p><ul><li><p>普通对象: 对象的 <code>toString</code> 默认返回对象的<code>[[class]]</code> 值</p></li><li><p>数组: <code>Array</code> 的 <code>toString</code> 被重新定义过,等价于 <code>return this.join(',')</code>, 注意: 没有<code>[]</code></p></li><li><p>JSON对象:</p><ul><li><p><code>JSON.stringify</code></p><p><code>JSON.stringify(value[, replacer [, space]])</code>有两个可选参数</p><ul><li><p><code>replacer</code> 若是函数, 每个属性都会经过该函数的转换,若是一个数组，则只有包含在这个数组中的属性名才会被转换, 若是<code>null</code> 或者未提供，则对象所有的属性都会被序列化.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> unSafe <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// &#123;"a":1,"c":[1,3,null]&#125;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>unSafe<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>k <span class="token operator">===</span> <span class="token string">'b'</span> <span class="token operator">||</span> k <span class="token operator">===</span> <span class="token string">'2'</span> <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>space</code>: 若为数字则为每级缩进指定字符, 若为字符串,则将字符串前<strong>十</strong>位作为缩进字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;</span><span class="token comment">//   "a": 1,</span><span class="token comment">//   "c": [</span><span class="token comment">//     1,</span><span class="token comment">//     3,</span><span class="token comment">//     4</span><span class="token comment">//   ]</span><span class="token comment">// &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;</span><span class="token comment">// 123"a": 1,</span><span class="token comment">// 123"c": [</span><span class="token comment">// 1231231,</span><span class="token comment">// 1231233,</span><span class="token comment">// 1231234</span><span class="token comment">// 123]</span><span class="token comment">// &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'1234567890-='</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;</span><span class="token comment">// 1234567890"a": 1,</span><span class="token comment">// 1234567890"c": [</span><span class="token comment">// 123456789012345678901,</span><span class="token comment">// 123456789012345678903,</span><span class="token comment">// 123456789012345678904</span><span class="token comment">// 1234567890]</span><span class="token comment">// &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>toJSON</code></p><p>在 <code>stringify</code> 时, 若对象中存在非 JSON安全值(<code>undefined / function / symbol / 循环引用</code>)会忽略或报错,若忽略值在数组中则会采用 <code>null</code> 代替</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">norm</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token comment">// 正常</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// 跳过</span>  <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 跳过</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 跳过</span>  <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 正常</span>    <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token comment">// null</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">//null</span>    <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// null</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token literal-property property">e</span><span class="token operator">:</span> t<span class="token punctuation">,</span> <span class="token comment">// 报错</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了让调用者可以自定义非 JSON 安全值的转换行为,<code>JSON.stringify</code> 实际进行了几个过程,先执行<code>replacer</code>, 再执行对象的 <code>toJSON</code> 方法,再对返回值的 <code>toString</code></p><p>对象的 <code>toJSON</code> 方法应该返回一个 JSON 安全的对象方便<code>toString</code> 调用. 该函数只会调用一次, 并且没有参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> unSafe <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>  <span class="token function-variable function">b</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">'UNDEFINED'</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'FUNCTION'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>unSafe<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;"a":"UNDEFINED","b":"FUNCTION","c":1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p><code>toNumber</code> 转换为 <code>Number</code></p><ul><li><p>特殊的:<code>true =&gt; 1, false =&gt; 0, undefined =&gt; NaN, null =&gt; 0</code></p></li><li><p>字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12, 10进制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'012'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12, 忽略8进制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'0x12'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 18, 接受16进制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'0b111'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7, 接受2进制</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'0b121'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN, 出现非法字符返回NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'1a2b3c4'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN, 出现非法字符返回NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对象 / 数组 / 基本类型封装对象:</p><ul><li>对于基本类型封装的对象, 直接提取基本类型.若转换后非数值则在转换为数字.</li><li>对于其他对象, 若对象定义了 <code>valueOf</code> 函数则使用<code>valueOf</code> 函数转换, 否则使用 <code>toString</code> 转换.若转换后非数值则在转换为数字.</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"42"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"42"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span> <span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "42"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">Number</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 42</span><span class="token function">Number</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 42</span><span class="token function">Number</span><span class="token punctuation">(</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 42</span><span class="token function">Number</span><span class="token punctuation">(</span> <span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token function">Number</span><span class="token punctuation">(</span> <span class="token punctuation">[</span> <span class="token string">"abc"</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>toBoolean</code> 转换为 <code>Boolean</code></p><p>规定假值: <code>undefined</code>, <code>null</code>,<code>false</code>, <code>+0 / -0 / NaN</code>, <code>''</code>,其他都是真值 部分被废弃 / 非标准的 JavaScript 也会被标记为<code>false</code> (例如 <code>document.all</code> 已经被废弃,在老版浏览器中依然存在 <code>!!document.all === true</code>,在新版浏览器中为 <code>!!document.all === true</code>,这可以用于浏览器版本判定)</p></li></ul><p><strong>强制类型转换</strong></p><ul><li><p><code>String &amp; Number</code></p><ul><li><p><code>+var</code> 可以实现 <code>String</code> 到<code>Number</code></p></li><li><p><code>~~var</code> 可以实现将值按位反转再翻回来从而实现小数转 32位整数.</p><p>与 <code>floor / cell</code> 不同, 上述函数会做向上或下取整, 但是<code>~~</code> 会直接去尾</p><p>同时 <code>~</code> 相当于取反码, <code>-1</code> 的反码为<code>0</code>. 而 <code>-1</code> 经常被用作错误标记(如<code>indexof</code>). 所以, 所以经常用于判断值是否为<code>-1</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">'asdfghjkl'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">~</span>s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'find it'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'not find  f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>Number &amp; parseInt</code>: <code>Number</code>构造函数可以读入纯数字的字符串并返回 <code>Number</code> 包装对象. 而<code>parseInt</code> 读入字符串并解析数字直到遇到非数字停止.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">'42'</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">'42px'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不指定进制, <code>parseInt</code> 的行为也不一样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'0x10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 16 自动识别 16 进制</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'0b10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 自动识别 2 进制</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'010'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 不识别 8 进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同时, 两函数在遇到非字符串输入时会先转换为 <code>String</code>在转换</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'42px'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'42'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种转换会带来一些"半隐式"的转换问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 18 ( Infinity 会被转换为 'Infinity', 'I' 在 19 进制中是 18)</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">0.000008</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 (这个数会被转换为 '0.000008')</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">0.0000008</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8 (这个数会被转换为 '8e-7')</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 250 (会被转换为 'false', 'fa' 都是 16 进制数)</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>parseInt<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15  (会被转换为 'function..', 'f' 是 16 进制数 )</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>+</code> 二元加法造成的类型转换:若加法两边有字符串就将两边转换为字符串(与直接转字符串不同, 流程是先<code>toValue</code> 再 <code>toString</code> )执行字符串拼接,否则先转换为 <code>Number</code> 再执行数值相加.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">'42'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42: 直接 toString = '42'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4: 先 valueOf = 4 然后 toString = '4'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5: valueOf = 4, 4 + 1 = 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>true =&gt; 1, false =&gt; 0</code></p></li></ul></li><li><p><code>Boolean</code></p><ul><li><p><code>!!</code> 可以用于转换类型为 <code>Boolean</code></p></li><li><p><code>if / for / while / do...while / ?:</code> 表达式会自动转换<code>Boolean</code></p></li><li><p><code>|| / &amp;&amp;</code>的<strong>左</strong>操作数在作条件判断时会自动转换.这两个逻辑运算符的返回值并不一定是 <code>Boolean</code>而是根据短路原则直接返回第一或第二个元素</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">||</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a 转为 false, 直接返回 b</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token operator">||</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b 转为 true, 直接返回 b</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a 转为 false, 直接返回 a</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// b 转为 true, 直接返回 a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p><strong><code>==</code> 类型转换</strong></p><p><code>===</code> 是不进行类型转换的相等, 不可能产生类型转换,类型转换只会发生在 <code>==</code></p><ul><li><p>特殊情况: <code>NaN != NaN</code>, <code>-0 == 0</code></p></li><li><p><code>String == Number</code>: 将 <code>string</code> 转为<code>toNumber(string)</code> 后比较</p></li><li><p><code>Boolean == *</code>: 将 <code>boolean</code> 转为<code>toNumber(boolean)</code> 后比较</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// true</span><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token number">NaN</span><span class="token punctuation">;</span><span class="token comment">// false</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>undefined == null</code></p></li><li><p>对象与非对象: 将对象转为基本类型值再比较. 以下是怪情况</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">valueOf</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span> <span class="token number">42</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Yep, this happened."</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>奇葩情况</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// true, 右侧 ![] => false, [] => '' => false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, '\n' / '' / 各种unicode空格 => 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token string">""</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// true -- 噢！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总之, <code>==</code> 两边不要写 <code>true / false</code>, 避免使用<code>[], '', 0</code></p></li><li><p>各种情况比较表: <ahref="dorey/JavaScript-Equality-Table">dorey/JavaScript-Equality-Table</a></p><p><img src="./你不知道的JavaScript学习/3-1.png" /></p></li></ul><p><strong>比较符</strong></p><p>JavaScript 只定义了 <code>&lt;</code>. <code>a &gt; b</code>会被自动转为 <code>b &lt; a</code>, <code>a &lt;= b</code> 会被转换为<code>!(b &lt; a)</code>.</p><p>在比较时, 双方会先转换为基本数值类型再比较</p><h3 id="语法">语法</h3><p><strong>结果值</strong></p><p>在 DevTools 中, 在输入语句后即使没有 <code>Console</code> 语句,DevTool 也会输出一个结果, 这里显示的是语句的结果值.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">></span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;</span> <span class="token keyword">undefined</span><span class="token operator">></span> a<span class="token operator">&lt;</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在正常代码中, 如果一个语句中只有 <code>a</code>, JavaScript是不会输出结果的, 但是 DevTool 会输出这个语句的结果值</p><ul><li><p>声明语句 <code>let a = 1</code> 有结果值, 但是会被JavaScript引擎屏蔽, 最终显示 <code>undefined</code></p></li><li><p>赋值语句 <code>a = b</code> 的结果值为赋的值(但是不是<code>a</code> ! 只是 <code>a</code> 对应的右值!)</p><p>由于赋值语句的结果值是赋的右值, 可以借助这个特性实现链式赋值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>值得注意的是, 声明语句的结果值被屏蔽为了 <code>undefined</code>.所以, 不能链式声明</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 👎 静默失效</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>代码块 <code>&#123;&#125;</code> 的结果值是代码块的最后一个语句 /表达式</p></li></ul><p>在编程中, 可以使用 <code>eval</code> 获取结果值(但是不建议),未来可能可以通过 <code>do</code> 获取结果值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    b <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>表达式的结果是右值</strong></p><p>表达式的结果值是右值, 这就意味着这样的写法是非法的</p><ul><li><code>++a++</code>: 相当于 <code>++(a++)</code>, 而 <code>a++</code>返回的是右值, 无法对右值做 <code>++</code></li><li><code>(a || b) = 1</code>: <code>||</code> 是选择符号,看起来的意思是若 <code>a</code> 是假值则执行 <code>b = 1</code> 否则<code>a=1</code>. 但是 <code>(a || b)</code> 返回的是右值</li></ul><p><strong>多重语法</strong></p><ul><li><p><code>&#123;&#125;</code>: 可以是对象也可以是代码快, 这就导致了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 结果值: "[Obejct Obejct]" (&#123;&#125; 前有 +, 所以&#123;&#125;是一个对象)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 结果值: 0 (&#123;&#125;前啥也没有, 所以是个代码块, 其等价于 +[], 格式转换为 0)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// a == "[Obejct Obejct]" (&#123;&#125; 前有 +, 所以&#123;&#125;是一个对象)</span>b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// b == [Obejct Obejct]" (&#123;&#125; 前有 =, 所以&#123;&#125;是一个对象)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时, 代码块内属性的含义也变了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 此时是一个对象</span>a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">// 对象中的一个属性</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 此时是一个简单的代码块</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token comment">// 代码快中的标签</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标签(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9sYWJlbA==">MDN<i class="fa fa-external-link-alt"></i></span>)类似于C 语言中 <code>goto</code> 的 label, 与之不同的是 JavaScript 中没有<code>goto</code>, 只能通过 <code>continue / break</code> 跳转,同时不能对非循环的块代码执行 <code>continue</code></p><p>同时注意, 标签名前后不能有双引号, 即</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;foo&quot;: 1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>是不合法的(震惊 JavaScript 竟然不完美兼容 JSON!)</p></li></ul><p><strong>优先级与结合性</strong></p><ul><li>优先级: <code>! &gt; &amp;&amp; &gt; || ?:</code> (<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL09wZXJhdG9yX1ByZWNlZGVuY2UjJUU2JUIxJTg3JUU2JTgwJUJCJUU4JUExJUE4">详见MDN<i class="fa fa-external-link-alt"></i></span>)</li><li>结合性: <code>?:</code> 是右结合的 (<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvT3BlcmF0b3JzL09wZXJhdG9yX1ByZWNlZGVuY2UjJUU2JUIxJTg3JUU2JTgwJUJCJUU4JUExJUE4">详见MDN<i class="fa fa-external-link-alt"></i></span>)</li></ul><p><strong>自动分号(ASI)</strong></p><p>JavaScript 会自动在行末加 <code>;</code>,这可以防止很多不经意间造成的问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">do</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里在语法中必须加 ; 得益于 ASI, 程序员可以不用加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>暂时性死区</strong></p><p>就是在变量声明前使用变量(针对 <code>let</code>, <code>var</code>有声明提升不会出事). 提前使用会造成 <code>Reference Error</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 啥事没有</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span><span class="token keyword">let</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>还有个小例外</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined, 没有报错!</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span><span class="token keyword">let</span> b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>函数参数</strong></p><p>在非严格模式下函数参数列表中标识符会与 <code>arguments</code>变量建立"连接"关系</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只修改了 a , 但是 arguments[0] 连接到了 a, 所以依然被修改了...</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2,2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无需考虑函数默认值问题, 启用默认值会自动启用函数严格模式</p><p><strong>try...finally</strong></p><p><code>finally</code>块包含的语句在<code>try</code>块和<code>catch</code>之后,无论 <code>try</code> 是否抛出异常 <code>finally</code> 子句都会执行.这里的 <code>finally</code> 就像一个回调一样, 执行顺序为<code>try -&gt; (catch) -&gt; finally -&gt; 函数的正常功能</code></p><ul><li><p>当 <code>try</code> 中出现 <code>return</code> 时</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 虽然 try return 了, 但是由于 finally 的存在, return 会被"暂存" 到finall 结束</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当 <code>try / catch &amp; finally</code> 中出现<code>return</code> 时</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// finally 的 return 会覆盖 try 的</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// console => 0, 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// finally 的 return 会覆盖 catch 的</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// console => 0, 1, 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>该规则同样适用于 <code>continue</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 0, 1, 2, 3, 4, 5(没有*)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最迷惑的是与 <code>break</code> 一起使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">lab</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">break</span> lab<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>switch</strong></p><ul><li><p>最简形式: <code>case</code> 接一个值, JavaScript 会将<code>a</code> 与 case 值做 <code>===</code> 比较</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token comment">// a == 1 成立, 但是 a === 1 不成立</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token boolean">true</span><span class="token operator">:</span> <span class="token comment">// 走这里了</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果像做一些类型转换, 可以将 <code>switch</code> 的值换成<code>true</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> a <span class="token operator">==</span> <span class="token number">1</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 走这里了</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> a <span class="token operator">==</span> <span class="token boolean">true</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果要用 <code>switch (true)</code> 的写法的话, 需要保证计算<code>case</code> 的计算结果一定是 <code>true</code> 而不是可以转换为<code>true</code>, <code>switch</code> 做的是 <code>===</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token string">'demo'</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> a <span class="token operator">&amp;&amp;</span> s<span class="token operator">:</span> <span class="token comment">// &amp;&amp; 返回 b 而 b !== true</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 走这里了</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="异步">异步</h2><h3 id="异步-1">异步</h3><p><strong>控制台异步</strong></p><p>实际上 <code>console.*</code> 系列函数并不是 ES 标准语法,其是由宿主环境决定的. 而宿主环境经常会为降低 I/O 开销而延迟输出, 这种I/O 异步的策略会造成输出"出错"</p><p><strong>程序执行时机</strong></p><p>JavaScript 中的代码是分块的(如一个个函数),我们希望可以干预函数执行的顺序与时机(如 Ajax 请求成功后再执行某个函数,先执行别的函数等一会儿再执行某个函数), 有两种常见方法</p><ul><li>回调函数</li><li><code>setTimeout</code> 等异步API</li></ul><p><strong>调用栈, 事件循环与任务队列</strong></p><p>JavaScript 是一个单线程的异步编程语言,让一个单线程的语言实现多任务异步是有点麻烦的. JavaScript搞了事件循环机制, 包括了调用栈, 任务队列, 事件循环</p><ul><li><p>调用栈(Call Stack): 存档代码执行时的 ConText(如函数嵌套)</p></li><li><p>事件循环: 每当调用栈清空(当前工作结束)时,事件循环会向任务队列首部取任务, 放调用栈执行</p></li><li><p>任务队列: 当有异步任务需要执行(如:定时器<strong>到期</strong>)时, JavaScript 会向任务队列中压入任务.任务队列又分宏队列与微队列, 不同的任务会放入不同的队列</p><p>宏队列</p><table><colgroup><col style="width: 83%" /><col style="width: 9%" /><col style="width: 6%" /></colgroup><thead><tr class="header"><th></th><th>浏览器</th><th>Node</th></tr></thead><tbody><tr class="odd"><td>整体代码(script)</td><td>✅</td><td>✅</td></tr><tr class="even"><td>UI交互事件</td><td>✅</td><td>❌</td></tr><tr class="odd"><td>I/O</td><td>✅</td><td>✅</td></tr><tr class="even"><td>setTimeout<br />(setTimeout(,0)是常用的放队尾的方法)</td><td>✅</td><td>✅</td></tr><tr class="odd"><td>setInterval</td><td>✅</td><td>✅</td></tr><tr class="even"><td>setImmediate</td><td>❌</td><td>✅</td></tr><tr class="odd"><td>requestAnimationFrame</td><td>✅</td><td>❌</td></tr></tbody></table><p>微队列</p><table><thead><tr class="header"><th></th><th>浏览器</th><th>Node</th></tr></thead><tbody><tr class="odd"><td>process.nextTick</td><td>❌</td><td>✅</td></tr><tr class="even"><td>MutationObserver</td><td>✅</td><td>❌</td></tr><tr class="odd"><td>Promise.then catch finally</td><td>✅</td><td>✅</td></tr></tbody></table></li></ul><p>总流程如下</p><ol type="1"><li>从宏任务队列中，按照<strong>入队顺序</strong>，找到第一个执行的宏任务，放入调用栈，开始执行；</li><li>执行完<strong>该宏任务</strong>下所有同步任务后，即调用栈清空后，该宏任务被推出宏任务队列，然后微任务队列开始按照入队顺序，依次执行其中的微任务，<strong>直至微任务队列清空为止</strong>；</li><li>当微任务队列清空后，一个事件循环结束；</li><li>接着从宏任务队列中，找到下一个执行的宏任务，开始第二个事件循环，直至宏任务队列清空为止。</li></ol><p>这里有几个重点：</p><ul><li>当我们第一次执行的时候，解释器会将整体代码<code>script</code>放入宏任务队列中，因此事件循环是从第一个宏任务开始的；</li><li>如果在执行微任务的过程中，产生新的微任务添加到微任务队列中，也需要一起清空；微任务队列没清空之前，是不会执行下一个宏任务的。</li></ul><p><strong>异步并行</strong></p><p>异步与并行不一样, 异步是允许指定代码块的运行时机,并行是多个代码块同时运行. 更加形象的说, 异步就是维护一个事件循环,并行就是维护一堆事件循环.</p><p>异步与并行都会带来不确定性,异步的不确定性是不知道任务会在什么时候被塞到队列尾部,而并行的不确定性是不确定指令之间的执行顺序</p><p>所幸, JavaScript 是单线程的异步语言, 这意味着 JavaScript调度最小单位是单个任务(函数要么全运行要么不运行,我们将其成为<strong>完整运行</strong>), 不会出现抢占式调度</p><p><strong>并发</strong></p><p>将常见的并发模式分为三种</p><ul><li><p>非互动式: 进程间不共享内存</p></li><li><p>互动式: 进程间共享内存</p><p>这会导致由于未知执行顺序造成的资源竞争</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ajax(..) 是某个包中任意的Ajax函数</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.1"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.2"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般解决方案有</p><ul><li><p>编号</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>url <span class="token operator">==</span> <span class="token string">"http://some.url.1"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>url <span class="token operator">==</span> <span class="token string">"http://some.url.2"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// ajax(..) 是某个包中任意的Ajax函数</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.1"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.2"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置大门(只有两个进程都完成才能继续)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> a <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> b <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ajax(..) 是某个包中任意的Ajax函数</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.1"</span><span class="token punctuation">,</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.2"</span><span class="token punctuation">,</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置"门闩"(即函数只给特定次调用者用)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> a <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> a <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ajax(..) 是某个包中任意的Ajax函数</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.1"</span><span class="token punctuation">,</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.2"</span><span class="token punctuation">,</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>协作式</p><p>对于计算量很大的同步任务, 经常将其拆解为异步的多个不冲突任务以放置JavaScript 运行阻塞</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// `response(..)`从Ajax调用收到一个10000000000的数组, 要同步执行一定会花很多时间</span><span class="token keyword">function</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>  data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ajax(..) 是某个包中任意的Ajax函数</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.1"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.2"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将其分解</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 一次只处理1000件</span> <span class="token keyword">var</span> chunk <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>  <span class="token comment">// 制造一个新的变形过的数组，所有的`data`值都翻倍</span>  chunk<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 异步规划下一个批处理</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 通过 setTImeout 将任务再次放入队尾</span>   <span class="token function">response</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// ajax(..) 是某个包中任意的Ajax函数</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.1"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span> <span class="token string">"http://some.url.2"</span><span class="token punctuation">,</span> response <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>语句顺序</strong></p><p>JavaScript 编译器在执行代码前会做代码优化, 这可能改变语句执行顺序,但是这些改变都是安全的, 不必担心</p><h3 id="回调">回调</h3><p>JavaScript 是单线程的,其实现异步的最基本模式就是让主线程在不同任务上下文之间快速切换.基础的异步模式有回调与 <code>Promise</code>.</p><p><strong>回调的问题</strong></p><p>回调会让代码变得难以预测, 跟踪, 调试. 其存在多种问题</p><ul><li><p>回调地狱</p><p>称多层嵌套回调函数的代码为回调地狱.回调地狱不仅会造成代码形式上的难以理解,更重要的是在同步异步函数混杂的回调嵌套代码中,代码的行为与异步函数的执行时机往往是多样化的且容易被搞错.</p></li><li><p>信任问题</p><p>当使用第三方库异步函数时, 我们需要为第三方函数传入回调.而我们完全不清楚第三方库触发回调的时机, 次数, 三方函数出错后行为.过早过晚过多或出错后触发回调将会带来未知的问题.使用者在设计回调时需要考虑回调在不同时机调用的处理问题. 同时,称这种将函数执行时机交给三方函数的行为称为: 控制权反转</p></li></ul><p><strong>解决</strong></p><ul><li><p>解决回调地狱: 链式回调</p><p>将嵌套式回调</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转为链式回调</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do something</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>doB<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">doB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do something</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span>doC<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">doC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// do something</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这让代码在形式上看起来清晰了一点, 但是没有根本解决问题.函数的执行还是难以追踪的.</p></li><li><p>解决信任问题: <code>Error-Else</code> 风格</p><p>也称 Node.JS 分格. 在设计回调函数时, 传入第一个参数为 Error 信息.若函数出错, 在执行回调时候将第一个参数设置为 Error 信息,回调一旦看到第一个函数非假就知道上层函数出错了, 若 Error 为假,则从第二个参数开始获取传入信息.</p></li><li><p>解决信任问题: 借用并发解决方案</p><p>为解决回调时机问题, 可以借助并发思路, 通过设置 flag 识别运行时机,解决运行时机问题</p></li></ul><h3 id="promise">Promise</h3><p>回调存在的两个问题: 信任问题 &amp; 回调地狱(异步代码难以理解). 在 ES6中, Promise &amp; 生成器分别解决了这两个问题.</p><p><strong>鸭子类型</strong></p><p>如何判断一个对象是 Promise 对象呢? JavaScript的判断方式是检查对象是否是 "thenable" 的, 即: 对象是否具有<code>then</code> 方法. <strong>任何有 <code>then</code> 方法的对象都是Promise</strong></p><p>显然, 这会造成严重的兼容问题, 老代码中定义 <code>then</code>的对象都莫名其妙变成了 Promise</p><p><code>Promise.resolve</code> 可以一定程度上解决这一问题.该函数不仅可以返回一个 Promise, 更重要的是其可以将参数中的<code>thenable</code> 转换为非 <code>thenable</code></p><p><strong>Promise 解决了信任问题</strong></p><ul><li><p>控制权反转: 在回调中, 我们将回调交给三方函数.三方函数的执行是不可预测的. 而在 Promise 中,三方异步函数只在结束时向我们返回执行结果 / 错误信息.</p></li><li><p>调用过早: 在回调中, 可能出现异步函数结束前调用回调的问题, 在Promise 中, 即使后继函数被注册, 也要等到 Promise 被决议后的下一个 trick再执行</p></li><li><p>调用过晚: 在回调中, 可能会出现后注册的回调先执行的问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'TEST1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'TEST2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hook'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// TEST1</span><span class="token comment">// Hook         // 👎</span><span class="token comment">// TEST2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Promise 中, 后继函数的执行顺序是严格按照注册顺序来到</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'THEN 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hook'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'THEN 2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// THEN 1</span><span class="token comment">// THEN 2</span><span class="token comment">// Hook        // 👍</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>超时不调用: 在回调中, 如果三方函数不调用, 我们也没办法, 但是在Promise 中, 可以通过 <code>Promise.race()</code> 的方式解决这一问题</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">timeOutError</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'TIME OUT'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">timeOutError</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'T1 FUL: '</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'T1 REJ: '</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">timeOutError</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'T2 FUL: '</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'T2 REJ: '</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// T2 FUL:  OK</span><span class="token comment">// T1 REJ:  TIME OUT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>调用次数不正确: Promise 一旦确定就无法更改(之后的<code>resolve</code> / <code>reject</code> 静默失效), 通过<code>then</code> 注册的函数也只能执行一次</p></li><li><p>传参异常: 在回调中可能出现参数长度不正确, 但是 Promise只允许传入一个参数, 多传的参数静默失效</p></li><li><p>异常处理: 在回调中, 如果三方函数出现异常, 回调函数可能不执行.但是在 Promise 中, 若执行出现异常, Promise 会自动执行 reject,捕获异常并传递到后继函数.</p></li></ul><p><strong>为什么是 <code>resolve</code> 而不是<code>fulfill</code></strong></p><p>Promise 的状态有 <code>pending</code> &amp; <code>fulfilled</code>&amp; <code>rejected</code>, 但是我们在构造 Promise回调的时候习惯上写的却是 <code>resolve</code> &amp; <code>reject</code>.为什么这里不用 <code>fulfill</code> &amp; <code>reject</code> 呢?</p><p><code>fulfilled</code> 表示 Promise 被接受, 而 <code>rejected</code>表示被拒绝. 然而 Promise 构造函数上的 <code>resolve &amp; reject</code>功能却不是这样的</p><ul><li><p><code>reject</code> 调用会让 Promise 无条件变为<code>rejected</code>, 且原因为传入的参数</p></li><li><p><code>resolve</code> 调用会让 Promise 变为调用<code>Promise.resolve</code> 后的结果. 如果传入的是一个 Error, Promise将变为 <code>rejected</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span>Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'FLU'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'REJ'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// REJ</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说 <code>resolve</code> 不会让 Promise 无条件变为<code>fulfilled</code>, 这也就是不用 <code>fulfill</code>的原因</p></li></ul><p><strong>链式调用</strong></p><ul><li>Promise 每次调用 <code>then</code> 都会创建并返回一个 Promise 替代原Promise</li><li>若 <code>then</code> 中函数返回非 Promise, 则自动为其包上<code>Promise.resolve</code>. 不返回则相当于返回 <code>undefined</code>即返回 <code>Promise.resolve(undefined)</code></li><li><code>then</code> 中函数的返回值将被用作下一个 <code>then</code>中函数的参数.</li><li><code>then</code> 中的函数抛出错误, 并不会引全局错误, 而是会返回<code>Promise.reject</code> 交由下一个 <code>then</code> 处理.</li><li><code>then</code> 函数有两个默认值, 第一个会将收到的参数重新<code>resolve</code> 传给下一级,第二个会将传入的参数重新作为错误抛出</li><li><code>catch(fn)</code> 相当于 <code>then(undefined, fn)</code></li></ul><p><strong>为什么不是 <code>try...catch</code></strong></p><p>Promise 中使用 <code>reject</code> 而不是 <code>try...catch</code>的原因是 <code>reject</code> 可以异步的处理错误.</p><p><strong>并发</strong></p><ul><li><code>Promise.all</code> 可以实现并发执行, 传入<code>Promise.all</code> 数组中的每个元素在执行前都会被<code>Promise.resolve</code> 过滤一遍. 若执行时出现了一个<code>reject</code> 则直接返回 <code>reject</code>,否则全部执行并返回结果数组</li><li><code>Promise.race</code> 无论结果如何, 只返回第一个. (为<code>Promise.race</code> 传入空数组会导致 Promise 永远处于<code>pedding</code> 状态)</li><li><code>Promise.none</code>: <code>Promise.all</code> 的反面, 只有全<code>rejected</code> 才返回数组</li><li><code>Promise.any</code>: 忽略拒绝, 返回第一个<code>fulfilled</code>, 若都失败则返回失败</li><li><code>Promise.first</code>: <del>和 any 一样</del></li><li><code>Promise.last</code>: 返回最后一个成功</li></ul><p><strong>缺陷</strong></p><p><del>其实我觉得这都不是缺陷</del></p><ol type="1"><li>无法可靠捕获 <code>Promise</code> 最终的结果: 我们不知道 Promise什么时候执行完, 也无法知道 Promise 是否出现错误. 最简单的想法是在Promise 最后注册一个 <code>then</code> 用于通知 Promise 执行完成. 但是,如果这个这个函数出错了, 我们将无法得知 Promise 最后是<code>fulfilled</code> 还是 <code>rejected</code>.唯一的可行方法是利用浏览器的垃圾回收机制, 若一个 Promise 处于待回收状态,那么这个 Promise 肯定是执行完了, 这个时候可以检测 Promise 的状态</li><li>一旦确定无法修正: Promise 一旦做出决定就无法变化, 这意味着很难让Promise 做重复性工作(一旦监听到鼠标按下就执行函数),我们只能借助辅助函数不断的生成新的 Promise</li><li>无法取消. 我们可以使用 <code>Promise.race</code> 实现超时报错,但是报错并不会影响超时的 Promise 继续执行.</li></ol><h3 id="生成器">生成器</h3><p>Promise 解决了异步的信任问题, 而生成器解决了回调地狱问题.将异步代码转换为看似同步的顺序代码风格.</p><p><strong>异步执行</strong></p><p>生成器返回一个迭代器,调用者可以在任何时机调用迭代器以实现看似同步的异步调用.一个生成器可以生成多个迭代器. 这些迭代器之间可以交替执行,迭代器之间独立无法直接通信, 但是可以通过外部变量闭包通信.</p><p><strong>双向数据传递</strong></p><p>我们希望在每次调用迭代器时候都能为生成器传入参数, 并获得迭代器的相应.可以通过 <code>yield X</code> 或 <code>return X</code> 的方式获取返回值,通过 <code>yield</code> 传入参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> y <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3.      ^ 执行到这里就停下, 返回 C</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token comment">// &lt;- 5. 执行到这里, 返回 y</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1. 只是返回生成器, 但是一点都不执行</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2. 开始执行生成器</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4. 传入 3 继续执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>构造迭代器</strong></p><p>为对象加入 <code>[Symbol.iterator]</code> &amp; <code>next</code>方法, 即可将对象变为迭代器.</p><ul><li><code>[Symbol.iterator]</code> 方法是一个计算属性, 与 TypeScript的计算属性一样, <code>Symbol.iterator</code> 就是 <code>Symbol</code>的静态成员. 该方法应该返回一个迭代器自身.</li><li><code>next</code> 方法返回 <code>&#123;done: boolean, value: &#125;</code>对象.</li></ul><p><code>for...of</code>可以实现遍历迭代器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> it <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 返回一个随机数</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">of</span> it<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 永远不 done 就会陷入死循环</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>生成器与迭代器</strong></p><p>为生成器产生的迭代器做一些改造可以实现特殊功能</p><ul><li><p>实现一个计数器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">yield</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> counter1 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> counter2 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现关闭迭代器钩子</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">yield</span> <span class="token operator">++</span>cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 相当于实现了一个执行结束的钩子, 可以用来做垃圾回收</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'OK I will clean all the code'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> counter1 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> counter2 <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token comment">// 关闭生成器, 执行 finally</span>counter2<span class="token punctuation">.</span><span class="token function">return</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>同步风格的异步代码</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">ajax</span><span class="token punctuation">(</span>  <span class="token string">"http://some.url.1/?x="</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">"&amp;y="</span> <span class="token operator">+</span> y<span class="token punctuation">,</span>  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 向`*main()`中扔进一个错误</span>    it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 使用收到的`data`来继续`*main()`</span>    it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> data <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> text <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">31</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回并执行异步, 异步执行后会调用生成器下一步. 同时支持错误处理</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使一切开始运行！</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>生成器与Promise</strong></p><p>迭代器可以用来写异步代码且不产生回调地狱.但是生成器需要外界不断控制自己执行下一块代码. 这个工作如果由 Promise完成那就会变得十分优雅</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'demo.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// request 会返回一个 Promise</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ERROR'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// p 现在是一个Promise对象</span>it<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 让 Promise 执行流程控制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里, Promise的异步控制只是在程序执行成功与出错的时候返回与抛出消息.完全可以用一个函数实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 感谢Benjamin Gruenbaum (@benjamingr在GitHub)在此做出的巨大改进！</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">gen</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span> arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">;</span> <span class="token comment">// 在当前的上下文环境中初始化generator</span> it <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> args <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 为generator的完成返回一个promise</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token function">handleNext</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 运行至下一个让出的值</span>   <span class="token keyword">var</span> next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">handleResult</span><span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// generator已经完成运行了？</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> next<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 否则继续执行</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span> next<span class="token punctuation">.</span>value <span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>       <span class="token comment">// 在成功的情况下继续异步循环，将解析的值送回generator</span>       handleNext<span class="token punctuation">,</span>       <span class="token comment">// 如果`value`是一个拒绝的promise，就将错误传播回generator自己的错误处理g</span>       <span class="token keyword">function</span> <span class="token function">handleErr</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>         it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span> err <span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> handleResult <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 ES7 中, 还可以使用 <code>async</code> &amp; <code>await</code>实现上述功能</p><p><strong>并发</strong></p><p>可以借助 Promise API 实现并发(这也启示了我们应该在哪里使用<code>async</code> &amp; <code>await</code>)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">yield</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'demo-partA.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">'demo-partB.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">demo-full.com?a=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;b=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// p 现在是一个Promise对象</span>it<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token operator">=></span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 让 Promise 执行流程控制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>生成器委托</strong></p><p>可以将生成器嵌套生成器直接扁平化为一维生成器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 在调用的时候带上 * 这样相当于实现了生成器"转移"</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 2 3 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成器委托的对象可以是任何可迭代的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span><span class="token operator">*</span> foo<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> it <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1 9 8 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以委托异常</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span> <span class="token string">"B"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"error caught inside `*foo()`:"</span><span class="token punctuation">,</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">yield</span> <span class="token string">"C"</span><span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token string">"D"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">yield</span> <span class="token string">"A"</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"error caught inside `*bar()`:"</span><span class="token punctuation">,</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">yield</span> <span class="token string">"E"</span><span class="token punctuation">;</span> <span class="token keyword">yield</span> <span class="token operator">*</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// note: can't get here!</span> <span class="token keyword">yield</span> <span class="token string">"G"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">throw</span> <span class="token string">"F"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"outside:"</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// outside: A</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"outside:"</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// outside: B</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"outside:"</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// error caught inside `*foo()`: 2</span><span class="token comment">// outside: C</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"outside:"</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// error caught inside `*bar()`: D</span><span class="token comment">// outside: E</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"outside:"</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"error caught outside:"</span><span class="token punctuation">,</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// error caught outside: F</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>形实转换(Thunk)</strong></p><p>一种古老的模式: 执行某个无参函数, 相当于这个另一个函数. 例如</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">fooThunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 稍后</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">fooThunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上, 这种模式也实现了异步. 但是 Thunk 的无参意味着硬编码.可以通过工厂函数解决这个问题.</p><p><strong>polyfill</strong></p><p>我们可以轻松实现 Promise 的兼容代码, 因为 Promise 是一个API,但是生成器是一种语法. 我们没法实现兼容. 可以先看看生成器的实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 管理 generator 状态</span> <span class="token keyword">var</span> state<span class="token punctuation">;</span> <span class="token comment">// generator-范围的变量声明</span> <span class="token keyword">var</span> val<span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"requesting:"</span><span class="token punctuation">,</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span> url <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>    val <span class="token operator">=</span> v<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> val <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    <span class="token keyword">var</span> err <span class="token operator">=</span> v<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"Oops:"</span><span class="token punctuation">,</span> err <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// 制造并返回 iterator</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 初始状态</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>     <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// 成功地让出继续值</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    state <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token function">process</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// generator 已经完成了</span>   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string-property property">"throw"</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 在状态 *1* 中，有唯一明确的错误处理</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    state <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token function">process</span><span class="token punctuation">(</span> e <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">// 否则，是一个不会被处理的错误，所以我们仅仅把它扔回去</span>   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果真的需要在不支持 ES6 的环境下实现生成器.可以考虑代码转译工具.</p><h2 id="性能">性能</h2><h3 id="性能提升">性能提升</h3><p>异步可以实现多任务并发并显著提高性能. JavaScript中其他性能提升特性有</p><p><strong>Web Worker(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYl9Xb3JrZXJzX0FQSS9Vc2luZ193ZWJfd29ya2Vycw==">MDN<i class="fa fa-external-link-alt"></i></span>)</strong></p><p>Web Worker 并不是 ES 标准语法, 只是宿主环境的功能.其可以提供一个并行的, 不共享作用域与资源的新线程. 通过与主线程<code>post</code> &amp; <code>listen</code> 消息实现通信.消息传递有如下方式</p><ul><li>转换为 String</li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYl9Xb3JrZXJzX0FQSS9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobQ==">结构化拷贝<i class="fa fa-external-link-alt"></i></span>:高级的克隆算法, 支持循环引用等特殊对象的拷贝</li><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYl9Xb3JrZXJzX0FQSS9Vc2luZ193ZWJfd29ya2VycyMlRTklODAlOUElRTglQkYlODclRTglQkQlQUMlRTglQUUlQTklRTYlODklODAlRTYlOUMlODklRTYlOUQlODMlRTUlOEYlQUYlRTglQkQlQUMlRTglQUUlQTklRTUlQUYlQjklRTglQjElQTElRTYlOUQlQTUlRTQlQkMlQTAlRTklODAlOTIlRTYlOTUlQjAlRTYlOEQlQUU=">所有权转移<i class="fa fa-external-link-alt"></i></span>:直接将对象的引用与所有权发给 Worker, 此时宿主函数无法访问对象</li></ul><p>Web Worker 也支持创建共享 Worker(并不是资源共享, 而是一个 Worker可以与多个宿主通行). 在实现共享 Worker 时, 需要为每次通行建立新的port</p><p><strong>SIMD</strong></p><p>单指令多数据(SIMD)是一种数据并行方法.其原理是将多个小数据拼成一个大数据一起运算. CPU 将其底层 API 暴露给JavaScript 以实现高效计算</p><p><strong>asm.js</strong></p><p>是一个 JavaScript 子集(只保留可优化的语法), 可以将 JavaScript编译为二进制文件</p><h3 id="性能测试">性能测试</h3><p>错误的测试方法: 多次循环测执行时间</p><p><strong>问题</strong></p><ul><li>计时器本身有不可忽视的误差</li><li>不能通过简单的除以测试次数的方法计算单次执行时间(考虑到极端数据,执行事件方差等). 应该用一系列统计学方法衡量执行时间</li><li>指令通过循环测得的执行效率与真实环境的执行效率可能不同</li></ul><p><strong>解决方案</strong></p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9iZW5jaG1hcmtqcy5jb20v">Benchmark.js<i class="fa fa-external-link-alt"></i></span>:提供了一套性能检测框架, 提供详细的测试结果</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2pzcGVyZi9qc3BlcmYuY29t">jsPerf.com<i class="fa fa-external-link-alt"></i></span>:该网站提供不同 JavaScript 运行时性能测试</li></ul><p><strong>优化哪些</strong></p><ul><li><p>全局视角: 专注优化执行频率极高的部分</p><blockquote><p>非关键路径的优化都是万恶之源</p></blockquote></li><li><p>微优化: 不关注微优化(如: <code>++a</code> 与 <code>a++</code>的区别, <code>x &gt;&gt;&gt; 1</code> 与 <code>x/2</code> 的区别),编译器会在执行前自动优化. 虽然不同引擎优化不尽相同, 但是</p><blockquote><p>永远不要觉得自己比引擎聪明</p></blockquote><p>这些微优化很可能随着引擎种类的不同, 引擎版本的不同而失效.</p></li><li><p>尾调用优化(TCO): ES6 的一个特殊优化.</p><p>当一个函数在执行过程中调用另一个函数时,引擎需要开辟一个而外的空间(栈帧)管理调用栈.但是如果函数调用发生在函数最后, 那么引擎就无需开辟新栈帧,直接覆盖使用老栈帧即可.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">foo</span><span class="token punctuation">(</span> y <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 尾部调用</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">bar</span><span class="token punctuation">(</span> <span class="token number">40</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不是尾部调用, 因为调用后还要执行加法</span><span class="token punctuation">&#125;</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="回顾-javascript">回顾 JavaScript</h2><ul><li><p>在浏览器环境中通过 JavaScript 输入字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">'Please input a string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在注释中应该写的是程序为什么是这样运行的,而不是程序是什么(暴论)</p></li><li><p>JavaScript 中通常使用全大写书写变量并使用 <code>_</code>连接单词(指的是常量而不是不变的const)</p></li><li><p><code>?:</code> 运算符不一定用在赋值上,但是这肯定是最常见的</p></li><li><p>基于原型链的继承方案与类继承方案是两套完全不同的设计模式.原型链继承的主要思想是委托.</p></li><li><p>兼容方案</p><ul><li>polufilling: 直接实现某个新功能API</li><li>transpliling: 通过转译实现新语法</li></ul></li></ul><h2 id="es6">ES6</h2><h3 id="语法-1">语法</h3><p><strong>Let &amp; Const</strong></p><ul><li><p>新增 <code>let &amp; const</code> 声明,这俩都具有块作用域其不会发生提升. <code>let</code>声明会产生暂时性死区(TDZ)问题, 建议在块首第一行就一起声明<code>let</code> 变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span> <span class="token comment">//最好放一行, 方便看. 暂时无法赋值的就只声明以规避 TDZ</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>  d <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>for</code> 的括号中使用 <code>let</code>声明迭代变量相当于为每个循环块中声明了一次变量(裸着可以理解为条件部分与循环体之间有一层作用域)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 相当于为每个循环体声明了一个 i</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>函数</strong></p><ul><li><p>函数实参部分有自己的块作用域</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 在作用域内找不到 w 就去全局找</span><span class="token comment">// 在作用域内找到了 x 且 x 已经声明, 不存在 TDZ, 搞定</span><span class="token comment">// 在作用域内找到了 z 但是 z 还没有被初始化, 抛出异常</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span> <span class="token parameter">x <span class="token operator">=</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> z <span class="token operator">=</span> z <span class="token operator">+</span> <span class="token number">1</span></span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ReferenceError</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>只有向函数实参传入 <code>undefined</code>(或者不传参)才会触发默认值</p></li><li><p>默认值是惰性求值的(如果有参数传入就不计算默认值的表达式了)</p></li><li><p>如果希望默认值是一个空函数可以使用<code>Function.prototype</code> 而不是<code>function() &#123;&#125;</code></p></li></ul><p><strong>解构与赋值</strong></p><ul><li><p>对象解构:</p><ul><li><p>对象解构与对象的表述不太相同, 对象的表述是 <code>标识符-值</code>模式, 但是对象的解构是 <code>对应属性-目标标识符</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> aa <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> bb <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> aa<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> bb <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 标识符: 值</span><span class="token keyword">var</span>     <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token constant">AA</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token constant">BB</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">;</span> <span class="token comment">// 对应属性: 目标标识符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token constant">AA</span><span class="token punctuation">,</span> <span class="token constant">BB</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 10 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在对象解构中如果对应属性和目标标识符同名, 可以只写目标标识符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实际上是</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> a<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>中省去 <code>a:</code> 的结果</p></li><li><p>在对象解构中如果对象前没有关键字(如<code>let / var / const</code>)就需要为加一层<code>()</code>防止将对象解析为代码块</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> a<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">;</span> <span class="token comment">// 正常版本</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> a<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">;</span> <span class="token comment">// &#123;&#125; 会被解析为代码快</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> a<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment">// ok</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对象解构时允许出现计算属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">:</span> t<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 前者是计算属性, 后者只是属性访问</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; a: 1, b: 2, c: 3 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>支持重复赋值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> na<span class="token punctuation">,</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> nb<span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> nc <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>na<span class="token punctuation">,</span> nb<span class="token punctuation">,</span> nc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; b: 1, c: 2 &#125; 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>支持连环赋值, 由于赋值的结果值是原值,所以支持在链上不完全解构</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> a1<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> b1 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> a2<span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> c2 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> b3<span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> c3 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> b3<span class="token punctuation">,</span> c3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 0 2 1 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对象解构默认值</p><p>就是在目标标识符后面加上 <code>= x</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token literal-property property">w</span><span class="token operator">:</span> <span class="token constant">WW</span> <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token constant">WW</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4 5 6 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时由于简化对象解构是简化了前半部分 <code>x:</code> 所以支持简写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token punctuation">[</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">12</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">var</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span> w <span class="token operator">=</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是不要过度依赖, 会严重降低可读性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> z <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> y <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o1 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">z</span><span class="token operator">:</span> y <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> z <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o1 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> z <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> x <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o1 <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> x<span class="token punctuation">.</span>y<span class="token punctuation">,</span> y<span class="token punctuation">.</span>y<span class="token punctuation">,</span> z<span class="token punctuation">.</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 300 100 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>数组解构</p><ul><li><p>支持部分赋值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>数组 / 对象解构支持嵌套</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">[</span> a<span class="token punctuation">,</span> <span class="token punctuation">[</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token punctuation">]</span><span class="token punctuation">,</span> e <span class="token punctuation">]</span> <span class="token operator">=</span> a1<span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">z</span><span class="token operator">:</span> w <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> o1<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 2 3 4 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> w <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>对象</strong></p><ul><li><p>简洁属性(当属性与变量同名)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    x<span class="token punctuation">,</span>    y<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>简洁方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ..</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token operator">*</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 生成器</span>    <span class="token comment">// ..</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种简洁方法相当于是</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">x</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ..</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">y</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ..</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带来的后果就是对象中的方法变成了匿名函数, 这不利于内部对方法引用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">runSomething</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> <span class="token function">something</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token function">something</span><span class="token punctuation">(</span> y<span class="token punctuation">,</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> y <span class="token operator">-</span> x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">runSomething</span><span class="token punctuation">(</span> <span class="token punctuation">&#123;</span> <span class="token function-variable function">something</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">something</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token function">something</span><span class="token punctuation">(</span> y<span class="token punctuation">,</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ok, 因为有块作用域</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> y <span class="token operator">-</span> x<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>简洁 <code>getter &amp; setter</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">__id</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">get</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__id<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">set</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__id <span class="token operator">=</span> v<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>supper</code></p><p>不止 <code>class</code> 支持 <code>supper</code>, 对象也可以使用<code>supper</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">'FA'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> o2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">'SON'</span><span class="token punctuation">,</span>  <span class="token comment">// na: super.a // 👎, supper 不能用于属性声明时</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>o2<span class="token punctuation">,</span> o1<span class="token punctuation">)</span><span class="token punctuation">;</span>o2<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SON FA</span><span class="token comment">// console.log(o2.super.a); // 👎, supper 不能用于属性访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>模板字符串</strong></p><ul><li><p>在模板字符串中, 除非出现转义, <code>\n, \r, \r\n</code>都会被转为 <code>\n</code></p></li><li><p>模板字符串没有自己的动态作用域</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hi, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>模板字符串的标签函数(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvVGVtcGxhdGVfbGl0ZXJhbHMjJUU1JUI4JUE2JUU2JUEwJTg3JUU3JUFEJUJFJUU3JTlBJTg0JUU2JUE4JUExJUU2JTlEJUJGJUU1JUFEJTk3JUU3JUFDJUE2JUU0JUI4JUIy">MDN<i class="fa fa-external-link-alt"></i></span>)</p><p>可以在模板字符串前面加一个函数名, 这样模板字符串会作为参数传入函数,函数的返回结果作为模板字符串的结果. 参数传入的形式比较特殊.传入两个数组, 第一个数组包含为 <code>$&#123;&#125;</code> 的内容, 将<code>$&#123;&#125;</code> 作为分隔符将字符串分开, 第二个数组包含所有<code>$&#123;&#125;</code> 传入的内容</p><p>简单的实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">tag</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> v<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s <span class="token operator">+</span> <span class="token punctuation">(</span>idx <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> values<span class="token punctuation">[</span>idx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> v<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> desc <span class="token operator">=</span> <span class="token string">'awesome'</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> tag<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Everything is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>desc<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Everything is awesome!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将模板字符串中插入的所有数字前加上 <code>$</code> 并保留两位小数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dollabillsyall</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span>v<span class="token punctuation">,</span>idx</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> values<span class="token punctuation">[</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 看，也使用插值性字符串字面量！</span>    s <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">$</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>values<span class="token punctuation">[</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    s <span class="token operator">+=</span> values<span class="token punctuation">[</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> s <span class="token operator">+</span> v<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">""</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> amt1 <span class="token operator">=</span> <span class="token number">11.99</span><span class="token punctuation">,</span> amt2 <span class="token operator">=</span> amt1 <span class="token operator">*</span> <span class="token number">1.08</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"Kyle"</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> dollabillsyall<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Thanks for your purchase, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">! Yourproduct cost was </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>amt1<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, which with taxcomes out to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>amt2<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Thanks for your purchase, Kyle! Your</span><span class="token comment">// product cost was $11.99, which with tax</span><span class="token comment">// comes out to $12.95.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>模板字符串函数中的 <code>raw</code></p><p>类似于 HTML 中的 <code>pre</code> 标签</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">showraw</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>showraw<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello\nWorld</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token comment">// [ "Hello</span><span class="token comment">// World" ]</span><span class="token comment">// [ "Hello\nWorld" ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>箭头函数</strong></p><ul><li>箭头函数: 一般用于短小的, 不需要自己作用域的匿名函数(无需绑定, 监听,递归).</li><li>箭头函数有自己的作用域, 但是父作用域与声明时的作用域绑定.箭头函数没有自己的 <code>this</code>, <code>arguments</code>,<code>super</code>, <code>new.target</code> 均从父作用域继承</li></ul><p><strong>迭代器</strong></p><ul><li><p>JavaScript 中默认可迭代的对象有</p><ul><li>Array</li><li>String</li><li>生成器</li><li>Collections &amp; TypedArrays</li></ul></li><li><p><code>for...of</code> 可以迭代可迭代对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span>a <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> o<span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1 2 3</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> o<span class="token punctuation">.</span>a<span class="token punctuation">&#125;</span> <span class="token keyword">of</span> <span class="token punctuation">[</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> o<span class="token punctuation">.</span>a <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>正则表达式</strong></p><ul><li><p>Unicode</p><p>Unicode 字符可以分为BMP(基本多语言平面)部分(0x000000-0x00ffff)与其他部分(0x00ffff-0x10ffff).在 ES6 之前, 正则只能匹配 BMP 部分的内容, 非 BMP部分的字符会被匹配为多个 BMP 字符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">'👍👍👍'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^👍.👍$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 将一个 👍 解析为两个字符所以 . 失效了</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^👍.&#123;2&#125;👍$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^👍.👍$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 加上 u 后支持解析 Unicode 非 BMP 部分</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^👍.&#123;2&#125;👍$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>支持 Unicode 后还可以用这种操作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">'👍🏻'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[👍-👍🏼]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">u</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>定点标识(黏滞标识)</p><p>定点标识(<code>lastIndex</code>)可以指定从哪一位开始正则匹配(必须从这一位开始).</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span><span class="token punctuation">;</span> <span class="token comment">// 使用 y 开启定点标识</span>str <span class="token operator">=</span> <span class="token string">'abcfooabc'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认是0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false: 让第0位 a 作为开头匹配失败</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由于匹配失败变为0</span>re<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true: 让第3位 f 作为开头匹配成功</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匹配成功后 lastIndex 匹配部分最后一位的下一位 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false: 让第6位 a 作为开头匹配失败</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由于匹配失败变为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们必须手动将 <code>lastIndex</code> 设置到指定的位置,或在每次匹配成功后自动修改位置. 这玩意看起来没什么用.常规的使用场景有</p><ul><li><p>要求每若干位置出现一次匹配串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]+\.[^ ]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span><span class="token punctuation">;</span> <span class="token comment">// 使用 y 开启定点标识</span>str <span class="token operator">=</span> <span class="token string">'1.你好, 我是ABC    2.Hello, IM A  3.HI'</span><span class="token punctuation">;</span><span class="token comment">// 测试每15位出现一次 x.一段文字</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  re<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>已知匹配串的固定模式由 JavaScript 自动更新<code>lastIndex</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]+\.[^0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span><span class="token punctuation">;</span> <span class="token comment">// 使用 y 开启定点标识</span>str <span class="token operator">=</span> <span class="token string">'1.你好, 我是ABC          2.Hello, IM A     3.HI'</span><span class="token punctuation">;</span><span class="token comment">// 测试文本符合 x.一段文字 的模式并获得每次模式开头的下标</span><span class="token keyword">while</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// true 21 true 39 true 43</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>注意</strong>: 若正则使用了 <code>^</code> 而定点标识的<code>lastIndex !== 0</code> 那必定匹配失败</p></li><li><p>flags</p><ul><li><code>g</code>: 全局匹配</li><li><code>i</code>: 忽略大小写</li><li><code>m</code>: 支持多行模式(此时 <code>^</code> 与 <code>$</code>既表示行始末也表示文本始末)</li><li><code>u</code>: 支持 Unicode 非 BMP 区域字符</li><li><code>y</code>: 支持定点标识</li></ul></li></ul><p><strong>Unicode</strong></p><ul><li>Unicode 的表示<ul><li>ES6 之前: 使用 <code>"\uxxxx"</code> 但是只支持 BMP 部分字符</li><li>ES6 的 Unicode 转义: <code>"\u&#123;1-ffff&#125;"</code> 支持全部 Unicode字符</li></ul></li></ul><p><strong>Symbol</strong></p><ul><li><p>使用 <code>symbol(string)</code> 即可声明 Symbol(无需<code>new</code>)</p></li><li><p><code>Symbol.toString</code> 的结果为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'hihi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol(hihi)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>可以通过 <code>Symbol.for</code> 将一个 Symbol 注册为全局符号.<code>Symbol.for</code> 相当于一个单例构造函数 API.若构造用字符串从未被注册则会构造并返回 Symbol. 若已经注册, 则直接返回Symbol(前提是必须用 <code>Symbol.for</code> 创建)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'ruru'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'ruru'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token keyword">const</span> s3 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'hihi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> s4 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'hihi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s3 <span class="token operator">===</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Symbol.keyfor</code> 可以获取 <code>Symbol.for</code> 注册Symbol 的描述字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s1 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">'ruru'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ruru</span><span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'hihi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当 Symbol 作为对象属性时, 无法通过<code>Object.key / Object.getOwnPropertyNames</code> 获取, 可以通过<code>Object.getOwnPropertySymbols</code> 获取</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a1</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'c'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'hihi'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; a1: 1, c1: 2, [Symbol(hihi)]: 3 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'a1', 'c1' ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'a1', 'c1' ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ Symbol(hihi) ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="代码组织">代码组织</h3><p><strong>迭代器</strong></p><ul><li><p>接口</p><ul><li><p><code>next</code> 函数[必须实现]: 返回一个<code>&#123;value:, done: boolean&#125;</code></p></li><li><p><code>return</code> 函数[可选实现]: 返回一个<code>&#123;value:, done: boolean&#125;</code>, 用来结束迭代器,并完成代码清理工作</p></li><li><p><code>throw</code> 函数[可选实现]: 返回一个<code>&#123;value:, done: boolean&#125;</code>,用来通过异常的方式结束迭代器并调用并完成代码清理工作</p><p>若是调用生成器的 <code>throw</code>相当于是在生成器函数执行上下文上插入一个错误, 结束迭代器.</p></li><li><p><code>[Symbol.iterator]</code> 函数[可选实现]:返回一个迭代器</p></li></ul></li><li><p>自定义迭代器: 只需要返回一个 <code>thenable</code> 的对象即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Fib <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> n2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 使迭代器成为一个可迭代对象</span>   <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> n2<span class="token punctuation">;</span>    n2 <span class="token operator">=</span> n1<span class="token punctuation">;</span>    n1 <span class="token operator">=</span> n1 <span class="token operator">+</span> current<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> current<span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>   <span class="token keyword">return</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>     <span class="token string">"Fibonacci sequence abandoned."</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> v<span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> v <span class="token keyword">of</span> Fib<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> v <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1 1 2 3 5 8 13 21 34 55</span><span class="token comment">// Fibonacci sequence abandoned.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>迭代器相关 API</p><p><code>...</code> &amp; <code>for...of</code> &amp;数组解构(不能是普通对象) 都需要消耗迭代器生成序列</p></li></ul><p><strong>生成器</strong></p><ul><li><p>yield 的优先级与 <code>=</code> 基本相同, <code>yield</code>时注意加 <code>()</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 合法</span>b <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 不合法</span>b <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 合法</span><span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 合法</span>a <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 不合法</span>a <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 合法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>yield</code> 委托返回后会自动 <code>next</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    x <span class="token operator">=</span> <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; value: 24, done: true &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>yield</code> 与 <code>next</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> it <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1. 先构造生成器, 但是不执行</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2. 传入 'A' 可惜没东西接收, 执行到 yield 暂停, 返回 1, 输出 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3. 转入 'B' 被 console.log 接收, 执行到第2个 yield 暂停, 返回 2, 输出 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3. 转入 'C' 被 console.log 接收, 执行到第3个 yield 暂停, 返回 3, 输出 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3. 转入 'D' 被 console.log 接收, 执行结束, 返回 done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在执行 <code>next</code> 时: 先传入, 再暂停, 最后返回.<strong>对于同一个 <code>yield</code>, 传入参数的 <code>next</code>与返回参数的 <code>next</code> 不同!</strong>.</p><p>同时注意: 在第三个 <code>next</code> 执行结束后虽然没有<code>yield</code> 了, 但是仍然不返回 <code>&#123;done: true&#125;</code>,这是因为 <code>for...of</code> 语句在遇到 <code>&#123;done: true&#125;</code>后会立马停止(这是书上的说法, 我觉得不对, 为了碟醋包饺子行为)</p></li><li><p>调用生成器上迭代器的 <code>throw</code> 相当于为上下文加入 Error,用 <code>try...catch</code> 可以捕获</p></li></ul><p><strong>模块</strong></p><ul><li><p>ES6 之前的模块: 通过函数与闭包实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello '</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">greeting</span><span class="token operator">:</span> greeting<span class="token punctuation">,</span> <span class="token comment">// 需要暴露的API</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> me <span class="token operator">=</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token string">'Kyle'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>me<span class="token punctuation">.</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello Kyle!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有 AMD, CMD 等各种兼容方案</p></li><li><p>ES6 模块特性</p><ul><li><p>模块基于文件: 一个文件一个模块,暂时无法在一个文件中放多模块</p></li><li><p>模块是单例的: 实例只有一个, 多个模块导入同一个模块,该模块被多模块共享(如果不想共享, 可以考虑搞一个工厂函数)</p><ul><li><p><code>/index.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'./mod1.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./mod2.js'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> o <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod3.js'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;a: 2&#125;, 所有模块引入的都是一个实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>/mod1.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> o <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod3.js'</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>/mod2.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> o <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod3.js'</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>/mod3.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>模块是静态定义的: 这意味着在网络请求模块时可以预加载</p></li><li><p>导入声明只能在模块的顶层使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> o <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod3'</span><span class="token punctuation">;</span> <span class="token comment">// 👍</span><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> o <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod3'</span><span class="token punctuation">;</span> <span class="token comment">// 👎</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自动提升: 所有导入的对象会自动提升到顶层作用域最前面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Function: foo]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod3.js'</span><span class="token punctuation">;</span> <span class="token comment">// 不论是导入的函数还是变量, 都会提升</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>支持循环依赖</p><p>JavaScript 执行模块的过程: 打开文件 - 扫描文件的所有导出并记录导出项- 扫描文件的所有导入 - 对于每个导入, 以同样的模式扫描每个导入文件</p><p>对于循环依赖: 设模块 A 被首先加载, 经过上述扫描, 更具加载指令加载模块B 并做同样的扫描分析. 看到 B 加载 A 时发现 A 以及扫描过,直接标注这个导入合法</p><ul><li><p><code>mod1.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> foo <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod2.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM MOD 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>mod2.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> bar <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod1.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'IM MOD 2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>导出模块</p><p>有两种导出方式</p><ul><li><p>命名导出: 将模块与<strong>变量本身</strong>绑定,导出的是变量的引用(或指针). <strong>这意味着在导出后若修改变量的值,导出的变量也会发生变化</strong></p><ul><li><p>一个一个导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 需要导出 o 就在前面加个 export</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>批量导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> o<span class="token punctuation">,</span> a <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 将需要导出的内容写入一个括号内.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: 这个括号只是语法, 不是对象,<strong>不是导出了一个匿名对象</strong></p></li><li><p>导出并重命名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>  o <span class="token keyword">as</span> q<span class="token punctuation">,</span> <span class="token comment">// 导出的就只有 q 没有 o 了, 但是 q 就是 o 的指针</span>  a<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>默认导出: 将模块与<strong>值</strong>绑定, 导出的是值,不导出变量名. <strong>这意味着在导出后若修改变量的值,导出的值也不会变化</strong>. 默认导出只能绑定一个值</p><ul><li><p>一般写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> o<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>命名导出与默认导出同时导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在批量命名导出时指定一个值默认导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>  o<span class="token punctuation">,</span>  a <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token comment">// 相当于默认导出值 1, 命名导出 o</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>不要图方便将所有需要导出的变量默认导出, 这会导致 JavaScript无法做静态分析</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 👎</span>  <span class="token literal-property property">s</span><span class="token operator">:</span> a<span class="token punctuation">,</span>  b<span class="token punctuation">,</span>  c<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>导入同时导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./mod.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相当于从 <code>/mod.js</code> 导入所有命名导出, 然后再导出. 此时<code>/mod.js</code> 中的命名导出不会被导入, 会直接导出</p></li></ul></li></ul></li><li><p>导入模块</p><p>两种导出方式对应两种导入方式</p><ul><li><p>导入默认导出的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> s <span class="token keyword">from</span> <span class="token string">'./mod.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认导入的是值, 需要自己命名, 同时导出的是值, 导入后默认为常量,不可修改值.</p></li><li><p>导入命名导出的变量</p><ul><li><p>按需导入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// mod.js</span><span class="token comment">//   export &#123;a,b,c&#125; // 注意, 这不是导出匿名对象! 只是语法</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod.js'</span><span class="token punctuation">;</span> <span class="token comment">// 注意, 这不是对象解构! 只是语法!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种方法最好, 但是每次需要变量都要修改导入命令</p></li><li><p>全部导入</p><p>将全部命名导出的变量导入固然方便, 但是会污染命名空间.解决方案是全部导入并重命名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> s <span class="token keyword">from</span> <span class="token string">'./mod.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>混合导入默认与命名导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// mod.js</span><span class="token comment">//   export default function foo() &#123;&#125;</span><span class="token comment">//   export function bar() &#123;&#125;</span><span class="token comment">//   export function baz() &#123;&#125;</span><span class="token comment">//   export function yoo() &#123;&#125;</span><span class="token keyword">import</span> s<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> bar<span class="token punctuation">,</span> baz <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mod'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p><strong>类(ES6)</strong></p><ul><li><p><code>class</code> 语法糖</p><ul><li><p><code>constructor</code> 相当于原来的函数名</p></li><li><p>类上的方法(包括 <code>getter</code> &amp;<code>setter</code>)都支持简洁模式</p></li><li><p>类上的方法相当于 <code>类.prototype.方法</code></p></li></ul></li><li><p>与 ES5 的区别</p><ul><li><p>在 ES6 之前可以用 <code>Foo.call(obj)</code> 创建对象, 使用<code>class</code> 后只能用 <code>new</code></p></li><li><p><code>class</code> 不像 <code>function</code>一样支持提升</p></li><li><p><code>class</code> 声明的类会创建作用域词法分析符</p></li></ul></li><li><p><code>supper</code></p><ul><li><p><code>supper</code> 在不同位置表意不同</p><ul><li><p>在构造函数中: 父类的构造函数</p></li><li><p>在类的非构造函数中: 指向父类, 可以调用父类的静态方法,构造函数(只能带 <code>new</code> 用:<code>new super.constructor</code>)</p></li><li><p>在对象中: 指向对象的 <code>__protp__</code></p></li></ul></li><li><p>子类构造函数必须先调用 <code>this</code> 在访问<code>this</code>(JavaScript 的委托继承)</p></li><li><p>类上的 <code>supper</code> 是静态绑定的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ParentA</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ParentA:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ParentB</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ParentB:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ChildA</span> <span class="token keyword">extends</span> <span class="token class-name">ParentA</span> <span class="token punctuation">&#123;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ChildA:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ChildB</span> <span class="token keyword">extends</span> <span class="token class-name">ParentB</span> <span class="token punctuation">&#123;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ChildB:'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 常规操作</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChildA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ParentA: a</span>         <span class="token comment">// ChildA: a</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChildB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ParentB: b</span>         <span class="token comment">// ChildB: b</span><span class="token comment">// 修改 this</span>b<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ParentB: a (supper不变, 依然指向 B, this 变了)</span>               <span class="token comment">// ChildB: a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><code>extends</code></p><p>相当于 ES6 之前用 <code>prototype</code> 将两个类连起来. 除此之外,<code>extends</code> 还完美支持了原生类型的扩展. 例如: 在 ES6 之前,手动创建的 <code>Array</code> 子类并不会像 <code>Array</code>一样实现自动更新 <code>.length</code> 但是 <code>extends</code>支持</p></li><li><p><code>new.target</code></p><p>在构造函数中查看此属性可以返回类名, 在其他函数中是<code>undefined</code>.可以通过此属性判断构造函数是作为被继承类构造还是直接构造</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Foo: '</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token keyword">extends</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Bar: '</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'baz: '</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Foo: Foo</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Foo: Bar   &lt;-- 虽然调用的是 Foo 的构造函数, 但是 new 的是 Bar</span><span class="token comment">// Bar: Bar</span>b<span class="token punctuation">.</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// baz: undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>static</code></p><p>用于声明类上的静态对象, 相当于在 ES5 的构造函数上直接绑定对象.子类可以通过 <code>supper</code> 直接调用</p></li></ul><h3 id="集合">集合</h3><p>主要包含 <code>TypedArray</code>, <code>Map</code>,<code>WeakMap</code>, <code>Set</code>, <code>WeakSet</code></p><p><strong><code>TypedArray</code></strong></p><ul><li><p>静态长度与类型的 <code>Array</code>,一般用于表示二进制数据.</p></li><li><p><code>TypedArray</code>存在大小端问题(低位存左边还是右边)</p></li><li><p>通过 <code>ArrayBuffer</code> 申请空间(Buffer), 通过<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvVHlwZWRBcnJheQ==">类型数组构造函数<i class="fa fa-external-link-alt"></i></span>创建指定类型与大小的视图,并绑定的 Buffer. Buffer 与视图可以是一对多的关系</p></li></ul><p><strong><code>Map</code> &amp; <code>WeakMap</code></strong></p><ul><li><p>构造函数接受 <ahref="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries"><code>Object.entire()</code>模式</a>的数组</p></li><li><p>通过 <code>get</code> / <code>set</code> / <code>delete</code>方法查询 / 增加 / 删除Map</p></li><li><p>通过 <code>has</code> 方法查询是否有键名</p></li><li><p>通过 <code>clear</code> 方法清空 Map</p></li><li><p>Map 本身是可迭代的</p><ul><li>迭代器每次迭代一个数组, 第一个是 Key, 第二个是 Value</li><li>可以通过 <code>entries</code> 获取键值对数组</li><li>可以通过 <code>keys</code> 获取键值对数组</li><li>可以通过 <code>values</code> 获取键值对数组</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Map Entries] &#123; [ 'a', 1 ], [ 'b', 2 ], [ 'c', 3 ] &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Map Iterator] &#123; 1, 2, 3 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Map Iterator] &#123; 'a', 'b', 'c' &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果将对象作为 <code>Map</code> 的 Key, 对象的引用次数将<code>+1</code>, 这意味着不将 Key 删除, 对象将无法被 GC.<code>WeakMap</code> 解决了这一问题</p><ul><li><code>WeakMap</code> 的 Key只能是对象但是对象引用次数不会被影响</li><li>当对象被 GC 时, 映射会自动删除</li><li><code>WeakMap</code> 没有 <code>size</code>, <code>clear</code>方法</li></ul></li></ul><p><strong><code>Set</code> &amp; <code>WeakSet</code></strong></p><ul><li><p>相当于 <code>set</code> 换为 <code>add</code> 且<code>Vaule === Key</code> 的 <code>Map</code> &amp;<code>WeakMap</code></p></li><li><p>不支持强制类型转换(<code>1 !== '1'</code>)</p></li><li><p>同样支持迭代器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Set Entries] &#123; [ 1, 1 ], [ 2, 2 ], [ 3, 3 ] &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Set Iterator] &#123; 1, 2, 3 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [Set Iterator] &#123; 1, 2, 3 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>WeakSet</code> 的 Key 只能是对象</p></li></ul><h3 id="es6新api">ES6新API</h3><p><strong>Array</strong></p><ul><li><p><code>Array.of</code> 方法</p><p>类似 <code>Array</code> 构造函数,区别是若传入单个数字会创建一个长度为 1 的数组, 而不是那么长的数组.不仅规避的 <code>Array</code> 的陷阱, 还防止了<code>&lt;empty items&gt;</code> 的出现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &lt;5 empty items> ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 5 ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 5, 6, 7 ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 5, 6, 7 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Array.from</code> 方法</p><p>将一个 <code>Object</code> 中的正整数 Key 提取出来构造数组. 长度为<code>object.length</code>, 找不到的下标直接设为<code>undefined</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">fakeArr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span>arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>fakeArr<span class="token punctuation">)</span> <span class="token comment">// [body]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相对于 <code>Array.prototype.slice</code> 不会产生空值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token number">0</span><span class="token operator">:</span> <span class="token string">'HIHI'</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token operator">:</span> <span class="token string">'RURU'</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token operator">:</span> <span class="token string">'LALA'</span><span class="token punctuation">,</span>  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'HIHI', 'RURU', undefined, 'LALA' ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 'HIHI', 'RURU', &lt;1 empty item>, 'LALA' ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Array.prototype.copyWithin</code> 方法</p><p>浅复制数组的一部分到同一数组中的另一个位置.</p><p>用法: <code>arr.copyWithin(target[, start[, end]])</code>,区间前取后不取, 起止位置接受负数(倒数第几个)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,1,2]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,1,5]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4,5,3,4,5]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4,2,3,4,5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>拷贝的顺序是自右向左的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自左向右拷贝的话是</span><span class="token comment">// [1,2,3,4,5] -> [1,2,2,4,5] -> [1,2,2,2,5] -> [1,2,2,2,5] -> [1,2,2,2,2]</span><span class="token comment">// 自右向左拷贝的话是</span><span class="token comment">// [1,2,3,4,5] -> [1,2,3,4,4] -> [1,2,3,3,4] -> [1,2,2,3,4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Array.prototype.find</code>方法: 使用 <code>===</code>查找元素返回 <code>boolean</code>. 如果需要自定义比较规则, 可以使用<code>Array.prototype.some</code>(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvc29tZQ==">MDN<i class="fa fa-external-link-alt"></i></span>).如果想要找到下标可以用 <code>Array.prototype.findIndex</code>(<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvZmluZEluZGV4">MDN<i class="fa fa-external-link-alt"></i></span>)</p></li></ul><p><strong>Object</strong></p><ul><li><p><code>Object.is(..)</code> 方法</p><p>比 <code>===</code> 更严格的比较</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">,</span>  y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  z <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">;</span>x <span class="token operator">===</span> x<span class="token punctuation">;</span> <span class="token comment">// false</span>y <span class="token operator">===</span> z<span class="token punctuation">;</span> <span class="token comment">// true</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Object.assign</code> 方法</p><p>用来合并对象, 只保留原对象中自有(非继承)的, 可枚举的属性</p></li></ul><p><strong>Number</strong></p><ul><li><p><code>Number.isNaN()</code></p></li><li><p><code>Number.isFinite()</code>:不进行强制类型转换判断是不是有穷的(NaN, Infinity都不算). 如需类型转换,可以使用全局的 <code>isFinite</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token string">'10'</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">isFinite</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token function">isFinite</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Number.isInteger()</code>: 判断是不是整数, 虽然 JavaScript的数都是基于 IEEE 754 的, 但是还是可以通过判断小数位是否全 0判断是不是整数</p></li></ul><p><strong>String</strong></p><ul><li><p><code>String.prototype.repeat</code> 方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"foo"</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'foofoofoo'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="元编程">元编程</h3><p>通过操作程序实体, 在编译时计算出运行时需要的常数, 类型,代码的方法(说白了就是操作代码实体)</p><p><strong>获取函数名</strong></p><p>通过 <code>.name</code> 可以获取函数名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name:</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name:</span>window<span class="token punctuation">.</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// name:</span><span class="token keyword">class</span> <span class="token class-name">Awesome</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// name: Awesome</span>  <span class="token function">funny</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// name: funny</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Awesome</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// name: Awesome</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: foo</span>  <span class="token operator">*</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: bar</span>  <span class="token function-variable function">baz</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: baz</span>  <span class="token function-variable function">bam</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: bam</span>  <span class="token keyword">get</span> <span class="token function">qux</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: get qux</span>  <span class="token keyword">set</span> <span class="token function">fuz</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: set fuz</span>  <span class="token punctuation">[</span><span class="token string">'b'</span> <span class="token operator">+</span> <span class="token string">'iz'</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: biz</span>  <span class="token punctuation">[</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'buz'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// name: [buz]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: bound foo</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: bound</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// name: default</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: anonymous</span><span class="token keyword">var</span> <span class="token function-variable function">GeneratorFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token class-name">__proto__</span><span class="token punctuation">.</span>constructor<span class="token punctuation">;</span><span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeneratorFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// name: anonymous</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Symbol</strong></p><ul><li><p><code>Symbol.iterator</code>: 返回对象的迭代器</p></li><li><p><code>Symbol.toStringTag</code>: toString的返回结果</p></li><li><p><code>Symbol.hasInstance</code>: 判断对象是不是该类型的实例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">greeting</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> greeting<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Foo'</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Foo<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>hasInstance<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">value</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">inst</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> inst<span class="token punctuation">.</span>greeting <span class="token operator">==</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'cool'</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object Foo]</span><span class="token function">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [object cool]</span>a <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">;</span> <span class="token comment">// true</span>b <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Symbol.species</code></p></li><li><p><code>Symbol.toPrimitive</code></p></li><li><p>正则相关:</p><ul><li><code>Symbol.match</code></li><li><code>Symbol.replace</code></li><li><code>Symbol.search</code></li><li><code>String.prototype.split</code> 对应四个正则方法, 一般不要改,引擎实现的版本性能很好</li></ul></li><li><p><code>Symbol.isConcatSpreadable</code>:对象在合并时是否可以展开</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>isConcatSpreadable<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,[4,5,6]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>Symbol.unscopables</code> 属性是否可以在 <code>with</code>中暴露</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>  b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span>  c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>o<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>unscopables<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">with</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// o.b 不暴露, 所以只能请求外部的 b</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 20 3</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="es6-1">ES6+</h3><ul><li><p><code>async &amp; await</code> 异步支持: 相当于生成器 + Promise语法糖</p></li><li><p>对象的 <code>...</code>: <strong>这不是 Spread 表达式,对象默认是不可迭代的</strong>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Found non-callable @@iterator</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个功能可以将对象解构成并并入其他对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> o2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token operator">...</span>o<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; c: 3, a: 1, b: 2 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Array.prototype.includes</code>:查找数组并返回数组中是否有元素. 支持查找 <code>NaN</code>, 无法区分<code>+0 &amp; -0</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">~</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 找不到</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, 找的到</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, 无法区分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Object.observe()</code> (没有支持但是很伟大的 API)</p><ul><li><p>相当于一个钩子函数, 支持对象在如下变化后调用函数</p><ul><li><p>add</p></li><li><p>update</p></li><li><p>delete</p></li><li><p>reconfigure(通过 <code>Object.defineProperty(..)</code>而重新配置时触发)</p></li><li><p>setPrototype(不论是使用<code>__proto__.setter</code>,还是使用<code>Object.setPrototypeOf(..)</code>都会触发)</p></li><li><p>preventExtensions(状态改变, <code>Object.seal(..)</code> 和<code>Object.freeze(..)</code> 也会触发)</p></li></ul></li><li><p>也支持自定义事件并触发(这不就相当于是个全局事件总线??)</p></li><li><p>可以直接使用该功能实现 MVVM</p></li><li><p>虽然目前没有实现, 但是实现了对 DOM 树监控的 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL011dGF0aW9uT2JzZXJ2ZXI=">MutationObserver<i class="fa fa-external-link-alt"></i></span></p></li></ul></li></ul>]]></content>
    
    
    <summary type="html">JS黄宝书第一版</summary>
    
    
    
    <category term="前端" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JS" scheme="https://blog.liukairui.me/categories/%E5%89%8D%E7%AB%AF/JS/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://blog.liukairui.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>理解柏林噪声</title>
    <link href="https://blog.liukairui.me/article/%E7%90%86%E8%A7%A3%E6%9F%8F%E6%9E%97%E5%99%AA%E5%A3%B0/"/>
    <id>https://blog.liukairui.me/article/%E7%90%86%E8%A7%A3%E6%9F%8F%E6%9E%97%E5%99%AA%E5%A3%B0/</id>
    <published>2022-06-26T16:00:01.000Z</published>
    <updated>2022-06-26T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li><strong>翻译自</strong>: Understanding Perlin Noise</li><li><strong>原文作者：</strong> Adrian Biagioli</li><li><strong>本文链接：</strong>http://adrianb.io/2014/08/09/perlinnoise.html</li><li><strong>版权声明：</strong> 原文采用 <span class="exturl" data-url="aHR0cHM6Ly9pLmNyZWF0aXZlY29tbW9ucy5vcmcvbC9ieS80LjAvZGVlZC56aA==">CC BY 4.0<i class="fa fa-external-link-alt"></i></span>许可协议，本文采用 <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC9kZWVkLnpo">CCBY-NC-SA 4.0<i class="fa fa-external-link-alt"></i></span> 许可协议</li></ul></blockquote><p>本文的目的是对 Ken Perlin 所著 <span class="exturl" data-url="aHR0cDovL21ybC5ueXUuZWR1L35wZXJsaW4vbm9pc2Uv">Improved Perlin Noise<i class="fa fa-external-link-alt"></i></span>通俗易懂的解释，这篇文章的代码使用 C#实现并可自由使用。如果你只是想看最终的结果，<span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vRmxhZmxhMi9mMDI2MGE4NjFiZTBlYmRlZWY3Ng==">你可以在这里查看最终代码<i class="fa fa-external-link-alt"></i></span>。</p><p>柏林噪声是一种在程序化内容生成领域强有力的算法。其通常应用在游戏与诸如电影的视觉媒体方向。作为该算法的发明者，Ken Perlin ，<span class="exturl" data-url="aHR0cHM6Ly9tcmwuY3Mubnl1LmVkdS9+cGVybGluL2RvYy9vc2Nhci5odG1s">因其早期的实验获得了奥斯卡金像奖<i class="fa fa-external-link-alt"></i></span>。在这篇文章中，我将探索他2022年发布的<span class="exturl" data-url="aHR0cDovL21ybC5ueXUuZWR1L35wZXJsaW4vbm9pc2Uv">改进柏林噪声（ Improved PerlinNoise）<i class="fa fa-external-link-alt"></i></span>。在游戏开发领域，柏林噪声可用于任何类型的波状型材料或材质。它可以用于生成地形（例如类似我的世界游戏的地形），火焰的效果，水和云。这些效果通常可以用二维或者三维的柏林噪声实现，当然，也可以轻松地扩展到四维实现。另外仅一维的柏林噪声可以用于生成横向滚动的地形（如游戏：泰拉瑞亚（Terraria ）、星界边境（Starbound））或创造手绘线条的效果。</p><p>此外，如果你将柏林噪声扩展一个维度，并将这个维度作为时间，你将可以实现效果的动画化。例如，二维柏林噪声可以用于描绘地形，但是三维的柏林噪声可以描绘海洋中的水波变化。下面是不同维度柏林噪声的图像及其实际应用</p><table><colgroup><col style="width: 3%" /><col style="width: 23%" /><col style="width: 73%" /></colgroup><thead><tr class="header"><th>维度</th><th>噪声灰度图</th><th>应用</th></tr></thead><tbody><tr class="odd"><td>1</td><td><img src="./理解柏林噪声/raw1d.png" /></td><td><imgsrc="./理解柏林噪声/use1d.png" /><br />用于创造手绘线条效果</td></tr><tr class="even"><td>2</td><td><img src="./理解柏林噪声/raw2d.png" /></td><td><imgsrc="./理解柏林噪声/use2d.png" /><br />通过应用渐变可以创造出火焰的效果</td></tr><tr class="odd"><td>3</td><td><img src="./理解柏林噪声/raw3d.png" /></td><td><imgsrc="./理解柏林噪声/use3d.png" /><br />使用柏林噪声创建拥有<strong>洞穴</strong>的地形（也许是最广泛的用途)</td></tr></tbody></table><p>由此可见，柏林噪声可以用于很多自然现象的模拟，接下来让我们看看柏林噪声算法的原理</p><h2 id="原理">原理</h2><p><em>注意：很多内容来自<span class="exturl" data-url="aHR0cDovL3dlYnN0YWZmLml0bi5saXUuc2UvfnN0ZWd1L1ROTTAyMi0yMDA1L3Blcmxpbm5vaXNlbGlua3MvcGVybGluLW5vaXNlLW1hdGgtZmFxLmh0bWw=">MattZucker 写的这篇文章<i class="fa fa-external-link-alt"></i></span>。但是，那篇文章是基于 1980年代初编写的原始柏林噪声算法，在这篇文章中，我将使用 2022年发表的改进柏林噪声算法，因此我的版本与 Zucker的版本有一些关键性的不同</em></p><p>让我们看看最基本的柏林噪声函数</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">public double perlin(double x, double y, double z);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个函数使用 <code>x, y, z</code> 作为输入，返回一个介于 0.0 到 1.0之间的 <code>double</code>类型数字。那么，我们可以对输入做些什么操作呢？首先，我们将<code>x, y, z</code> 放入一个立方体中。换句话说就是找到 `[x, y, z] % 1.在坐标系中的位置。下图是其在二维坐标中的表示。（蓝点表述输入坐标，周围四个点是单位坐标）</p><p><img src="./理解柏林噪声/logic01.png" /></p><p>对于4个单位坐标点（在三维中有8个）中的每个节点，我们生成一个<em>伪随机梯度向量</em>，这个梯度向量定义了一个正方向与一个负方向（与正方向反向）。伪随机的意思是对于任何一组输入到梯度向量方程中的整数集合（索引）总是会得到相同的向量。因此，他只是看上去是随机的。此外，这意味着每个单位坐标都有”自己的“梯度，如果梯度函数（梯度向量方程）不变，梯度永远不会改变。</p><p><img src="./理解柏林噪声/logic02.png" /></p><p>然而上图并不是准确，在 Ken Perlin的改进噪声中，这些单位坐标上的点并不是完全随机的，每个单位点上对应的伪随机梯度向量是通过点到单位点向量决定的</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">(1,1,0),(-1,1,0),(1,-1,0),(-1,-1,0),(1,0,1),(-1,0,1),(1,0,-1),(-1,0,-1),(0,1,1),(0,-1,1),(0,1,-1),(0,-1,-1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>选择这些梯度向量背后的原因见：Ken Perlin's 在 2022 发表的 SIGGRAPH论文 <span class="exturl" data-url="aHR0cDovL21ybC5ueXUuZWR1L35wZXJsaW4vcGFwZXI0NDUucGRm">ImprovingNoise<i class="fa fa-external-link-alt"></i></span></p><p><em>注意：很多关于柏林噪声的文章使用了不使用这些向量的原始柏林噪声算法，例如上图就描述的原始柏林噪声算法，因为图片是在Improving Noise 发表前制作的，但是核心思想是相同的</em></p><p>接下来，我们需要计算四个距离向量（三维下是八个），即点周围四（八）个单位点到选取点的向量，这些距离向量二维表示如图</p><p><img src="./理解柏林噪声/logic03.png" /></p><p>之后，我们需要<span class="exturl" data-url="aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Eb3RfcHJvZHVjdA==">点积<i class="fa fa-external-link-alt"></i></span>梯度向量与距离向量从而计算出单位点的权值</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">grad.x * dist.x + grad.y * dist.y + grad.z * dist.z<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样做的原因是两个向量的<span class="exturl" data-url="aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Eb3RfcHJvZHVjdA==">点积<i class="fa fa-external-link-alt"></i></span>相当于是两个向量夹角余弦乘以这些向量的大小：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">dot(vec1,vec2) &#x3D; cos(angle(vec1,vec2)) * vec1.length * vec2.length<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>换句话说，两个同向向量点积相当于</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">1 * vec1.length * vec2.length<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时，如果两个向量方向相反，他们的点积为</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">-1 * vec1.length * vec2.length<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果两个向量是垂直的，他们的点积为0</p><p>因此，当距离向量与梯度向量同向（夹角小于<spanclass="math inline">\(90^\circ\)</span>），点积为正,反向，点积为负。这就梯度向量如何分正方向与负方向的，如图表示了正方向与负方向的影响</p><p><img src="./理解柏林噪声/logic04.png" /></p><p>所以现在我们需要在这 4个值之间进行插值，使得我们可以在四个单位点（三维八个）中获得权值。解决方案很简单：平均均值（双线性插值），以二维为例</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">&#x2F;&#x2F; 四个单位点的权值定义如下:&#x2F;&#x2F; [g1] | [g2]&#x2F;&#x2F; -----------&#x2F;&#x2F; [g3] | [g4]int g1, g2, g3, g4;int u, v;   &#x2F;&#x2F; u，v 是输入点在单位点中的坐标位置            &#x2F;&#x2F; 例如 (u,v) &#x3D; (0.5,0.5) 表示输入点在单位点围成方形中心int x1 &#x3D; lerp(g1,g2,u);int x2 &#x3D; lerp(g3,h4,u);int average &#x3D; lerp(x1,x2,v);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一个问题是：使用上面的平均均值（双线性插值）的方法效果并不好，这种方法虽然计算很简单，但是看起来并不自然。我们需要一些平滑过渡。因此，我们使用了淡入淡出函数，有名缓动曲线，如图是一种缓动曲线</p><p><img src="./理解柏林噪声/logic05.png" /></p><p>这个缓动曲线将应用于<code>u</code>，<code>v</code>的计算，这样的处理会使接近边缘的输入点更加接近边缘。改进柏林噪声使用了这样的缓动曲线方程<span class="math display">\[6t^5-15t^4+10t^3\]</span>这就是柏林噪声的原理，我们现在已经理解了柏林噪声的每一部分，让我们看一些代码实现</p><h2 id="代码实现">代码实现</h2><p>代码是使用 C# 实现的，这份代码是 <span class="exturl" data-url="aHR0cDovL21ybC5ueXUuZWR1L35wZXJsaW4vbm9pc2Uv">Ken Perlin's JavaImplementation<i class="fa fa-external-link-alt"></i></span>的轻微修改版本。这份代码比原版更加清晰并添加了一些重复噪声的能力。这些代码是可以自由使用的（毕竟我没有真正的实现- 但是 Ken Perlin 做到了）</p><h3 id="配置">配置</h3><p>第一步需要设置一个排列表，简称 <code>p[]</code>数组。他通常是一个长度为 256 值介于 0 到 255的数组。我们也可以重复这个数组（通常总大小为 512 ）以避免数组越界：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">private static readonly int[] permutation &#x3D; &#123; 151,160,137,91,90,15,                 &#x2F;&#x2F; Ken Perlin 实现的查找表，这是随机选取的    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,    &#x2F;&#x2F; 元素值介于 0 - 255    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180&#125;;private static readonly int[] p;                                &#x2F;&#x2F; 重复一个排列表避免下标越界static Perlin() &#123;    p &#x3D; new int[512];    for(int x&#x3D;0;x&lt;512;x++) &#123;        p[x] &#x3D; permutation[x%256];    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>p[]</code> 排列表将用于 hash函数，该函数将决定之后使用哪个梯度向量，我们将在后面详细描述函数实现细节</p><p>接下来是噪声函数</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">public double perlin(double x, double y, double z) &#123;    if(repeat &gt; 0) &#123;                                    &#x2F;&#x2F; 如果开启了重复，就求余获得防止越界        x &#x3D; x%repeat;        y &#x3D; y%repeat;        z &#x3D; z%repeat;    &#125;    int xi &#x3D; (int)x &amp; 255;                              &#x2F;&#x2F; 计算单位点位置    int yi &#x3D; (int)y &amp; 255;                              &#x2F;&#x2F; 左下角是( |_x_|,|_y_|,|_z_| )    int zi &#x3D; (int)z &amp; 255;    double xf &#x3D; x-(int)x;                               &#x2F;&#x2F; 计算点在单位点在中的局部位置    double yf &#x3D; y-(int)y;    double zf &#x3D; z-(int)z;    &#x2F;&#x2F; ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这份代码很容易理解，首先如果代码使用了重复排列表方法，使用求余运算计算下标以避免越界。接下来创建变量<code>xi, yi, zi</code>，其代表了输入点对应单位点及其所在立方体。我们也可以将坐标归一化到<span class="math inline">\([0,255]\)</span> 这可以避免在访问<code>p[]</code> 时下标越界。但是这也会造成副作用：柏林噪声结果会每 256重复一次。但这并不是一个问题，因为我们可以用是十进制坐标实现柏林噪声。最后最后我们要找到点在单位立方体中的位置，也就是<span class="math inline">\(n = n \% 1.0\)</span> ，其中 <spanclass="math inline">\(n\)</span> 是一个坐标。</p><h3 id="缓动曲线">缓动曲线</h3><p>现在我们需要定义上图中的缓动曲线，正如上面提到的，缓动曲线方程是<span class="math display">\[6t^5-15t^4+10t^3\]</span> 代码实现为</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">public static double fade(double t) &#123;           &#x2F;&#x2F; Ken Perlin 定义的函数. 这缓动了坐标值，                                                &#x2F;&#x2F; 让坐标值趋向边界    return t * t * t * (t * (t * 6 - 15) + 10); &#x2F;&#x2F; 6t^5 - 15t^4 + 10t^3&#125;public double perlin(double x, double y, double z) &#123;    &#x2F;&#x2F; ...    double u &#x3D; fade(xf);    double v &#x3D; fade(yf);    double w &#x3D; fade(zf);    &#x2F;&#x2F; ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>u / v / w</code> 将在之后插值时使用</p><h3 id="hash-函数">Hash 函数</h3><p>柏林噪声的 hash 函数输入一组坐标并返回一个独一无二的值， hash函数的维基百科定义如下</p><blockquote><p>一种函数可以将任意范围的数据映射到固定范围，输入数据微小的差异会导致结果巨大的差异</p></blockquote><p>如下是柏林噪声中的 hash 函数，它使用了我们之前创建的排列表<code>p[]</code></p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">public double perlin(double x, double y, double z) &#123;    &#x2F;&#x2F; ...    int aaa, aba, aab, abb, baa, bba, bab, bbb;    aaa &#x3D; p[p[p[    xi ]+    yi ]+    zi ];    aba &#x3D; p[p[p[    xi ]+inc(yi)]+    zi ];    aab &#x3D; p[p[p[    xi ]+    yi ]+inc(zi)];    abb &#x3D; p[p[p[    xi ]+inc(yi)]+inc(zi)];    baa &#x3D; p[p[p[inc(xi)]+    yi ]+    zi ];    bba &#x3D; p[p[p[inc(xi)]+inc(yi)]+    zi ];    bab &#x3D; p[p[p[inc(xi)]+    yi ]+inc(zi)];    bbb &#x3D; p[p[p[inc(xi)]+inc(yi)]+inc(zi)];    &#x2F;&#x2F; ...&#125;public int inc(int num) &#123;    num++;    if (repeat &gt; 0) num %&#x3D; repeat;    return num;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用上面的 hash 函数哈希输入点周围的八个单位点，<code>inc()</code>函数用于获取坐标值的后继并保证不会越界。如果你没有设置<code>repeat</code> ，那么 <code>inc(xi) = xi + 1</code>。由于我们使用了<code>p[]</code> 数组，结果将介于 0 - 255</p><h3 id="梯度函数">梯度函数</h3><p>我一直认为 Ken Perlin 原始的梯度函数 <code>grad()</code>是杂乱且不必要的。记住， <code>grad()</code>的目标是计算随机选取的伪梯度向量与八个距离向量的点积。Ken Perlin使用了一些花哨的位运算方法实现了这个函数</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">public static double grad(int hash, double x, double y, double z) &#123;    int h &#x3D; hash &amp; 15;                                    &#x2F;&#x2F; 取 hash 的后四位    double u &#x3D; h &lt; 8 &#x2F;* 0b1000 *&#x2F; ? x : y;                &#x2F;&#x2F; 如果最高为为0就设置 u &#x3D; x，否则y    double v;                                             &#x2F;&#x2F; 原版中是用的?:运算    if(h &lt; 4 &#x2F;* 0b0100 *&#x2F;)                                &#x2F;&#x2F; 判断第二位为0        v &#x3D; y;    else if(h &#x3D;&#x3D; 12 &#x2F;* 0b1100 *&#x2F; || h &#x3D;&#x3D; 14 &#x2F;* 0b1110*&#x2F;)  &#x2F;&#x2F; 判断最高位与第二位为1        v &#x3D; x;    else                                                  &#x2F;&#x2F; 判断一二位不同        v &#x3D; z;    return ((h&amp;1) &#x3D;&#x3D; 0 ? u : -u)+((h&amp;2) &#x3D;&#x3D; 0 ? v : -v);   &#x2F;&#x2F; 判断后两位&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面的代码是上面代码的另一种实现，这种方法更加易懂（在部分语言中更快）</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">&#x2F;&#x2F; 来源: http:&#x2F;&#x2F;riven8192.blogspot.com&#x2F;2010&#x2F;08&#x2F;calculate-perlinnoise-twice-as-fast.htmlpublic static double grad(int hash, double x, double y, double z)&#123;    switch(hash &amp; 0xF)    &#123;        case 0x0: return  x + y;        case 0x1: return -x + y;        case 0x2: return  x - y;        case 0x3: return -x - y;        case 0x4: return  x + z;        case 0x5: return -x + z;        case 0x6: return  x - z;        case 0x7: return -x - z;        case 0x8: return  y + z;        case 0x9: return -y + z;        case 0xA: return  y - z;        case 0xB: return -y - z;        case 0xC: return  y + x;        case 0xD: return -y + z;        case 0xE: return  y - x;        case 0xF: return -y - z;        default: return 0; &#x2F;&#x2F; 永不到达    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码可以在<span class="exturl" data-url="aHR0cDovL3JpdmVuODE5Mi5ibG9nc3BvdC5jb20vMjAxMC8wOC9jYWxjdWxhdGUtcGVybGlubm9pc2UtdHdpY2UtYXMtZmFzdC5odG1s">这里<i class="fa fa-external-link-alt"></i></span>找到，这两种代码结果完全相同，他们随机从下面几个向量中选取结果</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">(1,1,0),(-1,1,0),(1,-1,0),(-1,-1,0),(1,0,1),(-1,0,1),(1,0,-1),(-1,0,-1),(0,1,1),(0,-1,1),(0,1,-1),(0,-1,-1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>选取结果由 hash 函数结果后四位决定（通过 <code>grad()</code>的第一个参数输入）另外三个参数用来表述距离向量（他们将用于计算点积）</p><h3 id="将函数连起来">将函数连起来</h3><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">public double perlin(double x, double y, double z) &#123;    &#x2F;&#x2F; ...    double x1, x2, y1, y2;    x1 &#x3D; lerp(    grad (aaa, xf  , yf  , zf),           &#x2F;&#x2F; grad 函数计算点积                grad (baa, xf-1, yf  , zf),             &#x2F;&#x2F; 梯度向量与输入周围单位点                u);    x2 &#x3D; lerp(    grad (aba, xf  , yf-1, zf),           &#x2F;&#x2F; 将这些点做线性插值                grad (bba, xf-1, yf-1, zf),                  u);    y1 &#x3D; lerp(x1, x2, v);    x1 &#x3D; lerp(    grad (aab, xf  , yf  , zf-1),                grad (bab, xf-1, yf  , zf-1),                u);    x2 &#x3D; lerp(    grad (abb, xf  , yf-1, zf-1),                  grad (bbb, xf-1, yf-1, zf-1),                  u);    y2 &#x3D; lerp (x1, x2, v);    return (lerp (y1, y2, w)+1)&#x2F;2;                      &#x2F;&#x2F; 将插值结果从 [0, 1] 转为 [-1, 1]&#125;&#x2F;&#x2F; 线性插值public static double lerp(double a, double b, double x) &#123;    return a + x * (b - a);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理震幅">处理震幅</h2><p>我们要讨论的最后一件事是如何处理柏林噪声让他看起来开更加自然。虽然柏林噪声一定程度上模拟了自然现象，但是他不能完全描述自然界中人们期望的所有行为。例如，一个地形可以像山一样大而宽广，也可以像小山，盆地一样小，还可以像巨石一样小，甚至像鹅卵石一样小。（获得不同尺度震幅）方法很简单：可以生成各种各样的不同震幅与频率的柏林噪声并将他们叠加在一起。当然，频率是采样的周期，震幅是变化的范围。</p><p><img src="./理解柏林噪声/octave01.png" /></p><p>把上图叠加在一起就得到</p><p><img src="./理解柏林噪声/octave02.png" /></p><p>显然这个结果很有说服力。上面六组噪声成为不同振幅的噪声。每个振幅的值对结果影响很小。当然每一个振幅生成都需要线性时间复杂度，因此在运行的时候不要用太多组振幅函数（例如在生成60FPS的火焰效果时）。然而，多组震幅在预处理数据（例如在生成地形时）很有效。</p><p>但是多震幅噪声会在多大程度上影响效率呢？这个问题可以用另一个叫做<strong>持久性</strong>的变量度量。<span class="exturl" data-url="aHR0cDovL2ZyZWVzcGFjZS52aXJnaW4ubmV0L2h1Z28uZWxpYXMvbW9kZWxzL21fcGVybGluLmh0bQ==">HugoElias<i class="fa fa-external-link-alt"></i></span> 是这样定义持久性的：</p><blockquote><p><span class="math inline">\(频率 = 2^i\)</span> <spanclass="math inline">\(震幅 = 持久性^i\)</span></p></blockquote><p><span class="math inline">\(i\)</span> 就是我们定义的震幅</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">public double OctavePerlin(double x, double y, double z, int octaves, double persistence) &#123;    double total &#x3D; 0;    double frequency &#x3D; 1;    double amplitude &#x3D; 1;    double maxValue &#x3D; 0;  &#x2F;&#x2F; 通常范围在 0.0 - 1.0    for(int i&#x3D;0;i&lt;octaves;i++) &#123;        total +&#x3D; perlin(x * frequency, y * frequency, z * frequency) * amplitude;        maxValue +&#x3D; amplitude;        amplitude *&#x3D; persistence;        frequency *&#x3D; 2;    &#125;    return total&#x2F;maxValue;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结论">结论</h2><p>就是这样，我们已经知道如何生成噪声了。此外，你可以在这里找到所有源码。如果你有任何问题，请在<span class="exturl" data-url="aHR0cHM6Ly9hZHJpYW5iLmlvLzIwMTQvMDgvMDkvcGVybGlubm9pc2UjZGlzcXVzX3RocmVhZA==">下面评论区<i class="fa fa-external-link-alt"></i></span>评论。</p><h3 id="参考文献">参考文献</h3><p>这是一些参考资料，如果您有兴趣，可以查看：</p><ul><li><span class="exturl" data-url="aHR0cDovL21ybC5ueXUuZWR1L35wZXJsaW4vbm9pc2Uv">Ken Perlin的“官方”改进柏林噪声<i class="fa fa-external-link-alt"></i></span> - 这是 Ken Perlin 写的原始算法.</li><li><span class="exturl" data-url="aHR0cDovL3dlYnN0YWZmLml0bi5saXUuc2UvfnN0ZWd1L1ROTTAyMi0yMDA1L3Blcmxpbm5vaXNlbGlua3MvcGVybGluLW5vaXNlLW1hdGgtZmFxLmh0bWw=">”柏林噪声常见数学问题解答“<i class="fa fa-external-link-alt"></i></span>- 这是关于该算法非常棒的参考。然而，记住他使用的 1980年代的<em>原始的</em>柏林噪声算法，并不是本文讨论的。</li><li><span class="exturl" data-url="aHR0cDovL2ZyZWVzcGFjZS52aXJnaW4ubmV0L2h1Z28uZWxpYXMvbW9kZWxzL21fcGVybGluLmh0bQ==">HugoElias 的论文<i class="fa fa-external-link-alt"></i></span> -最受欢迎的柏林噪声文章之一。这是一个关于震幅与实际应用最好的参考.然而<strong>这不是真正的柏林噪声</strong>! Hugo的算法并<em>不是</em>基于柏林噪声梯度的。相反，它使用的是<em>值噪声</em>，本质上是模糊的白噪声。不要混淆两者！</li><li><span class="exturl" data-url="aHR0cDovL2Rldm1hZy5vcmcuemEvMjAwOS8wNC8yNS9wZXJsaW4tbm9pc2Uv">"如何在你的游戏中使用柏林噪声"- Devmag<i class="fa fa-external-link-alt"></i></span> -一篇非常棒的关于柏林噪声的潜在使用的文章。这是非常棒的读物，但是<strong>再次注意，这不是真正的柏林噪声！</strong>Devmag 使用的是值噪声。</li><li><span class="exturl" data-url="aHR0cDovL2h0dHAuZGV2ZWxvcGVyLm52aWRpYS5jb20vR1BVR2VtczIvZ3B1Z2VtczJfY2hhcHRlcjI2Lmh0bWw=">GPUGems - "改进柏林噪声实践"<i class="fa fa-external-link-alt"></i></span> - 本文利用 GPU的强大功能，使用柏林噪声<em>实时</em>渲染令人惊叹的海洋。着色器很酷！</li></ul><p>感谢你的阅读！</p><h3 id="更新">更新</h3><p>8/9/14 - 我更新了更多关于点积的表示, 并且我更新了一些错别字.非常感谢诶 Reddit 给我提供的建议 <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRkaXQuY29tL3IvcHJvZ3JhbW1pbmcvY29tbWVudHMvMmQyOHA2L3VuZGVyc3RhbmRpbmdfcGVybGluX25vaXNlX2FuX2luZGVwdGhfbG9va19hdF90aGUv">/r/programming<i class="fa fa-external-link-alt"></i></span>,<span class="exturl" data-url="aHR0cDovL3d3dy5yZWRkaXQuY29tL3IvZ2FtZWRldi9jb21tZW50cy8yZDI4NG4vdW5kZXJzdGFuZGluZ19wZXJsaW5fbm9pc2VfYW5faW5kZXB0aF9sb29rX2F0X3RoZS8=">/r/gamedev<i class="fa fa-external-link-alt"></i></span>,与 <span class="exturl" data-url="aHR0cDovL3d3dy5yZWRkaXQuY29tL3IvVW5pdHkzRC9jb21tZW50cy8yZDI5amovdW5kZXJzdGFuZGluZ19wZXJsaW5fbm9pc2VfYW5faW5kZXB0aF9sb29rX2F0X3RoZS8=">/r/Unity3D<i class="fa fa-external-link-alt"></i></span>.</p>]]></content>
    
    
    <summary type="html">包含柏林噪声的原理与实现, 翻译自:Understanding Perlin Noise</summary>
    
    
    
    <category term="其他" scheme="https://blog.liukairui.me/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="数学" scheme="https://blog.liukairui.me/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="游戏" scheme="https://blog.liukairui.me/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="翻译" scheme="https://blog.liukairui.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>理解傅里叶变换</title>
    <link href="https://blog.liukairui.me/article/%E7%90%86%E8%A7%A3%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/"/>
    <id>https://blog.liukairui.me/article/%E7%90%86%E8%A7%A3%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/</id>
    <published>2022-04-12T16:00:01.000Z</published>
    <updated>2022-04-12T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>p.s. 公式有点多, 可能会出现公式加载失败, 尝试刷新即可</p></blockquote><p>本文分为三个部分介绍傅里叶变换</p><ul><li>傅里叶分析直观体验: 来自<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xOTc2MzM1OA==">知乎-傅里叶分析之掐死教程<i class="fa fa-external-link-alt"></i></span></li><li>傅里叶展开与变换的推导: 来自<span class="exturl" data-url="aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMjMwMTA1NTc0L2NoYW5uZWwvc2VyaWVzZGV0YWlsP3NpZD0xNTY5NTk3">哔哩哔哩-纯干货傅里叶变换<i class="fa fa-external-link-alt"></i></span></li><li>傅里叶应用: 来自<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVg3NDExRjc0ND9wPTYmdD0xNzYzLjQ=">哔哩哔哩-现代计算机图形学入门<i class="fa fa-external-link-alt"></i></span></li></ul><h2 id="傅里叶分析直观体验">傅里叶分析直观体验</h2><blockquote><p>法国数学家傅里叶认为，任何周期函数都可以用正弦函数和余弦函数构成的无穷级数来表示</p></blockquote><h3 id="频域与时域">频域与时域</h3><p>有一段声波, 我们可以将其表示为一段声波曲线</p><figure><img src="./理解傅里叶变换/1-1.jpg" alt="声波-时域" /><figcaption aria-hidden="true">声波-时域</figcaption></figure><p>这是一个时间与声波的函数曲线, 我们将其称之为声音的时域表达. 然而,我们没法从声音中获得更多的信息(如他们是由那些音符合成的?),我们希望用音符的方式表达音乐(比如/duo/是在那些时候发出的,/ruai/是在什么时候发出的?), 有了这些信息, 我们就可以合成这段声波,这称为声波的频域表达</p><p>前面声波的例子中横轴是时间, 我们可以很轻松的将其理解为时域表达,对于普通函数图像, 我们也可以将其理解成时域表达. 例如, 下面是一个方波</p><figure><img src="./理解傅里叶变换/1-2.png" alt="方波-时域" /><figcaption aria-hidden="true">方波-时域</figcaption></figure><p>我们可以认为其是方波的时域表达, 同时,我们可以用无穷个三角函数的和逼近他</p><figure><img src="./理解傅里叶变换/1-3.jpg" alt="方波的逼近" /><figcaption aria-hidden="true">方波的逼近</figcaption></figure><p>最前面黑色的线就是所有正弦波叠加而成的总和，也就是越来越接近矩形波的那个图形。而后面依不同颜色排列而成的正弦波就是组合为矩形波的各个分量,其频域表达如下</p><figure><img src="./理解傅里叶变换/1-4.jpg" alt="方波-频域" /><figcaption aria-hidden="true">方波-频域</figcaption></figure><p>看起来比较奇怪, 实际上, 他就是从侧面看图</p><figure><img src="./理解傅里叶变换/1-5.jpg" alt="方波-时域频域" /><figcaption aria-hidden="true">方波-时域频域</figcaption></figure><p>更加完整的表示</p><figure><img src="./理解傅里叶变换/1-6.jpg" alt="方波-时域频域" /><figcaption aria-hidden="true">方波-时域频域</figcaption></figure><p>我们也将频域表示图称为时域的频谱</p><h3 id="相位谱">相位谱</h3><p>在前面, 我们使用三角函数累加逼近一个函数,一个描述三角函数需要描述其频率, 震幅, 相位. 频率就是频谱的横坐标,震幅可以用频谱的纵坐标表示, 但是我们没办法表示相位.所以还需要补充一个相位谱</p><figure><img src="./理解傅里叶变换/1-7.jpg" alt="方波-相位谱" /><figcaption aria-hidden="true">方波-相位谱</figcaption></figure><p>先找出波峰到频率轴的水平距离, 在用这个值<strong>除以周期</strong>,就得到了相位大学</p><h3 id="傅里叶级数到傅里叶变换">傅里叶级数到傅里叶变换</h3><p>傅里叶认为可以用无穷个频率依次上升的三角函数的无穷级数贴近一个函数,就像下面这样</p><figure><img src="./理解傅里叶变换/1-8.jpg" alt="傅立叶级数展开" /><figcaption aria-hidden="true">傅立叶级数展开</figcaption></figure><p>如果忽略级数, 将频率之间的差值变小呢? 从累加<spanclass="math inline">\(\sum_{n=0}^{\infty}f_n(x)\)</span>变成了<spanclass="math inline">\(\int_0^{\infty}f_\omega(x)d\omega\)</span></p><figure><img src="./理解傅里叶变换/1-9.jpg" alt="\Delta\omega\to 0" /><figcaption aria-hidden="true"><spanclass="math inline">\(\Delta\omega\to 0\)</span></figcaption></figure><p>这就是从傅里叶级数到傅里叶变换的过程</p><p><strong>傅里叶变换就是将时域表示转换为频域表示.逆傅里叶变换就是将频域表示转换为时域表示</strong></p><h3 id="将三角函数表示在频谱上">将三角函数表示在频谱上</h3><p>频谱看起来很好画, 比如上图, 从侧面观测一下, 我们就可以得到频谱,但是有个小问题, 在级数那里, 我们还可以看到三角函数之间夹着的的彩色直线,那些也是参与累加的三角函数, 波浪的是<spanclass="math inline">\(\cos\)</span>函数, 直线是<spanclass="math inline">\(\sin\)</span>函数, 只不过<spanclass="math inline">\(\omega = 0\)</span>, 所以表达成了直线,我们如何用一个数同时表达<span class="math inline">\(\cos\)</span>与<spanclass="math inline">\(\sin\)</span>的频率呢? 借用复平面与欧拉公式</p><figure><img src="./理解傅里叶变换/1-10.jpg" alt="欧拉公式的复平面表示" /><figcaption aria-hidden="true">欧拉公式的复平面表示</figcaption></figure><p>最后得到傅里叶变换频谱</p><figure><img src="./理解傅里叶变换/1-11.jpg" alt="方波的完整相位谱" /><figcaption aria-hidden="true">方波的完整相位谱</figcaption></figure><h2 id="傅里叶变换推导">傅里叶变换推导</h2><h3 id="三角函数正交性">三角函数正交性</h3><ul><li><p>三角函数系定义如下:</p><p><span class="math display">\[  \{ 1, \sin x, \cos x, \ldots, \sin nx, \cos nx, \ldots , \sin mx, \cosmx, \ldots \}  \]</span></p><p>在这里, 可以将<span class="math inline">\(1\)</span>看作是<spanclass="math inline">\(\cos 0x\)</span>,还可以为三角函数系加上一个元素<spanclass="math inline">\(0\)</span>(即<span class="math inline">\(\sin0x\)</span>)</p></li><li><p>正交函数定义如下:</p><blockquote><p>若<span class="math inline">\(f(x)\)</span>, <spanclass="math inline">\(g(x)\)</span>在区间<spanclass="math inline">\([a,b]\)</span>上有定义, 且 <spanclass="math display">\[\int_a^b f(t)g(t)dt = 0\]</span> 那么就说<span class="math inline">\(f(x),g(x)\)</span>在区间<span class="math inline">\([a,b]\)</span>上正交</p></blockquote></li><li><p>三角函数系的正交性: 任意两个三角函数系的函数(<spanclass="math inline">\(m\neq n\)</span>)的积在区间长度为<spanclass="math inline">\(2\pi\)</span>的区间上内积分为<spanclass="math inline">\(0\)</span>, 证明如下:</p><p>首选选取积分范围为<span class="math inline">\([-\pi,\pi]\)</span>(其他区间可以由周期函数性质推得)</p><ul><li><p>若选取<span class="math inline">\(f(x) = \sin nx\)</span>, <spanclass="math inline">\(g(x) = \cos mx\)</span>, 积分为 <spanclass="math display">\[  \int_{-\pi}^\pi \sin nx \ \cos mx \ dx  \]</span> 由奇函数性质可知积分为<spanclass="math inline">\(0\)</span></p></li><li><p>若选取<span class="math inline">\(f(x) = \cos nx\)</span>, <spanclass="math inline">\(g(x) = \cos mx\)</span>, 积分为 <spanclass="math display">\[  \int_{-\pi}^\pi \cos nx \ \cos mx \ dx  \]</span> 由积化和差公式</p><blockquote><p><span class="math display">\[\cos \alpha \ \cos \beta =\frac{1}{2}[\cos(\alpha+\beta)+\cos(\alpha-\beta)]\]</span></p></blockquote><p>知,</p><ul><li><p>当<span class="math inline">\(m \neq n\)</span>时: <spanclass="math display">\[  \begin{align}  &amp; \int_{-\pi}^\pi \cos nx \ \cos mx \ dx \\  = &amp; \int_{-\pi}^\pi \frac{1}{2} [ \cos (n+m) x + \cos (n-m) x ] \dx \\  = &amp; \frac{1}{2}\left[\int_{-\pi}^\pi \cos (n+m)x \ dx+\int_{-\pi}^\pi \cos (n-m)x \ dx \right]\\  = &amp; \frac{1}{2}\left[\left. \frac{1}{m+n} \sin(n+m)x  \right|_{-\pi}^\pi + \left. \frac{1}{m-n} \sin(n-m)x  \right|_{-\pi}^\pi\right]\\  = &amp; 0  \end{align}  \]</span></p></li><li><p>顺便看一下当<span class="math inline">\(m = n\)</span>时: <spanclass="math display">\[  \begin{align}  &amp; \int_{-\pi}^\pi \cos nx \ \cos mx \ dx \\  = &amp; \int_{-\pi}^\pi \frac{1}{2} [ \cos 2n x + \cos 0 x ] \ dx \\  = &amp; \frac{1}{2}\int_{-\pi}^\pi cos 2nx \ dx + \pi \\  = &amp; 0 + \pi \\  = &amp; \pi  \end{align}  \]</span></p></li></ul></li><li><p>若选取<span class="math inline">\(f(x) = \sin nx\)</span>, <spanclass="math inline">\(g(x) = \sin mx\)</span>, 积分为</p><p><span class="math display">\[  \int_{-\pi}^\pi \sin nx \ \sin mx \ dx  \]</span> 由积化和差公式</p><blockquote><p><span class="math display">\[\sin \alpha \ \sin \beta =-\frac{1}{2}[\cos(\alpha+\beta)-\cos(\alpha-\beta)]\]</span></p></blockquote><p>知,</p><ul><li><p>当<span class="math inline">\(m \neq n\)</span>时: <spanclass="math display">\[\begin{align}&amp; \int_{-\pi}^\pi \sin nx \ \sin mx \ dx \\= &amp; \int_{-\pi}^\pi -\frac{1}{2} [ \cos (n+m) x - \cos (n-m) x ] \dx \\= &amp; -\frac{1}{2}\left[\int_{-\pi}^\pi \cos (n+m)x \ dx-\int_{-\pi}^\pi \cos (n-m)x \ dx \right]\\= &amp; - \frac{1}{2}\left[\left. \frac{1}{m+n} \sin(n+m)x  \right|_{-\pi}^\pi - \left. \frac{1}{m-n} \sin(n-m)x  \right|_{-\pi}^\pi\right]\\= &amp; 0\end{align}\]</span></p></li><li><p>顺便看一下当<span class="math inline">\(m = n\)</span>时: <spanclass="math display">\[\begin{align}&amp; \int_{-\pi}^\pi \sin nx \ \sin mx \ dx \\= &amp; \int_{-\pi}^\pi -\frac{1}{2} [ \cos 2n x - \cos 0 x ] \ dx \\= &amp; -\frac{1}{2}\int_{-\pi}^\pi cos 2nx \ dx  +\pi \\= &amp; 0 + \pi \\= &amp; \pi\end{align}\]</span></p></li></ul></li></ul><p>至此, 证明了三角函数正交性</p></li></ul><h3 id="周期为2pi函数的傅里叶展开">周期为<spanclass="math inline">\(2\pi\)</span>函数的傅里叶展开</h3><p>假设<span class="math inline">\(f(x) = f(x+2\pi)\)</span>,傅里叶级数可以理解为: 周期为<spanclass="math inline">\(2\pi\)</span>的函数可以表示为无限个三角函数的和(具体原因需要参考信号系统课程),按照这样的思想, 我们写下朴素的表达式</p><p><span class="math display">\[f(x) = \sum_{n=0}^{+\infty} a_n \cos nx + \sum_{n=0}^{+\infty}b_n \sinnx\]</span> 教材上定义</p><blockquote><p><span class="math display">\[f(x) = \frac{a_0}{2} + \sum_{n=1}^{+\infty} a_n \cos nx +\sum_{n=1}^{+\infty}b_n \sin nx\]</span></p></blockquote><p>有些出入, 尝试将<spanclass="math inline">\(n=0\)</span>单独拿出来</p><p><span class="math display">\[\begin{align}f(x) &amp; = a_0 \cos 0x + b_0 \sin 0x + \sum_{n=1}^{+\infty} a_n \cosnx + \sum_{n=1}^{+\infty}b_n \sin nx \\&amp; = a_0 + \sum_{n=1}^{+\infty} a_n \cos nx + \sum_{n=1}^{+\infty}b_n\sin nx\end{align}\]</span> 与教材上的<spanclass="math inline">\(\frac{a_0}{2}\)</span>有些出入, 但是<spanclass="math inline">\(a_0\)</span>是个常数, 形式是什么样式无所谓,</p><ul><li><p>不妨先求出<span class="math inline">\(a_0\)</span></p><p>我们发现两个<spanclass="math inline">\(\sum\)</span>中都有一个三角函数, 也可以看作是<spanclass="math inline">\(\cos 0x \times 三角函数\)</span>,如果对其做一个区间长为<span class="math inline">\(2\pi\)</span>的积分,结果为<span class="math inline">\(0\)</span>, 这样就可以消去<spanclass="math inline">\(a_n\)</span>了. <span class="math display">\[  \begin{align}  \int_{-\pi}^\pi f(x) dx &amp; = \int_{-\pi}^\pi a_0 \ dx +\int_{-\pi}^\pi \sum_{n=1}^{+\infty}a_n \cos nx\ dx + \int_{-\pi}^\pi\sum_{n=1}^{+\infty}b_n \sin nx\ dx \\  \int_{-\pi}^\pi f(x) dx &amp; = \int_{-\pi}^\pi a_0 \ dx+  \sum_{n=1}^{+\infty} a_n  \int_{-\pi}^\pi \cos nx\ dx+\sum_{n=1}^{+\infty}b_n \int_{-\pi}^\pi \sin nx\ dx \\  \int_{-\pi}^\pi f(x) dx &amp; = \int_{-\pi}^\pi a_0 \ dx \\  \int_{-\pi}^\pi f(x) dx &amp; = 2\pi a_0\\  a_0 &amp; = \frac{\int_{-\pi}^\pi f(x) dx}{2 \pi}  \end{align}  \]</span> 这里的<spanclass="math inline">\(a_0\)</span>就是教材上<spanclass="math inline">\(\frac{a_0}{2}\)</span>, 即教材上的<spanclass="math inline">\(a_0 = \frac{\int_{-\pi}^\pi f(x)dx}{\pi}\)</span>, 教材上使用<spanclass="math inline">\(\frac{a_0}{2}\)</span>表示就是为了形式上的好看,毕竟<span class="math inline">\(a_0\)</span>是个常数</p></li><li><p>继续求出<span class="math inline">\(a_n\)</span></p><p>与求<span class="math inline">\(a_0\)</span>思路一样,我们希望消除所有有<span class="math inline">\(b_n sin\ nx\)</span>的项,将 <span class="math display">\[  \begin{align}  f(x) = a_0 + \sum_{n=1}^{+\infty} a_n \cos nx +\sum_{n=1}^{+\infty}b_n \sin nx  \end{align}  \]</span> 的两边同时乘<span class="math inline">\(\cosmx\)</span>并在长为<spanclass="math inline">\(2\pi\)</span>的区间上积分,我们就可以构造出$_{-}^ mx  nx $, 根据奇函数性质,我们知道这一项恒等于<span class="math inline">\(0\)</span>(无论<spanclass="math inline">\(m\)</span>是否等于<spanclass="math inline">\(n\)</span>), 于是得出 <spanclass="math display">\[  \begin{align}  \int_{-\pi}^\pi f(x) \cos\ mx\ dx &amp; = \int_{-\pi}^\pi a_0\cos\ mx\dx + \int_{-\pi}^\pi  \sum_{n=1}^{+\infty} a_n \cos nx \cos mx\ dx+\int_{-\pi}^\pi  \sum_{n=1}^{+\infty}b_n \sin nx \cos\ mx\ dx \\  \int_{-\pi}^\pi f(x) \cos\ mx\ dx &amp; = \int_{-\pi}^\pi a_0\cos\ mx\dx + \sum_{n=1}^{+\infty} a_n \int_{-\pi}^\pi \cos nx \cos mx\ dx +\sum_{n=1}^{+\infty}b_n \int_{-\pi}^\pi\sin nx \cos\ mx\ dx \\  \int_{-\pi}^\pi f(x) \cos\ mx\ dx &amp; = \int_{-\pi}^\pi a_0\cos\ mx\dx + \sum_{n=1}^{+\infty} a_n \int_{-\pi}^\pi \cos nx \cos mx\ dx + 0 \\  \end{align}  \]</span> 当<span class="math inline">\(n \neq m\)</span>时,根据三角函数正交性, <span class="math inline">\(\int_{-\pi}^\pi \cos nx\cos mx\ dx = 0\)</span>, 即 <span class="math display">\[  \begin{align}  \int_{-\pi}^\pi f(x) \cos\ mx\ dx &amp; = \int_{-\pi}^\pi a_0\cos\ mx\dx + a_m \int_{-\pi}^\pi \cos mx \cos mx\ dx \\  \end{align}  \]</span> 在求三角函数正交性时, 我们推出过<spanclass="math inline">\(\int_{-\pi}^\pi \cos mx \cos mx\ dx =\pi\)</span>, 即 <span class="math display">\[  \begin{align}  \int_{-\pi}^\pi f(x) \cos\ mx\ dx &amp; = \int_{-\pi}^\pi a_0\cos\ mx\dx + a_m \pi \\  \end{align}  \]</span> 继续简化, 我们知道<span class="math inline">\(m=n\)</span>,而<span class="math inline">\(n\in [1,\infty)\)</span>, 即<spanclass="math inline">\(m\neq 0\)</span> <span class="math display">\[  \begin{align}  \int_{-\pi}^\pi f(x) \cos\ mx\ dx &amp; = \int_{-\pi}^\pi a_0\cos\ mx\dx + a_m \pi \\  \int_{-\pi}^\pi f(x) \cos\ mx\ dx &amp; = a_0\int_{-\pi}^\pi \cos\ 0x\cos\ mx\ dx + a_m \pi \\  \int_{-\pi}^\pi f(x) \cos\ mx\ dx &amp; = a_m \pi \\  a_m &amp; = \frac{\int_{-\pi}^\pi f(x) \cos\ mx\ dx }{\pi}  \end{align}  \]</span> 于是得到 <span class="math display">\[  a_n  = \frac{\int_{-\pi}^\pi f(x) \cos\ nx\ dx }{\pi}  \]</span> 实际上, 在这里我们可以看到, 当<spanclass="math inline">\(n=0\)</span>时, <span class="math inline">\(a_0 =\frac{\int_{-\pi}^\pi f(x) \cos\ 0x\ dx }{\pi}= \frac{\int_{-\pi}^\pif(x) dx }{\pi}\)</span>与教材中<spanclass="math inline">\(a_0\)</span>是一样的, 这就是教材用<spanclass="math inline">\(\frac{a_0}{2}\)</span>形式的原因</p></li><li><p>继续求出<span class="math inline">\(b_n\)</span></p><p>与求<span class="math inline">\(b_n\)</span>思路一样,我们希望消除所有有<span class="math inline">\(a_n \cos\ nx\)</span>的项,将 <span class="math display">\[\begin{align}f(x) = a_0 + \sum_{n=1}^{+\infty} a_n \cos nx + \sum_{n=1}^{+\infty}b_n\sin nx\end{align}\]</span> 的两边同时乘<span class="math inline">\(\sinmx\)</span>并在长为<spanclass="math inline">\(2\pi\)</span>的区间上积分,我们就可以构造出$_{-}^ mx  nx $, 根据奇函数性质,我们知道这一项恒等于<span class="math inline">\(0\)</span>(无论<spanclass="math inline">\(m\)</span>是否等于<spanclass="math inline">\(n\)</span>), 于是得出 <spanclass="math display">\[\begin{align}\int_{-\pi}^\pi f(x) \sin\ mx\ dx &amp; = \int_{-\pi}^\pi a_0\sin\ mx\dx + \int_{-\pi}^\pi  \sum_{n=1}^{+\infty} a_n \cos nx \sin mx\ dx+\int_{-\pi}^\pi  \sum_{n=1}^{+\infty}b_n \sin nx \sin\ mx\ dx \\\int_{-\pi}^\pi f(x) \sin\ mx\ dx &amp; = \int_{-\pi}^\pi a_0\sin\ mx\dx + \sum_{n=1}^{+\infty} a_n \int_{-\pi}^\pi \cos nx \sin mx\ dx +\sum_{n=1}^{+\infty}b_n \int_{-\pi}^\pi \sin nx \sin\ mx\ dx \\\int_{-\pi}^\pi f(x) \sin\ mx\ dx &amp; = \int_{-\pi}^\pi a_0\sin\ mx\dx + \sum_{n=1}^{+\infty} a_n \times 0 + \sum_{n=1}^{+\infty}b_n\int_{-\pi}^\pi \sin nx \sin\ mx\ dx \\\int_{-\pi}^\pi f(x) \sin\ mx\ dx &amp; = \int_{-\pi}^\pi a_0\sin\ mx\dx + \sum_{n=1}^{+\infty}b_n \int_{-\pi}^\pi \sin nx \sin\ mx\ dx \\\end{align}\]</span> 当<span class="math inline">\(n \neq m\)</span>时,根据三角函数正交性, <span class="math inline">\(\int_{-\pi}^\pi \sin nx\sin\ mx\ dx = 0\)</span>, 即 <span class="math display">\[\begin{align}\int_{-\pi}^\pi f(x) \sin\ mx\ dx &amp; = \int_{-\pi}^\pi a_0\sin\ mx\dx + b_m \int_{-\pi}^\pi \sin mx \sin\ mx\ dx\end{align}\]</span> 在求三角函数正交性时, 我们推出过<spanclass="math inline">\(\int_{-\pi}^\pi \sin mx \sin mx\ dx =\pi\)</span>, 即 <span class="math display">\[\begin{align}\int_{-\pi}^\pi f(x) \sin\ mx\ dx &amp; = \int_{-\pi}^\pi a_0\sin\ mx\dx + b_m \pi \\\end{align}\]</span> 继续简化, 我们知道<span class="math inline">\(m=n\)</span>,而<span class="math inline">\(n\in [1,\infty)\)</span>, 即<spanclass="math inline">\(m\neq 0\)</span> <span class="math display">\[\begin{align}\int_{-\pi}^\pi f(x) \sin\ mx\ dx &amp; = \int_{-\pi}^\pi a_0\sin\ mx\dx + b_m \pi \\\int_{-\pi}^\pi f(x) \sin\ mx\ dx &amp; = a_0\int_{-\pi}^\pi \cos\0x\sin\ mx\ dx + b_m \pi \\\int_{-\pi}^\pi f(x) \sin\ mx\ dx &amp; = b_m \pi \\b_m = \frac{\int_{-\pi}^\pi f(x) \sin\ mx\ dx}{\pi}\end{align}\]</span> 于是得到 <span class="math display">\[b_n = \frac{\int_{-\pi}^\pi f(x) \sin\ nx\ dx}{\pi}\]</span></p></li></ul><p>最后得到周期为<spanclass="math inline">\(2\pi\)</span>函数的傅里叶展开 <spanclass="math display">\[\begin{align}f(x) &amp;= f(x+2\pi)\\f(x) &amp;= \frac{a_0}{2} + \sum_{n=1}^{\infty} a_n \cos\ nx+\sum_{n=1}^{\infty} b_n \sin\ nx\\a_n &amp;= \frac{\int_{-\pi}^\pi f(x) \cos\ nx\ dx }{\pi}\\b_n &amp;= \frac{\int_{-\pi}^\pi f(x) \sin\ nx\ dx}{\pi}\\\end{align}\]</span></p><h3 id="周期为t函数的傅里叶展开">周期为<spanclass="math inline">\(T\)</span>函数的傅里叶展开</h3><p>使用换元将<span class="math inline">\(f(x)\)</span>的周期从<spanclass="math inline">\(2\pi\)</span>推广到<spanclass="math inline">\(T\)</span>,我们需要将三角函数的周期与积分区间长度变成<spanclass="math inline">\(T\)</span>, 即对于三角函数有 <spanclass="math display">\[\begin{align}\frac{2\pi}{\omega} &amp; = T\\\omega &amp; = \frac{2\pi}{T}\\\end{align}\]</span> 选取积分区间<spanclass="math inline">\([0,T]\)</span>(选哪里都可以,只要是一个周期就行)对参数变换 <span class="math display">\[\begin{align}\cos x \to \cos \omega x \\\sin x \to \sin \omega x \\\end{align}\]</span></p><p><span class="math display">\[\begin{align}a_n &amp;= \frac{\int_{-\pi}^\pi f(x) \cos\ nx\ dx }{\pi} &amp;\to a_n&amp;= \frac{2\int_0^T f(x) \cos\ n\omega x\ dx }{T} \\b_n &amp;= \frac{\int_{-\pi}^\pi f(x) \sin\ nx\ dx }{\pi} &amp;\to b_n&amp;= \frac{2\int_0^T f(x) \sin\ n\omega x\ dx }{T} \\\end{align}\]</span> 得到周期为<spanclass="math inline">\(T\)</span>函数的傅里叶展开 <spanclass="math display">\[\begin{align}f(x) &amp; = \frac{a_0}{2} + \sum_{n=1}^{\infty} a_n \cos\ n\omega x +\sum_{n=1}^{\infty} b_n \sin\ n\omega x\\a_n &amp; = \frac{2\int_0^T f(x) \cos\ n\omega x\ dx }{T} \\b_n &amp; = \frac{2\int_0^T f(x) \sin\ n\omega x\ dx }{T} \\\omega &amp; = \frac{2\pi}{T}\end{align}\]</span></p><h3 id="傅里叶级数的复数形式">傅里叶级数的复数形式</h3><p>利用欧拉公式</p><blockquote><p><span class="math display">\[e^{i\theta} = \cos\theta + i\sin\theta\]</span></p></blockquote><p>令<span class="math inline">\(\theta&#39; =-\theta\)</span>我们可以相加减得到 <span class="math display">\[\begin{align}\cos\theta &amp;= \frac{1}{2} (e^{i\theta}+e^{-i\theta})\\\sin\theta &amp;= -\frac{1}{2}i (e^{i\theta}-e^{-i\theta})\\\end{align}\]</span> 带入周期为<span class="math inline">\(T\)</span>的傅里叶展开<span class="math display">\[\begin{align}f(x) &amp; = \frac{a_0}{2} + \sum_{n=1}^{\infty}\frac{1}{2}a_n  (e^{in\omega x}+e^{-in\omega x}) - \sum_{n=1}^{\infty}\frac{1}{2}ib_n (e^{in\omega x}-e^{-in\omega x})  \\\end{align}\]</span> 分别将<span class="math inline">\(e^{in\omegat}\)</span>与<span class="math inline">\(e^{-in\omega t}\)</span>合并<span class="math display">\[\begin{align}f(x) &amp; = \frac{a_0}{2} + \sum_{n=1}^{\infty}\frac{1}{2}(a_n-ib_n)e^{in\omega x}+\sum_{n=1}^{\infty}\frac{1}{2}(a_n+ib_n)e^{-in\omega x}\end{align}\]</span> 我们发现后两项具有类似的<spanclass="math inline">\(\frac{1}{2}(a_n?ib_n)e^{?in\omegax}\)</span>的结构, 将后半部分的<spanclass="math inline">\(n\)</span>换元为<spanclass="math inline">\(-n\)</span> <span class="math display">\[\begin{align}f(x) &amp; = \frac{a_0}{2} + \sum_{n=1}^{\infty}\frac{1}{2}(a_n-ib_n)e^{in\omega x}+\sum_{n=-\infty}^{-1}\frac{1}{2}(a_{-n}+ib_{-n})e^{in\omega x}\end{align}\]</span> 尝试将同样的结构应用于<spanclass="math inline">\(\frac{a_0}{2}\)</span>, 于是得到 <spanclass="math display">\[\frac{a_0}{2} = \sum_{n=0}^{0}\frac{1}{2}(a_0)e^{i0\omega x}\]</span> 形式完全统一了 <span class="math display">\[f(x) = \sum_{-\infty}^{\infty} C_n e^{in\omega x} \\\]</span></p><p><span class="math display">\[C_n = \left\{\begin{align}&amp;\frac{a_0}{2}, &amp; n=0 \\&amp;\frac{a_n-ib_n}{2}, &amp; n\in(0,+\infty) \cap \mathbb{Z} \\&amp;\frac{a_{-n}+ib_{-n}}{2}, &amp; n\in(-\infty, 0)\cap \mathbb{Z} \\\end{align}\right.\]</span> 带入<span class="math inline">\(a_n, b_n\)</span>, 得到</p><ul><li><p>对于<span class="math inline">\(C_0\)</span></p><p><span class="math display">\[  \begin{align}  C_0 &amp; = \frac{a_0}{2} \\  &amp; = \frac{1}{2} \frac{2}{T}\int_0^T f(x) \cos\ 0\omega x\ dx \\  &amp; = \frac{1}{T}\int_0^T f(x)\ dx \\  \end{align}  \]</span></p></li><li><p>对于<span class="math inline">\(C_n(n\in[0,+\infty) \cap\mathbb{Z})\)</span></p><p><span class="math display">\[  \begin{align}  C_n &amp; = \frac{a_n-ib_n}{2} \\  &amp; = \frac{1}{2}\frac{2}{T}\left( \int_0^Tf(x)\cos n\omega x \ dx-i\int_0^Tf(x)\sin n\omega x\ dx\right)\\  &amp; = \frac{1}{T} \int_0^Tf(x)\left( \cos n\omega x - i\sin n\omegax\right)\ dx  \end{align}  \]</span></p><p>结果的括号中很像欧拉公式, 但是虚部前为负号, 由于<spanclass="math inline">\(\cos x\)</span>为偶函数, <spanclass="math inline">\(\sin x\)</span> 为奇函数 <spanclass="math display">\[  \begin{align}  C_n &amp; = \frac{1}{T} \int_0^Tf(x)\left( \cos n\omega x - i\sinn\omega x\right)\ dx\\  &amp; = \frac{1}{T} \int_0^Tf(x)\left( \cos \left(-n\omega x) + i\sin(-n\omega x\right)\right)\ dx\\  &amp; = \frac{1}{T} \int_0^Tf(x)e^{-in\omega x}\ dx  \end{align}  \]</span></p></li><li><p>对于<span class="math inline">\(C_n(n\in(-\infty,0) \cap\mathbb{Z})\)</span></p><p><span class="math display">\[  \begin{align}  C_n &amp; = \frac{a_{-n}+ib_{-n}}{2} \\  &amp; = \frac{1}{2}\frac{2}{T}\left( \int_0^Tf(x)\cos (-n\omega x)\dx+i \int_0^Tf(x)\sin (-n\omega x)\ dx \right)\\  &amp; = \frac{1}{T} \int_0^Tf(x)\left( \cos n\omega x - i\sin n\omegax\right) dx \\  &amp; = \frac{1}{T} \int_0^Tf(x)e^{-in\omega x}\ dx  \end{align}  \]</span></p></li></ul><p>发现<span class="math inline">\(C_n(n\in(-\infty,0) \cap\mathbb{Z})\)</span>与<span class="math inline">\(C_n(n\in(0,+\infty)\cap \mathbb{Z})\)</span>的表达式是一样的, 同时将<spanclass="math inline">\(n=0\)</span>代入<spanclass="math inline">\(C_n(n\in(-\infty,0) \cap\mathbb{Z})\)</span>表达式, 发现结果与<spanclass="math inline">\(C_0\)</span>相同, 最后<spanclass="math inline">\(C_n\)</span>被统一为 <span class="math display">\[C_n = \frac{1}{T} \int_0^Tf(x)e^{-in\omega x}\ dx\]</span> 即 <span class="math display">\[\begin{align}f(x) &amp;= f(x+T) \\f(x) &amp;= \sum_{-\infty}^{\infty}C_ne^{in\omega x}\\C_n &amp;= \frac{1}{T} \int_0^Tf(x)e^{-in\omega x}\ dx\\\end{align}\]</span></p><h3 id="傅里叶变换">傅里叶变换</h3><p>希望将非周期函数<spanclass="math inline">\(f(x)\)</span>表示为傅里叶<strong>展开</strong>,<span class="math display">\[\begin{align}f(x) &amp;= \sum_{-\infty}^{\infty}C_ne^{in\omega x}\\C_n &amp;= \frac{1}{T} \int_0^Tf(x)e^{-in\omega x}\ dx\\\end{align}\]</span> 可以发现<span class="math inline">\(e^{in\omegax}\)</span>是一个固定模式, <spanclass="math inline">\(f(x)\)</span>展开后的每一项都是由<spanclass="math inline">\(C_n\)</span>决定的, <spanclass="math inline">\(C_n\)</span>是一个复数, 可以将<spanclass="math inline">\(C_n\)</span>取值画在一个复平面上, 将不同<spanclass="math inline">\(n\omega\)</span>下的<spanclass="math inline">\(C_n\)</span>画在一个三维坐标系上(<spanclass="math inline">\(n\omega-C_n\)</span>), 即我们得到了<spanclass="math inline">\(f(x)\)</span>的频域表达</p><p>可以把非周期函数当作<span class="math inline">\(T\to+\infty\)</span>的周期函数, 此时频谱上的<spanclass="math inline">\(w\)</span>之间距离<spanclass="math inline">\(\Delta w\to0\)</span>, <spanclass="math inline">\(f(x)\)</span>的频谱上的离散点变连续, 成为连续函数,此时, 我们就可以将<spanclass="math inline">\(\sum^\infty_{n=-\infty}\Delta\omega\)</span>变为<spanclass="math inline">\(\int_{-\infty}^{\infty} d\omega\)</span></p><p>将<span class="math inline">\(C_n\)</span>代入<spanclass="math inline">\(f(x)\)</span> <span class="math display">\[f(x) = \sum_{-\infty}^{\infty} \frac{1}{T} \int_0^Tf(x)e^{-in\omega x}\dx e^{in\omega x}\\\]</span> 出了个小问题, 我们找不前面说的<spanclass="math inline">\(\Delta\omega\)</span>了...但是, 有 <spanclass="math display">\[\frac{\omega}{2\pi} = \frac{1}{T}\\\]</span> 代入得到 <span class="math display">\[\begin{align}f(x) &amp;= \sum_{-\infty}^{\infty} \frac{1}{T} \int_0^Tf(x)e^{-in\omegax}\ dx e^{in\omega x}\\&amp;=\frac{1}{2\pi}\sum_{-\infty}^{\infty}  \int_0^T \omegaf(x)e^{-in\omega x}\ dx e^{in\omega x}\\\end{align}\]</span> 将<span class="math inline">\(C_n\)</span>的积分区间从<spanclass="math inline">\([0,T]\)</span>换到<spanclass="math inline">\([-\frac{T}{2},\frac{T}{2}]\)</span>(这个积分区间是可以随便换的, 只要区间长为T就行,在前面推导过程中也没有利用到<spanclass="math inline">\([0,T]\)</span>的特殊性质) <spanclass="math display">\[f(x)=\frac{1}{2\pi}\sum_{n=-\infty}^{\infty}  \int_{-\frac{T}{2}}^{\frac{T}{2}}\omega f(x)e^{-in\omega x}\ dx e^{in\omega x}\]</span> 我们又有<span class="math inline">\(\Delta\omega\to 0, T\to+\infty\)</span> <span class="math display">\[\begin{align}f(x)&amp;=\frac{1}{2\pi}\int_{-\infty}^{+\infty}  \int_{-\frac{T}{2}}^{\frac{T}{2}}  f(x)e^{-i\omegax}\ dx e^{i\omega x}\ d\omega\\&amp;=\frac{1}{2\pi}\int_{-\infty}^{+\infty}  \int_{-\infty}^{+\infty}  f(x)e^{-i\omegax}\ dx e^{i\omega x}\ d\omega\\\end{align}\]</span></p><p>注意, 指数上的<span class="math inline">\(n\omega\)</span>变成了<spanclass="math inline">\(\omega\)</span>, 因为我们将加和变成了积分</p><ul><li><p>将时域到频域的变换 <span class="math display">\[  F(w) = \int_{-\infty}^{+\infty}  f(x)e^{-in\omega x}\ dx  \]</span></p><p>称为<strong>傅里叶变换</strong></p></li><li><p>将频域到是时域的变换 <span class="math display">\[\begin{align}f(x)&amp;=\frac{1}{2\pi}\int_{-\infty}^{+\infty}  \int_{-\infty}^{+\infty}  f(x)e^{-in\omegax}\ dx e^{in\omega x}\ d\omega\\&amp;=\frac{1}{2\pi}\int_{-\infty}^{+\infty} F(w) e^{in\omega x}\d\omega\end{align}\]</span></p><p>称为<strong>逆傅里叶变换</strong></p></li></ul><p><strong>最后想想我们做了什么</strong></p><ul><li>证明了三角函数正交性, 求了<span class="math inline">\(\int_{0}^{\pi}\sin nx \sin nx\ dx = \int_{0}^{\pi} \cos nx \cos nx\ dx =\pi\)</span></li><li>利用三角函数正交性求出了周期为<spanclass="math inline">\(2\pi\)</span>函数的傅里叶展开</li><li>将周期从<span class="math inline">\(2\pi\)</span>推广到<spanclass="math inline">\(T\)</span>, 得到了傅里叶展开的一般形式</li><li>利用欧拉公式替换傅里叶展开中的三角函数, 合并, 换元,得到傅里叶展开的复数表现形式</li><li>将非周期函数转为周期无穷大的周期函数, 将加和转为积分,最终得到傅里叶变换与逆变换. 利用频域表达解释了积分的合理性</li></ul><h2 id="傅里叶变换应用">傅里叶变换应用</h2><p>傅里叶变换最大的应用就是滤波,我们可以利用傅里叶变换将时域表达转换为频域表达,然后手动移除一些无用的频率, 最终通过逆傅里叶变换得到滤波后时域表达.在图形学中, 我们可以认为图像是图的时域表达, 并获取其频域表达图</p><figure><img src="./理解傅里叶变换/3-1.png" alt="图形及其频谱" /><figcaption aria-hidden="true">图形及其频谱</figcaption></figure><p>左边是时域, 右边是频域. 在频谱中, 光亮越靠近中心, 频率越低.大部分图像的频谱主要都集中在低频. 我们还可以看到水平与垂直的两条光亮,这是因为在傅里叶变换时, 我们将图像的左右两边, 上下两边连了起来,使之成为了一个无限大的图像, 而左右边缘, 上边缘差异就很大, 于是频率很高,出现了两个亮条.</p><p>高频一般代表这图形的边界(色彩变化很明显),而低频一般代表非边界(因为色彩变化不明显)</p><p>我们使用一个低通滤波器过滤掉高频波, 效果如下</p><figure><img src="./理解傅里叶变换/3-2.png" alt="应用低通滤波器后" /><figcaption aria-hidden="true">应用低通滤波器后</figcaption></figure><p>图像边界没了, 图像变得模糊了, 还可以应用一个高通滤波器, 效果如下</p><figure><img src="./理解傅里叶变换/3-3.png" alt="应用高通滤波器后" /><figcaption aria-hidden="true">应用高通滤波器后</figcaption></figure><p>只有边界信息被保留了下来...</p>]]></content>
    
    
    <summary type="html">最近学到光栅化时发现完全不理解信号与线性系统中的基础内容🤯.大一高数也没有讲傅里叶变化,于是临时补一下相关定义与推导🤕</summary>
    
    
    
    <category term="控制系统" scheme="https://blog.liukairui.me/categories/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="傅里叶变换" scheme="https://blog.liukairui.me/categories/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/"/>
    
    
    <category term="笔记" scheme="https://blog.liukairui.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="控制系统" scheme="https://blog.liukairui.me/tags/%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="傅里叶变换" scheme="https://blog.liukairui.me/tags/%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>GAMES-101现代计算机图形学入门笔记</title>
    <link href="https://blog.liukairui.me/article/GAMES-101%E7%8E%B0%E4%BB%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.liukairui.me/article/GAMES-101%E7%8E%B0%E4%BB%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2022-04-07T16:00:14.000Z</published>
    <updated>2022-04-07T16:00:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主讲: <span class="exturl" data-url="aHR0cHM6Ly9zaXRlcy5jcy51Y3NiLmVkdS9+bGluZ3FpLw==">闫令琪<i class="fa fa-external-link-alt"></i></span>课程主页: https://games-cn.org/intro-graphics/ B站回放:https://www.bilibili.com/video/BV1X7411F744</p></blockquote><h2 id="lecture-1-概论">Lecture 1 概论</h2><p><strong>图形学定义</strong>: 用计算机合成与操作视觉信息</p><p><strong>图形学应用</strong>: 游戏/ 电影/ 动画/ 设计/ 可视化/虚拟现实(Virtual Reality)/ 增强显示(Augmented Reality) (VR看不到现实,AR可以看到现实, 还可以看到额外虚拟的东西)/ 数字插画/ 模拟(特效 )/ GUI/排版与印刷</p><p><strong>图形学与计算机视觉</strong></p><ul><li><p>计算机视觉做的是猜测的事情, 尝试理解, 猜测图像中的信息</p></li><li><p>图形学做的事准确的事情, 将信息表现为图形</p><pre class="mermaid">  graph LRmod(模型) --图形学>渲染--> img(图像)img --计算机视觉--> modmod --图形学>模拟/建模--> modimg --计算机视觉>图形处理--> img</pre></li></ul><p><strong>难点</strong>:</p><ul><li>创建并与虚拟世界交互</li><li>了解材料的物理性质</li><li>新的计算与显示技术</li></ul><p><strong>课程大纲</strong></p><ul><li>光栅化(Rasterization): 将三维几何形体显示在屏幕上</li><li>几何, 曲线与曲面(Curves and Meshes): 如何得到曲线与曲面,用简单曲面得到复杂曲面, 在形变时曲面变化</li><li>光线追踪(Ray Tracing)</li><li>动画与模拟(Animation and Simulation)</li></ul><h2 id="lecture-2-线性代数复习">Lecture 2 线性代数复习</h2><p><strong>图形学需要知识</strong></p><ul><li>线性代数/ 微积分/ 统计学</li><li>光学/ 力学</li><li>信号处理/ 数值分析</li></ul><p><strong>向量</strong></p><ul><li><p>向量只有长度与方向没有绝对的始终点.加减遵循平行四边形法则</p></li><li><p>默认使用列向量, 也可以写作<spanclass="math inline">\((x,y,z)^T\)</span></p></li><li><p>用<span class="math inline">\(\| \vec{a}\|\)</span>表示向量长度</p></li><li><p>用<span class="math inline">\(\hat{a}\)</span>表示与<spanclass="math inline">\(a\)</span>向量同方向的单位向量, 即<spanclass="math inline">\(\hat{a} = \vec{a} / \| \vec{a}\|\)</span></p></li><li><p>向量点乘</p><ul><li><p><span class="math inline">\(\vec{a} \cdot \vec{b} =\|\vec{a}\|\|\vec{b}\|\cos\theta\)</span>, 即<spanclass="math inline">\(\cos\theta = \hat{a}\cdot\hat{b}\)</span></p></li><li><p>在笛卡尔坐标系下 <span class="math display">\[\vec{a} \cdot \vec{b} = \left(\begin{matrix}x_a\\ y_a\end{matrix}\right)\cdot \left(\begin{matrix}x_b\\ y_b\end{matrix}\right) = x_ax_b+y_ay_b\]</span></p><p><span class="math display">\[\vec{a} \cdot \vec{b} = \left(\begin{matrix}x_a\\ y_a\\z_a\end{matrix}\right) \cdot \left(\begin{matrix}x_b\\ y_b\\z_b\end{matrix}\right) = x_ax_b+y_ay_b+z_az_b\]</span></p></li><li><p>向量点乘满足交换与分配率</p></li><li><p>应用: 求两向量夹角 / 求向量在另一个向量上的投影 /两个向量之间的垂直距离(投影向量减一下) / 描述两个向量有多接近 /描述两个向量的前后关系(点积正负)</p></li></ul></li><li><p>向量叉积</p><ul><li><p>输入两个向量<span class="math inline">\(\vec{a},\vec{b}\)</span>, 得到与两个向量都垂直的向量</p><ul><li>大小: <span class="math inline">\(\|\vec{a}\| \|\vec{b}\|\sin\theta\)</span></li><li>方向: 使用右手螺旋法则从<spanclass="math inline">\(\vec{a}\)</span>握到<spanclass="math inline">\(\vec{b}\)</span>, 拇指指向</li></ul></li><li><p>在笛卡尔坐标系中 <span class="math display">\[\vec{a} \times \vec{b} = \left(\begin{matrix}x_a\\ y_a\\z_a\end{matrix}\right) \times \left(\begin{matrix}x_b\\ y_b\\z_b\end{matrix}\right) = \left(\begin{matrix}y_az_b-y_bz_a\\z_ax_b-z_bx_a\\ x_ay_b-x_by_a\end{matrix}\right)\]</span> 矩阵表示 <span class="math display">\[\vec{a} \times \vec{b} = A^* b =\left(\begin{matrix}0&amp;-z_a&amp;y_a\\z_a&amp;0&amp;-x_a\\-y_a&amp;x_a&amp;0\end{matrix}\right)\left(\begin{matrix}x_b\\y_b\\z_b\end{matrix}\right)\]</span> 注意矩阵表示时<spanclass="math inline">\(A^*\)</span>是一个整体表示dual matrix,不要当成乘号</p></li><li><p>不满足交换率( <span class="math inline">\(\vec{a} \times \vec{b}= - \vec{b} \times \vec{a}\)</span> ), 满足分配率</p></li><li><p>应用:</p><ul><li>建立三维直角坐标系(右手系)</li><li>判定左右: <span class="math inline">\(\vec{a} \times \vec{b} &gt;0\)</span>说明<span class="math inline">\(\vec{b}\)</span>在<spanclass="math inline">\(\vec{a}\)</span>左边</li><li>判断点在多边形内: 以三角形为例, 判断点<spanclass="math inline">\(P\)</span>在三角形<spanclass="math inline">\(ABC\)</span>内即判断<spanclass="math inline">\(\vec{AB} \times \vec{AP}\)</span>, <spanclass="math inline">\(\vec{BC} \times \vec{BP}\)</span>, <spanclass="math inline">\(\vec{CA} \times\vec{CP}\)</span>是否同号(顶点枚举顺序不重要), 我们称叉积为<spanclass="math inline">\(0\)</span>的情况为conner case,随你把他定义为在内部还是外部</li></ul></li></ul><p><strong>矩阵</strong></p><ul><li>矩阵乘法中结果矩阵的<span class="math inline">\(m\)</span>行<spanclass="math inline">\(n\)</span>列就是第一个矩阵的<spanclass="math inline">\(m\)</span>行乘第二个矩阵<spanclass="math inline">\(n\)</span>列(虽然有点废话, 但是蛮好用的)</li><li>矩阵乘法没有交换率, 有结合率与分配率. <spanclass="math inline">\((AB)^T = B^TA^T\)</span></li><li>应用: 对图像中的点应用变换</li></ul></li></ul><h2 id="lecture-3-transformation---模型变换">Lecture 3 Transformation -模型变换</h2><p>两种变换:</p><ul><li>模型变换: 模型变(仿射变换)</li><li>视图变换: 摄像机变(投影, 3D转2D...)</li></ul><h3 id="二维变换">二维变换</h3><p>就是利用矩阵将每个点进行线性变换, 做变换相当于求解矩阵,也就是用n个点求一个n元一次方程. 注意, 所有的变换都默认基于原点</p><ul><li><p>缩放(Scale)</p><p>将图像缩放<spanclass="math inline">\(S_{a,b}\)</span>倍相当于将每个点<spanclass="math inline">\(x \to x\times a, y \to y\times b\)</span>,可以用矩阵简单描述变换 <span class="math display">\[\left[\begin{matrix}x&#39;\\y&#39;\end{matrix}\right]=\left[\begin{matrix}s_x&amp;0\\0&amp;s_y\end{matrix}\right]\left[\begin{matrix}x\\y\end{matrix}\right]\]</span> 图形关于<spanclass="math inline">\(oy\)</span>对称就相当于是缩放<spanclass="math inline">\(S_{-1,1}\)</span></p></li><li><p>切变(Shear)</p><p>大概长这样</p><figure><img src="./img/3-1.png" alt="shear" /><figcaption aria-hidden="true">shear</figcaption></figure><p>不知道如何变换的时候就列n元一次方程, 首先发现<spanclass="math inline">\(y\)</span>是不变的, 就看<spanclass="math inline">\(x\)</span>, 找<spanclass="math inline">\((1,0)\to(1,0)\)</span>, <spanclass="math inline">\((0,1)\to(a,1)\)</span> <spanclass="math display">\[\left\{\begin{align}1 = 1k_x + 0k_y\\a = 0k_x + 1k_y\end{align}\right.\]</span></p><p>很容易推算出<span class="math inline">\(k_y = a, k_x = 1\)</span>,于是得到矩阵 <span class="math display">\[\left[\begin{matrix}x&#39;\\y&#39;\end{matrix}\right]=\left[\begin{matrix}1&amp;a\\0&amp;1\end{matrix}\right]\left[\begin{matrix}x\\y\end{matrix}\right]\]</span></p></li><li><p>旋转(Rotate)</p><p>默认旋转基于原点, 以逆时针为正方向. 使用<spanclass="math inline">\(R_\theta\)</span>表示旋转了<spanclass="math inline">\(\theta\)</span></p><figure><img src="./img/3-2.png" alt="rotate" /><figcaption aria-hidden="true">rotate</figcaption></figure><p>假设旋转了<spanclass="math inline">\(\theta\)</span>只需要找两个特殊点就可以求得矩阵,这里采用<span class="math inline">\((1,0)\to(\cos\theta,\sin\theta)\)</span>与<span class="math inline">\((0,1)\to(-\sin\theta,\cos\theta)\)</span>方便消元 <span class="math display">\[\left\{\begin{align}(\cos\theta, \sin\theta)^T = (k_{xx}\times1+k_{xy}\times 0,k_{yx}\times1+k_{yy}\times 0)^T \\(-\sin\theta, \cos\theta)^T = (k_{xx}\times0+k_{xy}\times 1,k_{yx}\times0+k_{yy}\times 1)^T\end{align}\right.\]</span> 于是得到旋转矩阵 <span class="math display">\[\left[\begin{matrix}x&#39;\\y&#39;\end{matrix}\right]=\left[\begin{matrix}\cos\theta&amp;-\sin\theta\\ \sin\theta&amp;\cos\theta\end{matrix}\right]\left[\begin{matrix}x\\y\end{matrix}\right]\]</span></p></li><li><p>平移(Translation)</p><p>用<span class="math inline">\(T_{tx,ty}\)</span>描述将点平移<spanclass="math inline">\((t_x, t_y)\)</span>. 平移不属于上述线性变换,没法用二阶矩阵乘法描述这种变换, 可以采用如下方法表示 <spanclass="math display">\[\left[\begin{matrix}x&#39;\\y&#39;\end{matrix}\right]=\left[\begin{matrix}1&amp;0\\0&amp;1\end{matrix}\right]\left[\begin{matrix}x\\y\end{matrix}\right]+\left[\begin{matrix}t_x\\t_y\end{matrix}\right]\]</span> 我们希望将线性变换与平移用一个统一的方式表现出来.于是想到了使用<strong>齐次坐标</strong>(Homogeneous Coordinates)表示法,为将每个点/向量增加一维</p><ul><li>点: <span class="math inline">\((x,y)^T \to (x,y,1)^T\)</span></li><li>向量: <span class="math inline">\((x,y)^T \to(x,y,0)^T\)</span></li></ul><p>用第三维<span class="math inline">\(w\)</span>为非<spanclass="math inline">\(0\)</span>表示点, <spanclass="math inline">\(w=0\)</span>表示向量. <spanclass="math inline">\(w\neq0\)</span>时的点<spanclass="math inline">\((x,y,w)^T\)</span>可以认为是<spanclass="math inline">\((x/w, y/w, 1)^T\)</span>.两个点相减就是向量(所以向量<span class="math inline">\(w = 0\)</span>),看起来这种表示方法比较符合数学定义</p><ul><li>向量加减还是向量: <span class="math inline">\((x_1,y_1,0)\pm(x_2,y_2,0) = (x_1+x_2, y_1+y_2, 0)\)</span></li><li>点减点是向量: <span class="math inline">\((x_1,y_1,1)- (x_2,y_2,1) =(x_1-x_2, y_1-y_2, 0)\)</span></li><li>点加点是两点的中点: <span class="math inline">\((x_1,y_1,1)+(x_2,y_2,1) = (x_1+x_2, y_1+y_2, 2) = (\frac{x_1+x_2}{2},\frac{y_1+y_2}{2}, 1)\)</span></li></ul><p>平移<span class="math inline">\(T_{tx,ty}\)</span>可以写作 <spanclass="math display">\[\left[\begin{matrix}x&#39;\\y&#39;\\1\end{matrix}\right]=\left[\begin{matrix}1&amp;0&amp;t_x\\0&amp;1&amp;t_y\\0&amp;0&amp;1\end{matrix}\right]\left[\begin{matrix}x\\y\\1\end{matrix}\right]\]</span> 很容易理解, 第三列可以被认为是偏移量</p><p>我们称旋转, 缩放, 切变, 平移为仿射变换,所有仿射变换矩阵第三行均为<spanclass="math inline">\([0,0,1]\)</span></p></li><li><p>矩阵乘法有结合律无交换律</p><p>矩阵满足结合率, 例如我们先用一个旋转的矩阵<spanclass="math inline">\(M_R\)</span>再用一个缩放矩阵<spanclass="math inline">\(M_S\)</span>, 处理<spanclass="math inline">\(P\)</span>, 我们可以写<spanclass="math inline">\(P&#39; = M_S (M_R P)\)</span>, 利用矩阵乘法结合律,也可以写作<span class="math inline">\(P&#39; = (M_S M_R) P\)</span></p><p>对于如下矩阵 <span class="math display">\[\left[\begin{matrix}x&#39;\\y&#39;\\1\end{matrix}\right]=\left[\begin{matrix}\cos\theta&amp;-\sin\theta&amp;t_x\\\sin\theta&amp;\cos\theta&amp;t_y\\0&amp;0&amp;1\end{matrix}\right]\left[\begin{matrix}x\\y\\1\end{matrix}\right]\]</span> 我们知道他即应用了旋转又应用了平移.我们定义的旋转是基于原点的, 此时旋转与平移的顺序会影响成像</p><p><img src="./img/3-3.png" /></p><p>模拟一下先旋转后平移与先平移后旋转可以轻松得到这个矩阵是先旋转后平移的.我们可以得,用同一个矩阵表示线性变换与平移时应该<strong>先线性后平移</strong></p></li><li><p>逆矩阵</p><p>在线性代数中若<span class="math inline">\(M N = I\)</span>则<spanclass="math inline">\(N, M\)</span>互为逆矩阵. 在线性变换中,一个变换矩阵的逆矩阵<spanclass="math inline">\(M^{-1}\)</span>做与变换矩阵<spanclass="math inline">\(M\)</span>完全相反的事情(例如<spanclass="math inline">\(M\)</span>是旋转<spanclass="math inline">\(45^\circ\)</span>平移<spanclass="math inline">\((1,2)\)</span>, <spanclass="math inline">\(M^{-1}\)</span>则是平移<spanclass="math inline">\((-1,-2)\)</span>旋转<spanclass="math inline">\(-45^\circ\)</span>). 补充: 旋转矩阵是正交矩阵,即旋转矩阵的转置就是他的逆矩阵</p></li></ul><h3 id="三维变换">三维变换</h3><p>三维变换可以用二维变换类比得到, 只是三维的向量是<spanclass="math inline">\((x,y,z,0)^T\)</span>, 三维的点是<spanclass="math inline">\((x,y,z,1)^T\)</span>或<spanclass="math inline">\((x,y,z,w)^T = (x/w,y/w,z/w,1)^T\)</span>,三维变换矩阵是四阶矩阵</p><ul><li><p>缩放 <span class="math display">\[S(s_x, s_y, s_z) = \left(\begin{matrix}s_x&amp;0&amp;0&amp;0\\0&amp;s_y&amp;0&amp;0\\0&amp;0&amp;s_z&amp;0\\0&amp;0&amp;0&amp;1\end{matrix}\right)\]</span></p></li><li><p>平移 <span class="math display">\[T(t_x, t_y, t_z) = \left(\begin{matrix}1&amp;0&amp;0&amp;t_x\\0&amp;1&amp;0&amp;t_y\\0&amp;0&amp;1&amp;t_z\\0&amp;0&amp;0&amp;1\end{matrix}\right)\]</span></p></li><li><p>旋转比较麻烦</p><p><strong>绕坐标轴旋转</strong></p><ul><li><p>关于<span class="math inline">\(ox\)</span>转<spanclass="math inline">\(\alpha\)</span> <span class="math display">\[R_x(\alpha) =\left(\begin{matrix}1&amp;0&amp;0&amp;0\\0&amp;\cos\alpha&amp;-\sin\alpha&amp;0\\0&amp;\sin\alpha&amp;\cos\alpha&amp;0\\0&amp;0&amp;0&amp;1\end{matrix}\right)\]</span></p></li><li><p>关于<span class="math inline">\(oz\)</span>转<spanclass="math inline">\(\alpha\)</span> <span class="math display">\[R_z(\alpha) =\left(\begin{matrix}\cos\alpha&amp;-\sin\alpha&amp;0&amp;0\\\sin\alpha&amp;\cos\alpha&amp;0&amp;0\\0&amp;0&amp;1&amp;0\\0&amp;0&amp;0&amp;1\\\end{matrix}\right)\]</span></p></li><li><p>关于<span class="math inline">\(oy\)</span>转<spanclass="math inline">\(\alpha\)</span> <span class="math display">\[R_y(\alpha) =\left(\begin{matrix}\cos\alpha&amp;0&amp;\sin\alpha&amp;0\\0&amp;1&amp;0&amp;0\\-\sin\alpha&amp;0&amp;\cos\alpha&amp;0\\0&amp;0&amp;0&amp;1  \end{matrix}\right)\]</span></p></li></ul><p>关于<spanclass="math inline">\(oy\)</span>旋转矩阵的负号位置看起来有点怪?其实没问题, 绕<span class="math inline">\(ox\)</span>转我们用<spanclass="math inline">\(yz\)</span>, 绕<spanclass="math inline">\(oz\)</span>转我们用<spanclass="math inline">\(zy\)</span>, 绕<spanclass="math inline">\(oy\)</span>转我们用<spanclass="math inline">\(zx\)</span>都是按照右手系顺序转的.</p><p><strong>绕任意过原点向量旋转</strong></p><p>人们通过飞机可以做出任意姿态类比认为任意旋转姿态都可以由绕<spanclass="math inline">\(ox, oy, oz\)</span>旋转得来.于是绕任意过原点轴旋转可以分解为分别绕<span class="math inline">\(ox,oy, oz\)</span>旋转 <span class="math display">\[R_{x,y,z}(\alpha, \beta, \gamma) =R_{x}(\alpha)R_{y}(\beta)R_{z}(\gamma)\]</span> 也有现成的罗德里格旋转公式(Rodrigues' rotationformula)计算绕任意过原点向量(<spanclass="math inline">\(n\)</span>)旋转公式 <span class="math display">\[R(\vec{n},\alpha) = \cos(\alpha)\vec{I} +(1-\cos(\alpha))\vec{n}\vec{n}^T+\sin(\alpha)\left(\begin{matrix}0&amp;-n_z&amp;n_y\\n_z&amp;0&amp;-n_x\\-n_y&amp;n_x&amp;0\end{matrix}\right)\]</span> 最后一个大矩阵就是叉积的矩阵表示</p><p><strong>罗德里格旋转公式证明</strong></p><ul><li><p>向量叉积的几何意义</p><p>设向量<span class="math inline">\(\vec{k}\)</span>为垂直于向量<spanclass="math inline">\(\vec{v}\)</span>的单位向量. 向量<spanclass="math inline">\(\vec{v} \times \vec{k}\)</span>的方向垂直于<spanclass="math inline">\(\vec{v}\)</span>, <spanclass="math inline">\(\vec{k}\)</span>所成平面, 长度为<spanclass="math inline">\(\|v\| \|k\| \sin 90^\circ = \|v\|\)</span>,可以理解成<span class="math inline">\(\vec{v} \times\vec{k}\)</span>是<span class="math inline">\(\vec{v}\)</span>绕<spanclass="math inline">\(\vec{k}\)</span>旋转<spanclass="math inline">\(90^\circ\)</span></p></li><li><p>向量分解</p><p>考虑<span class="math inline">\(v\inR^3\)</span>的三维旋转问题，旋转轴<spanclass="math inline">\(k\)</span>是单位向量，旋转角为<spanclass="math inline">\(θ\)</span>，旋转后向量为<spanclass="math inline">\(v_{rot}\)</span>, 向量<spanclass="math inline">\(v\)</span>可以分解为平行于<spanclass="math inline">\(k\)</span>的分量<spanclass="math inline">\(v_\parallel\)</span>和正交于<spanclass="math inline">\(k\)</span>的分量<spanclass="math inline">\(v_\perp\)</span>, 显然有<spanclass="math inline">\(v = v_\parallel + v_\perp\)</span>, 如图:</p><p><img src="./img/3-4.png" /></p><p>尝试表示<span class="math inline">\(v_\parallel\)</span>与<spanclass="math inline">\(v_\perp\)</span>, 有 <span class="math display">\[v_\parallel = (v\cdot k)k \\v_\perp = v - v_\parallel = v-(k\cdot v)k = -k\times (k\times v)\]</span> 其中<spanclass="math inline">\(v_\perp\)</span>的最后一步推导如下</p><p><img src="./img/3-5.png" /></p><p>首先找得到<span class="math inline">\(v\)</span>, <spanclass="math inline">\(k\)</span>, 可以看到<spanclass="math inline">\(k\times v\)</span>长度为<spanclass="math inline">\(\|v\| \sin(&lt;k,v&gt;)\)</span>, 方向与<spanclass="math inline">\(k, v\)</span>所在平面垂直, <spanclass="math inline">\(k\times (k\times v)\)</span>长度为<spanclass="math inline">\(\|v\|\)</span>, 方向与<spanclass="math inline">\(k, (k\times v)\)</span>所在平面垂直, 此时<spanclass="math inline">\(k, k\times v, k\times(k\times v)\)</span>两两垂直,相当于我们在在<span class="math inline">\(k,v\)</span>所在平面上建立了坐标系. <spanclass="math inline">\(v_\perp\)</span>与<spanclass="math inline">\(k\times (k\times v)\)</span>平行反向, 大小为<spanclass="math inline">\(\|v\| \sin(&lt;k,v&gt;)\)</span>, 也就是<spanclass="math inline">\(-k\times (k\times v)\)</span></p><p>再看<span class="math inline">\(v\)</span>与<spanclass="math inline">\(v_{rot}\)</span>,可以看到两个向量都被分解为了平行与垂直向量. 在旋转中, <spanclass="math inline">\(v_\parallel\)</span>不变, <spanclass="math inline">\(v_\perp\)</span>发生了<spanclass="math inline">\(\theta\)</span>角旋转, 即 $v_{rot} = v_+(kv)$<span class="math display">\[\begin{align}v_{rot} &amp;= v_{\parallel rot} + v_{\perp rot}\\&amp;= v_\parallel + v_\perp\cos\theta+(k\times v)\sin\theta\\&amp;= v_\parallel + (v-v_\parallel)\cos\theta+(k\times v)\sin\theta \\&amp;= \cos\theta v + (1-\cos\theta)v_\parallel + \sin\theta k\times v\\&amp;= \cos\theta v + (1-\cos\theta)(k\cdot v)k+\sin\theta k\times v\\\end{align}\]</span> 整理成矩阵形式就是 <span class="math display">\[v_{rot} = R(\vec{n},\alpha) v\]</span></p><p><span class="math display">\[R(\vec{k},\alpha) = \cos(\alpha)\vec{I} +(1-\cos(\alpha))\vec{k}\vec{k}^T+\sin(\alpha)\left(\begin{matrix}0&amp;-k_z&amp;k_y\\k_z&amp;0&amp;-k_x\\-k_y&amp;k_x&amp;0\end{matrix}\right)\]</span></p></li></ul></li></ul><h2 id="lecture-4-transformation---观测变换">Lecture 4 Transformation -观测变换</h2><p>观测变换的目的是将三维空间中的物体变为二维,观测变换又分为视图变换与投影变换</p><p>变换有三步</p><ul><li>模型变换(model transformation)是将模型放在一个需要的地方</li><li>观测变换的视图变换(view transformation)是将摄像机放在需要的地方</li><li>观测变换的投影变换(projectiontransformation)就是将三维场景投射到显示器上</li></ul><p>将三个变换合称为MVP变换</p><h3 id="视图变换">视图变换</h3><p>视图变换就是将相机放在想要放的地方, 描述相机位置应该有:相机位置(Position)<span class="math inline">\(\vec{e}\)</span>,相机的观测方向(gaze direction)<spanclass="math inline">\(\hat{g}\)</span>, 相机朝上方向(up direction)<spanclass="math inline">\(\hat{t}\)</span></p><figure><img src="./img/4-1.png" alt="相机位置" /><figcaption aria-hidden="true">相机位置</figcaption></figure><p>当相机与观测物体同时移动但相对静止时观测的场景应该是不变的,于是我们希望将相机放在一个固定位置, 只让场景动. 约定相机始终在原点,看向<span class="math inline">\(oz\)</span>负方向, <spanclass="math inline">\(oy\)</span>为朝上方向</p><figure><img src="./img/4-2.png" alt="相对位置" /><figcaption aria-hidden="true">相对位置</figcaption></figure><p>将相机从任意位置移动到原点只需做几次仿射变换</p><ul><li>平移<span class="math inline">\((-x,-y,-z)\)</span></li><li>将<span class="math inline">\(\hat{g}\)</span>转动到<spanclass="math inline">\(-oz\)</span></li><li>将<span class="math inline">\(\vec{t}\)</span>转动到<spanclass="math inline">\(oy\)</span></li><li>将<span class="math inline">\(\hat{g} \times\vec{t}\)</span>转动到<span class="math inline">\(ox\)</span></li></ul><p>将向量旋转到坐标轴不太好写,我们可以先将坐标轴旋转到向量然后求逆矩阵(由于旋转矩阵是正交矩阵,矩阵的转置就是逆矩阵), 最后得到 <span class="math display">\[\left[\begin{matrix}x_{\hat{g}\times \hat{t}}&amp;y_{\hat{g}\times\hat{t}}&amp;z_{\hat{g}\times\hat{t}}&amp;0\\x_{t}&amp;y_{t}&amp;z_{t}&amp;0\\x_{-g}&amp;y_{-g}&amp;z_{-g}&amp;0\\0&amp;0&amp;0&amp;1\\\end{matrix}\right]\left[\begin{matrix}1&amp;0&amp;0&amp;-x_e\\0&amp;1&amp;0&amp;-y_e\\0&amp;0&amp;1&amp;-z_e\\0&amp;0&amp;0&amp;1\\\end{matrix}\right]\]</span></p><h3 id="投影变换">投影变换</h3><p>投影就是将3D转为2D的过程, 分为正交投影(Orthographicprojection)与透视投影(Perspective projection)</p><p><img src="./img/4-3.jpg" /></p><p><img src="./img/4-4.png" /></p><ul><li>透视投影(左): 认为摄像机是一个点, 考虑人类视觉特性,平行线可能不平行, 有近大远小效果.</li><li>正交投影(右): 认为摄像机是一个距离物体无限远, 按照物体本身属性投影,平行线仍旧平行, 没有近大远小效果, 一般用于工程制图</li></ul><p><strong>正交投影</strong></p><p>正交投影实现思路简单,</p><ul><li>将场景包裹在一个立方体中</li><li>将场景中心移动到原点</li><li>将立方体缩放到<spanclass="math inline">\([-1,1]^3\)</span>的立方体(canonicalcube)中(非等比缩放)</li><li>将所有点的<spanclass="math inline">\(z\)</span>值设为0即可(忽略覆盖问题)</li></ul><p>这里是在视图变换结束之后将场景移动到中心并缩放到正则立方体中,不会影响摄像机位置,后续会通过视口变换等方法解决平移与非等比缩放等带来位置的问题</p><figure><img src="./img/4-5.png" alt="正交投影" /><figcaption aria-hidden="true">正交投影</figcaption></figure><p>定义远(f)近(n)左(l)右(r)上(t)下(b)容易得到变换矩阵 <spanclass="math display">\[M_{ortho} =\left[\begin{matrix}\frac{2}{r-l}&amp;0&amp;0&amp;0\\0&amp;\frac{2}{t-b}&amp;0&amp;0\\0&amp;0&amp;\frac{2}{n-f}&amp;0\\0&amp;0&amp;0&amp;1\end{matrix}\right]\left[\begin{matrix}1&amp;0&amp;0&amp;-\frac{r+l}{2}\\0&amp;1&amp;0&amp;-\frac{t+b}{2}\\0&amp;0&amp;1&amp;-\frac{n+f}{2}\\0&amp;0&amp;0&amp;1\end{matrix}\right]\]</span> <strong>透视投影</strong></p><p><img src="./img/4-6.png" /></p><p>我们可以将需要描述的物体放在左边这样的视锥(Frustum)中,可以这样理解视锥: 从摄像机(原点)处往外看, 可见范围就是一个锥体,我们截出一个台出来, (当然, 这个棱台的边会汇聚到原点)</p><p>用如下的方法定义一个视锥: 视野的长宽比,视野范围(水平/垂直可视角度)</p><p><img src="./img/4-8.png" /></p><ul><li>宽高比: <span class="math inline">\(Aspect = x_{right} /y_{top}\)</span></li><li>垂直可视角: <span class="math inline">\(\tan\frac{forY}{2} =\frac{y_{top}}{\|z_{near}\|}\)</span></li></ul><p>我们想要做的就是将这个椎体投影到屏幕上,解决方法是<strong>先将椎体"压"到右边的一个立方体(Cuboid)中,然后再做正交投影</strong>. 在变换过程中我们可以保证</p><ul><li>Near面是完全不变的.</li><li>在"压"的过程中Far面上各个点的<spanclass="math inline">\(z=f\)</span>(但这不意味着椎体内部点在压的过程中z值不变)</li><li>由于Frustum的轴心穿过<span class="math inline">\(oz\)</span>,所以Far面的中心仍然在<span class="math inline">\(oz\)</span>轴上</li></ul><p>需要做的就是求挤压矩阵<span class="math inline">\(M_{persp\toortho}\)</span></p><p>从<span class="math inline">\(ox\)</span>负方向看视锥</p><p><img src="./img/4-7.png" /></p><p>通过相似三角形可以轻松得到 <span class="math display">\[y&#39; = \frac{n}{z}y\]</span> 类似的可以得到 <span class="math display">\[x&#39; = \frac{n}{z}x\]</span> 得到了部分变换 <span class="math display">\[(x,y,z,1)^T \to (nx/z, ny/z, ?, 1)\]</span> 这里我们进行一个小的等价变换(以节省计算资源?) <spanclass="math display">\[(x,y,z,1)^T \to (nx/z, ny/z, ?, 1) = (nx, ny, ?, z)\]</span> 就剩下<spanclass="math inline">\(z\)</span>不知道怎么求了(也就是变换矩阵的第三行不知道是什么),设其为<span class="math inline">\((a,b,c,d)\)</span>, 我们应该有<spanclass="math inline">\((a,b,c,d)^T(x,y,z,1) = z&#39;z\)</span></p><ul><li>近平面上的点不变, 即: <span class="math inline">\(z = n\)</span>时,<span class="math inline">\(z&#39; = z\)</span>, 即<spanclass="math inline">\(x,y\)</span>应该与<spanclass="math inline">\(z\)</span>无关, 即<span class="math inline">\(a =b = 0\)</span>, 同时<span class="math inline">\(c \times n + d =n^2\)</span></li><li>远平面中心点不变, 即: <span class="math inline">\(c\times f + d =f^2\)</span></li></ul><p>求得: <span class="math inline">\(c = n+f, d = -nf\)</span>,最后得到透视投影矩阵 <span class="math display">\[M_{persp\to ortho} =\left[\begin{matrix}n&amp;0&amp;0&amp;0\\0&amp;n&amp;0&amp;0\\0&amp;0&amp;n+f&amp;-nf\\0&amp;0&amp;1&amp;0\end{matrix}\right]\]</span></p><h2 id="lecture-5-rasterization---三角形">Lecture 5 Rasterization -三角形</h2><p>完成变换之后, 我们将物体缩放到了一个<spanclass="math inline">\([-1,1]^3\)</span>的正则Cube中,之后需要将其光栅化(Rasterize)到屏幕(Raster)上</p><h3 id="光栅显示设备">光栅显示设备</h3><ul><li><p>激光切割机</p></li><li><p>示波器</p></li><li><p>阴极射线管(CRT): 通过两个偏转磁场将电子打在荧光屏上,通过扫描的方式实现覆盖, 后又通过隔行扫描的方式减少时间开销,但是在扫描运动场景时会造成画面撕裂(鬼影)</p></li><li><p>通用显示器(LCD/ LED/ OLED...): 将显存中区域映射到图像</p></li><li><p>LCD显示器</p><p><img src="./img/5-1.png" /></p><p>液晶显示器前后有两个垂直的光栅.正常情况下只有波动方向相同的光才能通过光栅, 即不应该有光通过相互光栅,液晶显示器中的液晶可以通过震动引导光改变波动方向从而操作需要显示的部分</p></li><li><p>墨水屏: 有黑白两种分别带电墨水,通过加电改变两种颜色墨水朝向</p></li></ul><h3 id="光栅化">光栅化</h3><p>光栅化就是将三维图形显示到屏幕上的过程.可以认为屏幕就是一个内存中的二维数组(左下角为<spanclass="math inline">\((0,0)\)</span>, 像素<spanclass="math inline">\((x,y)\)</span>的中心在<spanclass="math inline">\((x+0.5,y+0.5)\)</span>)</p><p><strong>将Cube缩放到屏幕(视口变换)</strong></p><p>忽略<span class="math inline">\(z\)</span>, 将<spanclass="math inline">\([-1,1]\)</span>缩放到<spanclass="math inline">\([0, width]\times [0,height]\)</span>. <spanclass="math display">\[M_{viewport} = \left[\begin{matrix}\frac{width}{2}&amp;0&amp;0&amp;\frac{width}{2}\\0&amp;\frac{height}{2}&amp;0&amp;\frac{height}{2}\\0&amp;0&amp;1&amp;0\\0&amp;0&amp;0&amp;1\\\end{matrix}\right]\]</span> <strong>使用三角形表述图像</strong></p><p>一般用三角形表述复杂的图像, 原因是</p><ul><li>三角形只能构成一个平面(四边形就可以折叠成立体的)</li><li>不存在凹多边形, 容易判断点与三角形关系</li><li>只需要定义三角形顶点信息就可以在内部轻松插值</li><li>三角形可以表示任意多边形</li></ul><p><strong>通过采样(simple)将三角形打碎在像素上</strong></p><p>采样就是将函数离散化的过程,对于三角形光栅化来说就是询问每一个像素在不在三角形内</p><p>判断像素是否在三角形内就是通过叉积判断像素中心点与三角形关系</p><p><strong>通过Bounding Box缩小采样范围</strong></p><p>对每一个像素都采样消耗过大. 显然, 只有<spanclass="math inline">\([x_{min}, x_{max}]\times [y_{min},y_{max}]\)</span>范围内的点才有可能落在三角形内, 所以只遍历这个区域.我们称这样三个顶点的最大最小值围成的矩形为Bounding Box.</p><p>Bounding Box也是有缺点的, 例如一些斜放的窄长三角形, BoundingBox会多算很多像素</p><p><img src="./img/5-2.png" /></p><p>我们可以优化一些特殊情况,例如倾斜三角形可以从每行的一边开始从左到右采样</p><p><img src="./img/5-3.png" /></p><p><strong>锯齿(Jaggies) / 走样(asing)问题</strong></p><p>每个像素都有一定大小, 这导致我们的采样频率是一个常数,采样频率过低时会出现走样问题</p><p><img src="./img/5-4.png" /></p><h2 id="lecture-6-rasterization---反走样与深度测试">Lecture 6Rasterization - 反走样与深度测试</h2><h3 id="反走样">反走样</h3><p><strong>走样的原因</strong>: 像素有一定尺寸, 采样频率不足</p><p><strong>常见走样</strong>: 锯齿 / 摩尔纹 / 车轮效应(wagon wheelillusion)...</p><p><strong>采样频率带来走样的原因</strong>:</p><p>可以看到, 使用同样的采样频率采样低频信号时,采样结果(蓝色虚线)可以基本还原原函数,但采样高频信号时还原能力变差(没法恢复信息)</p><p><img src="./img/6-1.png" /></p><p>使用同样的采样频率采样蓝黑两个函数得到同样的结果,我们无法通过采样结果区分他们, 这就是走样</p><p><img src="./img/6-2.png" /></p><p><strong>解决方案</strong>: 先过滤图像的高频部分再采样,也就是先模糊再采样, 其有效的原因如下</p><ul><li><p>可以通过傅立叶变换得到图片的频谱</p><p><img src="./img/6-3.png" /></p><p>这样理解图像的频谱: 假设我们用灰度值作为<spanclass="math inline">\(oz\)</span>轴, 我们可以在原图上得到一个三维坐标系.对这个图做傅立叶变换, 即用波函数叠加逼近图像, 每个波函数大概是这样的</p><p><img src="./img/6-6.png" /></p><p>他们叠加最后逼近图像, 例如</p><p><img src="./img/6-7.png" /></p><p>我们需要在频谱图中描述这些三维波函数. 我们需要用频率<spanclass="math inline">\(f\)</span>, 幅度<spanclass="math inline">\(A\)</span>, 相位<spanclass="math inline">\(\phi\)</span>描述二维波函数,在三维中我们还要用方向<spanclass="math inline">\(\vec{n}\)</span>描述波的运动方向. 在频谱图中,我们用点到中心的距离描述频率<span class="math inline">\(f\)</span>高低,用点的亮度描述幅度<span class="math inline">\(A\)</span>,用中心到点的方向描述方向<span class="math inline">\(\vec{n}\)</span>.可以看到在右边频谱中, 大部分点在低频(大多自然图像都是这样的).我们还可以看到中间有两条两线, 这是因为波函数的定义域是<spanclass="math inline">\(\mathbb{R}^2\)</span>, 我们需要不断的将图像上下边,左右边拼接在一起, 最后得到无限大的图片, 但是图片上下边, 左右边差距过大,所以会出现高频.</p></li><li><p>对频谱应用低通滤波器</p><p><img src="./img/6-4.png" /></p><p>图像变模糊 (变化剧烈(边缘)的部分被抹去了)</p></li><li><p>对频谱应用高通滤波器</p><p><img src="./img/6-5.png" /></p><p>边缘被提取了</p></li><li><p>我们希望去掉高频信号, 这样可以让采样的结果走样减少.而去掉高频会让图像变模糊. 但是会有一些采样点出现颜色过渡</p><p><img src="./img/6-8.png" /></p><p>我们可以采用对图像做卷积替代傅立叶变换-滤波-逆变换的方法让图像变模糊(在时域上做卷积相当于在频域上做乘积),采用非常简单卷积方法<span class="math inline">\(color[x,y] =\sum_{i=-1}^{i=1}\sum_{j=-1}^{j=1}color[x+i,y+j]/9\)</span></p></li></ul><p><strong>注意</strong>: 先模糊再采样而不能先采样再模糊, 原因如下</p><ul><li><p>采样相当于用狄卡拉梳状函数乘以时域上的函数, 相当于在频域上卷积,最后得到了重复的一堆函数</p><p><img src="./img/6-9.png" /></p></li><li><p>如果采样间隔过大, 就会造成重复函数在高频上的叠加, 产生走样</p><p><img src="./img/6-10.png" /></p></li><li><p>模糊操作相当于过滤掉了高频部分, 从而在采样时不产生叠加</p><p><img src="./img/6-11.png" /></p></li><li><p>先采样后模糊相当于先发生了高频叠加, 然后载过滤掉一部分叠加部分,所以效果不好</p></li></ul><p>除了简单卷积, 我们可以通过提高采样率(超采样技术(Supersampling,MSAA))再求均值的方法让图像变模糊, 例如下面是一个<spanclass="math inline">\(2\times 2\)</span>的MSAA</p><ul><li><p>我们将一个像素点变为<span class="math inline">\(2\times2\)</span>个像素点, 用每个小像素点采样(计算是否在三角形内)</p><p><img src="./img/6-12.png" /></p><ul><li>然后对每个像素求平均</li></ul><p><img src="./img/6-13.png" /></p><p><img src="./img/6-14.png" /></p></li></ul><p>显然, <span class="math inline">\(n\timesn\)</span>的MSAA需要消耗直接采样<spanclass="math inline">\(n^2\)</span>倍的时空, 在工业中,我们可以重新定义小像素的排列位置实现小像素在像素间的复用</p><p><img src="./img/6-15.jpg" /></p><p>还有更多的反走样方法: 例如FXAA(先采样得到锯齿图, 然后匹配锯齿,替换锯齿), TAA(与上下帧对对比判断点是否在三角形内)</p><h3 id="深度测试">深度测试</h3><p>之前没有考虑光栅化过程中图像在<spanclass="math inline">\(oz\)</span>轴上的覆盖关系,有可能出现靠后的图像覆盖在考前的图像前</p><p>处理覆盖关系的朴素想法是根据三角形距离排序, 先画距离远的,再画距离近的, 后画的覆盖之前画的,但是经常会遇到循环覆盖等问题(三角形各个点处<spanclass="math inline">\(z\)</span>值可能不同), 例如</p><p><img src="./img/6-16.png" /></p><p>为了解决这个问题, 引入了深度缓存技术. 即开一个与成品图同样大小的数组,为每个像素记录了该像素上已经渲染的点的<spanclass="math inline">\(z\)</span>值,每次尝试将一个三角形渲染在该点上时就会比较当前该点上已渲染内容的深度与三角形在该点上的深度,如果新三角形距离相机很近就替换之. 例如左图是渲染结果,右图是深度缓存(depth buffer)</p><p><img src="./img/6-17.png" /></p><h2 id="lecture-7-shading---blinn-phong反射模型">Lecture 7 Shading -Blinn-Phong反射模型</h2><p>着色就是对不同的物体应用不同材质的过程</p><p>布林冯反射模型是用来描述光在物体上反射的简单模型.Blinn-Phong模型是一个经验模型, 不考虑阴影,不考虑光从反射点到观察者的能量衰减, 所以模型效果不一定好,也不一定经得起推敲</p><p>Blinn-Phong模型将光在材质上的反射分为三个区域:</p><ul><li>高光部分(Specular highlights): 光线照到发生镜面反射部分</li><li>漫反射区(Diffuse reflection): 光线照到发生漫反射部分</li><li>环境光区(Ambient lighting): 光本身照不到, 但是被其他部分光反射照到,假设任何一个点都可以接收到大小为常量的环境光</li></ul><p><img src="./img/7-1.png" /></p><p>我们假设着色点(shading point, 就是反射点)所在的面是一个小平面,shading point到光源方向<span class="math inline">\(l\)</span>, shadingpoint到观察者方向<span class="math inline">\(v\)</span>, shadingpoint所在平面法线<span class="math inline">\(n\)</span>, (<spanclass="math inline">\(l, v, n\)</span>都是单位向量)</p><p><strong>生成漫反射</strong></p><ul><li><p>同样的光打在<strong>单位面积</strong>物体上时,光与物体成角度不同, 物体接收到的光不同</p><p><img src="./img/7-2.png" /></p><p>可以得到物体接收到的光应该是入射光强的<spanclass="math inline">\(\cos\theta\)</span>倍, 而<spanclass="math inline">\(\cos\theta = l \cdot n\)</span></p></li><li><p>光在空间中是以球形传播的. 假设光线从光源发射传播到了半径为<spanclass="math inline">\(1\)</span>的球面上时, 单位面积上光能量为<spanclass="math inline">\(I\)</span>. 那么当光线到达半径为<spanclass="math inline">\(r\)</span>的球面上时, 单位面积上光能量为<spanclass="math inline">\(I/r^2\)</span></p></li><li><p>假设漫反射是向四面八方均匀反射的, 同时不考虑反射光的能量损耗<span class="math display">\[L_d = k_d(I/r^2)\max(0,n\cdot l)\]</span> 这里的<spanclass="math inline">\(\max\)</span>是为了防止点积小于0(shadingpoint在没有被光照的那面, 同时我们不考虑透明物体)</p><p><span class="math inline">\(k_d\)</span>是漫反射系数:表示物体吸收射入光线的能力, 比如物体是白色, 那么<spanclass="math inline">\(k_d=0\)</span>, 所有射入光线都会被反射.物体是黑色, 那么<span class="math inline">\(k_d=1\)</span>,所有射入光线都会被吸收, 不发生反射(一点物理知识). 一般就用颜色代表<spanclass="math inline">\(k_d\)</span></p></li></ul><p><strong>生成高光反射</strong></p><p>在简单物理模型中, 只有镜面反射只有在入射角等于观测角的时候才能看到.但是我们认为只要观测角和反射角差在一定范围内就可以看到光线,只不过光线强不不同罢了</p><p><img src="./img/7-3.png" /></p><p>如左图, 反射光为<span class="math inline">\(R\)</span>, 在<spanclass="math inline">\(R\)</span>附近都可以看到一定强度的反射光,我们需要衡量<span class="math inline">\(R\)</span>与<spanclass="math inline">\(v\)</span>之间的角度差以计算光强度.我们通过半程向量<span class="math inline">\(h =\frac{l+v}{\|l+v\|}\)</span>的方法衡量. 最后表述方法是 <spanclass="math display">\[\begin{align}L_s &amp;= k_s(I/r^2)\max (0, \cos\alpha)^p\\&amp;= k_s(I/r^2)\max (0, n\cdot h)^p\end{align}\]</span> <span class="math inline">\(\cos\alpha\)</span>看起来比较离谱,只有当<span class="math inline">\(\alpha \geq90^\circ\)</span>时才看不到镜面反射..., 但即使<spanclass="math inline">\(l = -v\)</span>时<spanclass="math inline">\(\alpha\)</span>都不到<spanclass="math inline">\(90^\circ\)</span>, 我们需要加一个高光系数<spanclass="math inline">\(p\)</span>, 让<spanclass="math inline">\((\cos\alpha)^p\)</span>快速衰减到<spanclass="math inline">\(0\)</span>, 一般设<spanclass="math inline">\(p\)</span>为<spanclass="math inline">\(100-200\)</span>(p.s. 为什么不用<spanclass="math inline">\(&lt;R,v&gt;\)</span>而要用半程向量呢?因为半程向量计算更快(<span class="math inline">\(R\)</span>不好算).也有用<span class="math inline">\(&lt;R,v&gt;\)</span>的模型,叫Phong模型, Blinn-Phong模型是他的改进)</p><p><img src="./img/7-4.png" /></p><p><span class="math inline">\(k_s\)</span>为镜面反射系数,按照漫反射的思路, 这里应该表示多少光被吸收,但是在Blinn-Phong模型不考虑这个, 一般认为镜面反射会将光全部反射出去<spanclass="math inline">\(k_s = 1\)</span></p><p><strong>生成环境光</strong></p><p>环境光太难算了, 我们直接认为环境光为常量<spanclass="math inline">\(I_a\)</span>, shading point上有环境光反射系数<spanclass="math inline">\(k_a\)</span> <span class="math display">\[L_a = k_a I_d\]</span></p><p>最后得到布林冯模型 <span class="math display">\[L = k_aI_a + k_d(I/r^2)\max(0, n\cdot l)+k_s(I/r^2)\max(0,n\cdot h)^p\]</span></p><h2 id="lecture-8-shading---着色管线纹理">Lecture 8 Shading -着色&amp;管线&amp;纹理</h2><p><strong>着色频率</strong></p><p>之前Shading是对某个点着色. 在渲染中我们可以将Shading应用于任何位置,如: 三角形整个平面上 / 顶点上(内部插值) / 每个像素上.分别对应下面三张图, 可以看到, 第二张图的在边上有明显的分异</p><p><img src="./img/8-1.png" /></p><ul><li><p>应用在平面上(Flat Shading): 将着色应用于三角形面上,整个三角形一个颜色, 我们通过三角形两边叉积求得法线</p></li><li><p>应用在顶点上(Gouraud Shading): 将着色应用于顶点上,在顶点之间与三角形内部做插值. 计算顶点的发现比较困难,我们可以计算顶点相邻的面, 根据相邻面的法线与相邻面的面积加权平均得到</p><p><img src="./img/8-2.png" /> <span class="math display">\[N_v = \frac{\sum_iN_i}{\|\sum_iN_i\|}\]</span> 叉积的结果与法线同向, 长度是面积, 正好就做了加权. 正常情况下,我们的想法是加权后应该除以面积和<spanclass="math inline">\(\sum_i\|N_i\|\)</span>来平均.但是在这里老师用了<span class="math inline">\(\|\sum_iN_i\|\)</span>,因为我们已经通过面积加权的得到了方向,现在只是想将这个超长向量化为单位向量, 所以直接除以模长就行,不用除以每个的面积(用每个的<spanclass="math inline">\(\sum_i\|N_i\|\)</span>求出来不一定是单位向量,我们还要做归一化)</p></li><li><p>应用在像素上(Phone Shading): 先求三角形顶点的法线,然后插值到每个像素上(注意插值后归一化), 再分别为每个像素着色</p></li></ul><p>Gouraud Shading与Phone Shading都需要插值,在三角形上可以使用重心坐标插值</p><p><strong>渲染管线</strong></p><p>渲染管线(Graphics Pipeline / Real-time Rending Pipeline):将模型转为图像的全部过程就是渲染管线(中文看不懂也可以看到英文中的Pipeline),也就是之前的一系列操作</p><pre class="mermaid">graph TBpoint(空间中的点/Vertex) --投影到屏幕--> point2d(二维点/Vertex Stream) --连接成三角形--> triangle2d(三角形/Triangle Stream) --光栅化/Rasterization--> frgament(三角形像素/Frgament) --着色/Shading--> shadedfrgament(着色后三角形/Shaded Fragments) --FrameBuffer处理--> opt(输出到显示器)</pre><p>可以看出, 其实三角形是我们虚拟出的概念, 实际上是不存在的</p><p><strong>纹理</strong></p><p>我们可以给三角形渲染上不同的材质/纹理(木头,塑料...),纹理实际上就是一个二维数组,里面存储的是每个点在布林冯模型中的反射系数/其他属性.</p><p><img src="./img/8-3.png" /></p><p>我们将纹理定义在物体表面上(也就是一个二维平面),为了让物体上的点与纹理可以一一对应, 我们想到了三角形,只需要定义物体表面三角形对应纹理上的哪块三角形即可(三角形在映射时可以被扭曲,但是我们希望可以尽可能少扭曲), 映射关系由艺术家完成.一般来说我们使用将纹理定义在方形<spanclass="math inline">\([0,1]^2\)</span>的<spanclass="math inline">\(u-v\)</span>坐标上</p><p>在渲染时, 为物体的每个点都定义纹理消耗太大了,我们希望就像贴瓷砖一样复用纹理,在设计纹理时我们需要考虑如何让纹理在接缝处出无法被看出来(下图就是为宫殿贴上重复的瓷砖)</p><p><img src="./img/8-4.png" /></p><h2 id="lecture-9-shading---纹理">Lecture 9 Shading - 纹理</h2><p><strong>重心坐标插值</strong></p><p>在深度缓存, 顶点着色, 像素着色, 纹理贴图时我们都需要进行插值,在三角形中, 可以使用重心坐标插值.</p><p>重心坐标是一个三元组<spanclass="math inline">\((\alpha,\beta,\gamma)\)</span>, 对于三角形<spanclass="math inline">\(ABC\)</span>与点<spanclass="math inline">\(P\)</span>, 重心坐标满足 <spanclass="math display">\[\left\{\begin{align}&amp;P = \alpha A + \beta B + \gamma C\\&amp;\alpha + \beta + \gamma = 1\\&amp;\alpha \geq 0\\&amp;\beta \geq 0\\&amp;\gamma \geq 0\\\end{align}\right.\]</span></p><ul><li>当<spanclass="math inline">\((\alpha,\beta,\gamma)\)</span>满足<spanclass="math inline">\(\alpha + \beta + \gamma = 1\)</span>时, <spanclass="math inline">\(P\)</span>在三角形<spanclass="math inline">\(ABC\)</span>所在平面上</li><li>当<spanclass="math inline">\((\alpha,\beta,\gamma)\)</span>还满足<spanclass="math inline">\(\alpha \geq 0, \beta \geq 0, \gamma \geq0\)</span>时, <span class="math inline">\(P\)</span>在三角形<spanclass="math inline">\(ABC\)</span>内</li></ul><p>应用"奔驰定理"可以得到 <span class="math display">\[\left\{\begin{align}&amp;\alpha = S_{PBC}/S_{ABC}\\&amp;\beta = S_{PAC}/S_{ABC}\\&amp;\gamma = S_{PAB}/S_{ABC} = 1-\alpha-\beta\\\end{align}\right.\]</span> 缺点: 点与三角形在投影后重心坐标会发生变化</p><p><strong>纹理放大</strong></p><p>在三维场景中, 我们可以通过移动摄像机的位置放大或缩小图像(透视原理),若场景被放的很大(比如凑在脸前面看人),某个整数像素会对应到纹理坐标中的小数像素(纹理中的像素也被称为纹素/Texel), 我们需要采用一系列方法对这个小数坐标值进行差值获得该点纹理</p><ul><li><p>Nearest: 直接将小数下标四舍五入. 这会造成多个像素显示一个纹素,从而发生走样, 如右图中的Jaggies</p><p><img src="./img/9-5.png" /></p></li><li><p>双线性插值(Bilinear interpolation): 对于一个小数位置<spanclass="math inline">\(P\)</span>, 我们找<spanclass="math inline">\(P\)</span>邻近的四个纹素, 记<spanclass="math inline">\(P\)</span>到左下角纹素的距离为<spanclass="math inline">\(t, s\)</span>, 同时易知<spanclass="math inline">\(y_{u_{00}, u_{01}} = x_{u_{00}, u_{10}} =1\)</span></p><p><img src="./img/9-1.png" /></p><p>定义一个一维线性插值(<span class="math inline">\(x\)</span>在<spanclass="math inline">\(v_0v_1\)</span>上): <spanclass="math inline">\(lerp(x,v_0,v_1) = v_0+x(v_1-v_0)\)</span></p><p>我们分别对点<span class="math inline">\(P\)</span>投影在<spanclass="math inline">\(u_{01}u_{11}\)</span>与<spanclass="math inline">\(u_{00}u_{10}\)</span>的位置做线性插值, 即: <spanclass="math inline">\(u_0 = lerp(s, u_{00}, u_{10})\)</span>与<spanclass="math inline">\(u_1 = lerp(s, u_{01},u_{11})\)</span>得到第一次插值结果</p><p><img src="./img/9-2.png" /></p><p>之后在垂直方向做一次线性插值 <span class="math inline">\(u = lerp(t,u_{0}, u_{1})\)</span></p><p>于是我们得到<span class="math inline">\(P\)</span>点的双线性插值<spanclass="math inline">\(lerp(t, u_{0}, u_{1})\)</span></p></li><li><p>三线性插值(Bicubic interpolation):就是将双线性插值时选取周围4纹素换成选16纹素</p></li></ul><p>三种方法效果如下</p><p><img src="./img/9-4.png" /></p><p>双线性插值性价比更高一些</p><p><strong>纹理缩小</strong></p><p>在三维场景中, 我们可以通过移动摄像机的位置放大或缩小图像(透视原理),若场景被放的很小(比如看远处的山),某个整数像素会覆盖到纹理坐标中的多个纹素,我们需要将覆盖的一片区域转为一个像素</p><p>如果简单的将像素中心对应到纹理中心,我们就会因采样率不足而得到摩尔纹(右图远处Moire)</p><p><img src="./img/9-5.png" /></p><p>最简单的方法就是使用朴素的MSAA超采样, 但是消耗过大,我们需要一个快速超采样的办法. 将一个像素映射到一个纹素区域,然后快速得到这个区域的纹素均值</p><ul><li><p>采用近似的方法获得纹素覆盖的纹像区域: 对于像素P,我们先获P及其上边与右边像素在<spanclass="math inline">\(u-v\)</span>坐标系中对应的纹素坐标,测量上方与右方纹素到P对应纹素距离. <span class="math inline">\(L_1,L_2\)</span>. 取两者最大值作为覆盖范围的边长并构建正方形</p><p><img src="./img/9-7.png" /></p><p>可以用微分表达 <span class="math display">\[L = \max\left(\sqrt{\left(\frac{du}{dx}\right)^2+\left(\frac{dv}{dx}\right)^2},\sqrt{\left(\frac{du}{dy}\right)^2+\left(\frac{dv}{dy}\right)^2}  \right)\]</span></p></li><li><p>区间求和可以采用树状数组实现,这里采用了类似的<strong>MipMap</strong>实现,该方法不像树状数组一样可以精确查询区间<spanclass="math inline">\([l,r]\)</span>的均值, 其只能获得近似值,并只能查询一个正方形区间, 但是时间复杂<spanclass="math inline">\(O(1)\)</span>, 空间复杂度<spanclass="math inline">\(O(n)\)</span></p><ol type="1"><li><p>预处理纹理宽高为<spanclass="math inline">\(2\)</span>的整次幂时的各像素均值</p><p><img src="./img/9-6.png" /></p></li><li><p>看起来就是做了个分块, 正常的想法是在查询时先查大分块,到边缘时查小分块. 这样的时间复杂度是<spanclass="math inline">\(O(logn)\)</span>,</p><p>Mipmap的做法是: 选一个比查询区间边长稍大的块然后获取其值,对于边长为<span class="math inline">\(l\)</span>的正方形,Mipmap直接去<span class="math inline">\(level\[log_2l]\)</span>图中查询像素中心点对应点纹素.</p><p>由于<span class="math inline">\(level\ n\)</span>图比<spanclass="math inline">\(level\ 0\)</span>图小了<spanclass="math inline">\(2^n\)</span>倍,我们需要查询的整数像素对应到纹素坐标中可能是小数.在这里可以采用双线性插值的方法实现过渡.</p><p>这样的查询方法可以将时间复杂度做到<spanclass="math inline">\(O(1)\)</span>, Mipmap占用空间也仅为原图的<spanclass="math inline">\(1/3\)</span>(通过等比级数得到).</p></li><li><p>但是这样的方法会造成在level分界边缘的像素产生割裂(相邻几个像素应用了不同level的Mipmap),我们希望可以在Level之间实现均匀过渡(即获取诸如Level 2.8上的图像),可以在层与层之间再做一次线性插值: 计算出像素在<spanclass="math inline">\(level\[log_2l]\)</span>上的纹素后再计算像素在<spanclass="math inline">\(level\ [log_2l]+1\)</span>上的纹素,最后通过线性插值求得像素在<span class="math inline">\(level\log_2l\)</span>层的纹素</p></li></ol></li></ul><p>然而Mipmap的效果并不好, 他会将远处覆盖纹理比较斜的像素变模糊.(左图为朴素MSAA的结果, 右图为用Mipmap后MSAA的结果,可以看到在渲染左上角与右上角时图像会边模糊)</p><p><img src="./img/9-8.png" /></p><p>与boungin box效果变差的原因类似,当一个像素覆盖纹素区域是一个斜四边形时, 这导致覆盖正方形过大,效果边模糊</p><p><img src="./img/9-9.png" /></p><p>可以采用<strong>各向异性过滤</strong>缓解这个问题</p><p><img src="./img/9-10.png" /></p><p>在Mipmap预处理不同尺寸正方形的基础上预处理不同尺寸的长方形,这样在近似求覆盖面积的时候就可以将覆盖面积近似为长方形了.这样预处理需要占用原纹理3倍的空间.</p><p><strong>纹理的其他用途</strong></p><ul><li><p>将环境光记录为纹理</p><ul><li><p>Spherical Map: 可以假设在环境中央有颗光滑的球,环境光将被投影在球面上, 那么我们可以把球面上显示的环境光当作一张贴图,将贴图展开并存储环境光</p><p><img src="./img/9-11.png" /></p></li><li><p>Cube Map: 将环境环境光投射在球面上会造成纹理的扭曲,可以将环境光投射到立方体上, 存储为六张正方形图像.这种方法投射结果扭曲小, 但是难以存储环境光的射入方向</p></li></ul></li><li><p>将凹凸记录为纹理</p><p>用几何表示物体表面的凹凸太麻烦了,这里考虑用贴图去描述表面的微小几何变化, 并在计算反射时通过贴图改变法线,有两种实现</p><ul><li><p>凹凸贴图(Bump Map): 一张灰度图,存储了每个<strong>点</strong>应该相对原物体上的点再凸出多少(默认黑色为0)</p><p><img src="./img/9-12.png" /></p><p>在渲染时需要先在shading point上建立新坐标系,然后求凹凸贴图在该点处的切线, 将切线旋转并归一化得到法线,最后将法线从新坐标系转换到原坐标系上.</p><p><img src="./img/9-13.png" /></p><p>具体通过TBN实现, 实现方法:</p></li><li><p>法线贴图(Normal Map): 贴图记录的是法线值, 用贴图上每个点的<spanclass="math inline">\((R,G,B)^T\)</span>记录该点法线的<spanclass="math inline">\((x,y,z)^T\)</span>,规定法线中每一项的值范围为<span class="math inline">\(0-1\)</span>,并在着色时候映射到<span class="math inline">\((-1,1)\)</span></p></li><li><p>位移贴图(Displacement Map):是凹凸贴图更现代化的做法直接定义每一个<strong>三角形顶点</strong>的位移,这样应用贴图后三角形上的点直接发生了变化,这样的效果更加真实(但是计算量大)</p><p><img src="./img/9-14.png" /></p><p>与凹凸贴图相比位移贴图直接改变了三角形,在物体边缘与阴影上表现更好(右图右上角边缘差异,图上的突起对其他部分突起的遮挡, 两图阴影的边缘差异)</p></li></ul></li><li><p>三维纹理</p><p>一般用于定义大理石, 山脉等的纹理. 一般不将其定义为一个真实的贴图,而是由噪声动态动态生产</p><p><img src="./img/9-15.png" /></p></li><li><p>记录提前算好的信息</p><p><img src="./img/9-16.png" /></p><p>我们很难计算出眼窝中的阴影, 可以直接将阴影之间定义在纹理中</p></li></ul><h2 id="lecture-10-geometry---几何表示">Lecture 10 Geometry -几何表示</h2><p><strong>几何表示分类</strong></p><ul><li><p>隐式几何(Implicit): 不直接定义点,而定义点满足的条件(例如定义球上的点<spanclass="math inline">\(x^2+y^2+z^2=1\)</span>).</p><p>我们很难直接得知其表示什么结构,但是可以很轻松的判断点在不在几何体上.</p><p>常见的隐式表示:</p><ul><li><p>代数方法: 列表达式</p></li><li><p>构造立体几何法(Constructive Solid Geometry):通过简单几何体的布尔运算(交并补)描述其他几何体</p><p><img src="./img/10-1.png" /></p></li><li><p>距离函数: 不描述几何体上的点, 而描述一个点到几何体上点的距离.这种描述方式很适合表述几何体的融合过程(我们定义SDF函数为图片上点到物体边界的距离,将两个图像融合就是将两个距离函数相加.距离函数为0的部分就是物体的表面)</p><p><img src="./img/10-2.png" /></p></li><li><p>水平集: 提取距离函数为<spanclass="math inline">\(n\)</span>的曲线的集合</p></li><li><p>分形表示</p></li></ul></li><li><p>显式几何(explicit): 直接给出几何体(如三角形的顶点),或者通过参数映射的形式给出(给出参数范围, 给出参数到坐标的参数方程)</p><p>我们很难直接得知点与几何体的关系, 但是可以很轻松的得知其表示结构</p><p>常见的显式表示应用:</p><ul><li><p>点云(point cloud): 用足够密的点堆砌表面</p></li><li><p>多边形面表示(最常用): 用多边形拼接描述复杂的物体</p><p><img src="./img/10-3.png" /></p><p>描述物体时需要描述三角形的顶点与三角形之间的连接关系. WavefrontObject File(<code>.obj</code>)文件就采用了这种定义方法, 例如</p><pre class="line-numbers language-obj" data-language="obj"><code class="language-obj"># Blender3D v249 OBJ File: untitled.blend# www.blender3d.orgmtllib cube.mtl# 定义空间中的点v 1.000000 -1.000000 -1.000000v 1.000000 -1.000000 1.000000...# 定义纹理坐标vt 0.748573 0.750412vt 0.749279 0.501284...# 定义面上的法线vn 0.000000 0.000000 -1.000000vn -1.000000 -0.000000 -0.000000# 定义面f 1&#x2F;2&#x2F;8 2&#x2F;9&#x2F;8 3&#x2F;13&#x2F;8   # 用第1-2-3个点定义一个平面, 他们分别对应2-9-13个纹理坐标, 分别对应8-8-8个法线f 1&#x2F;2&#x2F;8 3&#x2F;13&#x2F;8 4&#x2F;14&#x2F;8...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="lecture-11-geometry---曲线与曲面">Lecture 11 Geometry -曲线与曲面</h2><p><strong>曲线的显式表示</strong></p><ul><li><p>贝塞尔曲线(Bezier Curves)</p><ul><li><p>二次贝塞尔曲线: 按顺序定义两个点<spanclass="math inline">\(P_1\)</span>, <spanclass="math inline">\(P_2\)</span>, 定义一个新点<spanclass="math inline">\(P\)</span>, 取<span class="math inline">\(t\in[0,1]\)</span>, 在<span class="math inline">\(t=t_0\)</span>时, <spanclass="math inline">\(P\)</span>的位置是线段<spanclass="math inline">\(P_1P_2\)</span>上距离<spanclass="math inline">\(P_1\)</span>长度为<span class="math inline">\(t\times length_{P_1P_2}\)</span>的位置</p></li><li><p>二次贝塞尔曲线: 按顺序定义三个点<spanclass="math inline">\(P_1\)</span>, <spanclass="math inline">\(P_2\)</span>, <spanclass="math inline">\(P_3\)</span>, 定义三个新点<spanclass="math inline">\(P_4\)</span>, <spanclass="math inline">\(P_5\)</span>, <spanclass="math inline">\(P\)</span>, 取<span class="math inline">\(t\in[0,1]\)</span>, 在<span class="math inline">\(t=t_0\)</span>时, <spanclass="math inline">\(P_4\)</span>的位置是线段<spanclass="math inline">\(P_1P_2\)</span>上距离<spanclass="math inline">\(P_1\)</span>长度为<span class="math inline">\(t\times length_{P_1P_2}\)</span>的位置, <spanclass="math inline">\(P_5\)</span>的位置是线段<spanclass="math inline">\(P_2P_3\)</span>上距离<spanclass="math inline">\(P_2\)</span>长度为<span class="math inline">\(t\times length_{P_2P_4}\)</span>的位置, 连接<spanclass="math inline">\(P_4P_5\)</span>, <spanclass="math inline">\(P\)</span>在线段<spanclass="math inline">\(P_4P_5\)</span>上距离<spanclass="math inline">\(P_4\)</span>长度为<span class="math inline">\(t\times length_{P_4P_5}\)</span>的位置, <spanclass="math inline">\(P\)</span>的轨迹就是二次贝塞尔曲线</p><p><img src="./img/11-1.gif" /></p></li><li><p>以此类推, 三次贝塞尔曲线就是取三个线段上三个点, 连成两个线段,取二次贝塞尔曲线在<spanclass="math inline">\(t\)</span>时的位置,</p></li><li><p>如何实现贝塞尔曲线:</p><p>遵循贝塞尔曲线定义: <span class="math inline">\(P_1\toP_2\)</span>的点可以表示为<spanclass="math inline">\((1-t)P_1+t(P_2)\)</span>, 递归应用即可</p><p>常用的就是三次贝塞尔曲线, 我们有锚点<span class="math inline">\(P_1,P_2, P_3, P_4\)</span>, 其中固定<span class="math inline">\(P_1=(0,0),P_4=(1,1)\)</span>在, 变量只有<span class="math inline">\(P_{2},P_{3}\)</span>, 曲线公式为 <span class="math display">\[b(t) = P_1(1-t)^3+3P_2t(1-t)^2+3P_3t^2(1-t)+P_4t^3, t\in [0,1]\]</span> 实际效果与二次项展开类似, 可以得到更普遍的定义:</p><p>通过<span class="math inline">\(n+1\)</span>个控制点可以得到<spanclass="math inline">\(n\)</span>阶贝塞尔曲线, <spanclass="math inline">\(b^n_j(t)\)</span>表示在<spanclass="math inline">\(t\)</span>时刻, <spanclass="math inline">\(n\)</span>阶第<spanclass="math inline">\(j\)</span>个点的位置 <span class="math display">\[\begin{align}b^n(t) &amp;= b^n_0(t) = \sum_{j=0}^nb_jB^n_j(t)\\B^n_i(t) &amp;=\left( \begin{matrix}n\\i\end{matrix}\right)t^i(1-t)^{n-i}\end{align}\]</span> 其中<spanclass="math inline">\(B^n_j(t)\)</span>为伯恩斯坦多项式,实际说的就是二次项展开</p></li><li><p>性质</p><ul><li><span class="math inline">\(t=0\)</span>时都在起点</li><li>对于三次贝塞尔: 在<span class="math inline">\(t=0\)</span>时, <spanclass="math inline">\(b^1_0(0)\)</span>与<spanclass="math inline">\(b^1_2(0)\)</span>的运动方向切线分别为<spanclass="math inline">\(b^{1&#39;}_0(0)=3(b_1-b_0),b^{1&#39;}_1(0)=3(b_3-b_2)\)</span></li><li>贝塞尔曲线上的点与控制点同时做仿射变换(投影不行),点不变(想要对曲线做变换可以直接对控制点做变换).</li><li>贝塞尔曲线一定在控制点围成的突包内</li></ul></li></ul></li><li><p>逐段贝塞尔曲线(Piecewise Bezier Curves)</p><p>当贝塞尔曲线阶数变高时, 对于<spanclass="math inline">\(n\)</span>阶贝塞尔曲线, 我们需要<spanclass="math inline">\(n+1\)</span>个点才能控制一个曲线,此时曲线的控制就变困难了. 我们希望可以分段表示曲线, 然后将其拼接起来.一般使用每四个点定义贝塞尔曲线的一段(Piecewise cube Bezier)</p><p><img src="./img/11-2.png" /></p><p>每条曲线由两端各自的一个黑点和一个蓝点共四个控制点组成. 对于中间的点,点上有一个共用的黑点与两个曲线各自的蓝点组成</p><p>如果想要保证两段曲线在衔接处连续,只需要保证在衔接处两个黑蓝线<strong>等大共线反向</strong></p></li><li><p>Spline: 样条曲线</p></li></ul><p><strong>曲面的显式表示</strong></p><ul><li><p>贝塞尔曲面</p><p>可以使用四个点定义一个三阶贝塞尔曲线, 在曲面中,可以再用16个点定义四条处于平行平面的贝塞尔曲线,我们可以认为曲线上一个截面上的四个点是控制点, 从而构建一条贝塞尔曲线,最后得到贝塞尔曲面</p><p><img src="./img/11-3.gif" /></p></li></ul><h2 id="lecture-12-geometry---曲面操作与阴影">Lecture 12 Geometry -曲面操作与阴影</h2><p>可以对曲面上三角形进行操作</p><ul><li>曲面细分(Mesh Subdivision / upsampling): 三角形数量增加,表示的曲面更加光滑(图<span class="math inline">\(2\to 3\)</span>)</li><li>曲面(Mesh Simplification / downsampling): 三角形数量减少,简化曲面(图<span class="math inline">\(2\to 4\)</span>)</li><li>曲面正则化(Mesh Regularization / same #triangles):让三角形面变得更加规则, 减少尖锐的三角形,让三角形尽量接近等边三角形(图<span class="math inline">\(2\to5\)</span>)</li></ul><p><img src="./img/12-1.png" /></p><p><strong>三角形细分</strong></p><p>引入更多的三角形, 同时让三角形位置相对于原来大三角形位置变化,从而使物体变得更光滑. 常见的算法:</p><ul><li><p>Loop Subdivision(发明者是Loop, 不要译为循环细分),只适用于三角形</p><ol type="1"><li><p>引入三角形: 三角形三边取中点, 中点间连线,于是1个三角形变成4个</p></li><li><p>调整位置:</p><ul><li><p>对于引入新顶点(中点): <span class="math inline">\(P = 3/8 * (A +B) + 1/8 * (C + D)\)</span>, <span class="math inline">\(A,B\)</span>为所在边的顶点. <spanclass="math inline">\(CD\)</span>为相邻两个三角形对边顶点</p></li><li><p>对于原有顶点:</p></li></ul><p><span class="math display">\[  \begin{align}  P &amp; = (1 - n*u) * original\_position + u * neighbo\_position\_sum\\  v &amp; = 被调整顶点度数 \\  u &amp; = \left\{  \begin{matrix}  3/16&amp; \ &amp;n = 3\\  3/8n&amp; \ &amp;otherwise  \end{matrix}  \right.  \end{align}  \]</span></p><p>注意这里是针对一个原有顶点计算的, 计算相邻点位置的时候<spanclass="math inline">\(n\)</span>还是被调整点度数, 而不是相邻点的度数</p><p><img src="./img/12-2.png" /></p></li></ol></li><li><p>Catmull-Clark Subdivision, 适用于一般平面</p><ol type="1"><li><p>定义四边形面(quad face)与非四边形面(none-quad face).度不为4的点为奇异点(Extraordinary Vertex)</p></li><li><p>引入点: 取每个边与面的中点, 将边的中点与面的中点连接</p><p><img src="./img/12-4.png" /></p><p>可以看到, 第一次引入新点后:</p><ul><li>非四边形面全没了</li><li>非四边形面中点变成新奇异点, 度数为原多边形面数</li><li>原奇异点度数不变</li></ul></li><li><p>调整位置</p><ul><li>对于面的中点: 位置是所在平面四个点均值</li><li>对于边上中点: 位置还是相邻面中点于所在边端点均值</li><li>原来的点: <spanclass="math inline">\(\frac{\sum_if_i+2\sum_im_i+4p}{16}\)</span>,其中<span class="math inline">\(f_i\)</span>是相邻面中点, <spanclass="math inline">\(m_i\)</span>是相邻边中点, <spanclass="math inline">\(p\)</span>是被调整点位置</li></ul></li></ol></li></ul><p>可以看到, 我们这些算法并不是根据原物体形态对顶点调整的,而是根据已有节点获取一个新点坐标, 看起来是一种"高级的曲面插值".这样的做法不能让细分后模型更加接近于原物体, 但是可以让模型更加光滑,例如</p><p><img src="./img/12-3.png" /></p><p><strong>曲面简化</strong></p><p>有的时候我们不希望顶点太多(物体离得很远, 没必要渲染那么仔细),所以需要曲线细分,</p><p>算法: 边坍缩, 去掉一个边, 把相邻节点连起来</p><ul><li><p>找到新点:</p><p><img src="./img/12-5.png" /></p><p>假设需要将灰色部分坍缩成三个点并产生一个蓝色的新点,但是新点的位置难以确定. 如果采用均值会得到左边的效果,我们使用二次度量误差(Quadric Error Metrics)评价点的位置,让新点距离平面距离和最小.</p></li><li><p>找到需要坍缩的边: 为每个边计算坍缩后二次度量误差最小的边.但是每次坍缩后其他边的二次度量误差会变化,我们需要动态维护边的二次度量误差, 用一个Heap即可</p></li><li><p>这是一个贪心算法, 虽然不是最优, 但是看着不错</p></li></ul><p><strong>阴影生成</strong></p><p>可以在光栅化时候进行阴影生成(Shadow Mapping).</p><ul><li>Shadow Mapping是一个图像空间的做法:在生成阴影时无需知道物体的几何信息.</li><li>只适用于点光源</li><li>会产生走样现象</li><li>只能生成硬阴影(一个点要么在阴影里, 要么不在阴影里)</li><li>存在数值精度问题</li></ul><p>核心思想: 如果一个点不再阴影里,那么从光源方向与摄像机方向都能看到他</p><p>实现:</p><ul><li>将光源当作摄像机维护每个点此时的Depth Buffer</li><li>从原摄像机点做光栅化, 对于屏幕上的每个点,计算点到光源的距离并于上一步维护的Depth Buffer比较, 如果距离大于DepthBuffer就说明光打不到, 此处是阴影</li><li>由于Depth Buffer像素有尺寸(如: Depth Buffer是1080P的,但是光栅化是2K的, 光栅化的一个像素不对应Depth Buffer上一个像素),浮点数误差, 很难精确比较两个距离是否相等. 一般可用实际深度大于DepthBuffer深度+esp判定被遮挡. 但是依然很难准确实现</li></ul><p><strong>硬阴影与软阴影</strong></p><p><img src="./img/12-6.png" /></p><p>在Shadow Mapping时, 我们认为光源是点光源, 但是实际光源是有体积的,例如上图月食现象 中, 地球上一部分是完全看不到光的(Umbra区域),一部分是可以看到一部分光的(Penumbra区域),将完全看不到光的阴影称为硬阴影, 将可以看到部分光的阴影称为软阴影.</p><h2 id="lecture-13-ray-tracing---whitted-style光线追踪">Lecture 13 RayTracing - Whitted-Style光线追踪</h2><p>光线追踪与光栅化是两种<strong>完全不同的成像方式</strong>(相互替代)</p><p>光栅化针对单点处理, 但不能实现全局效果(软阴影, 磨砂镜面反射,间接光照). 光追可以实现全局效果, 但是非常慢,一般用于离线渲染(电影等)</p><p><strong>光线追踪的基本假设</strong></p><ul><li>光沿直线传播(不考虑波动性)</li><li>光线碰撞后不改变原传播性质</li><li>人可以看到图像是因为光线从光源发出, 不断反射折射, 最后进入人眼.光路是可逆的(人可以看到物体也可以认为是人眼发出了某种感知光线,最后汇集到光源处)</li><li>人眼是一个点</li><li>光线在物体表面会发生完美折射</li></ul><p>光线追踪就是模拟人眼发出感知光线,通过不断反射折射最后汇集到光源的过程(汇集不到光源的感知光线就在折射反射时衰减完了...).</p><p><strong>感知光线投射</strong></p><p><img src="./img/13-1.png" /></p><p>从人眼看向屏幕, 让眼睛发出的光线穿透屏幕打在物体上,先不考虑折射与多次反射, 我们直接将着色点与光源连线,如果连线之间没有遮挡那说明该点不在阴影中,使用着色模型就可以计算是什么颜色. 至此, 我们得到了与光栅化相似的结果.在光追中我们对算法进行了一些改进</p><p><strong>Whitted-Style光线追踪</strong></p><p>一种比较古老的光追算法, 效果不是很好</p><p><img src="./img/13-2.png" /></p><p>我们看右侧哪个"金属球", 可以看到球上有本身的金属银色,也有反射环境光得到的颜色.左侧的"玻璃球"上还可以看到折射看到的背后的光</p><p>在Whitted-Style光追中, 人眼发出的光线(eye ray / primaryray)在打到物体点上后被打散为三种光线</p><ul><li>eye ray通过非完美反射打到光源, 通过着色模型得到物体本身颜色</li><li>通过完美反射得到其他物体的颜色</li><li>通过折射得到的其他物体颜色</li></ul><p><img src="./img/13-3.png" /></p><p>在每次反射折射后光线能量会衰弱, 可以使用递归实现该算法</p><p><strong>存在的问题</strong></p><ul><li>如何判断感知光线和哪个物体相交,交点在哪里(我们需要让光在三维物体之间反复反射, 所以不能使用DepthMap实现)</li><li>反射光折射光方向与衰减计算</li></ul><p><strong>光与物体交点计算</strong></p><ul><li><p>光线的定义: 原点(<spanclass="math inline">\(O\)</span>)与方向(单位向量<spanclass="math inline">\(\vec{d}\)</span>)组成, 光线就是一系列点<spanclass="math inline">\(O+td, (0\leq t&lt;\infty)\)</span></p></li><li><p>光源与物体关系判定: 若光线与物体有偶数个交点则光源在物体外,有奇数个交点则光源在物体内</p></li><li><p>光线与隐式定义曲面的交点: 将光线方程与曲面方程联立. 舍去<spanclass="math inline">\(t\)</span>的复数根与负根, 取最小的<spanclass="math inline">\(t\)</span>为第一个交点</p></li><li><p>光线与显式定义曲面的交点:</p><p>光线与曲面交点不是很好求, 但是光线三角形的交点还是很好求的</p><ul><li><p>光线与三角形求交点</p><p>先求光线与三角形面的交点, 再判断交点在不再三角形内</p><p>平面可以用平面上一个点<spanclass="math inline">\(P&#39;\)</span>及其法向量<spanclass="math inline">\(\vec{N}\)</span>表示, 平面上任意一点<spanclass="math inline">\(P\)</span>满足<spanclass="math inline">\(\vec{PP&#39;}\cdot \vec{N} = 0\)</span>,将光线表示为<span class="math inline">\(O+t\vec{d}\)</span></p><p>联立即可: <span class="math inline">\((O+t\vec{d}-P&#39;) \cdot\vec{N} = 0\)</span>, 使用克莱姆法则可以得到 <spanclass="math display">\[t = \frac{(P&#39;-O)\cdot N}{d\cdot N}\]</span> 最后判断点是否在三角形内部</p></li><li><p>Moller Trumbore算法</p><p>就是将上面步骤与重心坐标判断点与三角形位置组合在一起</p><p><span class="math display">\[\begin{align}\left[\begin{matrix}t\\b_1\\b_2\end{matrix}\right]=\frac{1}{S_1\cdot E_1}\left[\begin{matrix}S_2\cdot E_2\\S_1\cdot S\\S_2\cdot D\end{matrix}\right]\end{align}\]</span></p><p>其中</p><p><span class="math display">\[E_1 = P_1-P_0\\E_2 = P_2-P_0\\S = O-P_0\\S_1 = D\times E_2\\S_2 = S\times E_1\\\]</span></p></li><li><p>判断光线与每个三角形求交太慢了, 采用类似BoundingBox的思想加速求交</p></li></ul></li></ul><p><strong>Bounding Volumes</strong></p><p>将物体用相对简单的形状包起来, 若光线与BoundingVolumes不想交那一定不和物体相交. 为了方便计算,我们一般用边与坐标轴平行的立方体做包围和.在处理光线与立方体相交判定问题时我们可以采用坐标轴分解. 核心思想是:如果点在立方体内部, 那么点与立方体投影在<span class="math inline">\(xoy,yoz, zox\)</span>上时, 点都在投影矩形内部. 如果任何一个方向投影不成立,点就不在立方体内部.</p><p>由于我们选取的立方体边都平行于坐标轴, 很容易做相交计算,对于一个投影平面(以<span class="math inline">\(xoy\)</span>为例),只需求射线与矩形交点时<spanclass="math inline">\(t\)</span>并对范围求交(下图先求射线与<spanclass="math inline">\(x\)</span>交点, 再求<spanclass="math inline">\(y\)</span>, 最后求<spanclass="math inline">\(t\)</span>取值的交集),对三面分别投影求交即可得到光线穿过立方体的<spanclass="math inline">\(t\)</span>取值范围, 计<spanclass="math inline">\(t_{enter} = t_{min}, t_{exit} =t_{max}\)</span></p><p><img src="./img/13-4.png" /></p><p>讨论如下情况</p><ul><li><span class="math inline">\(t_{exit} &lt; 0\)</span>:物体在光线后面</li><li><span class="math inline">\(t_{exit} \geq 0, t_{enter} &lt;0\)</span>: 光源在物体里面</li><li><span class="math inline">\(t_{exit} \geq 0, t_{enter} &lt;t_{exit}\)</span>: 正常情况</li></ul><p><strong>利用光线与Bounding Volumes相交加速光线与曲面相交</strong></p><ul><li><p>Uniform Grids方法(在物体分布均匀时效果好)</p><p>将场景均匀的分成等大的小盒子, 记录盒子与哪个物体相交,若光线与盒子相交着判断光线与对应物体是否相交</p><p><img src="./img/13-5.png" /></p><ul><li>如何找到浅蓝色路径呢? 如果光线与一个浅蓝色格子相交,那么下一个浅蓝色格子一定在这个格子周围八个格子</li><li>格子尺寸如何确定: <span class="math inline">\(格子数 \approx 27\times 场景中物体数目\)</span>(经验公式)</li></ul></li><li><p>Spatial Partitions方法(在场景空旷时效果好)</p><p>我们不希望将空间划分为等大的方块, 而是为空旷空间分配大格子,密集空间分布小格子. 常见划分方法有:</p><p><img src="./img/13-6.png" /></p><ul><li><p>八叉树(Oct-Tree): 将一个节点分为八个子节点(类似一维的二叉树).在切割时,若节点中有足够数量少的物体(例如节点只与一个物体相交)就停止</p></li><li><p>KD-Tree: 八叉树实际上是使用了二叉树的思想, 但是在高维空间中,树的分枝数成指数倍增长(四维的16叉树), 于是提出了KD-Tree.划分空间时依次从不同轴切物体.切开的物体在下次切割时候独立切割(切线可以不在一起)于是可以用二叉树存储KD-Tree.非叶子只需要保存切线, 叶子节点保存相交的曲面.采用类似二分的方法找到第一个与光相交的叶子节点</p><p>KD-Tree存在的问题: 难以判断物体与盒子相交.一个物体可以出现在多个Bounding Volumes中</p></li><li><p>BSP-Tree: 每次将空间划分为等物体数两块.但是BSP-Tree的切线不平行于轴线, 高维时切面难以计算</p></li></ul></li><li><p>Object Partitions &amp; Bounding Volume Hierarchy(BVH)(综合最好)</p><p>Spatial Partitions中判Bounding Volumes与物体关系太麻烦了,我们可以反向操作, 通过物体生成Bounding Volumes. 然后对BoundingVolumes操作</p><p>我们将一组物体(一个BoundingVolume)采用某种方法(例如KD-Tree思想)划分成两部分, 生成两个BoundingVolume, 递归进行多次划分与重算Bounding Volume(可以用二叉树存储这一过程).这样一个物体只存在于一个Bounding Volume, 同时一个BoundingVolume中的物体也是已知的(例如图中虽然蓝绿Bounding Volume有交集,但是仍然可以分清哪个三角形属于哪个区域)</p><p><img src="./img/13-7.png" /></p><p>划分三角形的技巧</p><ul><li>每次取一个维度进行划分(划分面与坐标面平行),但是不必要像KD-Tree一样依次划分</li><li>每次将Bounding Volume最长轴砍断</li><li>每次从第<spanclass="math inline">\(n/2\)</span>个三角形处划分(计算物体重心并使用快速选择算法<spanclass="math inline">\(O(n)\)</span>实现.快速划分算法借助快速排序思想实现了查找第<spanclass="math inline">\(n\)</span>大的数:在快排每次找到中间节点时只查找自己需要的那一半)</li><li>当包围的节点数足够少时停止(比如5个)</li></ul></li></ul><h2 id="lecture-14-ray-tracing---辐射度量学">Lecture 14 Ray Tracing -辐射度量学</h2><p>辐射度量学: 精确描述光相关物理量的方法与单位,定义了光照在空间中的属性</p><p><strong>Radiant Energy and Flux(Power)</strong></p><p>Radiant Energy: 电磁辐射出的能量, 物理量<spanclass="math inline">\(Q\)</span>, 单位<spanclass="math inline">\(J\)</span></p><p>Radiant Flux(Power): 单位时间的能量类似功率, 物理量<spanclass="math inline">\(\Phi = \frac{dQ}{dt}\)</span>, 单位<spanclass="math inline">\(W\)</span>或<spanclass="math inline">\(lm\)</span>(流明, 光学专用)</p><p><strong>Radiant Intensity</strong></p><p>描述辐射源的物理量, 表示<strong>单位立体角(unit solidangle)发出</strong>的功率 <span class="math display">\[I(\omega) = \frac{d\Phi}{d\omega}\]</span> 单位<span class="math inline">\(\frac{lm}{sr} = cd\)</span>,其中你<span class="math inline">\(sr\)</span>为立体角单位</p><p>单位立体角/微分立体角</p><ul><li><p>在二维图形中, 用弧度描述二维角, 且<spanclass="math inline">\(\theta = \frac{l}{r}\)</span></p></li><li><p>在三维图形中, 用立体角描述三维角, 且<spanclass="math inline">\(\Omega = \frac{A}{r^2}\)</span>, A为投射球面积</p><p><img src="./img/14-1.png" /></p><p>面积计算(利用球坐标系统) <span class="math display">\[dA = r^2 \sin\theta\ d\theta\ d\phi\]</span> 单位立体角就是<spanclass="math inline">\(单位面积/r^2\)</span>, <spanclass="math inline">\(d\omega = dA/r^2=\sin\theta\ d\theta\d\phi\)</span></p></li><li><p>球体立体角为<spanclass="math inline">\(4\pi\)</span>(设一个半径为1的球,立体角和为面积)</p></li></ul><p><strong>Irradiant</strong></p><p>描述辐射接收者的物理量, 表示<strong>单位面积接受</strong>的功率</p><p>物理量<span class="math inline">\(E\)</span>, 单位<spanclass="math inline">\(\frac{lm}{m^2}=lux\)</span></p><p>此处的单位面积为与入射光线<strong>垂直</strong>的单位面积,若不垂直则计算垂直分量<span class="math inline">\(E =\frac{\Phi}{A}\cos\theta\)</span></p><p><strong>Radiance</strong></p><p>描述光线的空间属性,表示<strong>单位立体角单位投影面积</strong>上的功率 <spanclass="math display">\[L(p,\omega) = \frac{d^2\Phi(p,\omega)}{d\omega \cos\theta}\]</span> <img src="./img/14-2.png" /></p><p>考虑光线从一个很小的表面辐射出,并且在一个点上向四面八方投射其在单位立体角辐射出功率就是Radiance</p><p>还可以分为Incident Radiance与Exiting Radiance,分别表示射入与发出的能量</p><p>可以这样理解</p><ul><li>Irradiant: 单位面积而收到的功率</li><li>Radiance: 单位面积单位方向收到的功率</li></ul><h2 id="lecture-15-ray-tracing---光线传播">Lecture 15 Ray Tracing -光线传播</h2><p><strong>Bidirectional Reflectance Distribution Function (BRDF)双向反射分布函数</strong></p><p>BRDF函数描述入射光线在物体表面的不同方向的能量反射分布.可以将反射理解为物体表面吸收了所有入射光后将一部分光再发射出去的过程</p><p><img src="./img/15-1.png" /></p><ul><li><p>单位表面吸收的从<spanclass="math inline">\(\omega_i\)</span>方向射入能量: <spanclass="math inline">\(dE(\omega_i) = L(\omega_i)\cos\theta_i\d\omega_i\)</span></p></li><li><p>BRDF函数定义单位表面在<spanclass="math inline">\(\omega_r\)</span>方向反射能量占接收能量占比(BRDF在每个反射方向具体值由物体材质决定)<span class="math display">\[f_r(\omega_i\to \omega_r) = \frac{dL_r(\omega_r)}{dE_i(\omega_i)} =\frac{dL_r(\omega_r)}{L_i(\omega_i)\cos\theta_id\omega_i}\]</span></p></li><li><p>物体表面从任意方向接收光线在某一角度反射光(对每个入射方向积分)<span class="math display">\[L_r(p, \omega_r) = \int_{H^2}f_r(p,\omega_i\to\omega_r)L_i(p,\omega_i)\cos\theta_i\ d\omega_i\]</span></p></li><li><p>上面这个方程仅考虑了从不同光源照向物体的反射光,没有考虑间接反射</p></li></ul><p><strong>渲染方程(Rendering Equation)</strong></p><p>同时考虑反射光与物体本身发出的光</p><p><span class="math display">\[L_o(p, \omega_o) =L_r(p, \omega_o) + \int_{\Omega^+}f(p,\omega_i,\omega_o)L_i(p,\omega_i)(n\cdot\omega_i)\ d\omega_i\]</span> 对于面光源: 可以对面光源覆盖的每个立体角做积分</p><p>对于二次反射: 可以将反射来光的物体当作一个面光源处理</p><p>可以在数学形式上简化成算子微分方程 <span class="math display">\[L(u) = e(u) + \int L(v)K(u,v)\ dv=E+KL\]</span> <span class="math inline">\(K\)</span>是入射能量, <spanclass="math inline">\(L\)</span>是某点辐射能量算子,应用泰勒展开求得<spanclass="math inline">\(L=E+KE+K^2E+K^3E+...\)</span></p><p>可以理解成点发出的能量<spanclass="math inline">\(L=\)</span>该点直接发出的能量<spanclass="math inline">\(E+\)</span>光源一次反射能量<spanclass="math inline">\(KE+\)</span>两次反射能量<spanclass="math inline">\(K^2E+...\)</span></p><h2 id="lecture-16-ray-tracing---蒙特卡洛路径追踪">Lecture 16 RayTracing - 蒙特卡洛路径追踪</h2><p><strong>蒙特卡洛积分</strong></p><p>求定积分时的常见思路是先求不定积分, 再通过上下界获得定积分.但是当函数较为复杂时, 不定积分不易求解. 蒙特卡洛积分是另一种积分方法.在积分区间中随机取几个数及其对应的<spanclass="math inline">\(f(x)\)</span>, 求这几个<spanclass="math inline">\(f(x)\)</span>的均值, 认为定积分可以近似成 <spanclass="math display">\[\int f(x)dx = \frac{1}{N}\sum_{i=1}^N\frac{f(X_i)}{p(X_i)}\]</span> <span class="math inline">\(p(X_i)\)</span>为一个随机变量<spanclass="math inline">\(X_i\)</span>在采样时被选中的概率,当随机变量均匀在<spanclass="math inline">\([a,b]\)</span>采样时可以认为<spanclass="math inline">\(p(X_i)=\frac{1}{b-a}\)</span>. <spanclass="math display">\[\int_a^b f(x)dx =  \frac{b-a}{N}\sum_{i=1}^Nf(X_i)\]</span> <strong>路径追踪</strong></p><p>Whitted-Style Ray Tracing的思想是无限弹射"感知光线",每次记录反射点颜色. 存在问题</p><ul><li><p>不能认为光线在物体表面发生完美镜面反射</p></li><li><p>将反射点直接与光源相连没有考虑漫反射(注意下图天花板与立方体侧边映射的墙面颜色)</p><p><img src="./img/16-1.png" /></p></li></ul><p>可以采用图像度量学方法取代Ray Tracing. 需要做的就是解出渲染方程 <spanclass="math display">\[L_o(p,\omega_0) =L_e(p,\omega_0)+\int_{\Omega^+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)(n\cdot \omega_i)\ d\omega_i\]</span> <strong>实现</strong></p><ul><li>定积分求解: 蒙特卡洛积分, 在不同方向上采样, 采样区间是一个半球,<span class="math inline">\(p(\omega) =1/2\pi\)</span>(半球面立体角是<spanclass="math inline">\(2\pi\)</span>). 在代码实现时,只需要从着色点发出<span class="math inline">\(N\)</span>条光, 求<spanclass="math inline">\(\frac{1}{N}\sum_{i=1}^n\frac{L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)(n\cdot\omega_i)}{p(\omega_i)}\)</span></li><li>间接光照<span class="math inline">\(L\)</span>的递归定义:可以把间接光照的反射物体当作光源, 计算从着色点看向反射点的颜色</li></ul><pre class="line-numbers language-none"><code class="language-none">shade(p, wo)    Randomly choose N directions wi~pdf    Lo &#x3D; 0.0    For each wi        Trace a ray r(p, wi)        If ray r hit the light        Lo +&#x3D; (1 &#x2F; N) * L_i * f_r * cosine &#x2F; pdf(wi)        Else If ray r hit an object at q        Lo +&#x3D; (1 &#x2F; N) * shade(q, -wi) * f_r * cosine &#x2F; pdf(wi)    Return Lo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题</strong></p><ul><li><p>通过这种方式求的间接光照时,每次求间接光照都要做一个蒙特卡洛积分采样(如图, 假设一次积分采样100个点,若这100个点都打到其他物体上, 经过<spanclass="math inline">\(n\)</span>次间接光照我们需要做<spanclass="math inline">\(100^{n+1}\)</span>次)</p><p><img src="./img/16-2.png" /></p><p>规避指数爆炸最简单的方法就是将底数变成1(每次定积分只随机采一个点).这会产生噪音(随机采样点选的不好), 但是只要穿过一个像素点的eyeray足够密集就可以避免这一问题(如图, 我们发出足够密的eye ray,但是每次间接反射时只反射一次)</p><p><img src="./img/16-3.png" /></p><p><strong>采样数<spanclass="math inline">\(N=1\)</span>的渲染方程实现就是路径追踪</strong></p></li><li><p>没有定义递归边界</p><p>光线是无限弹射的(虽然有损耗, 但是能量一定不会降为0, 一定是无限弹射),计算机中不能这样. 人们引入了俄罗斯轮盘赌(Russian Roulette)的思想:每次弹射时令光有<span class="math inline">\(p\)</span>的概率继续弹射,若随机到<spanclass="math inline">\(p\)</span>范围内则继续弹射并将弹射结果<spanclass="math inline">\(/p\)</span>返回, 若随机到<spanclass="math inline">\(1-p\)</span>着直接返回<spanclass="math inline">\(0\)</span>, 递归执行后其返回值数学期望<spanclass="math inline">\(E = P*(Lo/P)+(1-P)*0 = Lo\)</span></p></li></ul><p>应用上述改进</p><pre class="line-numbers language-none"><code class="language-none">shade(p, wo)    Manually specify a probability P_RR    Randomly select ksi in a uniform dist. in [0, 1]     # 轮盘赌    If (ksi &gt; P_RR) return 0.0;    Randomly choose ONE direction wi~pdf(w)              # N&#x3D;1的路径追踪    Trace a ray r(p, wi)    If ray r hit the light    Return L_i * f_r * cosine &#x2F; pdf(wi) &#x2F; P_RR    Else If ray r hit an object at q    Return shade(q, -wi) * f_r * cosine &#x2F; pdf(wi) &#x2F; P_RRray_generation(camPos, pixel)    Uniformly choose N sample positions within the pixel    pixel_radiance &#x3D; 0.0    For each sample in the pixel        Shoot a ray r(camPos, cam_to_sample)        If ray r hit the scene at p        pixel_radiance +&#x3D; 1 &#x2F; N * shade(p, sample_to_cam)    Return pixel_radiance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>路径追踪并不高效, 一旦采样率(穿过一个像素的eye ray, Samples PerPixel/SPP)过低, 就会因为<spanclass="math inline">\(N=1\)</span>产生噪音</p><p><img src="./img/16-4.png" /></p><p>如果我们可以提高采样线命中光源的概率就可以减少SPP,这需要修改之前的均匀采样模式(同样概率密度函数也会变): 可以直接换采样源,从光源处采样, 强制采样样本都从光源处来</p><p><img src="./img/16-5.png" /></p><p>在光源上均匀采样, 光源面积为<span class="math inline">\(A\)</span>,那么采样<span class="math inline">\(p = 1/A\)</span>.渲染方程从反射点采样变成光源采样模式, 即<spanclass="math inline">\(d\omega =\frac{dA\cos\theta&#39;}{\|x&#39;-x\|^2}\)</span> <spanclass="math display">\[\begin{align}L_o(p,\omega_0) &amp;= \int_{\Omega^+}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)\cos\theta\ d\omega_i\\&amp;= \int_{A}L_i(p,\omega_i)f_r(p,\omega_i,\omega_o)\frac{\cos\theta\cos\theta&#39;}{\|x&#39;-x\|^2}\ dA\end{align}\]</span> 应用光源采样改进后的算法, 在每次计算反射时将光分为两部分</p><ul><li>计算直接光照: 换积分域, 无需使用RR</li><li>计算多次反射光: 采用之前的俄罗斯轮盘赌</li></ul><pre class="line-numbers language-none"><code class="language-none">shade(p, wo)    # Contribution from the light source.    L_dir  &#x3D; 0.0    Uniformly sample the light at x’ (pdf_light &#x3D; 1 &#x2F; A)    Shoot a ray from p to x&#39;    If the ray is not blocked in the middle# 防止物体遮挡    L_dir &#x3D; L_i * f_r * cos θ * cos θ’ &#x2F; |x’ - p|^2 &#x2F; pdf_light    # Contribution from other reflectors. 还是原来的俄罗斯轮盘赌    L_indir &#x3D; 0.0    Test Russian Roulette with probability P_RR    Uniformly sample the hemisphere toward wi (pdf_hemi &#x3D; 1 &#x2F; 2pi)    Trace a ray r(p, wi)    If ray r hit a non-emitting object at q    L_indir &#x3D; shade(q, -wi) * f_r * cos θ &#x2F; pdf_hemi &#x2F; P_RR    Return L_dir + L_indir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在的其他问题: 难以如何处理点光源(<spanclass="math inline">\(dA\)</span>太小了)</p><p><strong>注意蒙特卡洛积分, 俄罗斯轮盘赌思想和降低SPP方法</strong></p><p><strong>路径追踪后的工作</strong></p><ul><li>如何对球体进行均匀采样: 采样理论</li><li>如何对特定形状设计好的采样方法与pdf(除了光源采样): 重要性采样</li><li>如何评价随机数生成质量(均匀分布, 相邻随机数之间距离):低差异化序列</li><li>如何结合半球采样与光源采样: 多重重要性采样(MIS)</li><li>通过一个像素的eye rays如何加权得到打在像素的能量</li><li>像素的颜色如何确定(路径追踪的结果是"功率", 功率与颜色并非线性对应):伽玛矫正, 颜色空间</li></ul><p><strong>其他广义光追算法</strong></p><ul class="task-list"><li><input type="checkbox" checked="" />Whitted-style ray tracing</li><li><input type="checkbox" checked="" />path tracing</li><li><input type="checkbox" />单向path-tracing</li><li><input type="checkbox" />双向path-tracing</li><li><input type="checkbox" />光子映射</li><li><input type="checkbox" />Metropolis 光线传输</li><li><input type="checkbox" />VCM</li><li><input type="checkbox" />UPBP(大杂烩)</li></ul><h2 id="lecture-17-materials-and-appearances">Lecture 17 Materials andAppearances</h2><p>研究问题: 光照与材质之间的作用, 实际上就是研究材质的BRDF函数</p><p><strong>勃朗材质(Lambertian Material)</strong></p><p>勃朗材质自己不发光, 且只发生漫反射.</p><p><img src="./img/17-1.png" /></p><p>当入射光均匀打在物体上, 根据能量守恒可以得到 <spanclass="math display">\[\begin{align}L_o(\omega_o) &amp;= \int_{H^2}f_rL_i(\omega_i)\cos\theta_i\ d\omega_i\\&amp;=f_rL_i\int_{H^2}\cos\theta_i\ d\omega_i\\&amp;=\pi f_rL_i\\f_r = \frac{1}{\pi}\end{align}\]</span> 于是漫反射系数<span class="math inline">\(f_r =\frac{\rho}{\pi}\)</span>,其中<spanclass="math inline">\(\rho\)</span>为反射率(albedo, 可以是颜色向量,也可以是值)</p><p><strong>光面材质(Glossy material)</strong></p><p>有镜面反射, 但是有没有那么光滑的材质. 例如铜, 铝</p><p><img src="./img/17-2.png" /></p><p><strong>理想反射/折射材料(Ideal reflective / refractivematerial)</strong></p><p>同时存在光线反射与折射. 例如水, 玻璃</p><p><img src="./img/17-3.png" /></p><p><strong>反射</strong></p><ul><li>利用向量表示: <span class="math inline">\(\omega_i + \omega_o = 2(\omega_i\cdot n)n\)</span></li><li>利用仰角表示: <span class="math inline">\(\Phi_o = (\Phi_i + \pi)\mod\ 2\pi\)</span></li></ul><p><strong>折射</strong></p><p>Snell定理: 不同的材质有不同折射率(真空1, 水1.33),入射角正弦与折射角正弦折射率相乘相等. <spanclass="math inline">\(\eta_i\sin\theta_i =\eta_t\sin\theta_t\)</span></p><p><img src="./img/17-4.png" /></p><p>若射出材质折射率小于射入材质折射率, 则不发生折射(即全反射),BRDF函数表示固定入射光在不同角度反射分布,类比有BTDF函数表示固定入射光线在不同角度折射分布, 两者统称为BSDF</p><p><strong>菲涅耳项(Fresnel Reflection / Term)</strong></p><p>在同时发生镜面反射与折射材质上, 入射角(反射角)角度不同,发生反射与折射光线的比例不同, 入射角与物体几乎平行时, 更多的光会被反射,入射角与物体垂直时更多的光会折射. 定义折射与反射光的比例为菲涅耳项</p><ul><li><p>绝缘体的大致菲涅耳项(红线)</p><p><img src="./img/17-5.png" /></p></li><li><p>导体的大致菲涅耳项(红线)</p><p><img src="./img/17-6.png" /></p></li></ul><p>可以看到导体在不同角度上菲涅耳项都很高, 所以我们用铜等导体做镜子,而不是用丝绸, 玻璃等绝缘体</p><p>我们需要计算入射角为<spanclass="math inline">\(\theta\)</span>时的反射率, 但是菲涅耳项不好算,可以采用Schlick's Approximation 近似得到 <span class="math display">\[R(\theta) = R_0+(1-R_0)(1-\cos\theta)^5 \\R_0 = \left(\frac{\eta_i-\eta_t}{\eta_i+\eta_t}\right)^2\]</span> 其中<span class="math inline">\(R_0\)</span>为在0度时的反射率,也叫基准反射率(<span class="math inline">\(n_1,n_2\)</span>与材质相关)</p><p><strong>微表面材质(Microfacet Material)</strong></p><p>当从观察点离表面足够远,我们就看不到物体与物体上的凹(macrosurface)凸(microsurface)面,这些凹凸的几何体共同形成了独特的材质,观察者只能看到光在表面形成的反射(如下图, 高光区与只能看到光,看不到具体的物体)</p><p><img src="./img/17-7.png" /></p><p>可以用物体表面发现分布度量材质, 当物体表面法线呈现一致分布时,物体呈现光面材质, 当物体表面法线呈现不一致分布时, 物体呈现漫反射材质</p><p><img src="./img/17-8.png" /></p><p>定义微表面上的BRDF: <span class="math display">\[f(i,o) = \frac{F(i,h)G(i,o,h)D(h)}{4(n,i)(n,o)}\]</span></p><ul><li><span class="math inline">\(F(i,h)\)</span>为菲涅耳项</li><li><span class="math inline">\(h\)</span>表示射出入向量的半程向量</li><li><span class="math inline">\(D(h)\)</span>表示法线在<spanclass="math inline">\(h\)</span>方向的分布(我们认为微表面是镜面反射,只有反射面发现与半程向量同向时才会发生反射)</li><li><spanclass="math inline">\(G(i,o,h)\)</span>用于物体表面的自遮挡/投影线性(一个小突起把光线挡住了)修正,这种现象常发生于光线几乎与物体平行射入(graazing angle),正常情况下自遮挡会导致边缘过亮. 我们可以使用这个函数修正</li></ul><p><strong>各向异性(Anisotropic)与各项同性(Isotropic)材质Materials</strong></p><ul><li>各向同性: 物体微表面不存在方向性(法线分布均匀), 满足<spanclass="math inline">\(f_r(\theta_i,\Phi_i;\theta_r,\Phi_r) =f_r(\theta_i,\Phi_i;\theta_r,\Phi_r - \Phi_i)\)</span>, 即旋转方位角,BRDF不变</li><li>各向异性: 法线分布在特殊方向, 满足<spanclass="math inline">\(f_r(\theta_i,\Phi_i;\theta_r,\Phi_r) \neqf_r(\theta_i,\Phi_i;\theta_r,\Phi_r - \Phi_i)\)</span>, 即旋转方位角,BRDF变</li></ul><p><strong>BRDF性质</strong></p><ul><li>函数值非负</li><li>可加性</li><li>光路可逆性</li><li>能量不增(BRDF和小于1)</li><li>对于各项同性材质: 可以忽略BRDF入射角</li></ul><p><strong>BRDF测量</strong></p><p>可以直接用机器测量不同出入射角的BRDF, 但是四维函数测量很慢,可以利用光路可逆性减少测量量, 也可以根据材质各向同性减少测量量</p><h2 id="lecture-18-materials-and-appearances">Lecture 18 Materials andAppearances</h2><p><strong>高级光线传播</strong></p><p>若蒙特卡洛方法求得的定积分的期望值与真实期望一样,我们就称估计是无偏的, 如果估计是有偏的,但是当采样点足够多时期望可以收敛到正确值我们就称估计是一致的.常见路径追踪方法有</p><ul><li><p>无偏光线传播</p><ul><li><p>双向路径追踪Bidirectional path tracing(BDPT):分别从光源与摄像机发出光, 同时投射, 称这样的光线为半路径,两个半路径连起来就是一条光路.双向路线追踪对于大片被间接光照亮的的场景效果很好(因为直接从光源开始追踪)</p></li><li><p>Metropolis光线传播Metropolis Light Transport(MLT):使用马尔科夫链进行采样(根据一个样本获得与之相近的样本).可以根据一条路径生成周围的路径. 该方式特别适合做复杂反射的光路传播.缺点是很难分析算法收敛时间</p><p><img src="./img/18-1.png" /></p></li></ul></li><li><p>有偏光线传播</p><ul><li><p>光子映射(Photon Mapping):适合渲染光经过光学面聚焦后的结果与复杂路径</p><p><img src="./img/18-2.png" /></p><p>一种实现方法:</p><ol type="1"><li>从光源出发追踪光子, 光子打倒漫反射面就不动了,让光子都停到漫反射面上</li><li>从照相机出发追踪光子, 光子打倒漫反射面就不动了,让光子都停到漫反射面上</li><li>计算局部的密度估计(给一个点, 求周围N个光子), 可以用<spanclass="math inline">\(N\)</span>的范围度量我们可以看到什么</li></ol></li><li><p>VCM: 光子映射+双向路径追踪,在双向路径追踪时候若两个点在同一面上且离得足够近,我们就认为这两个半路径相交</p></li></ul></li><li><p>实时辐射度Instant Radiosity (IR)</p><p>认为已经被照亮的地方是光源, 将光源直射到的地方当作新光源并取代原光源.优点: 快, 缺点: 接缝处会出现小光点</p></li></ul><p>虽然这些方法很高端, 但是路径追踪还是最准确的</p><p><strong>外观建模</strong></p><ul><li><p>非表面模型</p><ul><li><p>散射介质: 光在行进的过程中会发生散射/汇聚. 如: 雾, 云</p><p>使用Phase Function定义散射方式</p><p><img src="./img/18-3.png" /></p><p>渲染方法: 光在任何地方方向都可能发生改变,产生不同Path尝试折到光源</p></li><li><p>头发与毛发: 研究光与曲线如何作用,毛发有无色的高光与有色的高光</p><p>将毛发认为是玻璃壳包裹的色素柱, 柱表面有单向锯齿.光有三种行进方式</p><p><img src="./img/18-4.png" /></p><p>动物毛发与人头发相比, 髓质更大, 光更容易发生散射.得到改进后的圆柱模型(在色素中包入髓质圆柱面)</p><p><img src="./img/18-5.png" /></p></li><li><p>颗粒材质Granular Material</p><p>渲染小石子, 沙粒用</p></li></ul></li><li><p>表面模型</p><ul><li><p>半透明材质Translucent Material</p><p>渲染玉石, 人体(半透光的部位),考虑了光打入物体后发生散射最后从其他部位射出,使用BSSRDF函数取代BRDF函数表示从某个方向射入从其他地方射出的光分布</p><p><img src="./img/18-6.png" /></p></li><li><p>布料</p></li><li><p>细节度模型</p><p>我们渲染出的物体都太完美了,现实中的物体表面或多或少都有一些划痕与缺陷, 可以定义一些贴图让其有瑕疵.我们的模型也没有考虑光的波动性,没有考虑光的干涉(如金属表面不仅可以看到金属颜色,还可以看到一些因为干涉产生的亮点)</p><p><img src="./img/18-7.png" /></p></li></ul></li><li><p>程序化生成模型</p><p>用函数动态生成外观(三维纹理)</p></li></ul><h2 id="lecture-19-cameras-lenses">Lecture 19 Cameras Lenses</h2><p>在此之前图像都是通过计算机合成的, 实际上,我们还可以通过相机直接合成图像</p><p>相机成像模式: 小孔成像相机(Pinhole)与镜头传感器成像(Lenses Form Imageon Sensor)</p><p><strong>小孔成像相机</strong></p><p>应用小孔成像原理, 没有像素大小与焦距限制,每个点都是清晰的没有深度可言</p><p><strong>镜头-传感器相机</strong></p><p>相机的感光元件是传感器(Sensor Accumulates Irradiance DuringExposure), 其记录的是Irradiance(各种方向的光)</p><p>为什么相机需要镜头呢? 因为传感器接受的是各种方向的Irradiance,而不能接收特定方向的光, 我们需要一个透镜将不同来向的光汇聚在不同地方</p><p><img src="./img/19-1.png" /></p><p>摄像机镜头并非是一个薄透镜, 而是一个薄透镜组,相机可以通过调整透镜组之间距离实现整体变焦.通过变换焦距可以调整相机的视场. 镜头传感器相机的评价指标有: 视场(Fieldof View/FOV), 传感器尺寸(Sensor Size), 曝光(Exposure), 光圈(Aperture),快门速度(Shutter), 感光度(Gain/ISO),</p><p><strong>视场(Field of View/FOV)</strong></p><p>表示可以看到多远的范围(与透视投影那块差不多) <spanclass="math display">\[FOV = 2\arctan\left(\frac{h}{2f}\right)\]</span> 其中<spanclass="math inline">\(h\)</span>是传感器高度(一般不用宽度表示FOV), <spanclass="math inline">\(f\)</span>是焦距(Focal Length)</p><p><img src="./img/19-2.png" /></p><p>FOV由两个参数决定, 我们规定, 市面上的镜头<spanclass="math inline">\(f\)</span>应该为相机等效35mm胶片的<spanclass="math inline">\(f\)</span></p><p>FOV大成像宽广, FOV小成像窄远</p><p><strong>传感器尺寸(Sensor Size)</strong></p><p>传感器尺寸越大分辨率越大</p><p><strong>曝光度(Exposure)</strong></p><p><span class="math inline">\(H=T\times E\)</span>,即曝光度是Irradiance(E)在Exposure Time(T)上的积分</p><ul><li>Exposure Time由快门速度决定</li><li>Irradiance由进光功率与光圈, ISO决定</li></ul><p><strong>光圈, 快门速度, 感光度</strong></p><ul><li><p>光圈是仿照人体瞳孔设计的, 决定进光量, 用f-stop表示</p></li><li><p>快门可以理解为传感器外面的帘子, 在成像时帘子放下,然后在规定时间后在放下. 快门速度表示传感器感光时间</p><p><img src="./img/19-3.gif" /></p></li><li><p>感光度(ISO)可以认为是对图像的后期处理, 将相机会将接收到的光<spanclass="math inline">\(\times ISO\)</span>倍</p></li></ul><p>不同光圈, 快门速度, 感光度</p><p><img src="./img/19-4.png" /></p><ul><li><p>ISO表示像素增益倍数, <strong>ISO越大, 图像越亮</strong>,ISO在放大图像的过程中也会放大噪声,所以<strong>ISO过大会出现噪点</strong>. ISO是线性的,也就是说ISO400一定比ISO200亮一倍</p></li><li><p>快门速度用秒表示, <strong>快门时间长会造成运动模糊</strong>.机械式快门是一个帘子, 其遮挡传感器需要时间,所以各个传感器开始感光的时刻不同, 这会造成如下图螺旋桨的果冻效应(RollingShutter)</p><p><img src="./img/19-5.png" /></p></li><li><p>光圈用f-stop表示, <span class="math inline">\(f-stop =f/d\)</span>(即焦距/光圈直径), <strong>数字越小, 光圈越大, 透光量越大,景深越浅, 远处成像越模糊</strong></p></li></ul><p><strong>薄透镜近似假设</strong></p><ul><li>进入透镜的所有平行光线都通过其焦点</li><li>通过一个焦点的所有光线在通过透镜后将是平行的</li><li>焦距可以任意改变(通过透镜组)</li><li>对于焦距<span class="math inline">\(f\)</span>, 物距<spanclass="math inline">\(z_0\)</span>, 像距<spanclass="math inline">\(z_i\)</span>有<spanclass="math inline">\(\frac{1}{f}=\frac{1}{z_i}+\frac{1}{z_0}\)</span></li></ul><p><strong>失焦模糊(Deforce Blur)</strong></p><p>当一系列三维物体在感光器件Sensor Plane上成像时,我们可以利用光路可逆性推出在感光器件上完美成像的物距.该物距对应的平面为Focal Plane.不在该平面上成像的物体则会在感光元件上投射出模糊的像</p><p><img src="./img/19-6.png" /></p><p>如图, 蓝色感光平面距离透镜<span class="math inline">\(z_s\)</span>,完美成像平面距离透镜<span class="math inline">\(z_s&#39;\)</span>,然而小圆点距离透镜<span class="math inline">\(z_0\)</span>,导致光线在<span class="math inline">\(z_i\)</span>处聚焦后再次投射,最后在感光平面上投出一个直径为<spanclass="math inline">\(C\)</span>的圆, 我们称这个圆为弥散圆(Circle ofConfusion/CoC). 利用相似三角形可以得到弥散圆直径<spanclass="math inline">\(C=\frac{d&#39;}{z_i}A =\frac{\|z_s-z_i\|}{z_i}A=\frac{\|z_s-z_i\|}{z_i}\frac{f}{N}\)</span></p><p>可以看到, 弥散圆的直径与<span class="math inline">\(z_i, z_s, f,N\)</span>有关, <span class="math inline">\(z_i\)</span>与<spanclass="math inline">\(z_0, f\)</span>有关, 而<spanclass="math inline">\(f, z_s\)</span>是定值, 所以<spanclass="math inline">\(C\)</span>只与物距<spanclass="math inline">\(z_0\)</span>, 光圈直径<spanclass="math inline">\(N\)</span>有关, 当光圈f-stop变小, 光圈直径<spanclass="math inline">\(N\)</span>变大, 非FocalPlane上的物体成像就越模糊</p><p><strong>计算机模拟镜头-传感器相机拍照</strong></p><p>计算机也可以模拟出失焦模糊的效果</p><p><img src="./img/19-7.png" /></p><p>将成像面作为感光平面, 在成像平面选择一个点将该点与透镜中心连线,计算得到对应Focal Plane上的点</p><p><strong>景深(Depth of Field)</strong></p><p>我们认为当CoC足够小时(例如小于一个像素尺寸)成像就是清晰的,对于一次成像, 将CoC足够小时对应的物距范围长度称为景深</p><p><img src="./img/19-8.png" /></p><h2 id="lecture-20-light-fields-color-and-perception">Lecture 20 LightFields, Color and Perception</h2><p><strong>光场Light Fields/Lumigraph</strong></p><p>我们希望构造一个函数表示从固定点在不同角度能看到的东西</p><ul><li><p>Grayscale snapshot定义了人在球坐标系中心想不同方向看的光强度<spanclass="math inline">\(P(\theta, \Phi)\)</span>, 只有光照强度,我们看到的是灰度图</p><p><img src="./img/20-1.png" /></p></li><li><p>Colorsnapshot定义了人在球坐标系中心想不同方向看的不同波长光强度<spanclass="math inline">\(P(\theta, \Phi,\lambda)\)</span>,不同波长的光对应了不同的颜色, 我们看到的是彩色图</p><p><img src="./img/20-2.png" /></p></li><li><p>还可以为Color snapshot加上时间维度<spanclass="math inline">\(P(\theta, \Phi,\lambda, t)\)</span></p></li><li><p>全光函数定义了场景中每个点从不同时间角度看到的颜色强度<spanclass="math inline">\(P(\theta, \Phi,\lambda, t, V_X, V_Y,V_Z)\)</span></p><p><img src="./img/20-3.png" /></p></li></ul><p>有了全光函数, 我们就知道摄影机在任何时间, 任何地点,任何方向看到的颜色了. 换而言之,全光函数是我们在显示器上渲染整个场景需要的唯一信息.但是信息似乎有点多了.</p><p><img src="./img/20-4.png" /></p><p>我们定义一个平面, 记录从这个平面每个点发出的不同方向的光,定义其为光场函数(<spanclass="math inline">\(P(x,y,\theta,\Phi)\)</span>).光场函数记录了平面上每个点在每个方向观测的颜色.如果把这个平面当成显示器, 我们就得到了从不同角度观察显示器上点的结果</p><p>然而, <spanclass="math inline">\(P(x,y,\theta,\Phi)\)</span>的定义并不方便我们使用,每次渲染时我们都要计算用户看到屏幕上点仰角.可以在光场平面后再加入一个辅助平面, 定义一个方向为辅助平面上的点<spanclass="math inline">\((u,v)\)</span>与光场面上的点<spanclass="math inline">\((x,y)\)</span>连线的方向</p><p><img src="./img/20-5.png" /></p><p>将不同维度作为坐标轴,我们可以得到不同的图像(上图中每个小图是从一个固定点看光场平面的成像,下图的小图是一个固定的光场平面上的点被不同是<spanclass="math inline">\((u,v)\)</span>看到的样子)</p><p><img src="./img/20-6.png" /></p><p><strong>光场摄像机</strong></p><p>普通摄像机感光元件上一个基本单位(像素)接收到的是不同方向光的总和.其记录的是摄像机在某个位置, 某个方向的成像.</p><p>光场摄像机模拟了苍蝇的复眼,在感光元件的每个基本单位("像素")前方放了一个透镜,该透镜可以将不同来向的光分散的打在这个感光元件上,感光元件分别记录该像素上不同来向的光强度.我们可以获取同一来向的光在感光元件上的强度,每个方向的成像就相当于是一个普通相机拍的一张照片.这样一次拍摄就记录了一个平面上每个点收到不同方向的光,相当于记录了一个光场函数</p><p><img src="./img/20-7.png" /></p><p>优点:</p><ul><li>记录了同一位置的不同方向光照</li><li>可以随时在拍照结束后随时更换焦距</li></ul><p>缺点:</p><ul><li>分辨率不足, 毕竟一个透镜只对应一个像素,透镜后需要很多感光元件分别记录不同方向来光</li><li>透镜难造</li></ul><p><strong>颜色与感知(Color and Perception)</strong></p><p>不同颜色的光对应不同的波长. 不同的光还可以叠加产生新的光,使用谱功率密度(Spectral Power Distribution,SPD)定义一个光在不同波长上的功率分布(下图是日光与LED光的SPD图)</p><p><img src="./img/20-8.png" /></p><p>SPD支持线性加和, 两个光的叠加就是两个光SPD的叠加(即:光线是加色系统)</p><p><strong>人眼感知光线的方式</strong>: 与相机成像类似,光线通过瞳孔(光圈)射入人眼, 通过晶状体(薄透镜)发生折射,打在视网膜(感光元件)上. 视网膜上分布着感知光线强度的柱状细胞(RodCells)与感知颜色的锥形细胞(Cone Cells). 锥形细胞分为三种细胞: S-Cone,M-Cone, L-Cone. 三种细胞分别对三种不同范围波长的光敏感度不同,</p><p><img src="./img/20-9.png" /></p><p>人类感知颜色的结果就是三种细胞分别计算敏感度对感应强度的积分得到的三元组<spanclass="math inline">\((S,M,L)\)</span>.(p.s.不同人眼中三种细胞数量分布差异很大,所以理论上不同人看到的颜色其实是不同的) 理论上, 对于不同SPD的光,只要细胞计算出<span class="math inline">\((S,M,L)\)</span>一样,人眼感知到的颜色就是一样的.这种现象成为<strong>同色异谱</strong>(下面的光SPD不同,但是三种细胞各自算出的积分是一样的)</p><p><img src="./img/20-10.png" /></p><p>在显示时, 我们很难模拟自然界的任意光线(如上图中左上子图连续的SPD),但是我们可以利用同色异谱现象,仅仅用三个波长的光(如上图中右上子图)模拟出相同的<spanclass="math inline">\((S,M,L)\)</span></p><p><strong>颜色匹配函数</strong></p><p>颜色匹配函数告诉我们描述波长为<spanclass="math inline">\(x\)</span>的光, 需要多少的预定义的特定光组合起来.例如CIE-RGB色彩系统使用三种特定波长的红绿蓝光描述一定波长范围的光.其颜色匹配函数如下</p><p><img src="./img/20-11.png" /></p><p>注意到在一段波长区间, 绿色与红色的需求倍数是小于0的,这表示我们无法用RGB表示这个颜色, 假设一个颜色的RGB表示是<spanclass="math inline">\((-0.1, 0.1, 0.1)\)</span>,其说明我们无法表示这个光, 但是这个光与<spanclass="math inline">\((0.1,0,0)\)</span>光混合后, 我们可以用<spanclass="math inline">\((0,0.1,0.1)\)</span>表示</p><p><strong>颜色空间与色域</strong></p><ul><li><p>CIE-XYZ系统[科研常用]</p><p>CIE-XYZ是一套人造颜色匹配系统. XYZ是三种波长的预定义光.但这三种光并不代表特定颜色. 可以通过XYZ的非负线性组合表述可见光. 同时,Y光一定程度上代表了颜色的亮度.</p><p>我们希望将XYZ可以表示的颜色(即: 色域)可视化展现出来,但是XYZ是三个颜色, 可以先将XYZ归一化, 得到<span class="math inline">\(x= \frac{X}{X+Y+Z}, y = \frac{Y}{X+Y+Z}\)</span>, 这样<spanclass="math inline">\(z = 1-x-y\)</span>就可以不用再在坐标系中表示了,由于Y表示亮度, 我们可以让Y为定值, 仅变换<spanclass="math inline">\(X,Y\)</span>获得<spanclass="math inline">\(x,y\)</span>. 最后为<spanclass="math inline">\((x,y)\)</span>着上其表述的颜色即可</p><p><img src="./img/20-12.png" /></p><p>在色域中间可以看到白色(因为白色是所有颜色的混合),在色域边缘可以看到纯色</p></li><li><p>标准RGB系统(RGB/sRGB)[很常用]</p><p>预定义了特定波长的标准红绿蓝, 其他颜色都用它表示.但是sRGB有一部分颜色是表示不了的(颜色匹配函数中小于0的部分),其只能表述XYZ颜色空间中一个三角形的部分</p><p><img src="./img/20-13.png" /></p></li><li><p>HSV/HSL颜色空间[艺术家常用]</p><p>使用色调(Hue, 颜色在色环上的角度)-饱和度(Saturation,描述颜色更接近混合颜色(白色)还是纯色)-明度(Value/Lightness)定义颜色</p><p><img src="./img/20-14.png" /></p></li><li><p>LAB色彩空间</p><p>定义<span class="math inline">\(L\)</span>轴两端是黑白, <spanclass="math inline">\(a\)</span>轴两端是红绿, <spanclass="math inline">\(b\)</span>轴两段是黄蓝, 其他颜色就是他们的组合.LAB色彩空间认为空间两端的颜色都是互补色(黑-白, 红-绿...)</p><p>如果产生两种颜色的光波相混合，结果出现灰色，则两种颜色互补.人脑认为两个颜色差异过大时就认为他们是互补的(例如很容易想象出黄绿,蓝绿色, 但是很难想象出红绿色)</p><p><img src="./img/20-15.png" /></p><p>还有一些与互补色相关的视觉错觉: 人如果盯一个颜色时间就了,忽然切换到其他颜色, 人脑就会脑补出这个颜色的互补色(<span class="exturl" data-url="aHR0cHM6Ly93d3cudmVyeXdlbGxtaW5kLmNvbS93aGF0LWlzLXRoZS1vcHBvbmVudC1wcm9jZXNzLXRoZW9yeS1vZi1jb2xvci12aXNpb24tMjc5NTgzMA==">拮抗理论<i class="fa fa-external-link-alt"></i></span>)</p></li><li><p>CMYK系统</p><p>前面的颜色系统都是加色系统(颜色混合得到白色),但是现实中印刷等是一个减色系统(颜色混合得到黑色). CMYK是一个减色系统,定义C(青)M(洋红/品红)Y(黄)K(黑)四种墨水的比例定义颜色. 其混合如下图</p><p><img src="./img/20-16.png" /></p><p>注意到: 通过混合CMY就可以得到黑色K, 但是我们还是要定义K,而不是在印刷中直接用CMY混合得到K. 这是因为K墨水最便宜,而CMY墨水造价高...</p></li></ul><h2 id="lecture-21-animation-and-simulation">Lecture 21 Animation andSimulation</h2><p>动画实现方式: 关键帧动画, 物理模拟</p><p><strong>质点弹簧系统(Mass Spring Rope)</strong></p><p>就是一系列相互连接的质点和弹簧.</p><p>弹簧系统中, 端点两边物体的相互作用力与形变长度正比即: <spanclass="math display">\[f_{a\to b} = -f_{b\to a} =  k_s\frac{b-a}{\|b-a\|}(\|b-a\|-l)\]</span> <span class="math inline">\(l\)</span>为自然展开长度, <spanclass="math inline">\(a,b\)</span>为两个质点向量.</p><p>在模拟中, 我们用<span class="math inline">\(\dot{y}\)</span>表示<spanclass="math inline">\(y\)</span>的一阶导数, 用<spanclass="math inline">\(\ddot{y}\)</span>表示<spanclass="math inline">\(y\)</span>的二阶导数...</p><p>将弹簧拉开后, 根据能量守恒, 弹簧会永远运动. 为了让物体停下来,我们要为引入摩擦力<spanclass="math inline">\(f=-k_d\dot{b}\)</span>(<spanclass="math inline">\(b\)</span>为速度, <spanclass="math inline">\(k_d\)</span>为常数).这样引入摩擦力会导致弹簧整体运动时出现额外的摩擦力(弹簧两端相对静止,整体在光滑的水平面上运动, 会发现弹簧会越来越慢). 考虑到这个问题,引入相对速度(用<span class="math inline">\(a\)</span>到<spanclass="math inline">\(b\)</span>连线点乘相对运动运动向量相当于获得了相对运动向量在<spanclass="math inline">\(\vec{ab}\)</span>上的投影, 然后再换成向量) <spanclass="math display">\[f_b = -k_d\frac{b-a}{\|b-a\|}(\dot{b}-\dot{a})\frac{b-a}{\|b-a\|}\]</span> <img src="./img/21-1.gif" /></p><p>弹簧之间还可以组合成不同的形状:</p><p><img src="./img/21-2.png" /></p><p>用这些简单图形无法表示各式各样的材质</p><ul><li><p>让平面结构抗切变</p><p>拉着上图平面结构的左下与右上角, 这个网会更容易被拉歪,即两边的节点向斜对角线汇聚. 我们需要增加弹簧抗拒切变</p><p><img src="./img/21-3.png" /></p><p>此时再拉住左下右上, 蓝色的弹簧会抗拒压缩</p><p>当然, 还应该给另一半对角线加入弹簧防止发生另一个方向的切变</p><p><img src="./img/21-4.png" /></p></li><li><p>让平面抗弯曲</p><p>在抗切边基础上, 平面结构很容易沿着正方形边折叠,可以在相隔顶点之间建立弹簧</p><p><img src="./img/21-5.png" /></p></li></ul><p><strong>粒子系统(Particle Systems)</strong></p><p>定义了一堆微小的粒子, 然后一个一个建模,分析每个粒子受力(粒子间作用与受到的外力)</p><p><strong>运动学</strong></p><p>给定一个模型的每个组件如何运动, 求解每个组件的位置</p><p>定义模型的骨骼系统有三种关节</p><ul><li>Pin: 将一个钉子钉在骨骼之间,这样两个骨骼可以在所成二维平面内旋转</li><li>Ball: 骨骼一段包在骨骼另一端, 这样骨骼就可以已连接端为球心旋转</li><li>Prismatic Joint: 可以认为是两个骨骼之间有一个可以拉伸的物件连接</li></ul><p>例如: 已知两个关节是Pin链接, 给出<spanclass="math inline">\(\theta_1,\theta_2\)</span>变化函数求<spanclass="math inline">\(t\)</span>时刻时<spanclass="math inline">\(P\)</span>点的位置</p><p><img src="./img/21-6.png" /></p><p><strong>逆运动学</strong>是给出组件某个点的位置,求解每个组件是如何变换的(还有多解与无解可能)</p><p>例如: 已知两个关节是Pin链接, 给出<spanclass="math inline">\(t\)</span>时刻时<spanclass="math inline">\(P\)</span>点的位置, 求<spanclass="math inline">\(\theta_1,\theta_2\)</span>变化函数</p><p><img src="./img/21-7.png" /></p><p>一运动学一般用优化方法求解, 而不是用数学方法求解</p><p><strong>Rigging</strong></p><p>通过控制线为骨骼添加动作/做造型(类似于提线木偶)</p><p><strong>动作捕捉</strong></p><p>让角色穿上有控制点的衣服, 相机捕捉到控制点就实现了动作捕捉</p><h2 id="lecture-22-animation-and-simulation">Lecture 22 Animation andSimulation</h2><p><strong>单粒子模拟(Single particle simulation)</strong></p><p>已知一个物体初始时的起点和速度, 很容易得到该物体在下一时刻的位置.我们想要模拟一个粒子在速度场(<spanclass="math inline">\(v(x,t)\)</span>)的运动轨迹</p><p>可以用微分方程计算表述<span class="math inline">\(\dot{x} =v(x,t)\)</span>, 希望得到位置关于时间的函数<spanclass="math inline">\(x(t)\)</span>, 假设初始位置为<spanclass="math inline">\(x_0\)</span></p><ul><li><p>可以采用欧拉方法解微分方程</p><p><span class="math display">\[  x^{t+\Delta t}=x^{t}+\Delta t\dot{x}^{t}\\  \dot{x}^{t+\Delta t}=\dot{x}^{t}+\Delta t\ddot{x}^{t}  \]</span></p><p>但是效果不怎么好(<span class="math inline">\(\Deltat\)</span>不够小), <strong>不稳定</strong>(可能会偏离速度场)</p><p><img src="./img/22-1.png" /></p></li><li><p>可以采用中点法改进欧拉方法</p><p>如图, 从<span class="math inline">\(o\)</span>点出发, 先走<spanclass="math inline">\(\Delta t\)</span>步, 到达<spanclass="math inline">\(a\)</span>点, 取<spanclass="math inline">\(oa\)</span>中点<spanclass="math inline">\(b\)</span>, 获取<spanclass="math inline">\(b\)</span>点速度, 重新从原点走<spanclass="math inline">\(\Delta t\)</span>步, 速度取<spanclass="math inline">\(b\)</span>点速度</p><p><img src="./img/22-2.png" /></p><p>B点: $x_b = x(t)+t v(x(t),t)/2 $</p><p>C点: $x_c = x(t)+t v(x_B,t) $</p><p>联立方程 <span class="math display">\[  x^{t+\Delta t} = x^t+\Delta t \dot{x}^t+\frac{(\Deltat)^2}{2}\ddot{x}^t  \]</span></p></li><li><p>可以采用自适应改变步长法改进欧拉方法</p><p>如图, 从<span class="math inline">\(o\)</span>点出发, 先走<spanclass="math inline">\(\Delta T\)</span>步, 到达<spanclass="math inline">\(x_T\)</span>点, 再从<spanclass="math inline">\(o\)</span>点出发, 走两次<spanclass="math inline">\(\Delta T/2\)</span>步, 到达<spanclass="math inline">\(x_{T/2}\)</span>. 计算<spanclass="math inline">\(\|x_t-x_{T/2}\|\)</span>, 如果误差过大, 就将<spanclass="math inline">\(\Delta T\)</span>减半, 继续迭代.这样在不同位置我们可以选用不同的<span class="math inline">\(\DeltaT\)</span>计算</p><p><img src="./img/22-3.png" /></p></li><li><p>可以采用隐式欧拉方法(后向的方法)</p><p>之前欧拉方法估算<span class="math inline">\(t+\Deltat\)</span>时刻位置时使用的是<spanclass="math inline">\(t\)</span>时刻的速度,隐式欧拉方法使用下一时刻的速度估算 <span class="math display">\[  x^{t+\Delta t}=x^{t}+\Delta t\dot{x}^{t +\Delta t}\\  \dot{x}^{t+\Delta t}=\dot{x}^{t}+\Delta t\ddot{x}^{t+\Delta t}  \]</span> 方程不好解(需要使用优化方法估算下一个点的速度&amp;加速度),但是好用又稳定:)</p><p>隐式欧拉误差是一阶的(局部误差<spanclass="math inline">\(O(h^2)\)</span>, 全局误差<spanclass="math inline">\(O(h)\)</span>, <spanclass="math inline">\(h\)</span>为步长(如本例中<spanclass="math inline">\(\Delta t\)</span>))</p></li><li><p>可以采用Runge-Kutta方法改进欧拉方法</p><p>一类方法, 特别擅长解非线性常微分方程. 其中RK4方法是一个4阶方法,对于如下方程 <span class="math display">\[  \frac{dy}{dx}=f(t,y)\\  y(t_0)=y_0  \]</span> RK4先定义 <span class="math display">\[  t_{n+1}=t_n+h\\  y_{n+1}= y_n+\frac{1}{6}h(K_1+2K_2+2K_3+K_4)  \]</span>即下一次位置是上一次加上步长加上一个奇怪的值(相当于坐了一个双向的均值)<span class="math display">\[  k_1=f(t_n,y_n)\\  k_2=f(t_n+h/2,y_n+hk_1/2)\\  k_3=f(t_n+h/2,y_n+hk_2/2)\\  k_4=f(t_n+h,y_n+hk_3)\\  \]</span></p></li><li><p>采用非物理方法</p><p>通过设置一系列限制不断要求修正位置,唯一缺点就是不符合物理规律(见流体模拟)</p></li></ul><p>p.s. 如何定义数值方法稳定性</p><ul><li>稳定性: 度量每一步的误差(截断误差),整体误差与阶(<spanclass="math inline">\(\Delta t\)</span>)的关系.</li><li>误差为<span class="math inline">\(O(h^n)\)</span>说明<spanclass="math inline">\(h\)</span>每减小一半, 局部误差减少到<spanclass="math inline">\(1/{2^n}\)</span></li></ul><p><strong>刚体模拟(Rigid Body Simulation)</strong></p><p>刚体不会发生形变, 刚体运动会要求内部的点以同样的方式运动.可以把刚体想象成一个大粒子, 只不过在求刚体运动时候会给出更多限制 <spanclass="math display">\[\frac{d}{dt}\left(\begin{matrix}X\\ \theta\\\dot{X}\\\omega\end{matrix}\right)=\left(\begin{matrix}\dot{X}\\ \omega\\a\\\alpha\end{matrix}\right)\]</span> <span class="math inline">\(\alpha\)</span>为角加速度, <spanclass="math inline">\(a\)</span>为加速度</p><p><strong>流体模拟(Fluid Simulation)</strong></p><p>把流体当成很小的不可压缩的小刚体粒子组合.流体在任何位置小刚体的密度一样(据此,我们可以不断修正模拟的刚体位置保证流体密度处处相等). 为了模拟密度相同,我们需要知道密度对各个小球的梯度(导数),需要知道移动每个小球对于周围流体密度的改变</p><p>流体模拟的方法</p><ul><li>质点法(拉格朗日方法): 为每个刚体单独模拟</li><li>网格法(欧拉方法): 将模拟的流体划分为网格. 考虑网格随着时间变化</li><li>混合法: 认为不同的粒子具有材质属性(密度, 质量, 粘性),以格子为单位模拟流体的变化, 将模拟结果写回粒子</li></ul><hr /><h2 id="assignment-0">Assignment 0</h2><p><strong>环境配置(Arch Linux)</strong></p><p>依赖库安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yay -S eigen opencv2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>作业</strong></p><ul><li>实现旋转并位移 <span class="math display">\[\left[\begin{matrix}\cos\theta &amp; -\sin\theta &amp; t_x \\\sin\theta &amp; \cos\theta &amp; t_y \\0 &amp; 0 &amp; 1 \\\end{matrix}\right] \times P\]</span></li></ul><p><strong>其他</strong></p><p><code>eigen</code>的向量乘法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Vector3d v(1,2,3);Vector3d w(0,1,2);cout &lt;&lt; &quot;Dot product: &quot; &lt;&lt; v.dot(w) &lt;&lt; endl;&#x2F;&#x2F;点乘cout &lt;&lt; &quot;Dot product via a matrix product: &quot; &lt;&lt; v.adjoint()*w &lt;&lt; endl;&#x2F;&#x2F;点乘cout &lt;&lt; &quot;Cross product:\n&quot; &lt;&lt; v.cross(w) &lt;&lt; endl;&#x2F;&#x2F;叉乘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: 叉乘只能用于维数为3的向量, 点乘使用于任何维数的向量</p><h2 id="assignment-1">Assignment 1</h2><p>作业需要使用CPU模拟光栅渲染器,我们需要完成一个模型变换矩阵与投影矩阵</p><ul><li><p>创建一个绕<span class="math inline">\(oz\)</span>旋转矩阵 <spanclass="math display">\[\left[\begin{matrix}\cos x &amp; -\sin x &amp; 0 &amp; 0\\ \sin x &amp; \cos x &amp; 0&amp;0\\0 &amp; 0 &amp; 1 &amp; 0\\0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right]\]</span></p></li><li><p>创建一个投影矩阵 <span class="math display">\[\left[\begin{matrix}n &amp; 0 &amp; 0 &amp; 0\\0 &amp; n &amp; 0 &amp;0\\0 &amp; 0 &amp; n+f &amp; -nf\\0 &amp; 0 &amp; 0 &amp; 1\end{matrix}\right]\]</span></p></li><li><p>使用罗德格旋转公式完成附加题 <span class="math display">\[R(\vec{n},\alpha) = \cos(\alpha)\vec{I} +(1-\cos(\alpha))\vec{n}\vec{n}^T+\sin(\alpha)\left(\begin{matrix}0&amp;-n_z&amp;n_y\\n_z&amp;0&amp;-n_x\\-n_y&amp;n_x&amp;0\end{matrix}\right)\]</span></p></li></ul><p>结果</p><ul><li><p>绕<span class="math inline">\(oz\)</span>旋转</p><figure><img src="./img/rotate@(0,0,1).gif" alt="绕oz旋转" /><figcaption aria-hidden="true">绕oz旋转</figcaption></figure></li><li><p>绕<span class="math inline">\((1,1,1)/\sqrt{3}\)</span>旋转</p><figure><img src="./img/rotate@(1,1,1).gif" alt="绕(1,1,1)旋转" /><figcaption aria-hidden="true">绕(1,1,1)旋转</figcaption></figure></li></ul><h2 id="assignment-2">Assignment 2</h2><p>在作业一的基础上完成:</p><p><strong>基础部分</strong></p><ul><li><p>创建bounding box</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">const float INF &#x3D; 1.0 * 0x3f3f3f3f;float lf &#x3D; INF, rt &#x3D; -INF, bt &#x3D; INF, tp &#x3D; -INF;for(int i&#x3D;0;i&lt;3;i++)&#123;    lf &#x3D; std::min(lf, v[i].x());    rt &#x3D; std::max(rt, v[i].x());    bt &#x3D; std::min(bt, v[i].y());    tp &#x3D; std::max(tp, v[i].y());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>判断点三角形内</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">static bool insideTriangle(float x, float y, const Vector3f* _v)&#123;    float cnt &#x3D; 0;    for(int i&#x3D;0;i&lt;3;i++)&#123;        const float x1 &#x3D; x - _v[i].x();        const float x2 &#x3D; x - _v[(i+1)%3].x();        const float y1 &#x3D; y - _v[i].y();        const float y2 &#x3D; y - _v[(i+1)%3].y();        const float v &#x3D; x1 * y2 - x2 * y1;        if(v !&#x3D; 0 &amp;&amp; v * cnt &gt;&#x3D; 0) cnt +&#x3D; v;        else if(v !&#x3D; 0)return false;    &#125;    return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>维护depth buffer</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">for(float x &#x3D; std::floor(lf); x&lt; std::ceil(rt);x+&#x3D;1.0)&#123;    for(float y &#x3D; std::floor(bt); y&lt; std::ceil(tp);y+&#x3D;1.0)&#123;        if(insideTriangle(x,y, t.v))&#123;            const float deep &#x3D; depth_buf[get_index(x,y)];            auto[alpha, beta, gamma] &#x3D; computeBarycentric2D(x, y, t.v);            float w_reciprocal &#x3D; 1.0&#x2F;(alpha &#x2F; v[0].w() + beta &#x2F; v[1].w() + gamma &#x2F; v[2].w());            float z_interpolated &#x3D; alpha * v[0].z() &#x2F; v[0].w() + beta * v[1].z() &#x2F; v[1].w() + gamma * v[2].z() &#x2F; v[2].w();            z_interpolated *&#x3D; w_reciprocal;            if(z_interpolated &lt; deep) &#123;                depth_buf[get_index(x,y)] &#x3D; z_interpolated;                set_pixel(Eigen::Vector3f(x,y,1), t.getColor());            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>提高部分</strong></p><ul><li><p>改为超采样</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">for(float x &#x3D; std::floor(lf); x&lt; std::ceil(rt);x+&#x3D;1.0)&#123;    for(float y &#x3D; std::floor(bt); y&lt; std::ceil(tp);y+&#x3D;1.0)&#123;        int idx &#x3D; 0;        for(float delx &#x3D; 0.25; delx&lt;&#x3D;1.0; delx+&#x3D;0.5)&#123;            for(float dely &#x3D; 0.25; dely&lt;&#x3D;1.0; dely+&#x3D;0.5)&#123;                const float deep &#x3D; depth_buf2[4 * get_index(x,y) + idx];                auto[alpha, beta, gamma] &#x3D; computeBarycentric2D(x+delx, y+dely, t.v);                float w_reciprocal &#x3D; 1.0&#x2F;(alpha &#x2F; v[0].w() + beta &#x2F; v[1].w() + gamma &#x2F; v[2].w());                float z_interpolated &#x3D; alpha * v[0].z() &#x2F; v[0].w() + beta * v[1].z() &#x2F; v[1].w() + gamma * v[2].z() &#x2F; v[2].w();                z_interpolated *&#x3D; w_reciprocal;                if(z_interpolated &lt; deep &amp;&amp; insideTriangle(x+delx,y+dely, t.v)) &#123;                    depth_buf2[4 * get_index(x,y) + idx] &#x3D; z_interpolated;                    col_buf2[4 * get_index(x,y) + idx] &#x3D; t.getColor();                &#125;                ++idx;            &#125;        &#125;        Eigen::Vector3f color &#x3D; Eigen::Vector3f&#123;0, 0, 0&#125;;        for(int i&#x3D;0;i&lt;4;i++)color &#x3D; color + col_buf2[4 * get_index(x,y) + i];        set_pixel(Eigen::Vector3f(x,y,1), color&#x2F;4);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>结果</strong></p><ul><li><p>无超采样</p><figure><img src="./img/origin.png" alt="无超采样" /><figcaption aria-hidden="true">无超采样</figcaption></figure></li><li><p>无超采样(放大<span class="math inline">\(256\%\)</span>)</p><figure><img src="./img/origin@256.png" alt="无超采样放大256%" /><figcaption aria-hidden="true">无超采样放大256%</figcaption></figure></li><li><p><span class="math inline">\(2\times 2\)</span>超采样</p><figure><img src="./img/SSAA2x2.png" alt="2x2超采样" /><figcaption aria-hidden="true">2x2超采样</figcaption></figure></li><li><p><span class="math inline">\(2\times 2\)</span>超采样(放大<spanclass="math inline">\(256\%\)</span>)</p><figure><img src="./img/SSAA2x2@256.png" alt="2x2超采样放大256%" /><figcaption aria-hidden="true">2x2超采样放大256%</figcaption></figure></li></ul><h2 id="assignment-3">Assignment 3</h2><p><strong>基础部分</strong></p><ul><li><p>创建bounding box, 维护深度缓存, 使用重心坐标+插值计算颜色,法向量, 深度, 纹理坐标</p></li><li><p>复用之前的投影函数</p></li><li><p>补全布林冯模型</p></li><li><p>获取纹理贴图上的颜色, 并使用布林冯模型着色</p></li><li><p>计算凹凸贴图法向量并着色</p></li><li><p>计算位移贴图法向量并着色</p></li></ul><p><strong>提高部分</strong></p><ul><li>找其他模型渲染(使用的是<code>/models/Crate</code>)</li><li>将贴图尺寸从<span class="math inline">\(1024\times1024\)</span>缩小到<span class="math inline">\(512\times512\)</span></li><li>实现双线性插值</li><li>使用双线性插值获取贴图颜色</li><li>对比两者区别: 在眼窝, 蹄子处过渡更加顺滑, 斑点被放大</li></ul><p><strong>结果</strong></p><ul><li><p>直接渲染</p><figure><img src="./img/normal.png" alt="直接渲染" /><figcaption aria-hidden="true">直接渲染</figcaption></figure></li><li><p>使用Blinn-Phong模型渲染</p><figure><img src="./img/phong.png" alt="Blinn-Phong" /><figcaption aria-hidden="true">Blinn-Phong</figcaption></figure></li><li><p>纹理贴图</p><figure><img src="./img/texture.png" alt="凹凸贴图纹理贴图" /><figcaption aria-hidden="true">凹凸贴图纹理贴图</figcaption></figure></li><li><p>凹凸贴图</p><figure><img src="./img/bump.png" alt="凹凸贴图" /><figcaption aria-hidden="true">凹凸贴图</figcaption></figure></li><li><p>位移贴图</p><figure><img src="./img/displacement.png" alt="位移贴图" /><figcaption aria-hidden="true">位移贴图</figcaption></figure></li><li><p>渲染一个立方体-Blinn-Phong模型</p><figure><img src="./img/Crate-Phong.png" alt="立方体-Blinn-Phong" /><figcaption aria-hidden="true">立方体-Blinn-Phong</figcaption></figure></li><li><p>渲染一个立方体-纹理贴图</p><figure><img src="./img/Crate-texture.png" alt="立方体-纹理贴图" /><figcaption aria-hidden="true">立方体-纹理贴图</figcaption></figure></li><li><p>不使用双线性插值渲染牛(使用<span class="math inline">\(521\times521\)</span>纹理)</p><figure><img src="./img/no-Bilinear.png" alt="不使用双线性插值" /><figcaption aria-hidden="true">不使用双线性插值</figcaption></figure></li><li><p>使用双线性插值渲染牛(使用<span class="math inline">\(521\times521\)</span>纹理)</p><figure><img src="./img/Bilinear.png" alt="使用双线性插值" /><figcaption aria-hidden="true">使用双线性插值</figcaption></figure></li><li><p>两者差别</p><figure><img src="./img/diff-Bilinear.png" alt="两者差别" /><figcaption aria-hidden="true">两者差别</figcaption></figure></li></ul><h2 id="assignment-4">Assignment 4</h2><p>完成贝塞尔曲线与反走样:</p><p><strong>结果</strong></p><ul><li><p>贝塞尔曲线多项式计算与模拟结果对比</p><figure><img src="./img/diff-naive-decast.png" alt="结果对比" /><figcaption aria-hidden="true">结果对比</figcaption></figure></li><li><p>加入反走样后效果(上到下: 反走样-模拟实现-函数实现)</p><figure><img src="./img/anti-decast-naive.png" alt="加入反走样" /><figcaption aria-hidden="true">加入反走样</figcaption></figure></li></ul><h2 id="assignment-5">Assignment 5</h2><p>完成Prime Ray生成, Prime Ray与三角形相交检测:</p><p><strong>结果</strong></p><ul><li><img src="./img/binary.png" /></li></ul><h2 id="assignment-6">Assignment 6</h2><ul><li><p>实现光线生成与光线映射</p></li><li><p>实现光线与三角形相交判断</p></li><li><p>判断点与Bounding Box相交</p></li><li><p>计算光线与曲面距离</p></li><li><p>实现SAH加速</p><p>SAH认为光线穿透一个节点的概率与其表面积成比例.将子BoundingBox作为一个整体,程序总性能消耗期望应该是每个子节点消耗加权被选中的概率均值<spanclass="math inline">\(C=C_{traw}+p_xC_{x}+p_yC_{y}\)</span>(认为<spanclass="math inline">\(C_{traw}\)</span>是常数). 总期望消耗中,子区域消耗可以表示为元素数量*元素表面积. <span class="math display">\[C=C_{traw}+\|A\|\frac{S_A}{S}C_{isect}+\|B\|\frac{S_B}{S}p_yC_{isect}\]</span> ($ C_{isect}$是判断射线与物体是否相交的花费)</p><p>我们的目标就是最小化<span class="math inline">\(C\)</span>.可以每个几个点采样, 取消耗最小的<spanclass="math inline">\(C\)</span>作为子区域分割点. 由于<spanclass="math inline">\(C\)</span>是<spanclass="math inline">\(U\)</span>形函数, 也可以三分实现.</p><p>但是在本例子中SAH加速效果并不明显(加速<spanclass="math inline">\(5.52\%\)</span>), 这可能是因为物体分布过于均衡,导致的分割点与BVH选取的重心中点相近. 如果渲染的是一个空旷场地,效果可能会好一些</p></li></ul><p><strong>结果</strong></p><ul><li><p>BVH加速结构(1467s)</p><p><img src="./img/BVH.png" /></p></li><li><p>SAH加速结构(1386s)</p><p><img src="./img/SAH.png" /></p></li></ul><h2 id="assignment-7">Assignment 7</h2><p>实现路径追踪与微表面</p><p>代码中Scene分类与参数解释</p><p><img src="./img/Scene.png" /></p><p><strong>结果</strong></p><ul><li><p>cornellbox光线追踪(SPP = 256, cost = 93min)</p><p><img src="./img/cornellbox-SPP-256.png" /></p></li><li><p>cornellbox光线追踪(SPP = 1024, cost = 11h)</p><p><img src="./img/cornellbox-SPP-1024.png" /></p></li><li><p>cornellbox光线追踪(SPP = 16384, cost = 177h)</p><p><img src="./img/cornellbox-SPP-16384.png" /></p></li></ul><h2 id="assignment-8">Assignment 8</h2><p>使用显/隐模式欧拉与显式Verlet方法实现质点弹簧系统</p><p><strong>结果</strong></p><ul><li><p>显式欧拉方法, 不添加阻尼<del>(闪电五连鞭)</del></p><figure><img src="./img/Euler-without-dapming.gif"alt="Euler-without-dapming" /><figcaption aria-hidden="true">Euler-without-dapming</figcaption></figure></li><li><p>显式欧拉方法, 添加阻尼</p><figure><img src="./img/Euler-with-dapming.gif" alt="Euler-with-dapming" /><figcaption aria-hidden="true">Euler-with-dapming</figcaption></figure></li><li><p>隐式欧拉方法与Verlet方法</p><figure><img src="./img/Implicii-Euler-with-dapming-verlet.gif"alt="Euler-without-dapming" /><figcaption aria-hidden="true">Euler-without-dapming</figcaption></figure></li></ul>]]></content>
    
    
    <summary type="html">学WebGL之前先来补习了一下图形学基础知识,主讲:闫令琪,视频来自B站:BV1X7411F744</summary>
    
    
    
    <category term="计算机理论" scheme="https://blog.liukairui.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/"/>
    
    <category term="计算机图形学" scheme="https://blog.liukairui.me/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="笔记" scheme="https://blog.liukairui.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="计算机理论" scheme="https://blog.liukairui.me/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/"/>
    
    <category term="计算机图形学" scheme="https://blog.liukairui.me/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>数瑞Cookie混淆是如何工作的</title>
    <link href="https://blog.liukairui.me/article/%E6%95%B0%E7%91%9ECookie%E6%B7%B7%E6%B7%86%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/"/>
    <id>https://blog.liukairui.me/article/%E6%95%B0%E7%91%9ECookie%E6%B7%B7%E6%B7%86%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/</id>
    <published>2022-04-01T12:01:50.000Z</published>
    <updated>2022-04-01T12:01:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>我的样本文件<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0thaXJ1aUxpdS9hdXRvLWNsb2NrLWluLXN6eGQvdHJlZS9tYXN0ZXIvaG93LWl0LXdvcmsvcnVpc2h1">在此<i class="fa fa-external-link-alt"></i></span></strong></p><p>本次分析文件特征</p><ul><li><p>请求HTML文件包含:<code>set-cookie: 36501JSESSIONID</code>与<code>set-cookie: lD01YhBPHVTHO</code>,在dev-tools的应用面板中查到<code>cookie: lD01YhBPHVTHP</code></p></li><li><p>HTML引入JS文件<code>cIZgBeQvEQK9/AiHJXIs5GyJH.dee59c7.js</code></p></li><li><p>JS文件开头为<code>$_ts...$_ts['dee59c7']</code>,其中<code>dee59c7</code>为版本</p></li><li><p>HTML中JS多为如下形式</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">_$lt</span><span class="token punctuation">(</span><span class="token parameter">_$<span class="token constant">EZ</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> _$aS <span class="token operator">=</span> _$<span class="token constant">EZ</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">var</span> _$$<span class="token constant">N</span><span class="token punctuation">,</span>    _$<span class="token constant">VC</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">_</span>$<span class="token constant">XD</span><span class="token punctuation">(</span>_$aS <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    _$vC <span class="token operator">=</span> _$<span class="token constant">EZ</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> _$Vw <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> _$<span class="token constant">JP</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> _$<span class="token constant">JP</span> <span class="token operator">&lt;</span> _$aS<span class="token punctuation">;</span> <span class="token operator">++</span>_$<span class="token constant">JP</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    _$$<span class="token constant">N</span> <span class="token operator">=</span> _$<span class="token constant">EZ</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>_$<span class="token constant">JP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_$$<span class="token constant">N</span> <span class="token operator">>=</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> _$$<span class="token constant">N</span> <span class="token operator">&lt;</span> <span class="token number">92</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      _$$<span class="token constant">N</span> <span class="token operator">+=</span> _$vC<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>_$$<span class="token constant">N</span> <span class="token operator">>=</span> <span class="token number">92</span><span class="token punctuation">)</span> _$$<span class="token constant">N</span> <span class="token operator">=</span> _$$<span class="token constant">N</span> <span class="token operator">-</span> <span class="token number">52</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_$$<span class="token constant">N</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> _$$<span class="token constant">N</span> <span class="token operator">&lt;</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      _$$<span class="token constant">N</span> <span class="token operator">+=</span> _$vC<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>_$$<span class="token constant">N</span> <span class="token operator">>=</span> <span class="token number">127</span><span class="token punctuation">)</span> _$$<span class="token constant">N</span> <span class="token operator">=</span> _$$<span class="token constant">N</span> <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    _$<span class="token constant">VC</span><span class="token punctuation">[</span>_$Vw<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> _$$<span class="token constant">N</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">_$yn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> _$<span class="token constant">VC</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="大致工作原理">大致工作原理</h4><ul><li>获取HTML文件, HTML文件携带两个Cookie</li><li>HTML请求JS文件(JS文件为乱码)</li><li>HTML中JS解密JS文件, 得到JS字符串</li><li>使用<code>eval</code>执行JS字符串,JS字符串计算并设置加密<code>Cookie</code>(<code>lD01YhBPHVTHP</code>)</li><li>离谱的是<code>RUISHUTESTFUNCTIONENTRY</code>每次请求获取值不同(其中除了<code>$_ts</code>之外变量名都是变化的,但是保证每次计算结果相同)</li></ul><h4 id="解决思路">解决思路</h4><p>将代码从压缩(单行)形式转为格式化后的多行模式, 方便debug</p><h4 id="准备工作解决动态js">准备工作(解决动态JS)</h4><p>由于JS与HTML中变量都是动态的,打开网站后<code>Ctrl+S</code>保存全部文件. 在VSCode中打开HTML文件,使用格式化工具格式化, 得到如下形式HTML</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- ... --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;qXVS74Mnw/*...*/03336qqqqqqqq<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../cIZgBeQvEQK9/AiHJXIs5GyJH.dee59c7.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> _$<span class="token constant">XI</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">,</span>    <span class="token comment">// _$_0 = [</span>      <span class="token comment">// [14, 10, 13, 15, 12, 1, 0, 8, 5, 12, 7, 3, 2, 9, 12, 11, 5],</span>      <span class="token comment">// [</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- ... --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中</p><ul><li><code>&lt;meta&gt;</code>中字符串参与加密</li><li>第一个<code>&lt;script&gt;</code>请求乱码JS</li><li>第二个<code>&lt;script&gt;</code>中的立即执行函数是"解码器"</li></ul><p>为了方便分析, 我们将立即执行函数分离到<code>outer.js</code>并引入</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;qXVS7/*...*/3703336qqqqqqqq<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../cIZgBeQvEQK9/AiHJXIs5GyJH.dee59c7.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/outer.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<code>outer.js</code>立即执行函数前加入<code>debugger</code>这样我们可以在解密前暂停</p><p>我们使用本地JS文件进行分析, 房子变量换来换去</p><p>在保存文件夹下执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m http.server 8081<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样在<code>0.0.0.0:8081</code>开启了一个web server</p><h4id="清空自带debugger解决前端反调试">清空自带debugger(解决前端反调试)</h4><p>瑞数的前端反调试就是注册了几个定时器,每500ms去<code>eval(function)</code>,这个function获取一个时间戳并debugger. 两个解决方法</p><ul><li><p>在debugger的行号处右键, 选择一律不再此处暂停,看到出现一个黄色问号表示忽略了这个debugger</p></li><li><p>借助JS是单线程的, 在debugger时候执行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">999999</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token function">clearInterval</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4id="劫持cookie与eval">劫持<code>cookie</code>与<code>eval</code></h4><p>在前面介绍中, 我们知道, 这段JS的作用就是定时<code>set-cookie</code>.所以我们要将<code>cookie</code>的<code>set</code>与<code>get</code>进行重写,方便在读写cookie时暂停, 进行堆栈分析.在<code>outer.js</code>被<code>debugger</code>暂停的时候, 写入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> _cookie <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">__lookupSetter__</span><span class="token punctuation">(</span><span class="token string">'cookie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 移走cookie</span>document<span class="token punctuation">.</span><span class="token function">__defineSetter__</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 重设cookie</span>  <span class="token keyword">debugger</span><span class="token punctuation">;</span>  _cookie<span class="token operator">=</span>c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">__defineGetter__</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">debugger</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> _cookie<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样, 解密函数需要先解密加密串,然后需要使用<code>eval</code>执行解密JS,所以需要劫持<code>eval</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">orig <span class="token operator">=</span> window<span class="token punctuation">.</span>eval<span class="token punctuation">;</span>window<span class="token punctuation">.</span><span class="token function-variable function">eval</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">debugger</span><span class="token punctuation">;</span><span class="token function">orig</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>window<span class="token punctuation">.</span>eval<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> orig<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="分析eval入口">分析<code>eval</code>入口</h4><p>在dev-tools中执行代码, 代码从<code>outer.js</code>的首行开始执行,暂停在了<code>eval</code>, 在调用堆栈中选到上一级<code>_$XC</code>,看到正在执行的代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">_$aS <span class="token operator">=</span> _$$<span class="token constant">N</span><span class="token punctuation">[</span>_$6p<span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_$qP<span class="token punctuation">,</span> _$<span class="token constant">EZ</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><code>_$$N</code>: 未知函数</p></li><li><p><code>_$6p</code>: 可以看到是一个变量替换表</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">:</span> <span class="token string">"&#125;"</span><span class="token number">1</span><span class="token operator">:</span> <span class="token string">"$_ts"</span><span class="token number">2</span><span class="token operator">:</span> <span class="token string">","</span><span class="token number">3</span><span class="token operator">:</span> <span class="token string">"random"</span><span class="token number">4</span><span class="token operator">:</span> <span class="token string">"substr"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>_$6p[47]</code>: <code>call</code></p></li><li><p><code>_$qP</code>: <code>window</code></p></li><li><p><code>_$EZ</code> : 一个172K的代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> _$1U<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>_$f8<span class="token operator">=</span>$_ts<span class="token punctuation">.</span>scj<span class="token punctuation">,</span>_$v4<span class="token operator">=</span>$_ts<span class="token punctuation">.</span>aebi<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">_$yB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> _$vI<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">730</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_$vI<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">_$iv</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>_$vI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">_$9j</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> _$vI<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">709</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_$vI<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">_$iv</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>_$vI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">_$b_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> _$vI<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">614</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_$vI<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">_$iv</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>_$vI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">_$Th</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> _$vI<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">185</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_$vI<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">_$iv</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>_$vI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> _$<span class="token constant">IT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> _$vI<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">607</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_$vI<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">_$iv</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>_$vI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">_$Hj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> _$vI<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">810</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_$vI<span class="token punctuation">,</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">_$iv</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>_$vI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*...*/</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>是这个表达式调用的<code>evla</code>,所以只能是<code>_$$N</code>是<code>eval</code>,这个表达式大概意思就是</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">_$aS <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">'一个长长的String'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也就是说, 这个String就是待释放的代码.保存String为<code>inner.js</code>, 格式化代码, 并替换导出</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">RUISHUTESTFUNCTIONENTRY</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">  if (60 &#x3D;&#x3D;&#x3D; 20 * _$LZ) &#123;-   _$aS &#x3D; _$$N[_$6p[47]](_$qP, _$EZ);+   RUISHUTESTFUNCTIONENTRY();  &#125; else if (_$LZ * 69 &#x3D;&#x3D;&#x3D; 69) &#123;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>相当于我们手动释放了解密函数, 但是使用我们的方法后, 不会出现如下情形:解密代码释放为单行, 返回堆栈时只能看到一行, 完全无法debug</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">debugger</span><span class="token operator">></span> <span class="token constant">XXX</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意, 这不意味着我们可以直接删除<code>AiHJXIs5GyJH.dee59c7.js</code>,打开就可以看到, 我们解密的字符串开头与其不同</p><ul><li><p>我们解密的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> _$1U <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    _$f8 <span class="token operator">=</span> $_ts<span class="token punctuation">.</span>scj<span class="token punctuation">,</span>    _$v4 <span class="token operator">=</span> $_ts<span class="token punctuation">.</span>aebi<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">_$yB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> _$vI <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">730</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>_$vI<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">_$iv</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> _$vI<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>原文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$_ts<span class="token operator">=</span>window<span class="token punctuation">[</span><span class="token string">'$_ts'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>$_ts<span class="token punctuation">)</span>$_ts<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>$_ts<span class="token punctuation">.</span>scj<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>$_ts<span class="token punctuation">[</span><span class="token string">'dee59c7'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>找点特殊代码比对, 我找了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'=a"S%$Y\'tU9q.C,~NQy-^|6rXh:H?M[&lt;@fK;0W+VI2RiJ(FencmskgL#OBT>\\4Gj`P&amp;1_wD7oZxAb]&#125;updv5Ez) *3&#123;!l8/'</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现在<code>AiHJXIs5GyJH.dee59c7.js</code>也存在</p><p>可以大胆的猜测执行逻辑:</p><ul><li>加载<code>AiHJXIs5GyJH.dee59c7.js</code>,释放变量(虽然变量值可能是乱码)</li><li>加载解密器</li><li>解密器解密<code>AiHJXIs5GyJH.dee59c7.js</code>并获得待释放JS字符查</li><li>释放JS, 执行计算逻辑</li></ul><p>我们做的事情就是劫持eval的内容, 并格式化代码, 手动释放, 方便调试.为此, HTML应变为如下结构</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;qXVS7/*...*/3703336qqqqqqqq<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../cIZgBeQvEQK9/AiHJXIs5GyJH.dee59c7.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/inner.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/outer.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr /><p>重新加载网页, 继续捕获</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> _$<span class="token constant">ET</span> <span class="token operator">=</span> _$<span class="token constant">Z5</span><span class="token punctuation">[</span>_$<span class="token constant">SH</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>_$qP<span class="token punctuation">[</span>_$<span class="token constant">SH</span><span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'; '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查变量</p><ul><li><p><code>_$SH[9]</code>: <code>"call"</code></p></li><li><p><code>_$Z5</code>: <code>split</code></p></li><li><p><code>_$SH</code>: 可以看到是一个变量替换表</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">723</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span> … <span class="token number">99</span><span class="token punctuation">]</span><span class="token number">0</span><span class="token operator">:</span> <span class="token string">"prototype"</span><span class="token number">1</span><span class="token operator">:</span> <span class="token string">"type"</span><span class="token number">2</span><span class="token operator">:</span> <span class="token string">"toString"</span><span class="token number">3</span><span class="token operator">:</span> <span class="token string">"readyState"</span><span class="token number">4</span><span class="token operator">:</span> <span class="token string">"concat"</span><span class="token number">5</span><span class="token operator">:</span> <span class="token string">"indexOf"</span><span class="token number">6</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token number">7</span><span class="token operator">:</span> <span class="token string">"body"</span><span class="token number">8</span><span class="token operator">:</span> <span class="token string">"slice"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>_$qP</code>: <code>document</code></p></li><li><p><code>_$SH[43]</code>: <code>cookie</code></p></li></ul><p>也就是这句指令的意思是</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">_$<span class="token constant">ET</span> <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token string">'call'</span><span class="token punctuation">]</span><span class="token punctuation">(</span>document<span class="token punctuation">[</span><span class="token string">'cookie'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>值得注意到是3806行上面的代码,Chrome给出提示<code>_$CG='lD01YhBPHVTHP='</code>.这就是我们要拼的头啊!</p><p>没什么意思...继续执行</p><hr /><p>暂停到了<code>cookie.setter</code>, 返回上级堆栈<code>_$iv</code>,继续检查</p><ul><li><code>_$qP</code>: <code>document</code></li><li><code>_$SH[43]</code>: <code>cookie</code></li><li><code>_$qS</code>: "enable_lD01YhBPHVTH=true"</li></ul><p>相当于设置了一个cookie, 这个cookie是一个临时的(多刷新几次就发现了),继续执行</p><hr /><p>暂停到了<code>eval</code>, 返回上层堆栈<code>_$iv</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">_$<span class="token constant">ET</span> <span class="token operator">=</span> <span class="token function">_$qt</span><span class="token punctuation">(</span>_$<span class="token constant">SH</span><span class="token punctuation">[</span><span class="token number">615</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>_$SH[615]</code>:<code>"Z8XHJJY.bmF0aXZlRmlVyUHJ()"</code></li><li><code>_$SH</code>是变量替换表</li><li><code>_$qt</code>: <code>ƒ (str)&#123;debugger;orig(str);&#125;</code>这就是我们劫持的<code>eval</code></li></ul><p>可惜这次执行失败了, 因为没有<code>Z8XHJJY</code>,程序进入下面的<code>catch()</code>并出来</p><hr /><p>继续执行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">_$<span class="token constant">ET</span> <span class="token operator">=</span> <span class="token function">_$qt</span><span class="token punctuation">(</span>_$<span class="token constant">SH</span><span class="token punctuation">[</span><span class="token number">661</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同上, 落入catch</p><hr /><p>继续执行, 暂停在<code>cookie.set</code>,查看堆栈<code>_$iv</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">_$qP<span class="token punctuation">[</span>_$<span class="token constant">SH</span><span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span>      <span class="token comment">// document.cookie =</span>      _$<span class="token constant">CG</span> <span class="token operator">+</span>          <span class="token comment">// 刚刚遇到过, 是我们需要的"lD01YhBPHVTHP"</span>      _$<span class="token constant">SH</span><span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">]</span> <span class="token operator">+</span>      <span class="token comment">// `=`</span>      _$41 <span class="token operator">+</span>          <span class="token comment">// lD01YhBPHVTHP的值</span>      <span class="token function">_$iv</span><span class="token punctuation">(</span><span class="token number">994</span><span class="token punctuation">)</span> <span class="token operator">+</span>     <span class="token comment">// ''</span>      _$<span class="token constant">SH</span><span class="token punctuation">[</span><span class="token number">589</span><span class="token punctuation">]</span> <span class="token operator">+</span>     <span class="token comment">// ; path...</span>      <span class="token function">_$iv</span><span class="token punctuation">(</span><span class="token number">983</span><span class="token punctuation">,</span> _$s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// '; expires=Wed, 06 Apr 2022 11:26:36 GMT; Secure'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是在此执行了一次拼串, 查看调用栈,看到了我们命名的<code>RUISHUTESTFUNCTIONENTRY()</code></p><p>所有操作都是在这里进行的</p><p>至此, 我们有了变量替换表, <code>inner.js</code>,<code>outer.js</code>, <code>&lt;meta&gt;</code>, 如何解密代码呢?</p><h4 id="解决方案">解决方案</h4><ul><li><p>根据已有变量替换表, 一行一行理清逻辑...(费头发)</p></li><li><p>既然我们知道了加密程序就是在反复执行<code>inner.js</code>,不如欲擒故纵, 在Node中引入并执行, 但是Node中没有DOM/BOM方法,所以需要我们实现几个假的,尤其是<code>query meta</code>的时候(!这是一种非常不安全的方法,例如加密者完全可以判断当前是否为Node环境, 如果是,直接执行攻击指令)</p></li><li><p>使用中间人攻击, 结合变量替换表, 实现解密JS</p></li><li><p>使用模拟爬虫工具</p></li><li><p>变量替换始终是一种猫鼠游戏. 更好的方法是:使用<code>jsdom</code>模块在Node中实现轻量化浏览器环境,我的实现代码如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">promiseStick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> res<span class="token punctuation">,</span> rej<span class="token punctuation">;</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">[</span>res<span class="token punctuation">,</span> rej<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> res<span class="token punctuation">,</span> rej <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">reqLoginToken</span><span class="token punctuation">(</span><span class="token parameter">p <span class="token operator">=</span> <span class="token function">promiseStick</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cookieMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> dom <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token constant">JSDOM</span><span class="token punctuation">.</span><span class="token function">fromURL</span><span class="token punctuation">(</span>    <span class="token string">'https://xxx.cn'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">resources</span><span class="token operator">:</span> <span class="token string">'usable'</span><span class="token punctuation">,</span>      <span class="token literal-property property">runScripts</span><span class="token operator">:</span> <span class="token string">'dangerously'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 劫持cookie获取生成时机</span>  dom<span class="token punctuation">.</span>window<span class="token punctuation">.</span>_cookie <span class="token operator">=</span> dom<span class="token punctuation">.</span>window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">__lookupSetter__</span><span class="token punctuation">(</span><span class="token string">'cookie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dom<span class="token punctuation">.</span>window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">__defineSetter__</span><span class="token punctuation">(</span><span class="token string">'cookie'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    _cookie <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token keyword">const</span> cs <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cookieMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cookieMap<span class="token punctuation">.</span>size <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 一个enable_XX临时token, 一个加密的</span>      p<span class="token punctuation">.</span><span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">cookie</span><span class="token operator">:</span> <span class="token function">Object</span><span class="token punctuation">(</span>dom<span class="token punctuation">.</span>cookieJar<span class="token punctuation">.</span>store<span class="token punctuation">.</span>idx<span class="token punctuation">[</span><span class="token string">'uaaap.swu.edu.cn'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">cookieE</span><span class="token operator">:</span> cookieMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>login<span class="token punctuation">.</span>encryptCookie<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dom<span class="token punctuation">.</span>window<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dom <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  dom<span class="token punctuation">.</span>window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">__defineGetter__</span><span class="token punctuation">(</span><span class="token string">'cookie'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> _cookie<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>值得学习的东西</p><ul><li>cookie&amp;eval劫持</li><li>dev-tool的一律不暂停</li><li>setInterval清除debugger</li></ul>]]></content>
    
    
    <summary type="html">近期想要做学校某网站爬虫, 但是在CAS统一登录环节反复登录失败. 经查, 学校统一认证系统采用了数瑞某版动态安全方案(包括动态JS, Cookie混淆, 前端反调试), 在请求HTML时会携带两个Cookie并定时生成加密Cookie. 没有携带加密Cookie的请求都会被认为是非法的.🤕</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.liukairui.me/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    <category term="一些爬虫" scheme="https://blog.liukairui.me/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/%E4%B8%80%E4%BA%9B%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="前端" scheme="https://blog.liukairui.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="爬虫" scheme="https://blog.liukairui.me/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="数瑞" scheme="https://blog.liukairui.me/tags/%E6%95%B0%E7%91%9E/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程Haskell初探</title>
    <link href="https://blog.liukairui.me/article/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8BHaskell%E5%88%9D%E6%8E%A2/"/>
    <id>https://blog.liukairui.me/article/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8BHaskell%E5%88%9D%E6%8E%A2/</id>
    <published>2022-03-02T16:00:01.000Z</published>
    <updated>2022-03-02T16:00:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介">简介</h3><h4 id="缘起">缘起</h4><p>🤔想想本科CS教育大多都教的是什么?</p><ul><li>算法: 在给你一个问题, 要你尽<strong>快</strong>算出解.</li><li>数据库: 给你一些数据, 要你<strong>快</strong>速储存查找.</li><li>分布式算法/GPU编程: 一个CPU不够用, 给你更快的硬件(集群或者GPU),要你更<strong>快</strong>算出解</li><li>人工智能课: 写出指数增长的搜索算法, 然后再用剪枝,学习等方法<strong>加速</strong>.</li><li>体系结构课: 是在用电路门造出更<strong>快</strong>的CPU.</li></ul><p>为什么我们一个劲去优化机器, 程序员难道不重要吗? 随着代码规模的增大,重构, 调试, 测试, API设计变得越来越复杂. 于是人们提出了函数式编程.函数式编程不关心代码的逻辑执行速度(复杂度).程序员只负责将问题描述给计算机, 而速度优化则一口气交给计算机处理.</p><p>⚠️<strong>注意</strong>: Haskell并没有在工业界流行.这意味着你很难将Haskell应用于大型项目(虽然Haskell具有这样的能力)</p><h4 id="什么是haskell函数式编程">什么是Haskell/函数式编程</h4><p>🔡Haskell是一门纯粹函数式编程语言</p><p><strong>🏎函数式与命令式编程对比</strong></p><ul><li><p>🏃‍♂️执行操作:</p><ul><li>命令式编程: 给计算机一系列指令, 计算机根据指令执行变量状态变化.最后得到结果</li><li>函数式编程: 告诉计算机我们需要解决什么样的问题</li></ul><p>例如: 获取字符串<spanclass="math inline">\(s\)</span>中的大写字母</p><ul><li>命令式编程: 遍历<span class="math inline">\(s\)</span> -如果字符<span class="math inline">\(c\)</span>满足<spanclass="math inline">\(&#39;A&#39; \leq c \leq &#39;Z&#39;\)</span> -将<span class="math inline">\(c\)</span>放入数组<spanclass="math inline">\(res\)</span> - 返回<spanclass="math inline">\(res\)</span></li><li>函数式编程: 我要获得一个字符串 - 这个字符串中的字符来自<spanclass="math inline">\(s\)</span> - 只有大写字母满足要求 -大写字母指的是<span class="math inline">\({&#39;A&#39;,&#39;B&#39;,...,&#39;Z&#39;}\)</span></li></ul><p>不难发现,我们可以很难将命令式编程中的语句转化为数学函数(比如遍历的<code>for</code>就无法转换为函数),但是可以很轻易的将函数式编程语句的内容转化为数学表达式 <spanclass="math display">\[f(s) = \{x|x \in s , x \in Caps\} \ \ \  where\ Caps = \{&#39;A&#39;,&#39;B&#39;,...,&#39;Z&#39;\}\]</span> 他的Haskell表达式也很数学化(暂时看不懂也没有大碍)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">f s &#x3D; [x|x&lt;-s, x &#96;elem&#96; [&#39;A&#39;..&#39;Z&#39;]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回头想想,我们经常把命令式编程语句中的<code>function</code>称作"函数".但是这些"函数"内部却总是有数学函数无法实现的内容(例如循环,变量重复赋值). 所幸函数式编程解决了这个问题</p></li><li><p>🙅变量与常量</p><ul><li>命令式编程: 常量一旦声明就无法变化, 而变量可以随时重新赋值</li><li>函数式编程: 变量一旦被指定, 就不可以更改了.函数能做的唯一事情就是利用引数计算结果(毕竟数学函数中可没有重复赋值的操作,但数学中可到处都是复合函数)</li></ul></li><li><p>💊副作用(side effect, 即改变非函数内部的状态)</p><ul><li>命令式编程: 函数可能存在副作用(修改外部变量值)</li><li>函数式编程: 无副作用, 且函数式编程中的函数是纯函数(即:以同样的参数调用同一个函数两次, 得到的结果一定是相同)</li></ul></li><li><p>⏱惰性求值</p><ul><li><p>命令式编程: 除非使用特殊数据结构, 默认非惰性求值,例如在JS中写下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token operator">=></span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token operator">=></span>d<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解释器会对数组遍历两次</p></li><li><p>函数式编程: 默认惰性求值, 例如在Haskell中写下</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">map (&#x2F;2) (map (+1) [1,2,3])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组只会遍历一次, 即每一个元素都调用函数两次, 最后得到结果.好像有点问题: 如果我想定义一个<code>cnt</code>,并让<code>cnt</code>在每次执行加法/乘法的时候<code>+1</code>,最后加<code>cnt</code>到结果上呢? 即</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>t<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>    t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>    t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Haskell的惰性求值似乎会让这样的函数无法实现? 但是还记得副作用吗,Haskell中的函数都是纯函数, 纯函数的执行不能对外部产生副作用.也正是因为函数都是纯函数,所以惰性求值时候将元素经常连续变化并不会造成结果存在差异.</p><p>惰性求值的另一个好处是我们可以处理一个无限数组例如:获取前10个奇数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">[1..]           -- 获取一个[1,2,3...]的无限数组filter (odd) [1..]    -- 过滤出所有奇数 [1,3,5..]take 10 filter (odd) [1..]   -- 取前10项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p><strong>🚫Haskell是静态强类型语言</strong></p><ul><li>静态类型意味着我们需要在运行前明确指出变量的类型,同时Haskell支持类型推导,这意味着我们不必告诉Haskell每一个变量的类型(例如Haskell会自动推断<code>a = 1+1</code>的<code>a</code>是数值,同时由于Haskell不可重复赋值, a的类型不会再有变化)</li><li>强类型意味着Haskell不会自动进行类型转换(除了部分语法糖)</li></ul><h4 id="环境配置">环境配置</h4><p>🛠最方便的方法就是使用<code>Haskell Platform</code>, 此程序包包含</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuaGFza2VsbC5vcmcvZ2hjLw==">GHC<i class="fa fa-external-link-alt"></i></span>: Haskell编译器</li><li><span class="exturl" data-url="aHR0cHM6Ly9jYWJhbC5yZWFkdGhlZG9jcy5pby8=">cabal-install<i class="fa fa-external-link-alt"></i></span>:包管理器</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmhhc2tlbGxzdGFjay5vcmcv">stack<i class="fa fa-external-link-alt"></i></span>:跨平台开发工具</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hhc2tlbGwvaGFza2VsbC1sYW5ndWFnZS1zZXJ2ZXI=">haskell-language-server<i class="fa fa-external-link-alt"></i></span>:语言支持</li></ul><p>对于<code>archlinux</code>, 由于GHC采用动态链接, 需要增加几个软件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S ghc cabal-install stack haskell-language-server happy alex haskell-haddock-library<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于VSCode用户</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPW1vZ2Vrby5oYXNrZWxsLWV4dGVuc2lvbi1wYWNr">HaskellExtension Pack<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPWRyYW1mb3JldmVyLnZzY29kZS1naGMtc2ltcGxl">SimpleGHC (Haskell) Integration<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9tYXJrZXRwbGFjZS52aXN1YWxzdHVkaW8uY29tL2l0ZW1zP2l0ZW1OYW1lPXBob2l0eW5lLnBob2l0eW5lLXZzY29kZQ==">HaskellGHCi Debug Adapter Phoityne<i class="fa fa-external-link-alt"></i></span></li></ul><p>GHC在编译Haskell文件(<code>.hs</code>文件)的同时提供了交互模式(类似Node,Python, 虽然他是编译型语言(这里应该感谢纯函数的特性)),只需要终端输入<code>ghci</code>即可进入交互模式. 在交互模式中</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">:l xx.hs    -- 可以加载xx.hs文件, 其中.hs可以省略:r          -- 刷新已经加载的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="基础语法">基础语法</h3><h4 id="运算符">运算符</h4><ul><li><p>数学运算: <code>2 + 15</code>, <code>49 * 100</code>,<code>1892 - 1472</code>, <code>5 / 2</code>,<code>50 * (100 - 4999)</code></p><p>注意: <code>5 * -3</code>会报错,因为<strong>在Haskell中函数是一等公民</strong>,而<code>*</code>本身就是一个二元函数.Haskell会将表达式解析为<code>( 5 * - ) 3</code>,所以应该改为<code>5 * (-3)</code></p></li><li><p>Boolean运算: <code>True</code>, <code>False</code>(必须大写),<code>&amp;&amp;</code>, <code>||</code>, <code>not</code>,<code>==</code>, <code>/=</code>(即<code>!=</code>)</p></li></ul><p>数学运算与Boolean运算都不支持默认类型转换(整数支持默认转换为小数)</p><h4 id="函数调用">函数调用</h4><ul><li><p>函数调用: 调用方法为<code>函数名 参数1 参数2...</code>,看起来很怪, 没有<code>()</code>, 也没有<code>,</code>分隔. 例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">succ 8                 -- 获取8的后继, 即9min 9 10               -- 8,9最小值max 9 10               -- 8,9最大值succ 9 + max 5 4 + 1   -- 函数调用具有最高优先级, 即(succ 9) + (max 5 4) + 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>中缀函数: 对于二元函数,我们可以将<code>f x y</code>写成<code>x `f` y</code>, 注意,这里的<code>`</code>, 是必须的. 例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">2 &#96;min&#96; 4    -- 即 min 2 41 &#96;elem&#96; [2,3,1] -- 即elem 1 [2,3,1], 其中elem x xs返回x是否在xs中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>函数调用是自左向右的</p></li></ul><h4 id="函数编写">函数编写</h4><ul><li><p>函数定义与数学中的函数表达式很类似, 例如</p><ul><li><p>需要定义表达式<span class="math inline">\(doubleMe(x) =x+x\)</span>, 只需要</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">doubleMe x &#x3D; x+x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li><li><p>需要定义表达式<span class="math inline">\(doubleUs(x,y) =x+x+y+y\)</span>, 只需要</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">doubleUs x y &#x3D; x+x+y+y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>当然, 也可以调用函数</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">doubleUs x y &#x3D; doubleMe x + doubleMe y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li></ul></li><li><p>变量就是常函数(因为变量不可修改值, 所以,可以像构建常函数一样构建变量)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">testValue &#x3D; 12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>无需关心<strong>函数之间</strong>的位置, 例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">doubleUs x y &#x3D; doubleMe x + doubleMe ydoubleMe x &#x3D; x + xdemoRes &#x3D; demoUs 1 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>并不会报错</p></li><li><p>条件语句If: <code>if-then-else</code>结构, 例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">doubleSmallNumber x &#x3D; if x &gt; 100                      then x                      else  x*2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>支持压行书写</p></li><li><p>使用<code>_</code>表示我们不关系这个变量取值, 例如定义函数 <spanclass="math display">\[f(x,y,z) = x\\g(x,y,z) = y\\g(x,y,z) = z\]</span> Haskell表示就是</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">f x _ _ &#x3D; xg _ y _ &#x3D; yh _ _ z &#x3D; z<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这和JS中<code>_</code>表示不关心变量不一样, 这个甚至可以重名</p></li><li><p>在Haskell中使用<code>'</code>表示类似, 但是不同的函数,比如我们想使用两种方式实现<spanclass="math inline">\(Fibonacci\)</span></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">fib n &#x3D; if n&lt;&#x3D;2 then n else fib (n-1) + fib (n-2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>忽然我们又想实现一个<spanclass="math inline">\(Fibonacci\)</span></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">fib&#39; n &#x3D; if n&lt;&#x3D;3 then n else fib (n-1) + fib (n-2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这只是一种命名习惯, 不强制, 也没有其他效果</p></li></ul><h4 id="list类型基础">List类型基础</h4><p>📜这里的List和JS/Python的数组类似,我喜欢把他作为<strong>可重复无序集合</strong>使用.</p><ul><li><p>声明一个List很简单</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">t &#x3D; [1,2,3]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>⚠️List中的元素类型必须相同</p></li><li><p>字符串实际上是字符List的语法糖</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">&quot;231&quot; &#x3D;&#x3D; [&#39;2&#39;,&#39;3&#39;,&#39;1&#39;]  -- True<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li><li><p>可以使用<code>++</code>运算合并List, 例如</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">t &#x3D; [1,2,3] ++ [4,5,6]   -- [1,2,3,4,5,6]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>⚠️其实现原理是遍历<code>++</code>前的数组并合并到后者,所以这是一个低效运算子</p></li><li><p>可以使用<code>:</code>运算符将元素加入List头部, 例如</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">t &#x3D; 1:[2,3,4]    -- [1,2,3,4]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>支持链式调用, 例如</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">t &#x3D; 1:2:3:[4,5,6]   -- [1,2,3,4,5,6]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li><li><p>可以使用<code>!!</code>取List的某一位</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">t &#x3D; [1,2,3,4,5,6] !! 2   -- 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>⚠️越界访问会报错</p></li><li><p>取值方法</p><ul><li><p><code>head List</code>返回<strong>首个</strong>元素:<code>head [1,2,3]</code>为<code>1</code></p></li><li><p><code>tail List</code>返回<strong>非首个</strong>元素们:<code>tail [1,2,3]</code>为<code>[2,3]</code></p></li><li><p><code>last List</code>返回<strong>最后一个</strong>元素:<code>last [1,2,3]</code>为<code>3</code></p></li><li><p><code>init List</code>返回<strong>非最后一个</strong>元素:<code>init [1,2,3]</code>为<code>[1,2]</code></p><p>⚠️对空数组执行均会报错</p></li></ul></li><li><p>其他方法</p><ul><li><p><code>length List</code>返回数组长度:<code>length [1,2,3]</code>为<code>3</code></p></li><li><p><code>null List</code>返回是否为空: <code>null [1,2,3]</code> 为<code>False</code></p></li><li><p><code>reverse List</code>反转数组:<code>reverse [1,2,3]</code>为<code>[3,2,1]</code>,并不会反转原数组(因为纯函数)</p></li><li><p><code>take n List</code>返回前<code>n</code>的元素,越界部分不返回, <code>n==0</code>返回<code>[]</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">take 2  [1,2,3,4]  -- [1,2]take 10 [1,2,3,4]  -- [1,2,3,4]take 0  [1,2,3,4]  -- []take -1 [1,2,3,4]  -- Error!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>drop</code>与<code>take</code>类似,作用为删除前<code>n</code>个元素</p></li><li><p><code>maximum List</code>返回最大值:<code>maximum [1,9,2,3,4]</code>为<code>9</code></p></li><li><p><code>maximum List</code>返回最大值:<code>minimum [8,4,2,1,5,6]</code>为<code>1</code></p></li><li><p><code>sum List</code>返回和:<code>sum [8,4,2,1,5,6]</code>为<code>26</code></p></li><li><p><code>product List</code>返回积:<code>product [8,4,2,1,5,6]</code>为<code>1920</code></p></li></ul></li><li><p><code>elem ele List</code>判断<code>ele</code>是否在<code>List</code>中:<code>4 `elem` [3,4,5,6]</code>为<code>True</code></p></li></ul><h4 id="list的range">List的Range</h4><p>📜类似于Python的Range, 但是更加智能</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">t &#x3D; [1..5]   -- [1,2,3,4,5]t &#x3D; [&#39;a&#39;..&#39;f&#39;]  -- [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;]-- 默认Step为1, 自定义时需要列前两项t &#x3D; [1,1.2..2]  --  [1.0,1.2,1.4,1.5999999999999999,1.7999999999999998,1.9999999999999998]-- 但是精度堪忧, 建议使用其他方法(后面会提到)t &#x3D; [1..]   -- [1,2,3..]定义无限长Listt &#x3D; [1,3..]   -- [1,3,5,7..]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>repeat n</code>返回无限个<code>n</code>组成的List(等价于<code>[n,n..]</code>)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">t &#x3D; repeat 5   -- [5,5,5,5...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一般搭配<code>take</code>使用</p><h4 id="list的comprehension">List的Comprehension</h4><p>🔰非常类似于集合的定义(这也是我把List当无序可重集合的原因)</p><p>对于一个集合 <span class="math display">\[S = \{ 2x | x \in \mathbb N , \sqrt{x} \in \{1,..,100\} \}\]</span> 首先他是一个List, 所以应该包着<code>[]</code>,之后有一个竖线分隔符, 左边是输出函数(集合中的代表元素), 右边是约束,例如<code>[x|条件]</code>, 条件中<spanclass="math inline">\(\in\)</span>使用<code>&lt;-</code>表示,那么刚刚集合就可以表示为<code>t = [ 2*x | x &lt;- [1..100], (sqrt x) `elem` [1..100]]</code></p><p>还可以结合之前的函数与<code>if</code>语句, 例如:</p><p>定义<code>List</code>它能够使<code>List</code>中所有大于 10的奇数变为 <code>"BANG"</code>，小于 10 的奇数变为<code>"BOOM"</code>，其他则统统扔掉</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">boomBangs xs &#x3D; [ if x &lt; 10 then &quot;BOOM!&quot; else &quot;BANG!&quot; | x &lt;- xs, odd x]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时支持同多List中取元素</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">[ x*y | x &lt;- [2,5,10], y &lt;- [8,10,11]]  --[16,20,22,40,50,55,80,100,110]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>🤔<strong>使用comprehension的时候注意思考方式</strong>:我需要的List是什么样子的, 而不是List是怎么算出来的</p><h4 id="tuple类型基础">Tuple类型基础</h4><p>📜这里的Tuple和Python的元组类似. 与List不同的就是: Tuple是定长的,其中可以为任意不同数据类型(例如<code>('a',1)</code>)</p><p>⚠️Tuple也是有类型的, 这意味着若List中有Tuple,那么所有的Tuple类型应该相同(每个Tuple的长度相同, 每一个位置的类型相同),即</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">[(1,2,3), (4,5,6)]   -- 👍[(1,2,3), (4,5,True)]  -- 💩[(1,2,3), (4,5)]   -- 💩[(1,2), (4,5.0)]          -- 👍 同时你将获得[(1,2.0), (4,5.0)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法:</strong></p><ul><li><p><code>fst Tuple</code>获取<strong>二元</strong>Tuple的第一个元素,不可用于其他长度Tuple!</p></li><li><p><code>snd Tuple</code>获取<strong>二元</strong>Tuple的第二个元素,不可用于其他长度Tuple!</p></li><li><p><code>zip List List</code>获取一个交叉配对的Tuple List</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">zip [1,2,3,4,5] [5,5,5,5,5]-- [(1,5),(2,5),(3,5),(4,5),(5,5)]zip [1 .. 5] [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;]-- [(1,&quot;one&quot;),(2,&quot;two&quot;),(3,&quot;three&quot;),(4,&quot;four&quot;),(5,&quot;five&quot;)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个<code>zip</code>函数确实很形象啊😂, 同时若两个List长度不一样的,则舍弃长出的部分(拉拉链的时候要是两边不一样长也只能拉到较短的位置),这种特性与惰性求值组合后<code>zip</code>就可以处理无限数组了</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">zip &quot;Karry&quot; [1..]-- [(&#39;K&#39;,1),(&#39;a&#39;,2),(&#39;r&#39;,3),(&#39;r&#39;,4),(&#39;y&#39;,5)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>zipWi1th f List List</code>: 与<code>zip</code>类似,将每次取得的两个元素调用<code>f</code>并返回</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">add x y &#x3D; x + yzipWith add [1 .. 10] [1 .. 10]-- [2,4,6,8,10,12,14,16,18,20]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>😆有趣的例子</strong>: 还是要注意思考方式</p><ul><li><p>所有三边长度皆为整数且小于等于 10，周长为 24 的三角形</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">triangles &#x3D; [ (a,b,c) | c &lt;- [1..10], b &lt;- [1..10], a &lt;- [1..10], a+b&gt;c, a+c&gt;b, b+c&gt;a]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>三边都小于等于 10 的直角三角形(三边按顺序输出)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">triangles&#39; &#x3D; [ (a,b,c) | c &lt;- [1..10], b &lt;- [1..c], a &lt;- [1..b], a^2 + b^2 &#x3D;&#x3D; c^2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>周长为24, 三边都小于等于 10 的直角三角形</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">triangles&#39;&#39; &#x3D; [ (a,b,c) | c &lt;- [1..10], b &lt;- [1..c], a &lt;- [1..b], a^2 + b^2 &#x3D;&#x3D; c^2, a+b+c &#x3D;&#x3D; 24]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="类型与类型类">类型与类型类</h3><h4 id="类型types">类型(Types)</h4><p>Haskell是静态类型语言且支持类型推导.但Haskell不支持隐式类型转换(除了Int-&gt;Float)</p><p>可以在<code>ghci</code>中使用<code>:t 表达式</code>的方式获取类型</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">:t &#39;a&#39;     -- &#39;a&#39;::Char:t True    -- True::Bool:t &quot;HELLO!&quot;   -- &quot;HELLO&quot;::String:t max    -- max :: Ord a &#x3D;&gt; a -&gt; a -&gt; a:t [1,2,3]   -- [1,2,3] :: Num a &#x3D;&gt; [a]:t 12.3    -- 12.3 :: Fractional p &#x3D;&gt; p:t (True, 1)  -- (True, 1) :: Num b &#x3D;&gt; (Bool, b):t (&#x3D;&#x3D;)    -- (&#x3D;&#x3D;) :: Eq a &#x3D;&gt; a -&gt; a -&gt; Bool<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>🙄常见的类型有</p><ul><li><code>Int</code>: 表示<span class="math inline">\(-2^{31} \sim2^{31}-1\)</span>的整数</li><li><code>Integer</code>: 表示整数, 无界</li><li><code>Float</code>: 单精度浮点数</li><li><code>Double</code>: 双精度浮点型</li><li><code>Bool</code>: 布尔型,取值为<code>True</code>与<code>False</code></li><li><code>Char</code>: 字符型,<code>String = [Char]</code>表示字符串</li></ul><p>🙄类型表示时的术语</p><ul><li><p>使用大写字母开头表示类型</p></li><li><p><code>::</code>表示"类型为", 例如: "HELLO"的类型为String</p></li><li><p><code>[a]</code>表示<code>a</code>类型的数组</p></li><li><p>对于函数, 将参数与返回值类型依次使用<code>-&gt;</code>连接即可,例如</p><ul><li><p><code>a-&gt;b</code>表示这是一个函数,接受一个<code>a</code>类型的参数,返回一个<code>b</code>类型变量</p></li><li><p><code>a-&gt;b-&gt;c-&gt;d</code>表示这是一个函数,按顺序接受<code>a</code>,<code>b</code>, <code>c</code>类型变量,返回<code>d</code>类型变量</p></li></ul><p>将参数与返回值类型简单粗暴的连接在一起看起来有点"欠考虑", 实际上,这样的模式在函数式编程中十分符合直觉</p><p>当函数可以接受多种类型的参数并返回不同类型的类型时,我们一般采用<code>a</code>, <code>b</code>,<code>c</code>...表示某一种类型,这与命令式语言中的<strong>多态</strong>类似,例如<code>reverse</code>函数: <code>[a] -&gt; [a]</code></p></li><li><p>运算符也是一个函数,例如<code>==</code>类型就是一个<code>a-&gt;a-&gt;Bool</code>,不过在进行类型判断应该使用括号将运算符括起来,如<code>:t (==)</code></p></li><li><p>Tuple的类型是每一项的类型组成的Tuple</p></li><li><p>至今没有解决的<code>=&gt;</code>表示什么,这需要类型类的知识</p></li></ul><h4 id="类型变量type-variables与类型类type-variables">类型变量(Typevariables)与类型类(Type variables)</h4><p>🎁前面提到, 我们可以通过使用<code>a</code>,<code>b</code>等变量表示任意类型,例如<code>sum</code>函数表示<code>[a]-&gt;a</code>,此时的<code>a</code>就是<strong>类型变量</strong>, 例如</p><ul><li><code>fst</code>函数: <code>[a] -&gt; a</code></li><li><code>length</code>函数: <code>[a] -&gt; Int</code></li><li><code>div</code>函数: <code>a -&gt; a -&gt; a</code></li></ul><p>此时, <code>div</code>函数似乎有点问题,我们只用<code>a</code>代表了某一种类型, 但是<code>Char</code>类型能除吗?我们应该将类型变量限定到一定类型范围,例如<code>div</code>函数的<code>a</code>应该是一个可计算类型,用<code>:t</code>检查<code>div</code>函数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; :t divdiv :: (Integral a) &#x3D;&gt; a -&gt; a -&gt; a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的<code>(Integral a)</code>用来描述<code>a</code>这个类型是一个<code>Integral</code>类型类(括号表示省略).注意描述:<strong>类型变量<code>a</code>是一个<code>Intergral</code>类型类的类型变量</strong>,在描述结束时候使用<code>=&gt;</code>链接类型声明</p><p>🪆有点套娃的意思了. 将这些术语与命令式编程对应一下.</p><ul><li><p>函数的参数与返回值可能是多种类型的(<strong>对应多态</strong>)</p></li><li><p>于是我们将每种类型用不同的类型变量表示(<strong>对应模板,用类型变量代表某一个类</strong>)</p></li><li><p>为了约束类型变量, 我们提出了类型类.那什么样的类属于某个类型类呢?</p><p><strong>完成了类型类中定义的成员与方法的类</strong>都可以属于类型类(<strong>对应接口</strong>).</p></li></ul><p>🌰看几个常见的例子</p><ul><li><p><code>Eq</code>类型类表示可以表示相等的类型类.<code>Eq</code>类型类要求实现<code>==</code>函数以用于判断.</p><p>例如<code>:t (==)</code>类型为<code>(==) :: Eq a =&gt; a -&gt; a -&gt; Bool</code></p></li><li><p><code>Ord</code>类型类表示可以比较类型类,<code>Ord</code>类型类要求实现<code>&lt;</code>, <code>&gt;</code>,<code>&lt;=</code>, <code>&gt;=</code>函数.</p><p><code>:t min</code>类型为<code>min :: Ord a =&gt; a -&gt; a -&gt; a</code></p></li><li><p><code>Show</code>类型类表示可以转换为字符串的类型类,<code>Show</code>类要求实现<code>show</code>函数用于转换为字符串</p><p>例如:<code>:t show</code>类型为<code>show :: Show a =&gt; a -&gt; String</code></p><p>例如: <code>show 123</code>表示<code>"123"</code>,<code>show [1,2,3]</code>表示<code>"[1,2,3]"</code></p></li><li><p><code>Read</code>类型与<code>Show</code>类型相反.<code>read</code>函数可以将字符串转换为<code>Read</code>类型类的成员</p><p>例如:<code>:t read</code>类型为<code>read :: Read a =&gt; String -&gt; a</code></p><p>但是: 将<code>String</code>转换为<code>Read</code>类型类中哪个类型呢,比如"True"应该转换为字符串还是布尔呢</p><ul><li>可以使用Haskell自带的类型推导:<code>read "123" + 1</code>得到<code>124</code></li><li>可以使用Haskell类型声明手动指定:<code>read "123" :: Float</code>得到<code>123.0</code></li></ul></li><li><p><code>Enum</code>类型类的成员都是可枚举的.其成员实现了<code>succ</code>(后继子)与<code>pred</code>(前继子)方法.<code>Bool</code>, <code>Char</code>, <code>Ordering</code>,<code>Int</code>, <code>Integer</code>, <code>Float</code>,<code>Double</code>类型都术语该类型类</p><p>例如:<code>:t succ</code>类型为<code>succ :: Enum a =&gt; a -&gt; a</code></p></li><li><p><code>Bounded</code>类型类的成员都有上限与下限</p><ul><li><code>:t minBound</code>类型为<code>minBound :: Bounded a =&gt; a</code>,例如:<code>minBound :: Int</code>为<code>-9223372036854775808</code></li><li><code>:t maxBound</code>类型为<code>maxBound :: Bounded a =&gt; a</code></li></ul></li><li><p><code>Num</code>为数字类型类</p></li><li><p><code>Integral</code>: 表示整数, 包含<code>Int</code> 和<code>Integer</code></p><p>当我们想显式将<code>Integral</code>转化为<code>Num</code>时,可以使用<code>fromIntegral</code>函数</p><p>⚠️<code>Integer</code>与<code>Integral</code>区别</p></li><li><p><code>Floating</code>: 表示浮点数, 包含<code>Float</code> 和<code>Double</code></p></li></ul><p>⚠️如果一个类型属于多个类型类可以这样写</p><h3 id="函数">函数</h3><p>Haskell有一套独特的函数语法</p><h4 id="模式匹配pattern-matching">模式匹配(Pattern matching)</h4><p>模式匹配通过检查数据的特定结构来检查其是否匹配，并按模式从中取得数据.这在函数定义中很常用</p><p>👂听起来和字符串正则匹配很像. 在定义函数时可以这样写</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">lucky :: (Integral a) &#x3D;&gt; a -&gt; Stringlucky 7 &#x3D; &quot;LUCKY NUMBER SEVEN!&quot;lucky x &#x3D; &quot;Sorry, you&#39;re out of luck, pal!&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在调用 <code>lucky</code> 时, 模式会从<strong>上至下进行检查,一旦有匹配, 那对应的函数体就被应用了</strong>.这个模式中的唯一匹配是参数为<code>7</code>，如果不是<code>7</code>，就转到下一个模式，它匹配一切数值并将其绑定为<code>x</code> . 若是自上而下检查所有模式都没有命中, Haskell会报错.所以在使用模式匹配的时候务必要考虑<strong>边界条件与特殊值</strong>(这与你在数学表达式中考虑边界值一样重要)</p><p>一个实现阶乘的例子</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">factorial :: (Integral a) &#x3D;&gt; a -&gt; afactorial 0 &#x3D; 1factorial n &#x3D; n * factorial (n - 1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>🤔看起来模式匹配只是用于类似数学中递归定义的一个语法糖?(简化了<code>switch-case</code>)</p><p>👻并不是,模式匹配还有高级用法(我更喜欢把他理解为JS正则中<code>if(regExp.test())&#123;args = regExp.exec()&#125;</code>的语法糖或者是<code>Object</code>结构赋值的语法糖)</p><ul><li><p>实现一个二维向量相加</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">addVectors :: (Num a) &#x3D;&gt; (a, a) -&gt; (a, a) -&gt; (a, a)addVectors a b &#x3D; (fst a + fst b, snd a + snd b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p>用模式匹配写后</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">addVectors :: (Num a) &#x3D;&gt; (a, a) -&gt; (a, a) -&gt; (a, a)addVectors (x1, y1) (x2, y2) &#x3D; (x1 + x2, y1 + y2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p>在定义函数的时候我就将参数与传入值进行了匹配</p></li><li><p>实现一个<code>List</code>的<code>reverse</code>(注意实现思路与模式匹配的应用)</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">reverse&#39; :: [a] -&gt; [a]reverse&#39; (x : xs) &#x3D; reverse&#39; xs ++ [x]reverse&#39; [] &#x3D; []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><ul><li><p><code>x : xs</code>: 表示匹配一个List,将这个List的第一个元素设置为<code>x</code>,剩下的设置为<code>xs</code></p><p>例如:使用其匹配的时候<code>[1,2,3]</code>就会匹配为<code>1:[2,3]</code>,于是<code>x = 1, xs = [2,3]</code></p><p>⚠️使用这样的方式匹配数组时需要加上括号表示他们是一体的</p></li><li><p><code>reverse</code>函数是什么呢? 就是把数组的第一个元素放到最后,在前面加上反转后的剩下的元素</p></li><li><p>什么时候会匹配失败呢? 当参数是空数组的时候就取不出来头,于是设置一个边界值</p></li></ul></li><li><p>实现一个<code>List</code>的<code>head</code>函数</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">head&#39; :: [a] -&gt; ahead&#39; (x:_) &#x3D; xhead&#39; [] &#x3D; error &quot;empty list&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><p>我们并不关心模式匹配时首元素后面的元素,那么可以用<code>_</code>代替</p></li><li><p>实现一个快速排序</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">qsort :: (Ord a) &#x3D;&gt; [a] -&gt; [a]qsort (target:xs) &#x3D; [x|x&lt;-xs, x&lt;&#x3D;target] ++ [target] ++ [x|x&lt;-xs, x&gt;target]qsort [] &#x3D; []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><p>这是一个经典的例子, 快速排序是什么, 就是随便这一个元素,把比他小的排序后放在左边, 比他大的排序后放在右边</p></li><li><p>还可以在匹配时使用<code>@</code>语法保留对整体的引用</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">capital :: String -&gt; Stringcapital &quot;&quot; &#x3D; &quot;Empty string, whoops!&quot;capital all@(x:xs) &#x3D; &quot;The first letter of &quot; ++ all ++ &quot; is &quot; ++ [x]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p></li></ul><h4 id="guards守卫">Guards(守卫)</h4><p>💂🏽<code>guard</code>用来检查一个值的某项属性是否为真.听起来和路由守卫一样, 如果条件判断通过就放行. 例如计算BMI函数:</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">bmiTell :: (RealFloat a) &#x3D;&gt; a -&gt; StringbmiTell bmi         -- 注意这里没有等号    | bmi &lt;&#x3D; 18.5 &#x3D; &quot;underweight&quot;      -- 等号在这里    | bmi &lt;&#x3D; 25.0 &#x3D; &quot;Pffft&quot;                -- 与if-else一样只会匹配第一个通过的    | bmi &lt;&#x3D; 30.0 &#x3D; &quot;fat&quot;    | otherwise   &#x3D; &quot;whale&quot;      -- 最后可以使用otherwise兜底<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>👀看起来是个语法糖: <code>|</code>和<code>if-else-if</code>一样,<code>otherwise</code>和兜底<code>else</code>一样,但是用在此处相当简洁.</p><p>⚠️如果使用<code>Guard</code>且没有使用<code>otherwise</code>且全部匹配失败,Haskell会匹配下一个函数, 例如:</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">f :: (Ord a, Num a) &#x3D;&gt; a -&gt; [a]f x  | x &lt; 0 &#x3D; error &quot;make sure x &gt;&#x3D; 0&quot;  | x &#x3D;&#x3D; 0 &#x3D; [0]f x &#x3D; x : f (x - 1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果<code>x&gt;0</code>, <code>f x</code>会先进入第一个函数,两个<code>guard</code>都匹配失败了, 于是进入下一个模式匹配</p><h4 id="where绑定">Where绑定</h4><p>改进一下BMI, 要求用户输入身高与体重👇</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">bmiTell :: (RealFloat a) &#x3D;&gt; a -&gt; a -&gt; StringbmiTell weight height    | weight &#x2F; height ^ 2 &lt;&#x3D; 18.5 &#x3D; &quot;underweight&quot;    | weight &#x2F; height ^ 2 &lt;&#x3D; 25.0 &#x3D; &quot;Pffft&quot;    | weight &#x2F; height ^ 2 &lt;&#x3D; 30.0 &#x3D; &quot;fat&quot;    | otherwise                   &#x3D; &quot;whale&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与命令式语言一样, 我们想把<code>weight / height ^ 2</code>定义成变量,可以使用<code>where</code>关键字</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">bmiTell :: (RealFloat a) &#x3D;&gt; a -&gt; a -&gt; StringbmiTell weight height    | bmi &lt;&#x3D; 18.5 &#x3D; &quot;underweight&quot;    | bmi &lt;&#x3D; 25.0 &#x3D; &quot;Pffft&quot;    | bmi &lt;&#x3D; 30.0 &#x3D; &quot;fat&quot;    | otherwise   &#x3D; &quot;whale&quot;    where bmi &#x3D; weight &#x2F; height ^ 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就像写数学公式一样 <span class="math display">\[\begin{equation}f(h,w) = \left\{ \\\begin{aligned}&amp;\text{underweight} &amp; BMI\leq 18.5 \\&amp;\text{Pffft} &amp; 18.5&lt; BMI\leq 25 \\&amp;\text{fat} &amp; 25&lt; BMI\leq 30 \\&amp;\text{whale} &amp; 30&lt; BMI\end{aligned}\right.\ \ \ where\ BMI = w/h^2\end{equation}\]</span> <code>where</code>后面可以跟多个名字和函数定义</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">bmiTell :: (RealFloat a) &#x3D;&gt; a -&gt; a -&gt; StringbmiTell weight height    | bmi &lt;&#x3D; skinny &#x3D; &quot;You&#39;re underweight, you emo, you!&quot;    | bmi &lt;&#x3D; normal &#x3D; &quot;You&#39;re supposedly normal. Pffft, I bet you&#39;re ugly!&quot;    | bmi &lt;&#x3D; fat    &#x3D; &quot;You&#39;re fat! Lose some weight, fatty!&quot;    | otherwise     &#x3D; &quot;You&#39;re a whale, congratulations!&quot;    where bmi &#x3D; weight &#x2F; height ^ 2          skinny &#x3D; 18.5          normal &#x3D; 25.0          fat &#x3D; 30.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⚠️注意</p><ul><li><p><code>where</code> 绑定中定义的名字只对本函数可见,其中的名字都是一列垂直排开</p></li><li><p><code>where</code> 绑定也可以使用模式匹配,前面那段代码可以改成：</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">where bmi &#x3D; weight &#x2F; height ^ 2      (skinny, normal, fat) &#x3D; (18.5, 25.0, 30.0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p></li><li><p><code>where</code>可以嵌套使用</p></li></ul><h4 id="let绑定">Let绑定</h4><p>与<code>where</code>类似, 作用域不同.<code>where</code>绑定在函数底部,在<strong>所有<code>guard</code>内</strong>可见,但<code>let</code>只对<code>let-in</code>绑定的<code>in</code><strong>表达式</strong>可见,例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">cylinder :: (RealFloat a) &#x3D;&gt; a -&gt; a -&gt; acylinder r h &#x3D;    let sideArea &#x3D; 2 * pi * r * h        topArea &#x3D; pi * r ^2    in  sideArea + 2 * topArea<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="case表达式">Case表达式</h4><p>与命令式编程的<code>case</code>类似, 同样支持模式匹配</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">case expression of pattern -&gt; result                   pattern -&gt; result                   pattern -&gt; result                   ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">describeList :: [a] -&gt; StringdescribeList xs &#x3D; &quot;The list is &quot; ++ case xs of [] -&gt; &quot;empty.&quot;                                               [x] -&gt; &quot;a singleton list.&quot;                                               xs -&gt; &quot;a longer list.&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="将函数定义为中缀函数">将函数定义为中缀函数</h4><p>不使用反引号也可以定义中缀函数. 但是,函数名只能使用<code>:|!@#$%^&amp;*-+./&lt;&gt;?\~</code>,之后可以使用下面任意方式定义</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">a |+| b   &#x3D; method1(|+|) a b &#x3D; method1 a b(|+|)     &#x3D; method1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="定义函数的结合性与优先级">定义函数的结合性与优先级</h4><p>例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">infixr 9 op<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>infi*</code>定义结合性 <code>infixr</code>是右结合,<code>infixl</code>是左结合, <code>infix</code>无左右优先性.</li><li>数字定义优先级 优先级一共有十个, <code>0-9</code>, 数字越大越高,如果定义时省略了数字, 则默认为9. 预定义的有</li></ul><table><thead><tr class="header"><th>值</th><th>左结合</th><th>无结合</th><th>右结合</th></tr></thead><tbody><tr class="odd"><td>9</td><td>!!</td><td></td><td>.</td></tr><tr class="even"><td>8</td><td></td><td></td><td>^, ^^, **</td></tr><tr class="odd"><td>7</td><td>*,/,<code>div</code></td><td></td><td></td></tr><tr class="even"><td>6</td><td>+, -</td><td></td><td></td></tr><tr class="odd"><td>5</td><td></td><td></td><td>:, ++</td></tr><tr class="even"><td>4</td><td></td><td>==,/=,&lt;,&lt;=,&gt;,&gt;=,<code>elem</code>,<code>notElem</code></td><td></td></tr><tr class="odd"><td>3</td><td></td><td></td><td>&amp;&amp;</td></tr><tr class="even"><td>2</td><td></td><td></td><td></td></tr><tr class="odd"><td>1</td><td>&gt;&gt;, &gt;&gt;=</td><td></td><td></td></tr><tr class="even"><td>0</td><td></td><td></td><td><span class="math inline">\(,\)</span>!,<code>seq</code></td></tr></tbody></table><h3 id="递归">递归</h3><p>🪆使用模式匹配与递归可以优雅的实现递归.在实现递归时最需要关注的就是<strong>边界条件</strong>.<strong>而递归的的实现思路就是描述问题是如何定义的</strong></p><ul><li><p>实现<code>List</code>的<code>max</code>函数</p><p>命令式思路: 设一个变量来存储当前的最大值，然后用循环遍历该<code>List</code>，若存在比这个值更大的元素，则修改变量为这一元素的值</p><p>函数式思路:<code>List</code>的最大值就是<code>head</code>和<code>tail</code>最大值的最大值.空<code>List</code>的最大值为Error</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">maximum&#39; :: (Ord a) &#x3D;&gt; [a] -&gt; amaximum&#39; [] &#x3D; error &quot;maximum of empty list&quot;maximum&#39; [x] &#x3D; xmaximum&#39; (x:xs)    | x &gt; maxTail &#x3D; x    | otherwise &#x3D; maxTail    where maxTail &#x3D; maximum&#39; xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现<code>replicate n x</code>函数(将<code>x</code>重复<code>n</code>次)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">replicate&#39; :: (Num i, Ord i) &#x3D;&gt; i -&gt; a -&gt; [a]replicate&#39; n x    | n &lt;&#x3D; 0    &#x3D; []    | otherwise &#x3D; x:replicate&#39; (n-1) x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>⚠️这里使用<code>Guard</code>而不是模式匹配是因为模式匹配无法匹配<code>&lt;0</code></p></li><li><p>实现<code>take</code>函数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">take&#39; :: (Num i, Ord i) &#x3D;&gt; i -&gt; [a] -&gt; [a]take&#39; 0 _ &#x3D; []take&#39; _ [] &#x3D; []take&#39; n (x:xs) &#x3D; x : take&#39; (n-1) xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更加周全的的代码(同样因为我们要匹配<code>n&lt;0</code>的情况,所以不能用模式匹配了)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">take&#39; :: (Num i, Ord i) &#x3D;&gt; i -&gt; [a] -&gt; [a]take&#39; n _    | n &lt;&#x3D; 0   &#x3D; []take&#39; _ []     &#x3D; []take&#39; n (x:xs) &#x3D; x : take&#39; (n-1) xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现<code>repeat</code>函数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">repeat&#39; :: a -&gt; [a]repeat&#39; x &#x3D; x:repeat&#39; x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>实现<code>zip</code>函数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">zip&#39; :: [a] -&gt; [b] -&gt; [(a, b)]zip&#39; [] _ &#x3D; []zip&#39; _ [] &#x3D; []zip&#39; (x1:xs1) (x2:xs2) &#x3D; (x1,x2):zip&#39; xs1 xs2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现<code>elem</code>函数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">elem&#39; :: (Eq a) &#x3D;&gt; a -&gt; [a] -&gt; Boolelem&#39; e [] &#x3D; Falseelem&#39; e (x : xs) &#x3D; (e &#x3D;&#x3D; x) || elem&#39; e xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是有点不函数式, 改一改</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">elem&#39; :: (Eq a) &#x3D;&gt; a -&gt; [a] -&gt; Boolelem&#39; e (x : xs)  | e &#x3D;&#x3D; x &#x3D; True  | otherwise &#x3D; elem&#39; e xselem&#39; e _ &#x3D; False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>温习一下快速排序(并使用<code>where</code>让其看起来更像函数式)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">qsort :: (Ord a) &#x3D;&gt; [a] -&gt; [a]qsort (target:xs) &#x3D; lowers ++ [target] ++ uppers  where lowers &#x3D; qsort [x|x&lt;-xs, x&lt;&#x3D;target]        uppers &#x3D; qsort [x|x&lt;-xs, x&gt;target]qsort _ &#x3D; []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>⚠️思路: 定义边界条件, 再定义个函数,让它从一堆元素中取一个并做点事情后, 把余下的元素重新交给这个函数</p><ul><li><p>实现埃筛</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">primes &#x3D; filterPrime [2..]  where filterPrime (p:xs) &#x3D;          p : filterPrime [x | x &lt;- xs, x &#96;mod&#96; p &#x2F;&#x3D; 0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种生成器生成+验证器验证的模式值得学习</p></li><li><p>实现斐波那契</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">fib :: Int -&gt; [Int]fib n &#x3D; take n $ fibList [1, 1]  where    fibList [a, b] &#x3D; a : fibList [b, a + b]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意学习如何存储递归中需要的调用值</p></li></ul><h3 id="函数pro">函数Pro</h3><p>😕函数式编程与数学表达式看起来太像了.</p><p>👼于是我天真的以为函数式编程就是用数学的方式描述问题,然后将其表示为函数式编程语句.</p><p>🤔实际上函数式编程更加注重<strong>将函数作为"一等公民",从而操作函数或是函数的一部分解决问题</strong></p><h4 id="函数柯里化与不全调用">函数柯里化与不全调用</h4><p>在JS中经常能听到这个函数柯里化这个词语, 在JS中,柯里化就是把多参函数变成单参函数,并返回一个单参数函数用于吃下下一个参数.</p><p>🍬但是, Haskell中所有函数都只有一个参数, 所有函数都是柯里化函数.而多参函数只是一个语法糖!</p><p>😱拿<code>max</code>函数举例.<code>max</code>函数实际上只接受一个参数<code>x</code>,然后返回一个和<code>x</code>比较大小的函数,例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">comp x y &#x3D; x y  -- 接受x,y 返回x y的结果maxWith5 &#x3D; max 5     -- 返回一个max 5函数res &#x3D; zipWith comp (repeat maxWith5) [1 .. 10]-- [5,5,5,5,5,6,7,8,9,10]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说<code>maxWith5</code>就是一个函数, 函数接受一个参数,返回和<code>5</code>比较大的那个,也就是我们之前写的<code>max 5 6</code>可以写成<code>(max 5) 6</code></p><p>再看看<code>maxWith5</code>,试试写出他的类型:<code>Ord a =&gt; a -&gt; a</code>. 显而易见,接受一个<code>Ord</code>类型类的<code>a</code>类变量,返回一个<code>a</code>类变量. 而之前那个<code>max</code>函数呢?收到一个<code>a</code>类变量,返回一个<code>Ord a =&gt; a -&gt; a</code>类函数.试试写出<code>max</code>函数类型:<code>Ord a =&gt; a -&gt; (a-&gt;a)</code>这个括号没啥用(因为Haskell是自左向右解析的)于是简化成<code>Ord a =&gt; a -&gt; a -&gt; a</code>这也就解释了<strong>为什么把参数类型与结果用<code>-&gt;</code>连在一起是符合直觉的</strong></p><p>⚛像<code>max 5</code>这样的函数调用就是<strong>不全调用</strong>,而中缀函数也存在不全调用, 例如<code>elem [1..]</code>, <code>==4</code>,<code>*5</code></p><h4 id="高阶函数">高阶函数</h4><p>🌌高阶函数: 接收函数作为参数或返回函数的函数就是高阶函数, 例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">applyTwice :: (a -&gt; a) -&gt; a -&gt; aapplyTwice f x &#x3D; f (f x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个类型似乎有点特别, 多了一个括号,表示第一个参数是一个函数而不是类型<code>a</code>(因为Haskell是右结合的)</p><p>结合函数柯里化与不全调用, 我们可以写出这样的表达式</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">applyTwice (+3) 10         -- 16 (调用函数子  😲applyTwice (++ &quot; HAHA&quot;) &quot;HEY&quot;  --&quot;HEY HAHA HAHA&quot;applyTwice (&quot;HAHA &quot; ++) &quot;HEY&quot;    -- &quot;HAHA HAHA HEY&quot;ghci&gt; applyTwice (multThree 2 2) 9  -- 144ghci&gt; applyTwice (3:) [1]           -- [3,3,1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合函数子可以实现多种炫酷的操作. 这就是把函数当成对象用</p><p>实现一个<code>zipWith</code>, 体验一下无参数的不全调用</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">zipWith&#39; :: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]zipWith&#39; f (x : xs) (y : ys) &#x3D; f x y : zipWith&#39; f xs yszipWith&#39; (+) [4,2,5,6] [2,6,2,3]         --[6,8,7,9]zipWith&#39; max [6,3,2,1] [7,3,1,5]         -- [7,3,2,5]zipWith&#39; (++) [&quot;foo &quot;, &quot;bar &quot;, &quot;baz &quot;] [&quot;fighters&quot;, &quot;hoppers&quot;, &quot;aldrin&quot;]-- [&quot;foo fighters&quot;,&quot;bar hoppers&quot;,&quot;baz aldrin&quot;]zipWith&#39; (*) (replicate 5 2) [1..]       -- [2,4,6,8,10]zipWith&#39; (zipWith&#39; (*)) [[1,2,3],[3,5,6],[2,3,4]] [[3,2,2],[3,4,5],[5,4,3]]-- [[3,4,6],[9,20,30],[10,12,12]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以借助高阶函数实现命令式中的<code>for</code>、<code>while</code>、赋值、状态检测</p><p><code>flip</code>是一个常用高阶函数, 实现功能很简单</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">flip :: (a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; cflip f y x &#x3D; f x y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也就是传入一个二元函数, 传回一个接受参数相反的二元函数(<strong>注意:传回的是函数而不是函数的运行结果!</strong>)</p><p>⚠️<code>flip</code>经常用来对库函数进行改进, 例如我需要函数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">pushFont :: [a]-&gt;a-&gt;[a]pushFont xs x &#x3D; x:xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要是函数参数能反过来就好了, 于是我就可以写</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">pushFont :: [a]-&gt;a-&gt;[a]pushFont &#x3D; flip (:)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不需要添加参数, 就算固执的添加上了参数, 函数只是变成这样</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">pushFont :: [a]-&gt;a-&gt;[a]pushFont x xs &#x3D; flip (:) x xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>都是在最后调用函数, 那么加不加参数没关系. 记住:<strong>我们定义的是函数, 而不是运算结果</strong></p><h4 id="lambda函数">Lambda函数</h4><p>与JS类型, 可以生成匿名函数, 通常在这个函数只是用一次的时候使用,语法为<code>\参数1 参数2 -&gt; 表达式</code>, 例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">flip&#39; :: (a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; cflip&#39; f x y &#x3D; \x y -&gt; f y x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>尽管这与 <code>flip' f x y = f y x</code>等价，它可以更明白地表示出它会产生一个新的函数</p><h4 id="mapfilterfoldscan">map&amp;filter&amp;fold&amp;scan</h4><p>这几个函数与JS的<code>Array.map</code>, <code>Array.filter</code>,<code>Array.reduce</code>很像, 所以十分重要</p><p>他们本身是List的方法, 但是在库函数加载的时候被自动引用了,也就是类似于</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">map &#x3D; Array.map<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><code>map</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">map :: (a -&gt; b) -&gt; [a] -&gt; [b]map _ [] &#x3D; []map f (x:xs) &#x3D; f x : map f xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>传入映射函数与<code>List</code>, 返回对每个元素映射后的结果</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">map (+3) [1,5,3,1,6]                    -- [4,8,6,4,9]map (++ &quot;!&quot;) [&quot;BIFF&quot;, &quot;BANG&quot;, &quot;POW&quot;]    -- [&quot;BIFF!&quot;,&quot;BANG!&quot;,&quot;POW!&quot;]map (replicate 3) [3..6]               -- [[3,3,3],[4,4,4],[5,5,5],[6,6,6]]map (map (^2)) [[1,2],[3,4,5,6],[7,8]]  -- [[1,4],[9,16,25,36],[49,64]]map fst [(1,2),(3,5),(6,3),(2,6),(2,5)] -- [1,3,6,2,2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用函数子作为函数调用就让<code>map</code>炫酷多了</p><p>以上的所有代码都可以用 List Comprehension来替代。<code>map (+3) [1,5,3,1,6]</code> 与<code>[x+3 | x &lt;- [1,5,3,1,6]</code> 完全等价.</p></li><li><p><code>filter</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">filter :: (a -&gt; Bool) -&gt; [a] -&gt; [a]filter _ [] &#x3D; []filter p (x:xs)    | p x       &#x3D; x : filter p xs    | otherwise &#x3D; filter p xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入判断函数, 传出符合要求的元素</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">filter (&gt;3) [1,5,3,2,1,6,4,3,2,1]         -- [5,6,4]filter (&#x3D;&#x3D;3) [1,2,3,4,5]                  -- [3]filter even [1..10]                       -- [2,4,6,8,10]let notNull x &#x3D; not (null x) in filter notNull [[1,2,3],[],[3,4,5],[2,2],[],[],[]]-- [[1,2,3],[3,4,5],[2,2]]filter (&#96;elem&#96; [&#39;a&#39;..&#39;z&#39;]) &quot;u LaUgH aT mE BeCaUsE I aM diFfeRent&quot;-- &quot;uagameasadifeent&quot;filter (&#96;elem&#96; [&#39;A&#39;..&#39;Z&#39;]) &quot;i lauGh At You BecAuse u r aLL the Same&quot;-- &quot;GAYBALLS&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上都可以用 <code>List Comprehension</code>的限制条件来实现。并没有教条规定你必须在什么情况下用 <code>map</code> 和<code>filter</code> 还是 <code>List Comprehension</code>.如果有多个限制条件，只能连着套好几个 <code>filter</code> 或用<code>&amp;&amp;</code> 等逻辑函数的组合之, 这时就不如<code>List comprehension</code></p></li><li><p><code>fold</code>系列函数有<code>foldl</code>,<code>foldlr</code>,<code>foldl1</code>, <code>foldlr1</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">foldl&#39; :: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; bfoldl&#39; _ pre [] &#x3D; prefoldl&#39; f pre (tar : tails) &#x3D; fold&#39; f (f pre tar) tails<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>与<code>reduce</code>类似, 参数有: 指定返回累加值函数, 累加初始值,数组. 例如:</p><p>实现数组求和</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">sum&#39; :: (Num a) &#x3D;&gt; [a] -&gt; asum&#39; &#x3D; foldl (+) 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>又省略参数了, 因为<strong>我们定义的是函数,而不是运算结果</strong></p><p>实现<code>reverse</code>(看我是多蠢🙃)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">reverse&#39; :: [a] -&gt; [a]reverse&#39; xs &#x3D; foldl (\acc x -&gt; x:acc) [] xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>首先<code>xs</code>是可以省略的(<strong>我们定义的是函数,而不是运算结果</strong>)</p><p>其次<code>\acc x -&gt; x:acc</code>实际上就是<code>flip (:)</code>于是改成</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">reverse&#39; :: [a] -&gt; [a]reverse&#39; &#x3D; foldl (flip (:)) []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>foldr</code>与<code>foldl</code>的区别就是前者是自右向左遍历,例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">reverse&#39; :: [a] -&gt; [a]reverse&#39; &#x3D; foldr (:) []map&#39; :: (a -&gt; b) -&gt; [a] -&gt; [b]map&#39; f &#x3D; foldr (\x acc -&gt; f x : acc) []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>foldl1</code> 与 <code>foldr1</code> 的行为与<code>foldl</code> 和 <code>foldr</code>相似，只是你无需明确提供初始值。他们假定 List的首个(或末尾)元素作为起始值</p><p>实现一些库函数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">maximum&#39; :: (Ord a) &#x3D;&gt; [a] -&gt; amaximum&#39; &#x3D; foldr1 (\x acc -&gt; if x &gt; acc then x else acc)product&#39; :: (Num a) &#x3D;&gt; [a] -&gt; aproduct&#39; &#x3D; foldr1 (*)filter&#39; :: (a -&gt; Bool) -&gt; [a] -&gt; [a]filter&#39; p &#x3D; foldr (\x acc -&gt; if p x then x : acc else acc) []head&#39; :: [a] -&gt; ahead&#39; &#x3D; foldr1 (\x _ -&gt; x)last&#39; :: [a] -&gt; alast&#39; &#x3D; foldl1 (\_ x -&gt; x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>scan</code>系列包括<code>scanl</code>,<code>scanr</code>,<code>scanl1</code>和<code>scanr1</code>.可以简单理解为<code>scanl</code>,<code>scanr</code>返回的是<code>foldl</code>,<code>foldr</code>的每一步中间值.<code>scanl1</code>和<code>scanr1</code>与<code>foldl1</code>,<code>foldr1</code>类似</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">scanl&#39; :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; [b]scanl&#39; f xs0 &#x3D; foldl (\aac x -&gt; aac ++ [f x (last aac)]) [xs0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到<code>scan*</code>似乎是调试<code>fold*</code>的好工具</p></li></ul><p>与之前的语法组合, 可以发现</p><ul><li><p><code>Lambda</code>表达式可以搭配这些函数实现炫酷效果</p></li><li><p>可以使用<code>takeWhile</code>方便的处理用上述函数处理无限长数组的结果</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">takeWhile&#39; :: (a -&gt; Bool) -&gt; [a] -&gt; [a]takeWhile&#39; _ [] &#x3D; []takeWhile&#39; f (x : xs)  | f x &#x3D; x : takeWhile&#39; f xs  | otherwise &#x3D; []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="与.调用"><code>$</code>与<code>.</code>调用</h4><ul><li><p><code>$</code>也是一个函数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">($) :: (a -&gt; b) -&gt; a -&gt; bf $ x &#x3D; f x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>🤨看起来就是将连个函数和参数连起来. 差不多,但是别忘了在Haskell中函数调用具有最高优先级(且是左结合, 即:同级表达式自右向左计算, 例如 f a b = (f a) b,可以粗暴理解成将左边的结合在一起),但是这里的<code>$</code>具有最低优先级(且是右结合, 即:同级表达式自左向右计算, 例如 f $ a b = f (a b),可以粗暴理解成将右边的结合在一起)</p><p>例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">t &#x3D; max 5 max 6 7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在Haskell中会报错, 原因是Haskell将代码理解成了(左结合了)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">t &#x3D; ((max 5) max) 6 7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们只能添加括号</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">t &#x3D; max 5 (max 6 7)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另一个方式就是使用<code>$</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">t &#x3D; max 5 $ max 6 7--  |---| 先解析这一段返回一个函数--        ^ 遇到了$于是无法解析, 解析右边--          |------|解析这一段的得到7--  (max 5) 7  变成了这样-- 最后得到7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看<code>$</code>起来就像是为左右两边分别加了等优先级的隔离符(括号)<strong>从而保护两边分别计算</strong>,例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">map ($ 3) [(4+),(10*),(^2),sqrt]-- [7.0,30.0,9.0,1.7320508075688772]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>⚠️但是注意<code>$</code>右结合的,是单值函数(左边是<strong>函数</strong>右边是<strong>单参数</strong>).可能你会想Haskell中的函数本身就是柯里化的函数🙄? 似乎没有什么影响?🤨于是想当然的进行如下改进</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">t :: [(Int, Int)]t &#x3D; zip (map (+ 5) [1 .. 10]) (map (* 5) [10 .. 20])-- 改为 --&gt;t &#x3D; zip $ map (+ 5) [1 .. 10] $ map (* 5) [10 .. 20]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>🤨看起来是可行的</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">-- Step 1zip $ [6..15] $ [10..100]-- Step 2(zip [6..15]) [10..100]-- Step 3newFunction [10..100]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>💀执行就出问题, 别忘了<code>$</code>是低优先级右结合的,Haskell是这么理解代码的</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">-- Step 1 $ 是低优先级的, 其他先计算zip $ [6..15] $ [10..100]-- Step 2 $ 是右结合的...zip ([6..15] $ [10..100])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>左边算出来是个List, 不是<code>$</code>接收的函数, 如何验证呢?这样改</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">t :: [b] -&gt; [(Integer, b)]t &#x3D; zip $ map (+ 5) [1 .. 10]tt :: [(Integer, Integer)]tt &#x3D; t $ map (* 5) [10 .. 20]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上VSCode的HLint插件因为给我们提示</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">However, $ has low, right-associative binding precedence, so it sometimes allows parentheses to be omitted; for example:f $ g $ h x  &#x3D;  f (g (h x))It is also useful in higher-order situations, such as map ($ 0) xs, or Data.List.zipWith ($) fs xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>看到了吧, 不能将<code>$</code>了理解为路障🚧,简单的将代码左右加上括号, 而是一个网🕸️,将<code>$</code>后面的都包起来</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">f $ g x $ h x --理解为--&gt; f (g x) (h x)  💩f $ g x $ h x --理解为--&gt; f (g x (h x))  👍<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><del>毕竟<code>$</code>💵从来不是障碍🚧,而是陷阱把你包起来🕸️</del></p><p>😲<code>$</code> <strong>还可以将数据作为函数使用</strong>例如映射一个函数调用符到一组函数组成的 List：</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">map ($ 3) [(4+),(10*),(^2),sqrt]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>.</code>调用(Function composition, 函数组合)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">(.) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c-- 注意, 这里要求函数的返回值与下一个函数的参数类型是相同的f . g &#x3D; \x -&gt; f (g x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>与数学中的复合函数类似, 我们可以这样表示组合函数 <spanclass="math display">\[f(g(x)) = (f \circ g)(x)\]</span>在Haskell中我们也可以将<code>f (g x)</code>(或者<code>f $ g x</code>)表示为<code>f . g x</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">f &#x3D; (+ 1)g &#x3D; (* 10)t1 :: Integer -&gt; Integert1 x &#x3D; f (g x)   -- 最简单的形式t2 :: Integer -&gt; Integert2 x &#x3D; f $ g x   -- 把括号干掉-- t2&#39; :: Integer -&gt; Integer-- t2&#39; &#x3D; f $ g   -- Errort3 :: Integer -&gt; Integert3 &#x3D; f . g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们平时写的是<code>t1</code>的形式, 为了方便的写<spanclass="math inline">\(f ( g (x) )\)</span>, 我们引入<code>$</code>.并实现了<code>t2</code>形式</li><li>我们想换成<span class="math inline">\((f \circ g)(x)\)</span>形式,这时就需要<code>.</code>运算</li></ul><p>看起来<code>.</code>, <code>$</code>是等价的互换形式(<code>$</code>,<code>.</code>都是右结合的), 但是他们的类型有很大的区别</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">($) :: (a -&gt; b) -&gt; a -&gt; b(.) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>$</code>接收<strong>函数与变量</strong>,返回一个<strong>变量</strong></li><li><code>.</code>接收<strong>两个函数</strong>,返回一个<strong>函数</strong></li></ul><p>没人说变量不能是一个函数, 函数不能是变量,直觉看起来<code>$</code>用于表达式<code>.</code>用于函数, 例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">map (\xs -&gt; negate (sum (tail xs))) [[1..5],[3..6],[1..7]]-- 优化为 --&gt;map (negate . sum . tail) [[1..5],[3..6],[1..7]][-14,-15,-27]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于多参函数, 我们可以借用<code>()</code>或<code>$</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">sum (replicate 5 (max 6.7 8.9))(sum . replicate 5 . max 6.7) 8.9sum . replicate 5 . max 6.7 $ 8.9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>😲<code>.</code><strong>另一用途就是定义point free style</strong></p><ul><li><p>感谢柯里化函数,当函数参数按顺序仅仅出现在实现的尾部时候时我们可以将参数省略, 例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">myFun :: (Ord a) &#x3D;&gt; a -&gt; a -&gt; amyFun x y &#x3D; max x y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>简化为</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">myFun :: (Ord a) &#x3D;&gt; a -&gt; a -&gt; amyFun &#x3D; max<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果参数顺序出现, 但是参数在括号内部呢?</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">myFun x y &#x3D; (* 2) (max x y)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>.</code>将一个参数从括号中解放出来</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">myFun x &#x3D; (* 2) . max x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>.</code>是右结合的, 所以我们只能解放一个参数</p><p>这样的省略参数形式就是point free style</p></li></ul></li></ul><h3 id="模块">模块</h3><p>Haskell 中的模块是含有一组相关的函数，型别和型别类的组合。而 Haskell进程的本质便是从主模块中引用其它模块并调用其中的函数来执行操作。其中缺省自动加载的函数均在<code>Prelude</code>模块中.Haskell模块加载规则与Python类似</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import Data.List             -- 加载List模块import Data.List(sort, nub)   -- 仅加载List模块的sort&amp;nubimport Data.List hiding (nub) -- 引入除nub外的List模块(一般用于名字冲突)sort [1,2,3]     -- 直接调用即可, 无需模块名import qualified Data.Map     -- 引入Map模块, 但是使用需要指明模块(用于名字冲突)Data.Map.sort [1,2,3]     -- 指明模块名引入import qualified Data.Map as M -- 指明缩写M.sort [1,2,3]     -- 指明模块名引入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>ghci</code>中可以采用<code>:m 模块 [模块...]</code>的方式加载</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">:m Data.List Data.Map Data.Set<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="data.list模块"><code>Data.List</code>模块</h4><blockquote><p>源码见: <span class="exturl" data-url="aHR0cHM6Ly9oYWNrYWdlLmhhc2tlbGwub3JnL3BhY2thZ2UvYmFzZS00LjE2LjAuMC9kb2NzL3NyYy9EYXRhLUxpc3QuaHRtbA==">List<i class="fa fa-external-link-alt"></i></span><span class="exturl" data-url="aHR0cHM6Ly9oYWNrYWdlLmhhc2tlbGwub3JnL3BhY2thZ2UvYmFzZS00LjE2LjAuMC9kb2NzL3NyYy9EYXRhLU9sZExpc3QuaHRtbA==">OldList<i class="fa fa-external-link-alt"></i></span></p><p>两个模块关系:</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import Data.OldList hiding ( all, and, any, concat, concatMap, elem, find,                             foldl, foldl1, foldl&#39;, foldr, foldr1, mapAccumL,                             mapAccumR, maximum, maximumBy, minimum, minimumBy,                             length, notElem, null, or, product, sum )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><p><code>intersperse</code>:</p><p>将元素置于 List 中每<strong>对</strong>元素的中间</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">intersperse&#39; :: a -&gt; [a] -&gt; [a]intersperse&#39; _ [] &#x3D; []intersperse&#39; _ [x] &#x3D; [x]intersperse&#39; e (x : xs) &#x3D; x : e : intersperse&#39; e xsintersperse&#39;&#39; :: a -&gt; [a] -&gt; [a]intersperse&#39;&#39; _ [] &#x3D; []intersperse&#39;&#39; e arr &#x3D; init $ foldr (\x aac -&gt; x : e : aac) [] arr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>intercalate</code> 取两个 List 作参数. 它会将第一个 List交叉插入第二个 List 中间，并返回一个 List.</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">intercalate&#39; :: [a] -&gt; [[a]] -&gt; [a]intercalate&#39; _ [] &#x3D; []intercalate&#39; _ [x] &#x3D; xintercalate&#39; item (x : xs) &#x3D; x ++ item ++ intercalate&#39; item xsintercalate&#39;&#39; :: [a] -&gt; [[a]] -&gt; [a]intercalate&#39;&#39; item xs &#x3D; take (length mid - length item) mid  where    mid &#x3D; foldl (\aac x -&gt; aac ++ x ++ item) [] xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>transpose</code> 函数可以反转一组 List 的 List. 你若把一组List 的 List 看作是个 2D 的矩阵，那 <code>transpose</code>的操作就是将其列转为行</p><p>尝试实现一下</p><ul><li><p>最开始我想不到可以同时操作多数组同一位置的方法,于是借助命令式编程的方法愚蠢实现🙃(使用List.Range实现循环)</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">transpose :: [[a]] -&gt; [[a]]transpose xss &#x3D; [heads cur xss | cur &lt;- [0 .. (max2D xss - 1)]]  where    max2D xss &#x3D; foldl max 0 (map length xss)    heads cur xss&#39; &#x3D; flat (map (\xs -&gt; if length xs &lt;&#x3D; cur then [] else [xs !! cur]) xss&#39;)      where        flat [] &#x3D; []        flat (x : xs) &#x3D; x ++ flat xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>后来想到</p><p>🤔如果这是C语言, 那么二维数组本质就是一维数组组合,所以可以将第二行同一位置的元素移动到上一行同位置右边实现</p><p>但是在Haskell中没有指针这么底层的东西把线性结构分为二维数组,但是我们可以手动分界</p><p>😎<code>transpose'</code>实现原理大概是</p><ol type="1"><li><p>将数组转为3D</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">[    [1,2,3],    [4,5,6],    [7,8,9]]--&gt;[    [[1],[2],[3]],    [[4],[5],[6]],    [[7],[8],[9]]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>两两合并</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">[    [[1],[2],[3]],    [[4],[5],[6]],    [[7],[8],[9]]]--&gt;[    [[1,4],[2,5],[3,6]],    [[7],[8],[9]]]--&gt;[    [[1,4,7],[2,5,8],[3,6,9]],]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p><code>transpose'''</code>就是将不同长度数组都<code>repeat</code>到等长</p></li></ol><p>于是得到</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">-- 普通款👇----- 合并两行 [7,8,9]-&gt;[[1,4],[2,5],[3,6]]-&gt;[[1,4,7],[2,5,8],[3,6,9]]mergeRow :: [[a]] -&gt; [[a]] -&gt; [[a]]mergeRow &#x3D; zipWith (++)----- 将一个一维数组转化为二位 [1,2,3] -&gt; [[1],[2],[3]]form2D :: [a] -&gt; [[a]]form2D &#x3D; map (: [])transpose&#39; :: [[a]] -&gt; [[a]]transpose&#39; &#x3D; foldl1 mergeRow . stakedForm  where    stakedForm &#x3D; map form2D-- 压行款👇😎transpose&#39;&#39; :: [[a]] -&gt; [[a]]transpose&#39;&#39; &#x3D; foldl1 (zipWith (++)) . map (map (: []))-- 解决对不齐👇transpose&#39;&#39;&#39; :: [[a]] -&gt; [[a]]transpose&#39;&#39;&#39; &#x3D; foldl1 mergeRow&#39; . stakedForm  where    stakedForm &#x3D; map $ map (: [])    mergeRow&#39; xs1 xs2 &#x3D; takeWhile (not . null) . zipWith (++) (infForm xs1) $ infForm xs2      where        infForm &#x3D; (++ repeat [])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>😒但是不够函数化,我们相当于告诉Haskell执行的方式就是把两个List连起来,继续进行一下优化</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">transpose&#39;&#39;&#39;&#39; :: [[a]] -&gt; [[a]]transpose&#39;&#39;&#39;&#39; xs  where    zipWith&#39; _ [] yys &#x3D; yys    zipWith&#39; _ xxs [] &#x3D; [[xx] | xx &lt;- xxs]    zipWith&#39; f (xx : xxs) (yy : yys) &#x3D; f xx yy : zipWith&#39; f xxs yystranspose&#39;&#39;&#39;&#39; [] &#x3D; []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li></ul></li><li><p><code>concat</code>将List连起来(去除一层嵌套)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">concat&#39; :: [[a]] -&gt; [a]concat&#39; &#x3D; foldl1 (++)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>concatMap</code>将List转换为二维List再<code>concat</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">concatMap&#39; :: [a -&gt; [b]] -&gt; [a] -&gt; [b]concatMap&#39; f &#x3D; concat . (map f)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>and</code>取一组布尔值<code>List</code>作参数.只有其中的值全为<code>True</code>的情况下才会返回<code>True</code>.</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">and&#39; :: [Bool] -&gt; Booland&#39; &#x3D; foldl1 (&amp;&amp;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>or</code>一组布尔值<code>List</code>中若存在一个<code>True</code>它就返回<code>True</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">or&#39; :: [Bool] -&gt; Boolor&#39; &#x3D; foldl1 (||)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>any</code>与<code>all</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">any&#39; :: [a -&gt; Bool] -&gt; [a]any&#39; f &#x3D; or . (map f)all&#39; :: [a -&gt; Bool] -&gt; [a]all&#39; f &#x3D; and . (map f)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>iterate</code>: 取一个函数和一个值作参数.它会用该值去调用该函数并用所得的结果再次调用该函数，产生一个无限的List.</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">iterate&#39; :: (a -&gt; a) -&gt; a -&gt; [a]iterate&#39; f x &#x3D; x : iterate&#39; f (f x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>splitAt</code>取一个 List 和数值作参数，将该 List在特定的位置断开。返回一个包含两个 List 的二元组.</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">splitAt&#39; :: Int -&gt; [b] -&gt; ([b], [b])splitAt&#39; n xs &#x3D; (lefts xs, rights)  where    len &#x3D; max 0 $ min (length xs) n    lefts &#x3D; take len    rights &#x3D; reverse . take (length xs - len) $ reverse xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">let (a,b) &#x3D; splitAt 3 &quot;foobar&quot; in b ++ a-- &quot;barfoo&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>takeWhile</code>从一个 List中取元素，一旦遇到不符合条件的某元素就停止.</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">takeWhile&#39; :: (a -&gt; Bool) -&gt; [a] -&gt; [a]takeWhile&#39; f (x : xs)  | f x &#x3D; x : takeWhile&#39; f xs  | otherwise &#x3D; []takeWhile&#39; _ [] &#x3D; []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>dropWhile</code>与<code>takeWhile</code>相似，不过是扔掉符合条件的元素。一旦限制条件返回<code>False</code>，它就返回 List 的余下部分.</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">dropWhile&#39; :: (a -&gt; Bool) -&gt; [a] -&gt; [a]dropWhile&#39; f (x : xs)  | f x &#x3D; dropWhile&#39; f xs  | otherwise &#x3D; xsdropWhile&#39; _ [] &#x3D; []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>span</code>与<code>break</code>返回首次失败/成功左右数据</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">span&#39; :: (a -&gt; Bool) -&gt; [a] -&gt; ([a], [a])span&#39; f xs &#x3D; (takeWhile f xs, dropWhile f xs)break&#39; :: (a -&gt; Bool) -&gt; [a] -&gt; ([a], [a])break&#39; f &#x3D; span (not . f)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>sort</code>排序一个<code>List</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">sort&#39; :: (Ord a)&#x3D;&gt;[a] -&gt; [a]sort&#39; (tar:xs) &#x3D; lowers ++ [tar] ++ uppers  where lowers &#x3D; sort&#39; [x|x&lt;-xs, x&lt;&#x3D;tar]        uppers &#x3D; sort&#39; [x|x&lt;-xs, x&gt;tar]sort&#39; [] &#x3D; []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>group</code>取一个 List作参数，并将其中相邻并相等的元素各自归类，组成一个个子 List.</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">group&#39; :: Eq a &#x3D;&gt; [a] -&gt; [[a]]group&#39; (x : xs)  | null res &#x3D; [[x]]  | x &#x3D;&#x3D; head headx &#x3D; (x : headx) : tail res  | otherwise &#x3D; [x] : res  where    res &#x3D; group&#39; xs    headx &#x3D; head resgroup&#39; [] &#x3D; []-- 看下源码的实现模式group&#39; :: Eq a &#x3D;&gt; [a] -&gt; [[a]]group&#39; [] &#x3D; []group&#39; (x : xs) &#x3D; (x : ys) : group&#39; zs  where    (ys, zs) &#x3D; span (&#x3D;&#x3D; x) xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>统计元素出现次数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; map (\l@(x:xs) -&gt; (x,length l)) . group . sort $ [1,1,1,1,2,2,2,2,3,3,2,2,2,5,6,7]-- [(1,4),(2,7),(3,2),(5,1),(6,1),(7,1)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>inits</code> 和 <code>tails</code> 与 <code>init</code> 和<code>tail</code> 相似，只是它们会递归地调用自身直到什么都不剩</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">inits&#39; :: [a] -&gt; [[a]]inits&#39; xs &#x3D; scanr (\_ acc -&gt; init acc) xs xstails&#39; :: [a] -&gt; [[a]]tails&#39; xs &#x3D; scanl (\acc _ -&gt; tail acc) xs xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>isInfixOf</code>数组模式匹配</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import Data.List (tails)isInfixOf&#39; :: Eq a &#x3D;&gt; [a] -&gt; [a] -&gt; BoolisInfixOf&#39; needle haystack &#x3D; foldl (\acc x -&gt; acc || take len x &#x3D;&#x3D; needle) False $ tails haystack  where    len &#x3D; length needle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>isPrefixOf</code>与<code>isSuffixOf</code>分别检查一个 List是否以某子 List 开头或者结尾.</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">isPrefixOf&#39; :: (Eq a) &#x3D;&gt; [a] -&gt; [a] -&gt; BoolisPrefixOf&#39; needle haystack &#x3D; needle &#x3D;&#x3D; take len haystack  where    len &#x3D; length needleisSuffixOf&#39; :: (Eq a) &#x3D;&gt; [a] -&gt; [a] -&gt; BoolisSuffixOf&#39; needle haystack &#x3D; reverse needle &#x3D;&#x3D; take len (reverse haystack)  where    len &#x3D; length needle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>elem</code>与<code>notElem</code>检查一个 List是否包含某元素.</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">elem&#39; :: Eq a &#x3D;&gt; a -&gt; [a] -&gt; Boolelem&#39; v &#x3D; foldl (\acc x -&gt; acc || x &#x3D;&#x3D; v) FalsenotElem&#39; :: Eq a &#x3D;&gt; a -&gt; [a] -&gt; BoolnotElem&#39; v xs &#x3D; not (elem&#39; v xs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>partition</code> 取一个限制条件和 List 作参数，返回两个List，第一个 List 中包含所有符合条件的元素，而第二个 List中包含余下的.</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">partition&#39; :: (a -&gt; Bool) -&gt; [a] -&gt; ([a], [a])partition&#39; p &#x3D; foldr (select&#39; p) ([], [])select&#39; :: (a -&gt; Bool) -&gt; a -&gt; ([a], [a]) -&gt; ([a], [a])select&#39; p x (ts, fs)  | p x &#x3D; (x : ts, fs)  | otherwise &#x3D; (ts, x : fs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>partition</code>与<code>span</code> 和 <code>break</code> 不同,<code>span</code> 和 <code>break</code>会在遇到第一个符合或不符合条件的元素处断开，而 <code>partition</code>则会遍历整个 List</p></li><li><p><code>find</code> 取一个 List和限制条件作参数，并返回首个符合该条件的元素，而这个元素是个<code>Maybe</code> 值，<code>Maybe</code> 值是<code>Just something</code> 或 <code>Nothing</code>。与一个 List可以为空也可以包含多个元素相似，一个 <code>Maybe</code>可以为空，也可以是单一元素。同样与 List 类似，一个 Int 型的 List可以写作 <code>[Int]</code>，<code>Maybe</code>有个 Int 型可以写作<code>Maybe Int</code>。先试一下 <code>find</code> 函数再说.</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">find (&gt;4) [1,2,3,4,5,6]-- Just 5find (&gt;9) [1,2,3,4,5,6]-- Nothing:t find-- find :: (a -&gt; Bool) -&gt; [a] -&gt; Maybe a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>elemIndex</code> 与 <code>elem</code>相似，只是它返回的不是布尔值，它只是'可能'(Maybe)返回我们找的元素的索引，若这一元素不存在，就返回<code>Nothing</code>。</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">:t elemIndexelemIndex :: (Eq a) &#x3D;&gt; a -&gt; [a] -&gt; Maybe Int4 &#96;elemIndex&#96; [1,2,3,4,5,6]-- Just 310 &#96;elemIndex&#96; [1,2,3,4,5,6]-- Nothing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>elemIndices</code>与 <code>elemIndex</code>相似，只不过它返回的是所有满足条件的<code>List</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">elemIndices&#39; :: (Eq a) &#x3D;&gt; a -&gt; [a] -&gt; [Integer]elemIndices&#39; target xs &#x3D; [cur| (x, cur) &lt;- zip xs [0..], x &#x3D;&#x3D; target]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>findIndex</code>与<code>elemIndices</code>类似,但之返回第一个满足条件的索引的Maybe</p></li><li><p><code>zip*</code>,<code>zipWith*</code>支持多数组<code>zip</code>(最大到<code>zip7</code>)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">zip4 [2,3,3] [2,2,2] [5,5,3] [2,2,2]-- [(2,2,5,2),(3,2,5,2),(3,2,3,2)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>lines</code>根据换行符<code>split</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">lines&#39; :: String -&gt; [String]lines&#39; xs  | null snds &#x3D; [fsts]  | otherwise &#x3D; fsts : lines&#39; (tail snds)  where    (fsts, snds) &#x3D; span (&#x2F;&#x3D; &#39;\n&#39;) xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>unlines</code>是 <code>lines</code>的反函数，它取一组字串的 <code>List</code>，并将其通过<code>'\n'</code>合并到一块.</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">unlines&#39; :: [String] -&gt; Stringunlines&#39; &#x3D; foldl (\acc x -&gt; acc ++ x ++ [&#39;\n&#39;]) &quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>words</code>和<code>unwords</code>可以把一个字串分为一组单词或执行相反的操作</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">words &quot;hey these are the words in this\nsentence&quot;-- [&quot;hey&quot;,&quot;these&quot;,&quot;are&quot;,&quot;the&quot;,&quot;words&quot;,&quot;in&quot;,&quot;this&quot;,&quot;sentence&quot;]unwords [&quot;hey&quot;,&quot;there&quot;,&quot;mate&quot;]-- &quot;hey there mate&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中间隔符判断采用<code>Data.Char.isSpace</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">isSpace c  | uc &lt;&#x3D; 0x377 &#x3D; uc &#x3D;&#x3D; 32 || uc - 0x9 &lt;&#x3D; 4 || uc &#x3D;&#x3D; 0xa0  | otherwise &#x3D; iswspace (ord c) &#x2F;&#x3D; 0  where    uc &#x3D; fromIntegral (ord c) :: Word<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即全部Unicode空格与 <code>\t</code>, <code>\n</code>,<code>\r</code>, <code>\f</code>, <code>\v</code></p></li><li><p><code>delete</code>取一个元素和 List 作参数，会删掉该 List中首次出现的这一元素.</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">delete &#39;h&#39; &quot;hey there ghang!&quot;-- &quot;ey there ghang!&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>\</code>类似查集, 在插入时检查元素是否已经存在,⚠但不去重左操作数, 不去重右操作数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; [1,2,2,3] \\ [2,2,3,3,4]-- [1]ghci&gt; [1,2,2,3] \\ [2,3,3,4]-- [1,2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>union</code>类似并集, 在插入时检查元素是否已经存在,⚠不去重左操作数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">[1,2,3,3] &#96;union&#96; [2,2,5,9]-- [1,2,3,3,5,9]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>intersect</code>类似交集, 在插入时检查元素是否已经存在,⚠不去重左操作数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">intersect [1,2,2,3] [2,2,2,3,3,4]-- [2,2,3]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>insert</code>可以将一个元素插入一个<strong>可排序(而不是已排序)</strong>的<code>List</code>,并将其置于首个大于等于它的元素之前，如果使用 <code>insert</code>来给一个排过序的 List 插入元素，返回的结果依然是排序的.</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">insert 4 [1,2,3,5,6,7]--[1,2,3,4,5,6,7]insert &#39;g&#39; $ [&#39;a&#39;..&#39;f&#39;] ++ [&#39;h&#39;..&#39;z&#39;]-- &quot;abcdefghijklmnopqrstuvwxyz&quot;insert 3 [1,2,4,3,2,1]-- [1,2,3,4,3,2,1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>length</code>,<code>take</code>,<code>drop</code>,<code>splitAt</code>,<code>!!</code>,<code>replicate</code>都有一个<code>generic*</code>版本,区别就是将类型参数中的<code>Int</code>替换为<code>Num</code>, 例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">:t genericLength-- genericLength :: Num i &#x3D;&gt; [a] -&gt; i:t length-- length :: Foldable t &#x3D;&gt; t a -&gt; Int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>nub</code>, <code>delete</code>, <code>union</code>,<code>intsect</code> , <code>group</code> 都有<code>*By</code>版本,它们的区别就是前一组函数使用 <code>(==)</code> 来测试是否相等，而带<code>By</code> 的那组则取一个函数作参数来判定相等性，<code>group</code>就与 <code>groupBy (==)</code> 等价</p><p>例如将相邻且同号元素放一起</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">let values &#x3D; [-4.3,-2.4,-1.2,0.4,2.3,5.9,10.5,29.1,5.3,-2.4,-14.5,2.9,2.3]groupBy (\x y -&gt; (x &gt; 0) &#x3D;&#x3D; (y &gt; 0)) values-- [[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>on</code>函数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">on :: (b -&gt; b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; a -&gt; cf &#96;on&#96; g &#x3D; \x y -&gt; f (g x) (g y)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例如上面功能可以些为</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">groupBy ((&#x3D;&#x3D;) &#96;on&#96; (&gt; 0)) values-- [[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>sort</code>，<code>insert</code>，<code>maximum</code>,<code>min</code>都有<code>*By</code>,判别函数返回<code>Ordering</code>类型(<code>LT</code>,<code>EQ</code>,<code>GT</code>)</p><p>例如按照<code>List</code>长度将二维<code>List</code>排序</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">xs &#x3D; [[5,4,5,4,4],[1,2,3],[3,5,4,3],[],[2],[2,2]]sortBy (compare &#96;on&#96; length) xs-- [[],[2],[2,2],[1,2,3],[3,5,4,3],[5,4,5,4,4]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="data.char模块"><code>Data.Char</code>模块</h4><ul><li><p>范围判断函数</p><ul><li><code>isControl</code>: 是否是控制字</li><li><code>isSpace</code>: 是否是空格</li><li><code>isUper</code>: 是否为大写</li><li><code>isAlpha</code>: 是否为字母</li><li><code>isAlphaNum</code>: 是否为字母或数字</li><li><code>isPrint</code>: 是否是可打印的</li><li><code>isDigit</code>: 是否为数字.</li><li><code>isOctDigit</code>: 是否为八进制数字</li><li><code>isHexDigit</code>: 是否为十六进制数字</li><li><code>isLetter</code>: 是否为字母</li><li><code>isMark</code>: 是否为<code>unicode</code>注音字符(如:<code>é</code>).</li><li><code>isNumber</code>: 是否为数字</li><li><code>isPunctuation</code>:是否为标点符号</li><li><code>isSymbol</code>: 是否为货币符号</li><li><code>isSeperater</code>:是否为<code>unicode</code>空格或分隔符.</li><li><code>isAscii</code>: 是否在<code>unicode</code>字母表的前 128位</li><li><code>isLatin1</code>: 是否在<code>unicode</code>字母表的前 256位.</li><li><code>isAsciiUpper</code>: 是否为大写的 ascii 字符</li><li><code>isAsciiLower</code>: 是否为小写的 ascii 字符</li></ul><p>实现<code>words</code>函数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">words xs&#x3D; filter (not . any isSpace) . groupBy ((&#x3D;&#x3D;) &#96;on&#96; isSpace) $ xs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><code>generalCategory</code>获取字符属于哪个分类,函数类型为<code>generalCategory :: Char -&gt; GeneralCategory</code>,这里的<code>GeneralCategory</code>与<code>Ordering</code>类似,为枚举类型</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; generalCategory &#39; &#39;Spaceghci&gt; generalCategory &#39;A&#39;UppercaseLetterghci&gt; generalCategory &#39;a&#39;LowercaseLetterghci&gt; generalCategory &#39;.&#39;OtherPunctuationghci&gt; generalCategory &#39;9&#39;DecimalNumberghci&gt; map generalCategory &quot; \t\nA9?|&quot;[Space,Control,Control,UppercaseLetter,DecimalNumber,OtherPunctuation,MathSymbol]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>转换函数</p><ul><li><code>toUpper</code>: 将一个字符转为大写字母</li><li><code>toLower</code>: 将一个字符转为小写字母</li><li><code>toTitle</code>:将一个字符转为<code>title-case</code>，对大多数字元而言，<code>title-case</code>就是大写.</li><li><code>digitToInt</code>:将一个<strong>字符(不支持字符串)</strong>转为<code>Int</code>值，而这一字符必须得在<code>'1'..'9','a'..'f'</code>或<code>'A'..'F'</code>的范围之内(相当于转换为16进制, 但因为是给字符转换, 所以没什么问题)</li><li><code>intToDigit</code>是<code>digitToInt</code>的反函数, 取一个<code>0</code> 到 <code>15</code> 的 <code>Int</code>值作参数，并返回一个小写的字符.</li><li><code>ord</code>与<code>char</code>函数可以将字符与其对应的数字相互转换.</li></ul></li></ul><h4 id="data.map模块"><code>Data.Map</code>模块</h4><p>通过树实现的Map. 由于Map中函数与其他函数冲突较多,最好采用<code>qualified import</code></p><ul><li><p><code>fromList</code>: <code>List</code>转<code>Map</code>,List为K-V二元组, Key相同会覆盖</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">Map.fromList :: (Ord k) &#x3D;&gt; [(k,v)] -&gt; Map.Map k vMap.fromList [(&quot;betty&quot;,&quot;555-2938&quot;),(&quot;bonnie&quot;,&quot;452-2928&quot;),(&quot;lucille&quot;,&quot;205-2928&quot;),(&quot;lucille&quot;,&quot;205-000&quot;)]-- fromList [(&quot;betty&quot;,&quot;555-2938&quot;),(&quot;bonnie&quot;,&quot;452-2928&quot;),(&quot;lucille&quot;,&quot;205-000&quot;)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>fromListWith</code>用来解决重复K的问题</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import qualified Data.Map as Mres &#x3D; M.fromListWith (\v1 v2 -&gt; v1 ++ &quot;, &quot; ++ v2) [(&quot;betty&quot;, &quot;555-2938&quot;), (&quot;bonnie&quot;, &quot;452-2928&quot;), (&quot;lucille&quot;, &quot;205-2928&quot;), (&quot;lucille&quot;, &quot;205-000&quot;)]-- fromList [(&quot;betty&quot;,&quot;555-2938&quot;),(&quot;bonnie&quot;,&quot;452-2928&quot;),(&quot;lucille&quot;,&quot;205-000, 205-2928&quot;)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>empty</code>返回空<code>Map</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">empty-- fromList []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>insert K V</code>插入</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">Map.insert 3 100 Map.empty-- fromList [(3,100)]Map.insert 5 600 (Map.insert 4 200 ( Map.insert 3 100  Map.empty))-- fromList [(3,100),(4,200),(5,600)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>insertWith</code>用于处理重复K</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import qualified Data.Map as Mres &#x3D; M.insertWith (+) 3 100 $ M.fromList [(3, 4), (5, 103), (6, 339)]-- fromList [(3,104),(5,103),(6,339)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>null</code>判空Map</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">Data.Map.null empty-- True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>size</code>返回Map大小</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">Data.Map.size $ Data.Map.fromList [(2,4),(3,3),(4,2),(5,4),(6,4)]-- 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>singleton K V</code>返回一个K-V的Map</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">Map.singleton 3 9-- fromList [(3,9)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>lookup K</code>返回<code>Maybe V</code>/<code>Nothing</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import qualified Data.Map as Mt &#x3D; M.fromList [(&quot;betty&quot;, &quot;555-2938&quot;), (&quot;bonnie&quot;, &quot;452-2928&quot;), (&quot;lucille&quot;, &quot;205-2928&quot;), (&quot;lucille&quot;, &quot;205-000&quot;)]res &#x3D; M.lookup &quot;bonnie&quot; t-- Just &quot;452-2928&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>member K map</code>判断Ke y是否存在</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import qualified Data.Map as Mt &#x3D; M.fromList [(&quot;betty&quot;, &quot;555-2938&quot;), (&quot;bonnie&quot;, &quot;452-2928&quot;), (&quot;lucille&quot;, &quot;205-2928&quot;), (&quot;lucille&quot;, &quot;205-000&quot;)]res &#x3D; M.member &quot;bonnie&quot; t<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>map</code>, <code>filter</code>同<code>List</code></p></li><li><p><code>toList</code> 是 <code>fromList</code> 的反函数。</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">Map.toList . Map.insert 9 2 $ Map.singleton 4 3-- [(4,3),(9,2)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><code>keys</code>/<code>elems</code>返回<code>K/V</code>组成的<code>List</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import qualified Data.Map as Mt &#x3D; M.fromList [(&quot;betty&quot;, &quot;555-2938&quot;), (&quot;bonnie&quot;, &quot;452-2928&quot;), (&quot;lucille&quot;, &quot;205-2928&quot;), (&quot;lucille&quot;, &quot;205-000&quot;)]res &#x3D; M.elems t-- [&quot;555-2938&quot;,&quot;452-2928&quot;,&quot;205-000&quot;]res&#39; &#x3D; M.keys t-- [&quot;betty&quot;,&quot;bonnie&quot;,&quot;lucille&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="data.set-模块"><code>Data.Set</code> 模块</h4><p>使用树实现的集合, 建议使用<code>qualified import</code>引入</p><ul><li><p><code>fromList</code>, <code>List</code>转<code>Set</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import qualified Data.Set as Sa &#x3D; S.fromList [1,2,3,4,3,2,1]-- fromList [1,2,3,4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>intersection</code>交集, <code>difference</code>差集</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import qualified Data.Set as Sa &#x3D; S.fromList [1, 2, 3, 4, 3, 2, 1]b &#x3D; S.fromList [1, 2, 2, 1]S.intersection a b-- fromList [1,2]S.difference a b-- fromList [3,4]S.union a b-- fromList [1,2,3,4]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>null</code>, <code>size</code>, <code>member</code>,<code>empty</code>, <code>singleton</code>, <code>insert</code>,<code>delete</code>与List类似</p></li><li><p><code>isSubsetOf</code>,<code>isProperSubsetOf</code>判断是不是子集与真子集</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import qualified Data.Set as Sa &#x3D; S.fromList [1, 2, 3, 4, 3, 2, 1]b &#x3D; S.fromList [1, 2, 2, 1]c &#x3D; S.fromList [1, 2]b &#96;S.isSubsetOf&#96; a-- Truec &#96;S.isProperSubsetOf&#96; b-- False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>支持<code>Map</code>, <code>Filter</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import qualified Data.Set as SS.filter odd $ S.fromList [3, 4, 5, 6, 7, 2, 3, 4]-- fromList [3,5,7]S.map (+ 1) $ S.fromList [3, 4, 5, 6, 7, 2, 3, 4]-- fromList [3,4,5,6,7,8]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通常使用<code>Set</code>完成<code>List</code>的去重操作,其速度优于<code>List.nub</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">setNub xs &#x3D; Set.toList $ Set.fromList xs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>唯一的缺点是会丢失顺序</p></li></ul><h4 id="声明模块">声明模块</h4><ul><li><p>声明单模块</p><ul><li><p>创建文件, 文件名为<code>模块名.hs</code>,模块名需开头大写</p></li><li><p>文件首部写出模块名与需要导出的方法, 例如<code>Demo.hs</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">module Demo  ( demo1,    demo2,  )wheredemo1 :: Integer -&gt; Integerdemo1 &#x3D; demo3 . (1 +)demo2 :: Integer -&gt; Integerdemo2 &#x3D; demo3 . (1 -)-- demo3仅作为内部调用使用, 无需导出, 可以不在module中写demo3 :: Integer -&gt; Integerdemo3 &#x3D; (* 2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将模块放在同级目录, 例如</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.├── Demo.hs└── test.hs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>就可以在<code>test.hs</code>中调用</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import Demores :: Integerres &#x3D; demo1 1-- 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>也可以分层设计模块,只需要将其放入子文件中并使用<code>.</code>引入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.├── Demos│   ├── DemoA.hs│   └── DemoB.hs└── test.hs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中</p><ul><li><p><code>DemoA.hs</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">module Demos.DemoA  ( demo1,    demo2,  )wheredemo1 :: Integer -&gt; Integerdemo1 &#x3D; demo3 . (1 +)demo2 :: Integer -&gt; Integerdemo2 &#x3D; demo3 . (1 -)demo3 :: Integer -&gt; Integerdemo3 &#x3D; (* 2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>DemoB.hs</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">module Demos.DemoB  ( demo1,    demo2,  )wheredemo1 :: Integer -&gt; Integerdemo1 &#x3D; demo3 . (2 +)demo2 :: Integer -&gt; Integerdemo2 &#x3D; demo3 . (2 -)demo3 :: Integer -&gt; Integerdemo3 &#x3D; (* 4)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>test.hs</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import qualified Demos.DemoA as Aimport qualified Demos.DemoB as Ba &#x3D; A.demo1 1-- 4b &#x3D; B.demo1 1-- 12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="声明类型与类型类">声明类型与类型类</h3><h4 id="代数数据类型">代数数据类型</h4><p>代数数据类型: 由值的一些集合, 以及这些集合之间的一些函数构成的类型.这些函数都是一阶函数, 不能以其他函数作为参数.</p><ul><li><p>例如<code>Bool</code>类型的定义</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Bool &#x3D; False | True<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><ul><li><p><code>data</code>关键字用于声明新类别</p></li><li><p><code>=</code>右边是<strong>值构造子</strong>,包含了这个类型的所有可能值(即<code>True</code>, <code>False</code>,用<code>|</code>分开)</p></li><li><p>什么是值构造子呢? 听起来很像命令式编程中的构造函数🤔.不妨执行<code>:t False</code>. 得到<code>False :: Bool</code>,我们可以这样想: <code>False</code>是一个函数, 这个函数是一个常函数,不接受任何参数, 返回一个<code>Bool</code>类型的数据</p><p><strong>值构造子的本质是个函数，可以返回一个型别的值</strong></p></li></ul></li><li><p>例如定义一个支持圆形或正方形的<code>Shape</code>类型.</p><ul><li><p>首先我们知道这个类型的取值应该是圆/正方形:</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Shape &#x3D; Circle | Rectangle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li><li><p>有点反直觉,这里的<code>Circle</code>与<code>Rectangle</code>是什么?</p><p>是值构造子, 也就是说他们就是一个一个独立的<strong>值</strong>,这里的<code>Circle</code>和之前的<code>False</code>是一个东西</p></li><li><p>如何表示一个<code>Circle</code>呢,可以使用三个参数(项)表示<code>x, y, r</code>.可以将参数类型附在值构造子后表示这个构造子的类型.同理可以用<code>x1, y1, x2, y2</code>表示长方形</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Shape &#x3D; Circle Float Float Float | Rectangle Float Float Float Float<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p></li><li><p>尝试检查<code>Circle</code>类型:</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">Circle :: Float -&gt; Float -&gt; Float -&gt; Shape<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>是一个函数, 接受三个<code>Float</code>, 返回一个<code>Shape</code>.看起来与命令式编程相差甚远🤔, 我们并没有<strong>实现值构造字</strong>,没有描述我们是如何将三个<code>Float</code>类型的变量表示为一个<code>Shape</code>类型的圆的.别忘了Haskell的函数是纯函数😆. 使用相同的三个参数就可以获取同一个圆.可以这样理解: <code>Circle 1 1 1</code>就代表一个圆,他的类型就是<code>Shape</code>,</p></li></ul></li></ul><p><strong>不要将值构造子与类混淆, 一个很好的方法是记住例子:<code>Bool</code>是类型, <code>True</code>是值构造子</strong>,在函数声明类型的应该使用类型而不是值构造子. 例如:实现获取圆面积的函数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Shape &#x3D; Circle Float Float Float | Rectangle Float Float Float FloatgetCiecleSize :: Shape -&gt; Float       -- 👍getCiecleSize :: Circle -&gt; Float      -- 👎<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>千万不要把值构造子用作类型声明,这就和你将<code>True</code>用作类型声明一样愚蠢</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">tellMessage :: Bool -&gt; String      -- 👍tellMessage :: True -&gt; String      -- 👎tellMessage True &#x3D; &quot;Wow, it is true&quot;tellMessage False &#x3D; &quot;Opps, it is false&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>问题来了, 我们只想计算<code>Circle</code>的面积,但是我们在函数声明的时候只要求参数是<code>Shape</code>,没法过滤<code>Rectangle</code>啊🤯! 好好想想,如果我们只是想实现输入<code>True</code>返回字符串,输入<code>Fasle</code>不管, 应该如何实现呢? 模式匹配</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">tellMessage :: Bool -&gt; StringtellMessage True &#x3D; &quot;Wow, it is true&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一样样的, 不过<code>Circle</code>构造子有参数, 我们要一并匹配</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">getCiecleSize :: Shape -&gt; FloatgetCiecleSize (Circle _ _ r) &#x3D; pi * r ^ 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再实现一个获取<code>Shape</code>面积的方法</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">surface :: Shape -&gt; Floatsurface (Circle _ _ r) &#x3D; pi * r ^ 2surface (Rectangle x1 y1 x2 y2) &#x3D; (abs $ x2 - x1) * (abs $ y2 - y1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>😆最后优化一下, 定义一个<code>Point</code>类</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Point &#x3D; Point Float Floatdata Shape &#x3D; Circle Point Float | Rectangle Point Pointsurface :: Shape -&gt; Floatsurface (Circle _ r) &#x3D; pi * r ^ 2surface (Rectangle (Point x1 y1) (Point x2 y2)) &#x3D; (abs $ x2 - x1) * (abs $ y2 - y1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是类型<code>Point</code>与值构造子<code>Point</code>重名了.没啥稀奇的,</p><ul><li>前面的<code>Point</code>是类型, 用于类型声明,类似于<code>Bool</code></li><li>后面的<code>Point</code>是值构造子, 用于表示值,类似于<code>True</code></li></ul><p>🧰我们还可以将<code>Shape</code>的定义与方法打包成模块</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">module Shapes( Point(..), Shape(..), surface) where<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类型后的<code>(..)</code>表示导出类型的全部值构造子.这样导入者就可以直接定义类型了. 如果我们不希望导入者直接构造实例,我们可以声明像<code>Map.fromList</code>的函数构造类型</p><h4 id="record-syntax">Record Syntax</h4><p>🏷︎Haskell提供了<code>record syntax</code>, 可以在定义类型的同时,为每个字段指定读取器. 就像命令式编程一样, 我们可以为每项赋予标识,例如定义<code>Person</code>类型时, 我们可以写下</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Person &#x3D; Person &#123; firstName :: String                     , lastName :: String                     , age :: Int                     , height :: Float                     , phoneNumber :: String                     , flavor :: String                     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就为<code>Person</code>值构造子参数赋予了标签</p><p>与直接使用<code>Person :: Person String String...</code>声明不同的是<strong><code>Haskell</code>为每一个参数绑定的标识符绑定了一个函数</strong>,例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; :t flavorflavor :: Person -&gt; String<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个函数取<code>Person</code>类型值, 返回这个值中该元素所在位值</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Person &#x3D; Person  &#123; firstName :: String,    lastName :: String,    age :: Int,    height :: Float,    phoneNumber :: String,    flavor :: String  &#125;per &#x3D; Person &quot;Kairui&quot; &quot;Liu&quot; 12 123 &quot;13456789022&quot; &quot;i do not know&quot;flavor per   -- &quot;i do not know&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">flavor&#39; :: Person -&gt; Stringflavor&#39; (Person _ _ _ _ _ f) &#x3D; f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="类型参数">类型参数</h4><p>类似于命令式编程中的"模板", 可以在声明类型的时候加入类型变量参数,例如<code>Maybe</code>类型</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Maybe a &#x3D; Nothing | Just a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接受一个类型参数并在<code>Just</code>中使用,在调用<code>Just X</code>的时候, Haskell会自动判断类型并返回</p><p>甚至可以在类型定义时限定类型变量类型(<strong>但是强烈不建议</strong>),因为在函数类型定义时我们还是需要声明类型的类型类</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data (Ord k) &#x3D;&gt; Map k v &#x3D; ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实现一个矢量加法</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Vector a &#x3D; Vector a a a deriving (Show)plusV :: (Num a) &#x3D;&gt; Vector a -&gt; Vector a -&gt; Vector aplusV (Vector x1 y1 z1) (Vector x2 y2 z2) &#x3D; Vector (x1 + x2) (y1 + y2) (z1 + z2)plusV (Vector 1 2 3) (Vector 1 2 3)-- Vector 2 4 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="递归定义类型">递归定义类型</h4><p>定义值构造子的时候使用本身的类型就构成了数据类型递归定义.</p><ul><li><p>定义一个<code>List</code>.一个<code>List</code>要么是空的<code>[]</code>,要么是<code>elem:List</code></p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data List a &#x3D; Empty | Cons a (List a)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>其中<code>Cons</code>就是<code>:</code></p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; :t (:)(:) :: a -&gt; [a] -&gt; [a]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p>也就是: <code>List</code>有两个值,要么是<code>Empty</code>值构造子要么是<code>Cons</code>值构造子.其中<code>Cons</code>值构造子有两个参数,<code>a</code>与<code>List a</code></p><p>同样也可以使用<code>Record Syntax</code>定义<code>List</code></p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data List a &#x3D; Empty | Cons &#123; listHead :: a, listTail :: List a&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>例如<code>[1,2,3]</code>相当于<code>1:2:3:[]</code></p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">Cons 1 $ Cons 2 $ Cons 3 Empty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>定义<code>++</code></p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">infixr 5  ++(++) :: [a] -&gt; [a] -&gt; [a][]     ++ ys &#x3D; ys(x:xs) ++ ys &#x3D; x : (xs ++ ys)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p></li><li><p>定义搜索二叉树(先不管<code>deriving...</code>)</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data BST a &#x3D; EmptyTree | Node a (BST a) (BST a) deriving (Show, Eq)-- 获取单元素getOne :: a -&gt; BST agetOne a &#x3D; Node a EmptyTree EmptyTreeinsertNode :: (Ord a, Eq a) &#x3D;&gt; a -&gt; BST a -&gt; BST ainsertNode x EmptyTree &#x3D; getOne xinsertNode x (Node a lt rt)  | x &lt; a &#x3D; Node a (insertNode x lt) rt  | x &gt; a &#x3D; Node a lt (insertNode x rt)  | x &#x3D;&#x3D; a &#x3D; Node a lt rtelemNode :: (Ord a, Eq a) &#x3D;&gt; a -&gt; BST a -&gt; BoolelemNode x EmptyTree &#x3D; FalseelemNode x (Node a lt rt)  | x &#x3D;&#x3D; a &#x3D; True  | x &lt; a &#x3D; elemNode x lt  | x &gt; a &#x3D; elemNode x rtt1 :: BST Integert1 &#x3D; insertNode 10 . insertNode 5 $ getOne 7-- Node 7 (Node 5 EmptyTree EmptyTree) (Node 10 EmptyTree EmptyTree)t2 :: Boolt2 &#x3D; elemNode 3 t1-- Falset3 :: Boolt3 &#x3D; elemNode 10 t1-- True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li></ul><h4 id="类型别名">类型别名</h4><p>👻与命令式编程中类型别名类似.</p><ul><li><p>看看<code>String</code>语法糖是如何定义的</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">type String &#x3D; [Char]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>就是将类型映射到另一个类型组</p></li><li><p>定义一个电话簿</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">-- 正常款phoneBook :: [(String,String)]phoneBook &#x3D;    [(&quot;betty&quot;,&quot;555-2938&quot;)    ,(&quot;penny&quot;,&quot;853-2492&quot;)    ]-- 别名款type PhoneBook &#x3D; [(String,String)]-- Record Syntax 别名款type PhoneNumber &#x3D; Stringtype Name &#x3D; Stringtype PhoneBook &#x3D; [(Name,PhoneNumber)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li></ul><h4 id="派生">派生</h4><p>类似命令式编程的接口与派生,在Haskell中当类型可以通过派生的方式归属于一个类型类</p><p><strong>我们只讨论如何声明类型为预定于<code>Type Classes</code></strong>,不过等自己会定义<code>Type Class</code>时自然也就会派生了</p><p>类型是可以属于一个类型类的(例如<code>Bool</code>是一个<code>Eq</code>类型类的),我们也可以声明自己的类型属于某个类型类. 例如</p><ul><li><p>定义<code>Shape</code>派生自<code>Show</code>(使其可以被打印)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Shape &#x3D; Circle Float Float Float | Rectangle Float Float Float Float deriving (Show)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只需使用<code>deriving (Show)</code>即可声明类型派生自<code>Show</code>.之后就可以在<code>ghci</code>中打印<code>Shape</code>了</p><p>🎁同时, 若类似是通过<code>Record Syntax</code>定义的 ,<code>show</code>到处的形式会略有不同</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Shape &#x3D; Circle Float Float Float | Rectangle Float Float Float Float deriving (Show)data Shape&#39; &#x3D; Circle&#39; &#123;x :: Float, y :: Float, r :: Float&#125; | Rectangle&#39; &#123;x1 :: Float, y1 :: Float, x2 :: Float, y2 :: Float&#125; deriving (Show)t &#x3D; show (Circle 1 2 3)-- &quot;Circle 1.0 2.0 3.0&quot;t&#39; &#x3D; show (Circle&#39; 1 2 3)-- &quot;Circle&#39; &#123;x &#x3D; 1.0, y &#x3D; 2.0, r &#x3D; 3.0&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>🤔有点小问题,从头到尾我们都没有实现<code>Show</code>类型类中的一个函数啊.怎么就打印出来了呢?</p><p>这是因为<code>Show</code>类型类中存在默认实现, 我们也可以手动重写</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Shape &#x3D; Circle Float Float Float | Rectangle Float Float Float Float    -- 注意没有&quot;deriving&quot;-- 实现接口instance Show Shape where  show (Circle x y r) &#x3D; &quot;Look! it is a circle, with origin (&quot; ++ show x ++ &quot;, &quot; ++ show y ++ &quot;), and r &#x3D; &quot; ++ show r  show (Rectangle x1 y1 x2 y2) &#x3D; &quot;Look! it is a rectangle, from (&quot; ++ show x1 ++ &quot;, &quot; ++ show y1 ++ &quot;), to (&quot; ++ show x2 ++ &quot;, &quot; ++ show y2 ++ &quot;)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; show (Circle 1 2 3)&quot;Look! it is a circle, with origin (1.0, 2.0), and r &#x3D; 3.0&quot;ghci&gt; show (Rectangle  1 2 3 4)&quot;Look! it is a rectangle, from (1.0, 2.0), to (3.0, 4.0)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义<code>Shape</code>派生自<code>Eq</code></p><p>默认<code>Eq</code>实现为: 分别比较每一个元素是否相等</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Person &#x3D; Person &#123; firstName :: String                     , lastName :: String                     , age :: Int                     &#125; deriving (Eq)mikeD &#x3D; Person &#123;firstName &#x3D; &quot;Michael&quot;, lastName &#x3D; &quot;Diamond&quot;, age &#x3D; 43&#125;adRock &#x3D; Person &#123;firstName &#x3D; &quot;Adam&quot;, lastName &#x3D; &quot;Horovitz&quot;, age &#x3D; 41&#125;mca &#x3D; Person &#123;firstName &#x3D; &quot;Adam&quot;, lastName &#x3D; &quot;Yauch&quot;, age &#x3D; 44&#125;mca &#x3D;&#x3D; adRock         -- FalsemikeD &#x3D;&#x3D; adRock       -- FalsemikeD &#x3D;&#x3D; mikeD        -- TruemikeD &#x3D;&#x3D; Person &#123;firstName &#x3D; &quot;Michael&quot;, lastName &#x3D; &quot;Diamond&quot;, age &#x3D; 43&#125;-- True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重写时需要实现<code>==</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Shape &#x3D; Circle Float Float Float | Rectangle Float Float Float Floatinstance Eq Shape where  (Circle x1 y1 r1) &#x3D;&#x3D; (Circle x2 y2 r2) &#x3D; x1 &#x3D;&#x3D; x2 &amp;&amp; y1 &#x3D;&#x3D; y2 &amp;&amp; r1 &#x3D;&#x3D; r2  (Rectangle x11 y11 x21 y21) &#x3D;&#x3D; (Rectangle x12 y12 x22 y22) &#x3D; x11 &#x3D;&#x3D; x12 &amp;&amp; y11 &#x3D;&#x3D; y12 &amp;&amp; x21 &#x3D;&#x3D; x22 &amp;&amp; y21 &#x3D;&#x3D; y22  _ &#x3D;&#x3D; _ &#x3D; False-- 别看不懂, 只是简单的中缀表达式t1 &#x3D; Circle 1 1 1 &#x3D;&#x3D; Circle 1 1 1            -- Truet2 &#x3D; Circle 1 1 2 &#x3D;&#x3D; Circle 1 1 1            -- Falset3 &#x3D; Rectangle 1 1 2 3 &#x3D;&#x3D; Rectangle 1 1 2 3  -- Truet4 &#x3D; Rectangle 1 1 2 3 &#x3D;&#x3D; Rectangle 1 1 2 4  -- Falset5 &#x3D; Circle 1 1 2 &#x3D;&#x3D; Rectangle 1 1 2 4       -- False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>定义<code>Bool</code>类型派生自<code>Ord</code>.使得其支持<code>&lt;</code>, <code>&gt;</code>, <code>==</code>,<code>succ</code>, <code>pred</code>, <code>minBound</code>,<code>maxBound</code>, <code>..</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Bool &#x3D; False | True deriving (Ord)succ False      -- Truepred True       -- False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>Ord</code>的顺序就是定义类型时<code>|</code>的顺序.</p></li></ul><h4 id="定义typeclasses">定义<code>TypeClasses</code></h4><p><code>Haskell</code>的<code>TypeClasses</code>与命令式编程中的接口类似.我们需要定义<code>TypeClasses</code>与<code>TypeClasses</code>中函数.使用<code>class</code>关键字定义🙃(多少有点嘲讽),其需要实现的方法在<code>where</code>中. 例如</p><ul><li><p><code>Eq</code>类型类的定义</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">class Eq a where    (&#x3D;&#x3D;) :: a -&gt; a -&gt; Bool    (&#x2F;&#x3D;) :: a -&gt; a -&gt; Bool    x &#x3D;&#x3D; y &#x3D; not (x &#x2F;&#x3D; y)    x &#x2F;&#x3D; y &#x3D; not (x &#x3D;&#x3D; y)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>😲看起来有点离谱,这波循环定义属实是没想到...要是真是这么定义的可太离谱了.可是人家真的是这么定义的. 毕竟, 这是默认定义,我们在实现接口的时候可以重写</p><p>实现一个红绿灯类型, 并派生自<code>Eq</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data TrafficLight &#x3D; Red | Yellow | Greeninstance Eq TrafficLight where    Red &#x3D;&#x3D; Red &#x3D; True    Green &#x3D;&#x3D; Green &#x3D; True    Yellow &#x3D;&#x3D; Yellow &#x3D; True    _ &#x3D;&#x3D; _ &#x3D; False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们定义了红绿灯的三个值,并且重写了<code>==</code>(只有三种情况是True,其他都是<code>False</code>)</p><p>然后就不用定义<code>/=</code>了,<code>Haskell</code>直接使用默认的<code>/=</code>定义</p></li></ul><p>其中类型定义也可以对类型参数变量进行定义,定义<code>Mybe</code>类型的元素派生自<code>Eq</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance (Eq m) &#x3D;&gt; Eq (Maybe m) where    Just x &#x3D;&#x3D; Just y &#x3D; x &#x3D;&#x3D; y    Nothing &#x3D;&#x3D; Nothing &#x3D; True    _ &#x3D;&#x3D; _ &#x3D; False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用<code>:info</code>获取类型所派生的<code>TypeClasses</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; :info Maybetype Maybe :: * -&gt; *data Maybe a &#x3D; Nothing | Just a        -- Defined in ‘GHC.Maybe’instance Applicative Maybe -- Defined in ‘GHC.Base’instance Eq a &#x3D;&gt; Eq (Maybe a) -- Defined in ‘GHC.Maybe’instance Functor Maybe -- Defined in ‘GHC.Base’instance Monad Maybe -- Defined in ‘GHC.Base’instance Semigroup a &#x3D;&gt; Monoid (Maybe a) -- Defined in ‘GHC.Base’instance Ord a &#x3D;&gt; Ord (Maybe a) -- Defined in ‘GHC.Maybe’instance Semigroup a &#x3D;&gt; Semigroup (Maybe a)  -- Defined in ‘GHC.Base’instance Show a &#x3D;&gt; Show (Maybe a) -- Defined in ‘GHC.Show’instance Read a &#x3D;&gt; Read (Maybe a) -- Defined in ‘GHC.Read’instance MonadFail Maybe -- Defined in ‘Control.Monad.Fail’instance Foldable Maybe -- Defined in ‘Data.Foldable’instance Traversable Maybe -- Defined in ‘Data.Traversable’<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>看一个例子: <code>yes-no typeclass</code></strong>😎</p><p><code>yes-no typeclass</code>类似弱类型的<code>Bool</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">class YesNo a where    yesno :: a -&gt; Boolinstance YesNo Int where    yesno 0 &#x3D; False    yesno _ &#x3D; Trueinstance YesNo [a] where    yesno [] &#x3D; False    yesno _ &#x3D; Trueinstance YesNo Bool where    yesno &#x3D; id    -- id的作用就是返回参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现一个方法</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">yesnoIf :: (YesNo y) &#x3D;&gt; y -&gt; a -&gt; a -&gt; ayesnoIf yesnoVal yesResult noResult &#x3D;    if yesno yesnoVal then yesResult else noResult<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="functor-typeclass">Functor typeclass</h4><p>🚧<code>Functor typeclass</code>是Haskell中很重要的<code>TypeClasses</code>,其仅定义了<code>fmap</code>方法, 该方法用于实现该类型的<code>map</code>,怎么处理<code>f x</code>到<code>y</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">class Functor f where    fmap :: (a -&gt; b) -&gt; f a -&gt; f b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例如在<code>List</code>中</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance Functor [] where    fmap &#x3D; mapfmap (*2) [1..3]-- [2,4,6]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>Maybe</code>中实现</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance Functor Maybe where    fmap f (Just x) &#x3D; Just (f x)    fmap f Nothing &#x3D; Nothing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<code>Either</code>中实现(如果是<code>Right</code>就映射,如果是<code>Left</code>就不)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Either a b &#x3D; Left a | Right b  -- Either 定义instance Functor (Either a) where    fmap f (Right x) &#x3D; Right (f x)    fmap f (Left x) &#x3D; Left x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="kind">Kind</h4><p>在定义<code>Type</code>的时候我们可以通过给定类型参数而实现类似"模板"("多态")的功能.也就是说, 定义<code>Type</code>的时候可以给一个参数类型,返回一个"具体"的<code>Type</code>. 🤔看起来有点像函数?</p><p>还有个问题,看看<code>Just 5</code>的类型<code>(Just 5) :: Num a =&gt; Maybe a</code>,他是怎么知道<code>5</code>是<code>Num</code>类型的呢? 🤔很简单,<code>5</code>上边绑定了一个<code>Type</code>标签🏷.可以使用<code>:k</code>查看</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; :k Int-- Int :: *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>*</code>标记表示一个"具体"的Type,就是定义类型的时候没有类型参数.</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; :k Maybe-- Maybe :: * -&gt; *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>与<code>:t</code>类似,这个<code>Kind</code>的意思是接受一个<code>*</code>(具体的类型),返回一个<code>*</code>(具体的类型), 同理</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; :k Maybe Int-- Maybe Int :: *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>表示<code>Maybe Int</code>是一个具体的类型.<code>Kind</code>也支持柯里化</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; :k Either-- Either :: * -&gt; * -&gt; *ghci&gt; :k Either String-- Either String :: * -&gt; *ghci&gt; :k Either String Int-- Either String Int :: *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr /><h3 id="输入与输出">输入与输出</h3><p>在命令式语言中轻而易举实现的IO, 在<code>Haskell</code>却是一件难事,Terminal显示的内容本身是一个变量,而<code>Haskell</code>的函数是无副作用的纯函数.向屏幕输出意味着修改了外部变量.就像将IPv6数据包打包成IPv4数据包以通过IPv4环境一样.<code>Haslell</code>采取了类似"隧道"的方法解决这一问题🪆</p><ul><li>将需要输出的数据"包装"成一种特殊的类型送出函数,这个特殊的类型可以与非纯函数环境接触,非纯函数环境中函数获取包装中的数据并输出</li><li>在获取输入时, 非纯函数环境将数据"包装"为特殊类型,将特殊类型数据传入<code>Haskell</code>,<code>Haskell</code>取出其内部的数据</li></ul><h4 id="基础io函数">基础IO函数</h4><ul><li><p><strong><code>main</code>&amp;<code>do</code>方法</strong>📇</p><p>首先要了解的是<code>main</code>,<strong>所有IO相关动作都必须直接或间接绑定在<code>main</code>函数上才会被执行</strong></p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">main &#x3D; putStrLn &quot;hello, world&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p><code>main</code>中不可能只绑定一个IO函数,可以使用<code>do</code>可以链接一串IO指令</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">main &#x3D; do    putStrLn &quot;Hello&quot;    putStrLn &quot;Helloha&quot;    putStrLn &quot;nihao&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将所有IO都直接写在<code>main</code>上是在有点冗长,我们可以间接绑定IO函数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">main &#x3D; do  putStrLn &quot;hi&quot;  name &lt;- getLine  demo namedemo name &#x3D; putStrLn (&quot;Hi &quot; ++ name ++ &quot; !&quot;)demo2 &#x3D; putStrLn &quot;hiii&quot; -- 没绑在main上就不执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>"包装"的类型</strong>🎁</p><ul><li><p>虽然并不知道IO函数有那些,但是隐隐约约还是知道上面的<code>putStrLn</code>是用来输出的,尝试看看其包装的类型</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; :t putStrLnputStrLn :: String -&gt; IO ()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p>收入一个<code>String</code>,得到一个<code>IO ()</code>类型(<code>IO action</code>),这里的<code>IO</code>就是包装, 后面接着一个空Tuple, 作为一个输出函数,我们将数据放在盒子里面输出, 外部环境接受并拿走数据,这个包装里面就成空的了, 所以返回一个空包装</p></li><li><p>虽然并不知道IO函数有那些,但是隐隐约约还是知道上面的<code>getLine</code>是用来输入的,尝试看看其包装的类型</p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; :t getLinegetLine :: IO String<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p>没毛病, 就是一个IO包装, 包装内是一个<code>String</code>.</p><p>那么如何获取包装中的数据呢? ,使用<code>&lt;-</code>符号将包装类型<code>IO String</code>解包为<code>String</code>,<strong>注意: <code>&lt;-</code>符号只能用于<code>do</code>语句,这保证了不纯粹的东西只存在于do中</strong></p></li><li><p><code>main</code>的类型:<code>main</code>的类型为<code>do</code>的最后一条指令决定,而<code>do</code>返回类型必须是<code>IO *</code></p><p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">main &#x3D; do  putStrLn &quot;hi&quot;       -- 👍, 类型为IO ()main &#x3D; do  putStrLn &quot;hi&quot;  getLine             -- 👍, 类型为IO Stringmain &#x3D; do  putStrLn &quot;hi&quot;  name &lt;- getLine     -- 👎, 类型为String<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></li></ul></li><li><p><code>let binding</code></p><p>在函数中,我们可以使用<code>where</code>/<code>let-in</code>指定局部函数,但是在<code>do</code>语句中我们只能使用<code>let</code>(因为<code>do</code>是一个表达式)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import Data.Charmain &#x3D; do    putStrLn &quot;What&#39;s your first name?&quot;    firstName &lt;- getLine    putStrLn &quot;What&#39;s your last name?&quot;    lastName &lt;- getLine    let bigFirstName &#x3D; map toUpper firstName        bigLastName &#x3D; map toUpper lastName    putStrLn $ &quot;hey &quot; ++ bigFirstName ++ &quot; &quot; ++ bigLastName ++ &quot;, how are you?&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong><code>do-block</code>与<code>return</code></strong></p><p>以下函数实现了不断从Terminal读取字符串, 并将句子中的单词反转</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">main &#x3D; do    line &lt;- getLine    if null line        then return ()        else do            putStrLn $ reverseWords line            mainreverseWords :: String -&gt; StringreverseWords &#x3D; unwords . map reverse . words<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>可以看到<code>main</code>也可以递归调用,但是在这个<code>else</code>语句中我们顺序调用了两个语句,所以应该用<code>do</code>包起来</p></li><li><p>注意<code>line=null</code>后的<code>then return ()</code>,这个<code>return</code>的作用是<strong>使用一个<code>pure value</code>构造一个<code>IO action</code></strong>,也就是说这里<code>return ()</code>只是构造了一个<code>IO Action ()</code>,作为<code>do-block</code>的最后一句,<code>IO Action ()</code>成为了返回值</p></li><li><p>谨记:<code>return</code>函数只是构造了一个<code>IO Action</code>,绝不是命令式编程中的停止解析返回,下面的代码会返回<code>IO ()</code>(因为<code>putStrLn</code>)</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">main &#x3D; do    return ()    return &quot;HAHAHA&quot;    line &lt;- getLine    return &quot;BLAH BLAH BLAH&quot;    return 4    putStrLn line<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>常见IO函数</p><ul><li><code>putStrLn string</code>将<code>string</code>打印在Terminal中并<strong>换行</strong></li><li><code>putStr string</code> 跟 <code>putStrLn</code> 只是不换行</li><li><code>putChar char</code> 接受一个字符，并回传一个<code>IO action</code> 将他打印到终端上</li><li><code>print</code>接受<code>Show</code>类型的值，调用<code>show</code> 来将值变成字串然后将其输出到终端上. 基本上, 他就是<code>putStrLn . show</code></li><li><code>getChar</code> 是一个从输入读进一个字符的<code>IO action</code></li><li><code>when</code>传入<code>Bool</code>与<code>IO Action</code>,若为<code>True</code>则回传<code>IO Action</code>,为<code>False</code>则回传<code>IO ()</code></li></ul></li><li><p>IO函数中的"<code>Functor</code>"</p><ul><li><p><code>sequence</code>:接收<code>IO Action</code>的<code>List</code>,依次执行并返回<code>IO 返回值的List</code>即:<code>[IO a] -&gt; IO [a]</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">main &#x3D; do  xs &lt;- sequence [getLine, getLine, getLine]  print xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>记得, <code>sequence</code>返回的是<code>IO [a]</code>,所以还用<code>&lt;-</code>返回</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">main &#x3D; do  xs &lt;- sequence . map print $ [1 .. 3]  print xs        -- [(),(),()] print返回的是空Tuple, 这里也是<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><code>mapM</code>相当于先<code>map</code>再<code>sequence</code>.即</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">main &#x3D; do  xs &lt;- mapM print [1, 2, 3]  print xs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>相当于</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">main &#x3D; do  xs &lt;- mapM&#39; print [1, 2, 3]  print xsmapM&#39; :: (a -&gt; IO b) -&gt; [a] -&gt; IO [b]mapM&#39; f &#x3D; (sequence . map f)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>mapM_</code>就是返回为<code>return ()</code>的<code>mapM</code></p></li><li><p><code>forever</code>是<code>Monad</code>的方法,其接收一个<code>IO Action</code>并死循环执行, 如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import Control.Monad.Logic (forever)import Unicode.Char (toUpper)main &#x3D; forever $ do  t &lt;- getLine  putStrLn $ map toUpper t<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import Control.Monad.Logic (forever)import Unicode.Char (toUpper)main &#x3D; do  t &lt;- getLine  putStrLn $ map toUpper t  main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>forM</code>是<code>Monad</code>的方法,<code>forM</code>之于<code>forever</code>相当于<code>mapM</code>之于<code>sequence</code>.作用是先Map, 再对每一项执行函数.</p><p>实现输入四个字符串并输出</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import Control.Monadmain &#x3D; do    colors &lt;- forM [1,2,3,4] (\a -&gt; do        putStrLn $ &quot;Which color do you associate with the number &quot; ++ show a ++ &quot;?&quot;        color &lt;- getLine        return color)    putStrLn &quot;The colors that you associate with 1, 2, 3 and 4 are: &quot;    mapM putStrLn colors<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">main &#x3D; do  t &lt;-    forM&#39;      [1, 2, 3, 4]      ( \a -&gt; do          putStrLn $ show a ++ &quot;: &quot;          i &lt;- getLine          return i      )  mapM putStrLn tforM&#39; (x : xs) f &#x3D; f x : forM&#39; xs fforM&#39; [] _ &#x3D; []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="文件与字符流">文件与字符流</h4><ul><li><p><code>getContents</code>:从Terminal读取<code>String</code>直到<code>EOF</code>,且<code>getContents</code>是惰性的, 需要多少从内存中拿多少,之前<code>forever</code>大写的程序可以改成</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import Unicode.Char (toUpper)main &#x3D; do  t &lt;- getContents  putStrLn $ map toUpper t<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>正因为是惰性的,我们可以分批输入内容(只有在<code>map</code>的时候才会调入)🫗</p></li><li><p>读写文件📄</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import System.IOmain &#x3D; do    handle &lt;- openFile &quot;girlfriend.txt&quot; ReadMode    contents &lt;- hGetContents handle    putStr contents    hClose handle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中,<code>openFile</code>获取文件Handle(可以理解成一个文件指针及其<code>Context</code>)类型定义</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">openFile :: FilePath -&gt; IOMode -&gt; IO Handle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>IOMode</code>描述了文件读写的模式, 定义</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data IOMode &#x3D; ReadMode | WriteMode | AppendMode | ReadWriteMode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>FilePath</code>定义</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">type FilePath &#x3D; String<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>openFile</code>返回<code>IO Handle</code>,之后使用<code>hGetContents</code>将文件Handle中数据取出得到<code>IO String</code>.<code>hGetContents</code>与<code>getContents</code>类似, 也是Lazy的,在读取文件时并不会将文件全部读入内存.文件操作结束后使用<code>hClose</code>关闭文件</p></li><li><p>另一种读写文件的方式是<code>withFile</code>, 定义</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">withFile :: FilePath -&gt; IOMode -&gt; (Handle -&gt; IO a) -&gt; IO a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即: 接收两个参数与文件处理函数, 最后返回一个<code>IO</code>, 例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import System.IOmain &#x3D; do    withFile &quot;girlfriend.txt&quot; ReadMode (\handle -&gt; do            contents &lt;- hGetContents handle            putStr contents)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>容易实现<code>withFile</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">withFile&#39; :: FilePath -&gt; IOMode -&gt; (Handle -&gt; IO a) -&gt; IO awithFile&#39; path mode f &#x3D; do    handle &lt;- openFile path mode    result &lt;- f handle    hClose handle    return result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>与<code>hGetContents</code>比起来更加容易的文件读入函数有<code>hGetLine</code>,<code>hPutStr</code>, <code>hPutStrLn</code>, <code>hGetChar</code>,他们都接受一个<code>IO Handle</code>,行为与去掉<code>h</code>前缀函数相同</p></li><li><p>也可以省略<code>IO Handle</code>与<code>hClose</code>使用如下<code>readFile</code>,<code>writeFile</code>, <code>appendFile</code>函数读写文件</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import System.IOmain &#x3D; do    contents &lt;- readFile &quot;girlfriend.txt&quot;    putStr contents<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import System.IOmain &#x3D; do    contents &lt;- readFile &quot;girlfriend.txt&quot;    writeFile &quot;girlfriendcaps.txt&quot; &quot;123456&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import System.IOmain &#x3D; do    todoItem &lt;- getLine      -- getLine 不包含回车    appendFile &quot;todo.txt&quot; (todoItem ++ &quot;\n&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>IO函数是惰性的, 可以手动使用<code>hSetBuffering</code>配置buffer,类型定义我i哦</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">hSetBuffering -&gt; IO Handle -&gt; BufferMode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">type BufferMode &#x3D; NoBuffering | LineBuffering | BlockBuffering (Maybe Int)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后一项表示Buffer大小为多少Byte</p></li><li><p><code>openTempFile</code>函数可以在当前目录下创建并打开一个随机名字的文件,用于暂存数据</p></li></ul><h4 id="命令行参数">命令行参数</h4><p><code>System.Environment</code>的<code>getArgs</code>与<code>getProgName</code>定义了命令行相关参数</p><ul><li><p><code>getArgs</code>返回参数数组,最后一个元素是所有参数String</p></li><li><p><code>getProgName</code>返回程序名, 例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import System.Environmentimport Data.Listmain &#x3D; do    args &lt;- getArgs    progName &lt;- getProgName    putStrLn &quot;The arguments are:&quot;    mapM putStrLn args    putStrLn &quot;The program name is:&quot;    putStrLn progName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">$ .&#x2F;arg-test first second w00t &quot;multi word arg&quot;The arguments are:firstsecondw00tmulti word argThe program name is:arg-test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="函数式地解决问题">函数式地解决问题</h3><p>一个不错的思考思路是</p><ol type="1"><li>明确我们输入与输出的数据类型</li><li>忘掉<code>Haskell</code>, 想想我们自己是怎么一步步解题的</li><li>思考如何在<code>Haskell</code>中表达我们的数据,应该如何定义我们的行为</li><li>在 Haskell 中要如何对这些数据做运算来产生出解答</li></ol><h4 id="求解逆波兰表达式">求解逆波兰表达式</h4><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3poLWNuLyVFOSU4MCU4NiVFNiVCMyVBMiVFNSU4NSVCMCVFOCVBMSVBOCVFNyVBNCVCQSVFNiVCMyU5NQ==">逆波兰表示法-wiki<i class="fa fa-external-link-alt"></i></span></p><p>在命令式编程中, 我们可以使用一个栈轻松处理, 在<code>Haskell</code>中,向后加入元素很麻烦, 不如向前加入元素</p><ol type="1"><li>明确我们输入与输出的数据类型: <code>String-&gt;Num</code></li><li>忘掉<code>Haskell</code>, 想想我们自己是怎么一步步解题的<ol type="1"><li>如果数字则压栈, 遇到符号则弹两个元素, 计算后压栈</li></ol></li><li>思考如何在<code>Haskell</code>中表达我们的数据,应该如何定义我们的行为<ol type="1"><li>将<code>String</code>变为一个个元素<code>String</code>(数字/符号)的<code>List</code></li><li>计算到最后就得到了一个单元素<code>List</code></li><li>取出这个元素</li></ol></li><li>在 Haskell 中要如何对这些数据做运算来产生出解答<ol type="1"><li>使用<code>words</code>解析</li><li>使用<code>flodl</code>遍历</li><li>使用<code>guard</code>判断元素类型</li><li>使用<code>x:xs</code>压栈</li><li>使用<code>(x:y:ys)</code>模式匹配获取tops与剩下内容</li></ol></li></ol><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">solveRPN :: (Fractional a, Read a) &#x3D;&gt; String -&gt; asolveRPN xs &#x3D; head $ foldl foldingNum [] (words xs)  where    foldingNum (x : y : ys) &quot;+&quot; &#x3D; x + y : ys    foldingNum (x : y : ys) &quot;-&quot; &#x3D; x - y : ys    foldingNum (x : xs) &quot;-&quot; &#x3D; (-x) : xs    -- 只有双目运算匹配失败才会匹配    foldingNum (x : y : ys) &quot;*&quot; &#x3D; x * y : ys    foldingNum (x : y : ys) &quot;&#x2F;&quot; &#x3D; x &#x2F; y : ys    foldingNum ys nums &#x3D; read nums : ys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最短路搜索">最短路搜索</h4><p>有两个起点与两个终点, 你可以指定起点与终点, 求起点到终点最小值</p><p>有两条主要道路，他们中间有很多小路连接彼此。如果你要走小路的话都会花掉一定的时间。你的问题就是要选一条最佳路径让你可以尽快前往终点,</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ST &#x3D;&#x3D;50&#x3D;&#x3D;+&#x3D;&#x3D;05&#x3D;&#x3D;+&#x3D;&#x3D;40&#x3D;&#x3D;+&#x3D;&#x3D;10&#x3D;&#x3D; ED        ||     ||     ||        30     20     25        ||     ||     ||ST &#x3D;&#x3D;10&#x3D;&#x3D;+&#x3D;&#x3D;90&#x3D;&#x3D;+&#x3D;&#x3D;02&#x3D;&#x3D;+&#x3D;&#x3D;8&#x3D;&#x3D; ED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入格式: 路径按照自左向右每组:上下右的模式输入(最后两个ED之间长度为0), 例如上例</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">[50, 10, 30, 5, 90, 20, 40, 2, 25, 10, 8, 0]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol type="1"><li>明确我们输入与输出的数据类型: <code>[Num]-&gt;[Char]</code></li><li>忘掉<code>Haskell</code>, 想想我们自己是怎么一步步解题的<ol type="1"><li>分别计算每走到一个上下岔路口的最小距离</li></ol></li><li>思考如何在<code>Haskell</code>中表达我们的数据,应该如何定义我们的行为<ol type="1"><li>我们需要下一组路径的上方路线花费, 下方路线花费, 岔路之间花费,到达前一个上下岔路口花费, 转移到下一个岔路</li></ol></li><li>在 Haskell 中要如何对这些数据做运算来产生出解答<ol type="1"><li><code>到达上方路口花费=min(前一个上方路口花费+上方路线花费, 前一个下方路口花费+下方路线花费+上下路口花费)</code></li><li>到达下方路口花费同理</li></ol></li></ol><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">pathGet :: (Num a, Ord a) &#x3D;&gt; [a] -&gt; a -&gt; a -&gt; [Char]pathGet (t : b : r : xs) ct cb  | cct &lt; ccb &#x3D; &#39;A&#39; : pathGet xs cct ccb  | otherwise &#x3D; &#39;B&#39; : pathGet xs cct ccb  where    cct &#x3D; min (ct + t) (cb + b + r)    ccb &#x3D; min (ct + t + r) (cb + b)pathGet _ ct cb  | ct &lt; cb &#x3D; &quot;A&quot;  | otherwise &#x3D; &quot;B&quot;res &#x3D; pathGet [50, 10, 30, 5, 90, 20, 40, 2, 25, 10, 8, 0] 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从functor到monoids">从Functor到Monoids</h3><h4 id="functor是什么">Functor是什么</h4><p>在Haskell中, <code>Functor</code>是一个类型类,其仅定义了一个<code>fmap</code>方法用于描述Type是如何被Map Over的.什么是map over呢?</p><p>Haskell的<code>List</code>中有一个<code>map</code>方法,允许传入一个函数与<code>List</code>,返回一个将List的中每一个元素都执行函数的结果.这与JS的<code>Array.map</code>类似.所以我们当时认为<code>Map</code>就是一个映射. 然而,<code>Map</code>不止可以应用于<code>List</code>.<code>Map</code>可以用于任何定义了<code>fmap</code>的对象</p><p>我们将对象分为简单对象与高阶对象. 简单对象也可以称之为"值", 例如数字,Char就是简单对象, 我们可以直接对其进行朴素操作.高阶对象好像一个用盒子包装过的对象🎁, 回顾List的定义</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data List a &#x3D; Empty | Cons a (List a)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里, 我们将List当作一个整体. 其中包含了一些相对"简单"的对象.我们无法用普通函数直接操作这些普通对象.例如我们没法对一个<code>[1,2,3]</code>这个整体执行<code>(+1)</code>操作,如何刺入高阶对象🤺, 让普通函数操作高阶对象内部的普通元素呢?将Type定义为使用<code>Functor</code>并使用<code>fmap</code>,例如我想将<code>Maybe</code>中的值<code>(+1)</code>:</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; t &#x3D; Just 2ghci&gt; t + 1-- &lt;interactive&gt;:2:1: error:--     • Non type-variable argument in the constraint: Num (Maybe a)--       (Use FlexibleContexts to permit this)--     • When checking the inferred type--         it :: forall &#123;a&#125;. (Num a, Num (Maybe a)) &#x3D;&gt; Maybe aghci&gt; fmap (+1) t-- Just 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Maybe</code>是一个高阶对象, 也是<code>Functor</code>的派生Type.因此, 我们可以使用<code>fmap</code>对内部元素进行操作. 那,其中<code>fmap</code>拿到函数与<code>Maybe</code>之后的行为由<code>Maybe</code>类型定义时实现(类比,<code>map</code>拿到函数与<code>List</code>之后怎么知道要将函数应用于每个元素呢?这也是由<code>List</code>派生<code>Functor</code>时候实现的)</p><p>📊<strong>总结: <code>Functor</code>是一个类型类,定义了一个<code>fmap</code>函数,该函数描述如何用一个普通函数对高阶对象进行操作</strong></p><p><code>fmap</code>的定义如下</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">fmap :: (Functor f) &#x3D;&gt; (b -&gt; c) -&gt; f b -&gt; f c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看看<code>Maybe</code>的<code>Functor</code>实现</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance Functor Maybe where    fmap f (Just x) &#x3D; Just (f x)    fmap f Nothing &#x3D; Nothing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以仿制一个<code>List</code>的<code>Functor</code>实现</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data List&#39; a &#x3D; Empty | Cons a (List&#39; a) deriving (Show)instance Functor List&#39; where  fmap _ Empty &#x3D; Empty  fmap f (Cons x xs) &#x3D; Cons (f x) (fmap f xs)t &#x3D; fmap (+ 1) $ Cons 1 $ Cons 2 $ Cons 3 Empty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⚖<strong>最后:<code>Functor</code>的<code>fmap</code>实现应该遵循如下法则</strong></p><ul><li>如果我们对 functor 做 map <code>id</code>，那得到的新的 functor应该要跟原来的一样. 即: <code>fmap id = id</code></li><li>先将两个函数合成并将结果<code>map over</code>一个<code>functor</code>的结果,应该跟先将第一个函数<code>map over</code>一个<code>functor</code>，再将第二个函数<code>map over</code>那个<code>functor</code>的结果是一样的.即:<code>fmap (f . g) = fmap f . fmap g</code>或<code>fmap (f . g) F = fmap f (fmap g F)</code></li></ul><h4 id="applicative-functors">Applicative Functors</h4><p>仔细看<code>fmap</code>的类型定义, 我们的函数只能接收一个参数,并返回一个参数. 我们无法让函数接收多个参数,例如<code>\ x y -&gt; x + y</code></p><p>✨为此,我们可以采用<code>Functors</code>的升级版<code>Applicative Functors</code>,即<code>Applicative</code>类型类, 其类型定义如下</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">class (Functor f) &#x3D;&gt; Applicative f where    pure :: a -&gt; f a    (&lt;*&gt;) :: f (a -&gt; b) -&gt; f a -&gt; f b    (&lt;$&gt;) :: (a -&gt; b) -&gt; f a -&gt; f b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>(Functor f) =&gt; Applicative f</code>说明<code>Applicative Functors</code>必须是<code>Functors</code></li><li><code>pure</code>方法接收一个值, 返回一个值为该类型的高阶对象</li><li><code>&lt;*&gt;</code>接收一个包裹着函数的高阶对象,再接收一个高阶对象, 得到另一个高阶对象. 看起来与<code>fmap</code>类似,只不过接收的函数用高阶对象包起来了</li><li><code>&lt;$&gt;</code>看起来就是函数不包对象的<code>&lt;*&gt;</code></li></ul><p><strong>可以看看<code>Maybe</code>的<code>Applicative Functors</code>定义</strong></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance Applicative Maybe where  pure &#x3D; Just  Nothing &lt;*&gt; _ &#x3D; Nothing  (Just f) &lt;*&gt; something &#x3D; fmap f something  f &lt;$&gt; x &#x3D; fmap f x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; Just (+3) &lt;*&gt; Just 9-- Just 12ghci&gt; pure (+) &lt;*&gt; Just 3 &lt;*&gt; Just 5    -- 也可以使用pure进行转换-- Just 8ghci&gt; (+) &lt;$&gt; Just 3 &lt;*&gt; Just 4         -- 还可以直接使用&lt;$&gt;-- Just 7ghci&gt; (++) &lt;$&gt; Just &quot;johntra&quot; &lt;*&gt; Just &quot;volta&quot;Just &quot;johntravolta&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>于是我们可以用<code>pure f &lt;*&gt; p1 &lt;*&gt; p2 &lt;*&gt; ...</code>/<code>f &lt;$&gt; p1 &lt;*&gt; p2 &lt;*&gt; ...</code>进行多参数调用了</p><p><strong>再看下<code>List</code>的<code>Applicative Functors</code>定义</strong></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance Applicative [] where    pure x &#x3D; [x]    fs &lt;*&gt; xs &#x3D; [f x | f &lt;- fs, x &lt;- xs]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>第一行还好理解, 收入一个普通元素, 返回单元素<code>List</code></li><li>第二行说<code>&lt;*&gt;</code>收入两个<code>List</code>,用第一个<code>List</code>的每个元素执行第二个<code>List</code></li><li>😒为什么List的<code>&lt;*&gt;</code>是这样定义的呢,为啥不能像<code>zipWith</code>一样工作呢? 😱这是Haskell的List的定义,不要纠结...</li></ul><p>例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; [(*0),(+100),(^2)] &lt;*&gt; [1,2,3]-- [0,0,0,101,102,103,1,4,9]ghci&gt; (++) &lt;$&gt; [&quot;ha&quot;,&quot;heh&quot;,&quot;hmm&quot;] &lt;*&gt; [&quot;?&quot;,&quot;!&quot;,&quot;.&quot;]-- [&quot;ha?&quot;,&quot;ha!&quot;,&quot;ha.&quot;,&quot;heh?&quot;,&quot;heh!&quot;,&quot;heh.&quot;,&quot;hmm?&quot;,&quot;hmm!&quot;,&quot;hmm.&quot;]-- 等价于ghci&gt; [ x ++ y | x &lt;- [&quot;ha&quot;,&quot;heh&quot;,&quot;hmm&quot;], y &lt;- [&quot;?&quot;,&quot;!&quot;,&quot;.&quot;]]-- 等价于ghci&gt; [(++)] &lt;*&gt; [&quot;ha&quot;, &quot;heh&quot;, &quot;hmm&quot;] &lt;*&gt; [&quot;?&quot;, &quot;!&quot;, &quot;.&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>看看<code>IO</code>的<code>Applicative Functors</code>定义</strong></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance Applicative IO where    pure &#x3D; return    a &lt;*&gt; b &#x3D; do        f &lt;- a        x &lt;- b        return (f x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">main &#x3D; do    a &lt;- (++) &lt;$&gt; getLine &lt;*&gt; getLine    putStrLn $ &quot;The two lines concatenated turn out to be: &quot; ++ a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>还有一个比较难理解的<code>(-&gt;) r</code>的<code>Applicative Functors</code></strong></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance Applicative ((-&gt;) r) where    pure x &#x3D; (\_ -&gt; x)    f &lt;*&gt; g &#x3D; \x -&gt; f x (g x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>(-&gt;) r</code>表示一个接收参数类型为<code>r</code>的函数,例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; (\x y z -&gt; [x,y,z]) &lt;$&gt; (+3) &lt;*&gt; (*2) &lt;*&gt; (&#x2F;2) $ 5-- [8.0,10.0,2.5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>还有类似于<code>Zip</code>的<code>List</code><code>ZipList</code></strong></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance Applicative ZipList where        pure x &#x3D; ZipList (repeat x)        ZipList fs &lt;*&gt; ZipList xs &#x3D; ZipList (zipWith (\f x -&gt; f x) fs xs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样的操作很棒,<code>&lt;*&gt;</code>允许我们像使用<code>zipWith</code>一样使用<code>&lt;*&gt; zipList</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; getZipList $ (+) &lt;$&gt; ZipList [1,2,3] &lt;*&gt; ZipList [100,100,100]-- [101,102,103]ghci&gt; getZipList $ (+) &lt;$&gt; ZipList [1,2,3] &lt;*&gt; ZipList [100,100..]-- [101,102,103]  (zipWith要求结果以短List为准)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>⚖<strong>最后:<code>Applicative Functors</code>的<code>fmap</code>实现应该遵循如下法则</strong></p><ul><li>`pure f &lt;*&gt; x = fmap f x``</li><li>`pure id &lt;*&gt; v = v``</li><li>`pure (.) &lt;<em>&gt; u &lt;</em>&gt; v &lt;<em>&gt; w = u&lt;</em>&gt; (v &lt;*&gt; w)``</li><li>`pure f &lt;*&gt; pure x = pure (f x)``</li><li><code>u &lt;*&gt; pure y = pure ($ y) &lt;*&gt; u</code></li></ul><h4 id="newtype">newtype</h4><p>可以通过<code>data</code>声明一个<code>Type</code>, 然而,如果我们的<code>Type</code>中只有<strong>一个值构造子,值构造子只有一个字段</strong>, 我们可以使用<code>newtype</code>定义</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data ZipList a &#x3D; ZipList &#123; getZipList :: [a] &#125;-- 等价于newtype ZipList a &#x3D; ZipList &#123; getZipList :: [a] &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>优点有</p><ul><li>🏃‍♂️<code>newtype</code>比较快,Haskell会将<code>newtype</code>理解为现有类型的二次包装,在调用的时候只需要解包即可, 无需关心值到底匹配到了哪个值构造子</li><li>😴<code>newtype</code>是惰性的, 类型只有在需要的时候才会解包,然后计算</li></ul><h4 id="monoids">Monoids</h4><p><code>Monoids</code>的意思是中译是幺半群, 相关数学定义如下</p><ul><li><p><span class="math inline">\(G\)</span>为非空集合，如果在<spanclass="math inline">\(G\)</span>上定义的二元运算 <em>，满足</em></p><ul><li>封闭性: 对于任意<span class="math inline">\(a, b \in G\)</span>,有<span class="math inline">\(a * b \in G\)</span></li><li>结合律: 对于任意<span class="math inline">\(a, b, c \in G\)</span>,有<span class="math inline">\((a*b)*c=a*(b*c)\)</span></li><li>幺元: 存在幺元<span class="math inline">\(e\)</span>,使得对于任意<span class="math inline">\(a\in G\)</span>, <spanclass="math inline">\(e*a=a*e=a\)</span></li><li>逆元: 对于任意<span class="math inline">\(a\inG\)</span>，存在逆元<spanclass="math inline">\(a^{-1}\)</span>，使得<spanclass="math inline">\(a^{-1}*a=a*a^{-1}=e\)</span></li></ul><p>则称<span class="math inline">\((G, *)\)</span>是群，简称<spanclass="math inline">\(G\)</span>是群</p></li><li><p>如果仅满足封闭性和结合律, 则称<spanclass="math inline">\(G\)</span>是一个半群</p></li><li><p>如果仅满足封闭性, 结合律并且有幺元, 则称G是一个含幺半群</p></li></ul><p>再看下<code>Monoid</code>在Haskell中的定义</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">class Monoid m where    mempty :: m              -- 常数, 表示幺元    mappend :: m -&gt; m -&gt; m   -- 函数, 表示幺半群中的二元运算函数    mconcat :: [m] -&gt; m      -- 函数, 将一堆Monoid&quot;压缩&quot;为一个    mconcat &#x3D; foldr &#96;mappend&#96; mempty -- 缺省实现, 使用幺元作为起始, 使用二元运算合并<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中二元运算需要满足幺元与结合律, 即</p><ul><li><code>mempty `mappend` x = x</code></li><li><code>x `mappend` mempty = x</code></li><li><code>(x `mappend` y) `mappend` z = x `mappend` (y `mappend` z)</code></li></ul><p><strong>看看熟悉类型的<code>Monoids</code>是如何定义二元运算与幺元的</strong></p><ul><li><p><code>List</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance Monoid [a] where    mempty &#x3D; []    mappend &#x3D; (++)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>幺元为<code>[]</code></li><li>二元运算为<code>++</code></li></ul><p>例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; [1,2,3] &#96;mappend&#96; [4,5,6]-- [1,2,3,4,5,6]ghci&gt; (&quot;one&quot; &#96;mappend&#96; &quot;two&quot;) &#96;mappend&#96; &quot;tree&quot;-- &quot;onetwotree&quot;ghci&gt; &quot;one&quot; &#96;mappend&#96; (&quot;two&quot; &#96;mappend&#96; &quot;tree&quot;)-- &quot;onetwotree&quot;ghci&gt; &quot;one&quot; &#96;mappend&#96; &quot;two&quot; &#96;mappend&#96; &quot;tree&quot;-- &quot;onetwotree&quot;ghci&gt; &quot;pang&quot; &#96;mappend&#96; mempty-- &quot;pang&quot;ghci&gt; mconcat [[1,2],[3,6],[9]]-- [1,2,3,6,9]ghci&gt; mempty :: [a]-- []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数集上的<code>*</code>与<code>+</code></p><p>Haskell定义了<code>Sum</code>与<code>Product</code></p><ul><li>幺元分别为<code>0</code>, <code>1</code></li><li>二元运算分别为<code>+</code>, <code>*</code></li></ul><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">newtype Product a &#x3D;  Product &#123; getProduct :: a &#125;    deriving (Eq, Ord, Read, Show, Bounded)instance Num a &#x3D;&gt; Monoid (Product a) where    mempty &#x3D; Product 1    Product x &#96;mappend&#96; Product y &#x3D; Product (x * y)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; getProduct $ Product 3 &#96;mappend&#96; Product 9-- 27ghci&gt; getProduct $ Product 3 &#96;mappend&#96; mempty-- 3ghci&gt; getProduct $ Product 3 &#96;mappend&#96; Product 4 &#96;mappend&#96; Product 2-- 24ghci&gt; getProduct . mconcat . map Product $ [3,4,2]-- 24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Any</code>与<code>All</code></p><p>类似于数学中的存在与任意</p><ul><li>幺元分别为<code>false</code>, <code>true</code></li><li>二元运算分别为<code>||</code>, <code>&amp;&amp;</code></li></ul><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">newtype Any &#x3D; Any &#123; getAny :: Bool &#125;    deriving (Eq, Ord, Read, Show, Bounded)instance Monoid Any where    mempty &#x3D; Any False    Any x &#96;mappend&#96; Any y &#x3D; Any (x || y)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">newtype All &#x3D; All &#123; getAll :: Bool &#125;        deriving (Eq, Ord, Read, Show, Bounded)instance Monoid All where        mempty &#x3D; All True        All x &#96;mappend&#96; All y &#x3D; All (x &amp;&amp; y)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; getAny $ Any True &#96;mappend&#96; Any False-- Trueghci&gt; getAny $ mempty &#96;mappend&#96; Any True-- Trueghci&gt; getAny . mconcat . map Any $ [False, False, False, True]-- Trueghci&gt; getAny $ mempty &#96;mappend&#96; mempty-- Falseghci&gt; getAll $ mempty &#96;mappend&#96; All True-- Trueghci&gt; getAll $ mempty &#96;mappend&#96; All False-- Falseghci&gt; getAll . mconcat . map All $ [True, True, True]-- Trueghci&gt; getAll . mconcat . map All $ [True, True, False]-- False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Maybe</code></p><ul><li>幺元为<code>Nothing</code></li><li>二元运算见下</li></ul><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance Monoid a &#x3D;&gt; Monoid (Maybe a) where    mempty &#x3D; Nothing    Nothing &#96;mappend&#96; m &#x3D; m    m &#96;mappend&#96; Nothing &#x3D; m    Just m1 &#96;mappend&#96; Just m2 &#x3D; Just (m1 &#96;mappend&#96; m2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; Nothing &#96;mappend&#96; Just &quot;andy&quot;-- Just &quot;andy&quot;ghci&gt; Just LT &#96;mappend&#96; Nothing-- Just LTghci&gt; Just (Sum 3) &#96;mappend&#96; Just (Sum 4)-- Just (Sum &#123;getSum &#x3D; 7&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>看看<code>Monoids</code>中的<code>mconcat</code>有什么用</strong></p><p>与<code>fmap</code>类似的使用方式, 其使用<code>fold*</code>调用,只不过这个<code>fold*</code>并非preclude的<code>List.fold*</code>,需要手动引入</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import qualified Foldable as Fghci&gt; :t F.foldr-- F.foldr :: (F.Foldable t) &#x3D;&gt; (a -&gt; b -&gt; b) -&gt; b -&gt; t a -&gt; b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例如<code>Maybe</code>的<code>fold*</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; F.foldl (+) 2 (Just 9)-- 11ghci&gt; F.foldr (||) False (Just True)-- True<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>⚖<strong>最后: <code>Monad</code>实现应该遵循如下法则</strong></p><ul><li><code>retrun x &gt;&gt;= f</code>应该等于 <code>f x</code></li><li><code>m &gt;&gt;= return</code> 会等于 <code>m</code></li><li><code>(m &gt;&gt;= f) &gt;&gt;= g</code> 跟<code>m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)</code> 是相等的</li></ul><h3 id="monad应用">Monad应用</h3><p><code>Monad</code>封装了高阶对象之间的计算与转换方式,从而使高阶对象可以被轻易的用朴素的方法操作</p><h4 id="monad上的方法"><code>Monad</code>上的方法</h4><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">class Monad m where    return :: a -&gt; m a    (&gt;&gt;&#x3D;) :: m a -&gt; (a -&gt; m b) -&gt; m b    (&gt;&gt;) :: m a -&gt; m b -&gt; m b    x &gt;&gt; y &#x3D; x &gt;&gt;&#x3D; \_ -&gt; y    fail :: String -&gt; m a    fail msg &#x3D; error msg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>return</code>与<code>Applicative</code>中的<code>pure</code>类似</li><li><code>&gt;&gt;=</code>函数,接受一个<code>Monad</code>与一个普通值到<code>Monad</code>的函数,返回一个<code>Monad</code></li><li><code>&gt;&gt;</code>函数接受两个<code>Monad</code>, 返回后者</li><li><code>fail</code>接受一个<code>String</code>, 抛出一个异常</li></ul><p>看看<code>Maybe</code>的<code>Monad</code>实现</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance Monad Maybe where    return x &#x3D; Just x    Nothing &gt;&gt;&#x3D; f &#x3D; Nothing    Just x &gt;&gt;&#x3D; f  &#x3D; f x    fail _ &#x3D; Nothing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="维护两个数">维护两个数</h4><p>杆子两端有若干只鸟🐦, 当左右两端鸟数差小于等于2时, 杆子平衡,否则杆子失衡. 给若干加减鸟的操作, 返回杆子状态</p><p>我们可以用<code>Maybe</code>的<code>Just</code>表示平衡状态,用<code>Nothing</code>表示失衡</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">type Birds &#x3D; Inttype Pole &#x3D; (Birds,Birds)landLeft :: Birds -&gt; Pole -&gt; Maybe PolelandLeft n (left,right)    | abs ((left + n) - right) &lt; 4 &#x3D; Just (left + n, right)    | otherwise                    &#x3D; NothinglandRight :: Birds -&gt; Pole -&gt; Maybe PolelandRight n (left,right)    | abs (left - (right + n)) &lt; 4 &#x3D; Just (left, right + n)    | otherwise                    &#x3D; Nothing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用<code>&gt;&gt;=</code>连续调用函数⛓</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; return (0,0) &gt;&gt;&#x3D; landRight 2 &gt;&gt;&#x3D; landLeft 2 &gt;&gt;&#x3D; landRight 2-- Just (2,4)ghci&gt; return (0,0) &gt;&gt;&#x3D; landLeft 1 &gt;&gt;&#x3D; landRight 4 &gt;&gt;&#x3D; landLeft (-1) &gt;&gt;&#x3D; landRight (-2)-- Nothing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用<code>&gt;&gt;</code>直接设置状态</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; return (0,0) &gt;&gt;&#x3D; landLeft 1 &gt;&gt; Nothing &gt;&gt;&#x3D; landRight 1-- Nothing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>看来<code>(&gt;&gt;=)</code>可以方便的实现一个<code>Monad</code>被多个函数调用,而<code>&lt;$&gt; ... &lt;*&gt;</code>可以实现一个函数调用多个参数</strong></p><h4 id="do表示法"><code>do</code>表示法</h4><p>可以将<code>&gt;&gt;=</code>表达式链</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">foo :: Maybe Stringfoo &#x3D; Just 3   &gt;&gt;&#x3D; (\x -&gt;      Just &quot;!&quot; &gt;&gt;&#x3D; (\y -&gt;      Just (show x ++ y)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用<code>do</code>语句表示</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">foo :: Maybe Stringfoo &#x3D; do    x &lt;- Just 3    y &lt;- Just &quot;!&quot;    Just (show x ++ y)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起来<code>do</code>就像是命令式变成的一个<code>Block</code>,允许用户存一些变量进去, 再返回结果,这里也要采用<code>&lt;-</code>将值从高阶对象中取出</p><p>的但是这个就比较离谱</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">routine :: Maybe Poleroutine &#x3D; do  start &lt;- return (0, 0)  first &lt;- landLeft 2 start  Nothing  second &lt;- landRight 2 first  final &lt;- landLeft 1 second  return final<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不论<code>return final</code>还是<code>start</code>,<code>first</code>, <code>second</code>都是<code>Nothing</code>...</p><p>当我们在 <code>do</code> 表示法写了一行运算，但没有用到<code>&lt;-</code> 来绑定值的话，其实实际上就是用了<code>&gt;&gt;</code>, 相当于设置了状态, 不是很理解</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">routine :: [Int]routine &#x3D; do  start &lt;- return 1  []  return (start + 1)-- []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">routine :: Maybe [Int]routine &#x3D; do  start &lt;- return [1]  Just [1,2,3,4,5,6]  return (999:start)-- Just [999,1]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">main &#x3D; do  start &lt;- getLine  first &lt;- getLine  return &quot;opps&quot;  second &lt;- getLine  print start-- 1\n2\n3\n-- 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="list的monad定义"><code>List</code>的<code>Monad</code>定义</h4><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance Monad [] where    return x &#x3D; [x]    xs &gt;&gt;&#x3D; f &#x3D; concat (map f xs)    fail _ &#x3D; []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>与<code>Applicative</code>有些区别, 例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; (*) &lt;$&gt; [1,2,3] &lt;*&gt; [10,100,1000]-- [10,100,1000,20,200,2000,30,300,3000]ghci&gt; [3,4,5] &gt;&gt;&#x3D; \x -&gt; [x,-x]-- [3,-3,4,-4,5,-5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="随机数">随机数</h4><p>在命令式编程中可以借助<code>random</code>类似的函数轻松实现随机数.然而Haskell中函数都是纯函数,这意味着每次<code>random</code>的结果都应该是定值😰, 为了解决这一问题,Haskell将<code>random</code>定义为了一个特别的类型</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">random :: (RandomGen g, Random a) &#x3D;&gt; g -&gt; (a, g)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们需要传入一个<code>RandomGen</code>然后获得一个随机数<code>a</code>与一个<code>RandomGen</code>.<code>RandomGen</code>像是一个生成器🧫,通过同一个生成器调用<code>random</code>可以得到相同的结果.每次<code>random</code>后我们可以获得一个全新的<code>RandomGen</code>用于下次<code>random</code>.可以利用<code>mkStdGen</code>生成一个<code>RandomGen</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">mkStdGen :: Int -&gt; StdGenghci&gt; random (mkStdGen 100)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>于是我们可以生成一些不同类型的<code>random</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; random (mkStdGen 949488) :: (Float, StdGen)-- (0.8938442,1597344447 1655838864)ghci&gt; random (mkStdGen 949488) :: (Bool, StdGen)-- (False,1485632275 40692)ghci&gt; random (mkStdGen 949488) :: (Integer, StdGen)-- (1691547873,1597344447 1655838864)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>🪙生成三次投硬币的结果</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">threeCoins :: StdGen -&gt; (Bool, Bool, Bool)threeCoins gen &#x3D;    let (firstCoin, newGen) &#x3D; random gen    (secondCoin, newGen&#39;) &#x3D; random newGen    (thirdCoin, newGen&#39;&#39;) &#x3D; random newGen&#39;    in  (firstCoin, secondCoin, thirdCoin)ghci&gt; threeCoins (mkStdGen 21)-- (True,True,True)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Haskell还提供<code>randomR</code>定义随机数上下界</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; randomR (1,6) (mkStdGen 359353)-- (6,1494289578 40692)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也提供了生成无限个有限随机数的<code>randomRs</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; take 10 $ randomRs (&#39;a&#39;,&#39;z&#39;) (mkStdGen 3) :: [Char]-- &quot;ndkxbvmomg&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="bytestring">ByteString</h4><p>在读取大文件的时候<code>[Char]</code>的效率往往很低,可以使用ByteString, 其每个元素都是一个<code>Byte</code>.存在两个<code>ByteString</code></p><ul><li><code>strict</code>型: 位于<code>Data.ByteString</code>, 非惰性,无<code>Thunk</code>, 保证了不会出现"over head"</li><li><code>Lazy</code>型: 位于<code>Data.ByteString.Lazy</code>,保存在64K的chunks中(这似的其大概率可以被装入L2 Cache)</li></ul><p>其定义了方法</p><ul><li><p><code>pack :: [Word8] -&gt; ByteString</code></p><p>接受一个<code>Word8</code>数组, 返回<code>ByteString</code>,其中<code>Word8</code>就是<code>0-255</code>的<code>Int</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import qualified Data.ByteString.Lazy as Bimport qualified Data.ByteString as Sghci&gt; B.pack [99,97,110]-- Chunk &quot;can&quot; Emptyghci&gt; B.pack [98..120]-- Chunk &quot;bcdefghijklmnopqrstuvwx&quot; Empty<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>unpack</code>与<code>pack</code>相反,把一个<code>bytestring</code>变成一个<code>byte list</code></p></li><li><p><code>fromChunks</code>接受一串<code>strict</code>的<code>bytestrings</code>并把他变成一串<code>lazy bytestring</code></p></li><li><p><code>toChunks</code>接受一个<code>lazy bytestrings</code>并将他变成一串<code>strict bytestrings</code></p></li><li><p><code>ByteString</code>也支持<code>:</code>,其中<code>B.empty</code>相当于<code>[]</code></p></li></ul><h4 id="write-monad"><code>Write Monad</code></h4><p>✍️我们希望维护一个状态, 并在每次apply函数的时候为其加上日志,此时就可以使用<code>Write Monad</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance (Monoid w) &#x3D;&gt; Monad (Writer w) where    return x &#x3D; Writer (x, mempty)    (Writer (x,v)) &gt;&gt;&#x3D; f &#x3D; let (Writer (y, v&#39;)) &#x3D; f x in Writer (y, v &#96;mappend&#96; v&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import Control.Monad.Writernewtype Writer w a &#x3D; Writer &#123; runWriter :: (a, w) &#125;logNumber :: Int -&gt; Writer [String] IntlogNumber x &#x3D; Writer (x, [&quot;Got number: &quot; ++ show x])multWithLog :: Writer [String] IntmultWithLog &#x3D; do    a &lt;- logNumber 3    b &lt;- logNumber 5    return (a*b)-- ghci&gt; runWriter multWithLog-- (15,[&quot;Got number: 3&quot;,&quot;Got number: 5&quot;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>可以使用difference-lists提高写log的效率</strong></p><p>简单理解我们之前使用的List在执行<code>[1,2]++[3,4]</code>时是同步的,但是<code>DiffList</code>在执行的时候是惰性的,这保证了可以快速<code>++</code>, 只有在读取时才执行, 实现也很简单</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance Monoid (DiffList a) where    mempty &#x3D; DiffList (\xs -&gt; [] ++ xs)    (DiffList f) &#96;mappend&#96; (DiffList g) &#x3D; DiffList (\xs -&gt; f (g xs))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="reader-monad"><code>Reader Monad</code></h4><p><code>Reader Monad</code>是将一个柯里化函数作为<code>Monad</code>对象</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance Monad ((-&gt;) r) where    return x &#x3D; \_ -&gt; x    h &gt;&gt;&#x3D; f &#x3D; \w -&gt; f (h w) w<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="state-monad"><code>State Monad</code></h4><p><code>State Monad</code>用于实现状态转换,他保存了计算结果与下一次执行的state,例如之前随机数就用到了<code>State Monad</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance Monad (State s) where    return x &#x3D; State $ \s -&gt; (x,s)    (State h) &gt;&gt;&#x3D; f &#x3D; State $ \s -&gt; let (a, newState) &#x3D; h s                                        (State g) &#x3D; f a                                    in  g newState<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="error-monad"><code>Error Monad</code></h4><p>就是<code>Either</code>的<code>Monad</code>实现.相比<code>Maybe</code>他可以记录错误信息</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">instance (Error e) &#x3D;&gt; Monad (Either e) where    return x &#x3D; Right x    Right x &gt;&gt;&#x3D; f &#x3D; f x    Left err &gt;&gt;&#x3D; f &#x3D; Left err    fail msg &#x3D; Left (strMsg msg)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="其他monad方法">其他<code>Monad</code>方法</h4><ul><li><p><code>leftM</code>相当于<code>functor</code>的<code>fmap</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">liftM :: (Monad m) &#x3D;&gt; (a -&gt; b) -&gt; m a -&gt; m b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>join</code>相当于去掉一层包裹</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">join :: (Monad m) &#x3D;&gt; m (m a) -&gt; m a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; join (Just (Just 9))Just 9ghci&gt; join (Just Nothing)Nothingghci&gt; join NothingNothing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>filterM</code>将一个<code>List</code>转换为合法的<code>Monad List</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">filterM :: (Monad m) &#x3D;&gt; (a -&gt; m Bool) -&gt; [a] -&gt; m [a]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>foldM</code>折叠一个<code>List</code>并转为<code>Monad</code></p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">foldM :: (Monad m) &#x3D;&gt; (a -&gt; b -&gt; m a) -&gt; a -&gt; [b] -&gt; m a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; foldl (\acc x -&gt; acc + x) 0 [2,8,3,1]-- 14<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="用zippers保存状态">用Zippers保存状态</h3><p>Haskell的函数是纯函数式, 这意味着对函数传入相同的变量,函数会有相同的输出,但是有些时候我们也需要记录执行的状态📹(例如需要维护一个树,然而当我锁定并修改子树后Haskell只能返回一个新子树, 不能修改原树),这时可以定义一个<code>Zippers</code>数据结构保存状态🤐</p><h4 id="维护二叉搜索树">维护二叉搜索树</h4><p>之前定义过二叉搜索树</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Tree a &#x3D; Empty | Node a (Tree a) (Tree a) deriving (Show)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检索树上元素时候需要向左/向右/向上走,而纯函数的特性让我们只能定义这样的函数</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">goLeft :: Tree a -&gt; Tree a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们的函数只能返回一个树的子树, 这导致实现向上走是非常困难的🤦‍♂️. 同时,如果专门存储原树, 我们将无法获取原树</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">tree &#x3D; geLeft (Node 1 (Empty) (Empty))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时<code>tree</code>是<code>Empty</code>, 但是原树是什么我们不知道.我们需要将原树作为状态存储起来, 对于一棵树</p><pre class="mermaid">graph TB Root(Root_cur) --> L Root --> R</pre><p>当我们要将位置从Root转换到L时,我们可以像之前Log一样把<code>Root</code>与<code>R</code>存储起来,我们定义一个数据结构<code>Crumb</code>🥯,<code>LeftCrumb</code>表示其走向了L,此时存储了<code>LeftCrumb Root (Tree R)</code>, 反之类似</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Crumb a &#x3D; LeftCrumb a (Tree a) | RightCrumb a (Tree a) deriving (Show)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以将状态们存储为<code>[Crumb]</code>,用<code>Tuple</code>存储当前位置与状态, 最后得到了</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">data Crumb a &#x3D; LeftCrumb a (Tree a) | RightCrumb a (Tree a) deriving (Show)type Breadcrumbs a &#x3D; [Crumb a]goLeft :: (Tree a, Breadcrumbs a) -&gt; (Tree a, Breadcrumbs a)goLeft (Node x l r, bs) &#x3D; (l, LeftCrumb x r:bs)    -- 当前为左子树, root与右子树压入BreadcrumbsgoRight :: (Tree a, Breadcrumbs a) -&gt; (Tree a, Breadcrumbs a)goRight (Node x l r, bs) &#x3D; (r, RightCrumb x l:bs)goUp :: (Tree a, Breadcrumbs a) -&gt; (Tree a, Breadcrumbs a)goUp (t, LeftCrumb x r:bs) &#x3D; (Node x t r, bs)    -- top的root做当前位置, 展开右子树goUp (t, RightCrumb x l:bs) &#x3D; (Node x l t, bs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还, 可以为这样的存储模式起个别名</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">type Zipper a &#x3D; (Tree a, Breadcrumbs a)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后实现一下节点的维护操作</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">modify :: (a -&gt; a) -&gt; Zipper a -&gt; Zipper amodify f (Node x l r, bs) &#x3D; (Node (f x) l r, bs)modify f (Empty, bs) &#x3D; (Empty, bs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>操作</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">x -: f &#x3D; f xfreeTree &#x3D; ...-- 向左, 向右, 替换为PnewFocus &#x3D; (freeTree,[]) -: goLeft -: goRight -: modify (\_ -&gt; &#39;P&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="维护list">维护<code>List</code></h4><p>可以将一个List分为<code>cur</code>及其右边的<code>List</code>与<code>cur</code>左边的<code>List</code>的逆序</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">goForward :: ListZipper a -&gt; ListZipper agoForward (x:xs, bs) &#x3D; (xs, x:bs)goBack :: ListZipper a -&gt; ListZipper agoBack (xs, b:bs) &#x3D; (b:xs, bs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">ghci&gt; let xs &#x3D; [1,2,3,4]ghci&gt; goForward (xs,[])-- ([2,3,4],[1])ghci&gt; goForward ([2,3,4],[1])-- ([3,4],[2,1])ghci&gt; goForward ([3,4],[2,1])-- ([4],[3,2,1])ghci&gt; goBack ([4],[3,2,1])-- ([3,4],[2,1])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="维护一个文件系统">维护一个文件系统</h4><p>📁一个文件系统就是一个多叉树, 树上有两种类型(文件与文件夹),他们都有文件(夹)名, 文件夹中应该还包含一颗子树,文件中应该包含文件中的数据</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">import Data.List (break)type Name &#x3D; Stringtype Data &#x3D; String-- 一个文件&#x2F;文件夹data FSItem &#x3D; File Name Data | Folder Name [FSItem] deriving (Show)-- 上层文件夹名 文件夹中该文件前面的文件 文件夹中该文件之后的文件data FSCrumb &#x3D; FSCrumb Name [FSItem] [FSItem] deriving (Show)type FSZipper &#x3D; (FSItem, [FSCrumb])-- 向上走就是将他前后的文件和他合在一起fsUp :: FSZipper -&gt; FSZipperfsUp (item, FSCrumb name ls rs:bs) &#x3D; (Folder name (ls ++ [item] ++ rs), bs)-- 进入文件夹fsTo :: Name -&gt; FSZipper -&gt; FSZipperfsTo name (Folder folderName items, bs) &#x3D;  let (ls, item:rs) &#x3D; break (nameIs name) items  in  (item, FSCrumb folderName ls rs:bs)-- 判断文件(夹)名nameIs :: Name -&gt; FSItem -&gt; BoolnameIs name (Folder folderName _) &#x3D; name &#x3D;&#x3D; folderNamenameIs name (File fileName _) &#x3D; name &#x3D;&#x3D; fileName-- 重命名文件fsRename :: Name -&gt; FSZipper -&gt; FSZipperfsRename newName (Folder name items, bs) &#x3D; (Folder newName items, bs)fsRename newName (File name dat, bs) &#x3D; (File newName dat, bs)-- 新建文件fsNewFile :: FSItem -&gt; FSZipper -&gt; FSZipperfsNewFile item (Folder folderName items, bs) &#x3D;    (Folder folderName (item:items), bs)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">-- myDisk &#x3D; ...ghci&gt; let newFocus &#x3D; (myDisk,[]) -: fsTo &quot;pics&quot; -: fsTo &quot;skull_man(scary).bmp&quot;ghci&gt; fst newFocus        -- 显示FSItem-- File &quot;skull_man(scary).bmp&quot; &quot;Yikes!&quot;ghci&gt; let newFocus2 &#x3D; (myDisk,[]) -: fsTo &quot;pics&quot; -: fsRename &quot;cspi&quot; -: fsUp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>🧗<strong>最后, 注意考虑边界, 为我们的函数设置兜底条件,<code>Maybe</code>可以用于表示给出的动作是否合法</strong>, 例如:</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell">goUp :: Zipper a -&gt; Maybe (Zipper a)goUp (t, LeftCrumb x r:bs) &#x3D; Just (Node x t r, bs)goUp (t, RightCrumb x l:bs) &#x3D; Just (Node x l t, bs)goUp (_, []) &#x3D; Nothing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr /><p>参考资料:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9sZWFybnlvdWFoYXNrZWxsLm1ubzIub3JnL3poLWNu">Haskell趣学指南<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dpbnRlcmxhbmQxOTg5L21hZ2ljLWhhc2tlbGwv">魔力Haskell<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzQ1MDc3MzEzMS9hbnN3ZXIvMTgwNzMyMTExMA==">知乎 -为什么国外大学计算机系本科生培养如此强调函数式编程?<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">转变思维🤔. 从思考How(怎么编写指令)到思考What(我们要解决的问题是什么). 最初我以为函数式编程就是思考如何用函数(数学)的方式描述问题. 但逐渐发现函数式编程的重点是如何操作函数去描述函数. 总之, 他值得一学!😎</summary>
    
    
    
    <category term="瞎折腾" scheme="https://blog.liukairui.me/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    <category term="函数式编程" scheme="https://blog.liukairui.me/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="瞎折腾" scheme="https://blog.liukairui.me/tags/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    <category term="函数式编程" scheme="https://blog.liukairui.me/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Haskell" scheme="https://blog.liukairui.me/tags/Haskell/"/>
    
  </entry>
  
</feed>
